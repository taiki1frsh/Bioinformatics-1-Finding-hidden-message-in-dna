{"config":{"output_file":null,"full_docs":false,"pub_only":true,"reachable_only":true,"distro_crate":false,"signatures":false,"borrow_data":false},"version":"0.19.1","compilation":{"directory":"/Users/shelwitz/.cargo/registry/src/github.com-1ecc6299db9ec823/triple_accel-0.4.0","program":"/Users/shelwitz/.rustup/toolchains/stable-x86_64-apple-darwin/bin/rls","arguments":["--crate-name","triple_accel","--edition=2018","/Users/shelwitz/.cargo/registry/src/github.com-1ecc6299db9ec823/triple_accel-0.4.0/src/lib.rs","--json=diagnostic-rendered-ansi","--crate-type","lib","--emit=dep-info,metadata","-C","embed-bitcode=no","-C","split-debuginfo=unpacked","-C","debuginfo=2","--cfg","feature=\"default\"","--cfg","feature=\"jewel-16bit\"","--cfg","feature=\"jewel-32bit\"","--cfg","feature=\"jewel-8bit\"","--cfg","feature=\"jewel-avx\"","--cfg","feature=\"jewel-sse\"","-C","metadata=6e791ace7c6830ae","-C","extra-filename=-6e791ace7c6830ae","--out-dir","/Users/shelwitz/Bioinfo/Coursera_Bioinfo/Fidding_Hidden_MessageInDNA/practice/target/rls/debug/deps","-L","dependency=/Users/shelwitz/Bioinfo/Coursera_Bioinfo/Fidding_Hidden_MessageInDNA/practice/target/rls/debug/deps","--cap-lints","allow","--error-format=json","--sysroot","/Users/shelwitz/.rustup/toolchains/stable-x86_64-apple-darwin"],"output":"/Users/shelwitz/Bioinfo/Coursera_Bioinfo/Fidding_Hidden_MessageInDNA/practice/target/rls/debug/deps/libtriple_accel-6e791ace7c6830ae.rmeta"},"prelude":{"crate_id":{"name":"triple_accel","disambiguator":[1780377037907815315,13485657727171484963]},"crate_root":"/Users/shelwitz/.cargo/registry/src/github.com-1ecc6299db9ec823/triple_accel-0.4.0/src","external_crates":[{"file_name":"/Users/shelwitz/.cargo/registry/src/github.com-1ecc6299db9ec823/triple_accel-0.4.0/src/lib.rs","num":1,"id":{"name":"std","disambiguator":[7439535968655576646,17420488833649705410]}},{"file_name":"/Users/shelwitz/.cargo/registry/src/github.com-1ecc6299db9ec823/triple_accel-0.4.0/src/lib.rs","num":2,"id":{"name":"core","disambiguator":[1949116827220114676,2065912148165510692]}},{"file_name":"/Users/shelwitz/.cargo/registry/src/github.com-1ecc6299db9ec823/triple_accel-0.4.0/src/lib.rs","num":3,"id":{"name":"compiler_builtins","disambiguator":[6424123809251651324,10791243255933316672]}},{"file_name":"/Users/shelwitz/.cargo/registry/src/github.com-1ecc6299db9ec823/triple_accel-0.4.0/src/lib.rs","num":4,"id":{"name":"rustc_std_workspace_core","disambiguator":[11089070161906179638,2253832597208660558]}},{"file_name":"/Users/shelwitz/.cargo/registry/src/github.com-1ecc6299db9ec823/triple_accel-0.4.0/src/lib.rs","num":5,"id":{"name":"alloc","disambiguator":[3666879193032761931,4629784602926728112]}},{"file_name":"/Users/shelwitz/.cargo/registry/src/github.com-1ecc6299db9ec823/triple_accel-0.4.0/src/lib.rs","num":6,"id":{"name":"libc","disambiguator":[17557414160303111626,7572947572632644954]}},{"file_name":"/Users/shelwitz/.cargo/registry/src/github.com-1ecc6299db9ec823/triple_accel-0.4.0/src/lib.rs","num":7,"id":{"name":"unwind","disambiguator":[915848953387719454,11341216537588130533]}},{"file_name":"/Users/shelwitz/.cargo/registry/src/github.com-1ecc6299db9ec823/triple_accel-0.4.0/src/lib.rs","num":8,"id":{"name":"cfg_if","disambiguator":[4285064400235759547,17176111531075018758]}},{"file_name":"/Users/shelwitz/.cargo/registry/src/github.com-1ecc6299db9ec823/triple_accel-0.4.0/src/lib.rs","num":9,"id":{"name":"hashbrown","disambiguator":[6997063163517280748,14486342634155193831]}},{"file_name":"/Users/shelwitz/.cargo/registry/src/github.com-1ecc6299db9ec823/triple_accel-0.4.0/src/lib.rs","num":10,"id":{"name":"rustc_std_workspace_alloc","disambiguator":[2053070849310045891,9457326657766539472]}},{"file_name":"/Users/shelwitz/.cargo/registry/src/github.com-1ecc6299db9ec823/triple_accel-0.4.0/src/lib.rs","num":11,"id":{"name":"rustc_demangle","disambiguator":[16492367081693084488,12081229032515817188]}},{"file_name":"/Users/shelwitz/.cargo/registry/src/github.com-1ecc6299db9ec823/triple_accel-0.4.0/src/lib.rs","num":12,"id":{"name":"std_detect","disambiguator":[14000704685499991975,15439018228330051001]}},{"file_name":"/Users/shelwitz/.cargo/registry/src/github.com-1ecc6299db9ec823/triple_accel-0.4.0/src/lib.rs","num":13,"id":{"name":"addr2line","disambiguator":[16882152814081891816,2081400005890767566]}},{"file_name":"/Users/shelwitz/.cargo/registry/src/github.com-1ecc6299db9ec823/triple_accel-0.4.0/src/lib.rs","num":14,"id":{"name":"gimli","disambiguator":[17412809486977561704,10774188040798205111]}},{"file_name":"/Users/shelwitz/.cargo/registry/src/github.com-1ecc6299db9ec823/triple_accel-0.4.0/src/lib.rs","num":15,"id":{"name":"object","disambiguator":[10299009701328497764,8719717191227013711]}},{"file_name":"/Users/shelwitz/.cargo/registry/src/github.com-1ecc6299db9ec823/triple_accel-0.4.0/src/lib.rs","num":16,"id":{"name":"panic_unwind","disambiguator":[13564088873543153286,4566579444635585591]}}],"span":{"file_name":"/Users/shelwitz/.cargo/registry/src/github.com-1ecc6299db9ec823/triple_accel-0.4.0/src/lib.rs","byte_start":0,"byte_end":8984,"line_start":1,"line_end":243,"column_start":1,"column_end":2}},"imports":[{"kind":"Use","ref_id":{"krate":0,"index":222},"span":{"file_name":"/Users/shelwitz/.cargo/registry/src/github.com-1ecc6299db9ec823/triple_accel-0.4.0/src/lib.rs","byte_start":5709,"byte_end":5716,"line_start":126,"line_end":126,"column_start":19,"column_end":26},"alias_span":null,"name":"hamming","value":"","parent":{"krate":0,"index":0}},{"kind":"Use","ref_id":{"krate":0,"index":228},"span":{"file_name":"/Users/shelwitz/.cargo/registry/src/github.com-1ecc6299db9ec823/triple_accel-0.4.0/src/lib.rs","byte_start":5718,"byte_end":5732,"line_start":126,"line_end":126,"column_start":28,"column_end":42},"alias_span":null,"name":"hamming_search","value":"","parent":{"krate":0,"index":0}},{"kind":"Use","ref_id":{"krate":0,"index":254},"span":{"file_name":"/Users/shelwitz/.cargo/registry/src/github.com-1ecc6299db9ec823/triple_accel-0.4.0/src/lib.rs","byte_start":5757,"byte_end":5768,"line_start":127,"line_end":127,"column_start":23,"column_end":34},"alias_span":null,"name":"levenshtein","value":"","parent":{"krate":0,"index":0}},{"kind":"Use","ref_id":{"krate":0,"index":255},"span":{"file_name":"/Users/shelwitz/.cargo/registry/src/github.com-1ecc6299db9ec823/triple_accel-0.4.0/src/lib.rs","byte_start":5770,"byte_end":5778,"line_start":127,"line_end":127,"column_start":36,"column_end":44},"alias_span":null,"name":"rdamerau","value":"","parent":{"krate":0,"index":0}},{"kind":"Use","ref_id":{"krate":0,"index":256},"span":{"file_name":"/Users/shelwitz/.cargo/registry/src/github.com-1ecc6299db9ec823/triple_accel-0.4.0/src/lib.rs","byte_start":5780,"byte_end":5795,"line_start":127,"line_end":127,"column_start":46,"column_end":61},"alias_span":null,"name":"levenshtein_exp","value":"","parent":{"krate":0,"index":0}},{"kind":"Use","ref_id":{"krate":0,"index":257},"span":{"file_name":"/Users/shelwitz/.cargo/registry/src/github.com-1ecc6299db9ec823/triple_accel-0.4.0/src/lib.rs","byte_start":5797,"byte_end":5809,"line_start":127,"line_end":127,"column_start":63,"column_end":75},"alias_span":null,"name":"rdamerau_exp","value":"","parent":{"krate":0,"index":0}},{"kind":"Use","ref_id":{"krate":0,"index":272},"span":{"file_name":"/Users/shelwitz/.cargo/registry/src/github.com-1ecc6299db9ec823/triple_accel-0.4.0/src/lib.rs","byte_start":5811,"byte_end":5829,"line_start":127,"line_end":127,"column_start":77,"column_end":95},"alias_span":null,"name":"levenshtein_search","value":"","parent":{"krate":0,"index":0}}],"defs":[{"kind":"Mod","id":{"krate":0,"index":0},"span":{"file_name":"/Users/shelwitz/.cargo/registry/src/github.com-1ecc6299db9ec823/triple_accel-0.4.0/src/lib.rs","byte_start":0,"byte_end":8984,"line_start":1,"line_end":243,"column_start":1,"column_end":2},"name":"","qualname":"::","value":"/Users/shelwitz/.cargo/registry/src/github.com-1ecc6299db9ec823/triple_accel-0.4.0/src/lib.rs","parent":null,"children":[{"krate":0,"index":1},{"krate":0,"index":2},{"krate":0,"index":3},{"krate":0,"index":4},{"krate":0,"index":205},{"krate":0,"index":230},{"krate":0,"index":274},{"krate":0,"index":275},{"krate":0,"index":278},{"krate":0,"index":281},{"krate":0,"index":282},{"krate":0,"index":285},{"krate":0,"index":288},{"krate":0,"index":291},{"krate":0,"index":294},{"krate":0,"index":906},{"krate":0,"index":910},{"krate":0,"index":912},{"krate":0,"index":913},{"krate":0,"index":916},{"krate":0,"index":927},{"krate":0,"index":929},{"krate":0,"index":930},{"krate":0,"index":932},{"krate":0,"index":935},{"krate":0,"index":937},{"krate":0,"index":938},{"krate":0,"index":941},{"krate":0,"index":946},{"krate":0,"index":948},{"krate":0,"index":949},{"krate":0,"index":951},{"krate":0,"index":952},{"krate":0,"index":297},{"krate":0,"index":298},{"krate":0,"index":299}],"decl_id":null,"docs":" # triple_accel","sig":null,"attributes":[{"value":"/ # triple_accel","span":{"file_name":"/Users/shelwitz/.cargo/registry/src/github.com-1ecc6299db9ec823/triple_accel-0.4.0/src/lib.rs","byte_start":0,"byte_end":18,"line_start":1,"line_end":1,"column_start":1,"column_end":19}},{"value":"/","span":{"file_name":"/Users/shelwitz/.cargo/registry/src/github.com-1ecc6299db9ec823/triple_accel-0.4.0/src/lib.rs","byte_start":19,"byte_end":22,"line_start":2,"line_end":2,"column_start":1,"column_end":4}},{"value":"/ Rust edit distance routines accelerated using SIMD. Supports fast Hamming, Levenshtein,","span":{"file_name":"/Users/shelwitz/.cargo/registry/src/github.com-1ecc6299db9ec823/triple_accel-0.4.0/src/lib.rs","byte_start":23,"byte_end":114,"line_start":3,"line_end":3,"column_start":1,"column_end":92}},{"value":"/ restricted Damerau-Levenshtein, etc. distance calculations and string search.","span":{"file_name":"/Users/shelwitz/.cargo/registry/src/github.com-1ecc6299db9ec823/triple_accel-0.4.0/src/lib.rs","byte_start":115,"byte_end":196,"line_start":4,"line_end":4,"column_start":1,"column_end":82}},{"value":"/","span":{"file_name":"/Users/shelwitz/.cargo/registry/src/github.com-1ecc6299db9ec823/triple_accel-0.4.0/src/lib.rs","byte_start":197,"byte_end":200,"line_start":5,"line_end":5,"column_start":1,"column_end":4}},{"value":"/ Although vectorized SIMD code allows for up to 20-30x speedups over their scalar counterparts,","span":{"file_name":"/Users/shelwitz/.cargo/registry/src/github.com-1ecc6299db9ec823/triple_accel-0.4.0/src/lib.rs","byte_start":201,"byte_end":299,"line_start":6,"line_end":6,"column_start":1,"column_end":99}},{"value":"/ the difficulty of handling platform-dependent SIMD code makes SIMD routines less attractive.","span":{"file_name":"/Users/shelwitz/.cargo/registry/src/github.com-1ecc6299db9ec823/triple_accel-0.4.0/src/lib.rs","byte_start":300,"byte_end":396,"line_start":7,"line_end":7,"column_start":1,"column_end":97}},{"value":"/ The goal of this library is to provide an easy-to-use abstraction over SIMD edit distance routines","span":{"file_name":"/Users/shelwitz/.cargo/registry/src/github.com-1ecc6299db9ec823/triple_accel-0.4.0/src/lib.rs","byte_start":397,"byte_end":499,"line_start":8,"line_end":8,"column_start":1,"column_end":103}},{"value":"/ that fall back to scalar routines if the target CPU architecture is not supported.","span":{"file_name":"/Users/shelwitz/.cargo/registry/src/github.com-1ecc6299db9ec823/triple_accel-0.4.0/src/lib.rs","byte_start":500,"byte_end":586,"line_start":9,"line_end":9,"column_start":1,"column_end":87}},{"value":"/ Additionally, all limitations and tradeoffs of the edit distance routines should be provided upfront","span":{"file_name":"/Users/shelwitz/.cargo/registry/src/github.com-1ecc6299db9ec823/triple_accel-0.4.0/src/lib.rs","byte_start":587,"byte_end":691,"line_start":10,"line_end":10,"column_start":1,"column_end":105}},{"value":"/ so the user knows exactly what to expect.","span":{"file_name":"/Users/shelwitz/.cargo/registry/src/github.com-1ecc6299db9ec823/triple_accel-0.4.0/src/lib.rs","byte_start":692,"byte_end":737,"line_start":11,"line_end":11,"column_start":1,"column_end":46}},{"value":"/ Finally, this library should lead to performance boosts on both short and longer strings, so it","span":{"file_name":"/Users/shelwitz/.cargo/registry/src/github.com-1ecc6299db9ec823/triple_accel-0.4.0/src/lib.rs","byte_start":738,"byte_end":837,"line_start":12,"line_end":12,"column_start":1,"column_end":100}},{"value":"/ can be used for a variety of tasks, from bioinformatics to natural language processing.","span":{"file_name":"/Users/shelwitz/.cargo/registry/src/github.com-1ecc6299db9ec823/triple_accel-0.4.0/src/lib.rs","byte_start":838,"byte_end":929,"line_start":13,"line_end":13,"column_start":1,"column_end":92}},{"value":"/ `triple_accel` is very lightweight: it only has dependencies on other crates for benchmarking.","span":{"file_name":"/Users/shelwitz/.cargo/registry/src/github.com-1ecc6299db9ec823/triple_accel-0.4.0/src/lib.rs","byte_start":930,"byte_end":1028,"line_start":14,"line_end":14,"column_start":1,"column_end":99}},{"value":"/ It can be built on machines without CPUs that have AVX2 or SSE4.1 support. It can also run on","span":{"file_name":"/Users/shelwitz/.cargo/registry/src/github.com-1ecc6299db9ec823/triple_accel-0.4.0/src/lib.rs","byte_start":1029,"byte_end":1126,"line_start":15,"line_end":15,"column_start":1,"column_end":98}},{"value":"/ machines without SIMD support by automatically using scalar alternatives.","span":{"file_name":"/Users/shelwitz/.cargo/registry/src/github.com-1ecc6299db9ec823/triple_accel-0.4.0/src/lib.rs","byte_start":1127,"byte_end":1204,"line_start":16,"line_end":16,"column_start":1,"column_end":78}},{"value":"/","span":{"file_name":"/Users/shelwitz/.cargo/registry/src/github.com-1ecc6299db9ec823/triple_accel-0.4.0/src/lib.rs","byte_start":1205,"byte_end":1208,"line_start":17,"line_end":17,"column_start":1,"column_end":4}},{"value":"/ ## Features","span":{"file_name":"/Users/shelwitz/.cargo/registry/src/github.com-1ecc6299db9ec823/triple_accel-0.4.0/src/lib.rs","byte_start":1209,"byte_end":1224,"line_start":18,"line_end":18,"column_start":1,"column_end":16}},{"value":"/","span":{"file_name":"/Users/shelwitz/.cargo/registry/src/github.com-1ecc6299db9ec823/triple_accel-0.4.0/src/lib.rs","byte_start":1225,"byte_end":1228,"line_start":19,"line_end":19,"column_start":1,"column_end":4}},{"value":"/ This library provides routines for both searching for some needle string in a haystack string","span":{"file_name":"/Users/shelwitz/.cargo/registry/src/github.com-1ecc6299db9ec823/triple_accel-0.4.0/src/lib.rs","byte_start":1229,"byte_end":1326,"line_start":20,"line_end":20,"column_start":1,"column_end":98}},{"value":"/ and calculating the edit distance between two strings. Hamming distance (mismatches only),","span":{"file_name":"/Users/shelwitz/.cargo/registry/src/github.com-1ecc6299db9ec823/triple_accel-0.4.0/src/lib.rs","byte_start":1327,"byte_end":1421,"line_start":21,"line_end":21,"column_start":1,"column_end":95}},{"value":"/ Levenshtein distance (mismatches + gaps), and restricted Damerau-Levenshtein distance","span":{"file_name":"/Users/shelwitz/.cargo/registry/src/github.com-1ecc6299db9ec823/triple_accel-0.4.0/src/lib.rs","byte_start":1422,"byte_end":1511,"line_start":22,"line_end":22,"column_start":1,"column_end":90}},{"value":"/ (transpositions + mismatches + gaps) are supported, along with arbitrary edit costs. This","span":{"file_name":"/Users/shelwitz/.cargo/registry/src/github.com-1ecc6299db9ec823/triple_accel-0.4.0/src/lib.rs","byte_start":1512,"byte_end":1605,"line_start":23,"line_end":23,"column_start":1,"column_end":94}},{"value":"/ library provides a simple interface, in addition to powerful lower-level control over the edit","span":{"file_name":"/Users/shelwitz/.cargo/registry/src/github.com-1ecc6299db9ec823/triple_accel-0.4.0/src/lib.rs","byte_start":1606,"byte_end":1704,"line_start":24,"line_end":24,"column_start":1,"column_end":99}},{"value":"/ distance calculations.","span":{"file_name":"/Users/shelwitz/.cargo/registry/src/github.com-1ecc6299db9ec823/triple_accel-0.4.0/src/lib.rs","byte_start":1705,"byte_end":1731,"line_start":25,"line_end":25,"column_start":1,"column_end":27}},{"value":"/","span":{"file_name":"/Users/shelwitz/.cargo/registry/src/github.com-1ecc6299db9ec823/triple_accel-0.4.0/src/lib.rs","byte_start":1732,"byte_end":1735,"line_start":26,"line_end":26,"column_start":1,"column_end":4}},{"value":"/ At runtime, the implementation for a certain algorithm is selected based on CPU support, going","span":{"file_name":"/Users/shelwitz/.cargo/registry/src/github.com-1ecc6299db9ec823/triple_accel-0.4.0/src/lib.rs","byte_start":1736,"byte_end":1834,"line_start":27,"line_end":27,"column_start":1,"column_end":99}},{"value":"/ down the list:","span":{"file_name":"/Users/shelwitz/.cargo/registry/src/github.com-1ecc6299db9ec823/triple_accel-0.4.0/src/lib.rs","byte_start":1835,"byte_end":1853,"line_start":28,"line_end":28,"column_start":1,"column_end":19}},{"value":"/","span":{"file_name":"/Users/shelwitz/.cargo/registry/src/github.com-1ecc6299db9ec823/triple_accel-0.4.0/src/lib.rs","byte_start":1854,"byte_end":1857,"line_start":29,"line_end":29,"column_start":1,"column_end":4}},{"value":"/ 1. Vectorized implementation with 256-bit AVX vectors, if AVX2 is supported.","span":{"file_name":"/Users/shelwitz/.cargo/registry/src/github.com-1ecc6299db9ec823/triple_accel-0.4.0/src/lib.rs","byte_start":1858,"byte_end":1938,"line_start":30,"line_end":30,"column_start":1,"column_end":81}},{"value":"/ 2. Vectorized implementation with 128-bit SSE vectors, if SSE4.1 is supported.","span":{"file_name":"/Users/shelwitz/.cargo/registry/src/github.com-1ecc6299db9ec823/triple_accel-0.4.0/src/lib.rs","byte_start":1939,"byte_end":2021,"line_start":31,"line_end":31,"column_start":1,"column_end":83}},{"value":"/ 3. Scalar implementation.","span":{"file_name":"/Users/shelwitz/.cargo/registry/src/github.com-1ecc6299db9ec823/triple_accel-0.4.0/src/lib.rs","byte_start":2022,"byte_end":2051,"line_start":32,"line_end":32,"column_start":1,"column_end":30}},{"value":"/","span":{"file_name":"/Users/shelwitz/.cargo/registry/src/github.com-1ecc6299db9ec823/triple_accel-0.4.0/src/lib.rs","byte_start":2052,"byte_end":2055,"line_start":33,"line_end":33,"column_start":1,"column_end":4}},{"value":"/ Currently, vectorized SIMD implementations are only available for x86 or x86-64 CPUs. However,","span":{"file_name":"/Users/shelwitz/.cargo/registry/src/github.com-1ecc6299db9ec823/triple_accel-0.4.0/src/lib.rs","byte_start":2056,"byte_end":2154,"line_start":34,"line_end":34,"column_start":1,"column_end":99}},{"value":"/ after compiling this library on a machine that supports those SIMD intrinsics, the library can","span":{"file_name":"/Users/shelwitz/.cargo/registry/src/github.com-1ecc6299db9ec823/triple_accel-0.4.0/src/lib.rs","byte_start":2155,"byte_end":2253,"line_start":35,"line_end":35,"column_start":1,"column_end":99}},{"value":"/ be used on other machines.","span":{"file_name":"/Users/shelwitz/.cargo/registry/src/github.com-1ecc6299db9ec823/triple_accel-0.4.0/src/lib.rs","byte_start":2254,"byte_end":2284,"line_start":36,"line_end":36,"column_start":1,"column_end":31}},{"value":"/ Additionally, the internal data structure for storing vectors and the bit width of the values","span":{"file_name":"/Users/shelwitz/.cargo/registry/src/github.com-1ecc6299db9ec823/triple_accel-0.4.0/src/lib.rs","byte_start":2285,"byte_end":2382,"line_start":37,"line_end":37,"column_start":1,"column_end":98}},{"value":"/ in the vectors are selected at runtime for maximum efficiency and accuracy, given the lengths","span":{"file_name":"/Users/shelwitz/.cargo/registry/src/github.com-1ecc6299db9ec823/triple_accel-0.4.0/src/lib.rs","byte_start":2383,"byte_end":2480,"line_start":38,"line_end":38,"column_start":1,"column_end":98}},{"value":"/ of the input strings.","span":{"file_name":"/Users/shelwitz/.cargo/registry/src/github.com-1ecc6299db9ec823/triple_accel-0.4.0/src/lib.rs","byte_start":2481,"byte_end":2506,"line_start":39,"line_end":39,"column_start":1,"column_end":26}},{"value":"/","span":{"file_name":"/Users/shelwitz/.cargo/registry/src/github.com-1ecc6299db9ec823/triple_accel-0.4.0/src/lib.rs","byte_start":2507,"byte_end":2510,"line_start":40,"line_end":40,"column_start":1,"column_end":4}},{"value":"/ ## Limitations","span":{"file_name":"/Users/shelwitz/.cargo/registry/src/github.com-1ecc6299db9ec823/triple_accel-0.4.0/src/lib.rs","byte_start":2511,"byte_end":2529,"line_start":41,"line_end":41,"column_start":1,"column_end":19}},{"value":"/","span":{"file_name":"/Users/shelwitz/.cargo/registry/src/github.com-1ecc6299db9ec823/triple_accel-0.4.0/src/lib.rs","byte_start":2530,"byte_end":2533,"line_start":42,"line_end":42,"column_start":1,"column_end":4}},{"value":"/ Due to the use of SIMD intrinsics, only binary strings that are represented with `u8` bytes","span":{"file_name":"/Users/shelwitz/.cargo/registry/src/github.com-1ecc6299db9ec823/triple_accel-0.4.0/src/lib.rs","byte_start":2534,"byte_end":2629,"line_start":43,"line_end":43,"column_start":1,"column_end":96}},{"value":"/ are supported. Unicode strings are not currently supported.","span":{"file_name":"/Users/shelwitz/.cargo/registry/src/github.com-1ecc6299db9ec823/triple_accel-0.4.0/src/lib.rs","byte_start":2630,"byte_end":2693,"line_start":44,"line_end":44,"column_start":1,"column_end":64}},{"value":"/","span":{"file_name":"/Users/shelwitz/.cargo/registry/src/github.com-1ecc6299db9ec823/triple_accel-0.4.0/src/lib.rs","byte_start":2694,"byte_end":2697,"line_start":45,"line_end":45,"column_start":1,"column_end":4}},{"value":"/ ## Notation","span":{"file_name":"/Users/shelwitz/.cargo/registry/src/github.com-1ecc6299db9ec823/triple_accel-0.4.0/src/lib.rs","byte_start":2698,"byte_end":2713,"line_start":46,"line_end":46,"column_start":1,"column_end":16}},{"value":"/","span":{"file_name":"/Users/shelwitz/.cargo/registry/src/github.com-1ecc6299db9ec823/triple_accel-0.4.0/src/lib.rs","byte_start":2714,"byte_end":2717,"line_start":47,"line_end":47,"column_start":1,"column_end":4}},{"value":"/ Quick notation notes that will often appear in the code/documentation:","span":{"file_name":"/Users/shelwitz/.cargo/registry/src/github.com-1ecc6299db9ec823/triple_accel-0.4.0/src/lib.rs","byte_start":2718,"byte_end":2792,"line_start":48,"line_end":48,"column_start":1,"column_end":75}},{"value":"/","span":{"file_name":"/Users/shelwitz/.cargo/registry/src/github.com-1ecc6299db9ec823/triple_accel-0.4.0/src/lib.rs","byte_start":2793,"byte_end":2796,"line_start":49,"line_end":49,"column_start":1,"column_end":4}},{"value":"/ * `k` - the number of edits that are allowed","span":{"file_name":"/Users/shelwitz/.cargo/registry/src/github.com-1ecc6299db9ec823/triple_accel-0.4.0/src/lib.rs","byte_start":2797,"byte_end":2845,"line_start":50,"line_end":50,"column_start":1,"column_end":49}},{"value":"/ * `a` and `b` - any two strings; this is usually used for edit distance routines","span":{"file_name":"/Users/shelwitz/.cargo/registry/src/github.com-1ecc6299db9ec823/triple_accel-0.4.0/src/lib.rs","byte_start":2846,"byte_end":2930,"line_start":51,"line_end":51,"column_start":1,"column_end":85}},{"value":"/ * `needle` and `haystack` - any two strings; we want to search for where needle appears in","span":{"file_name":"/Users/shelwitz/.cargo/registry/src/github.com-1ecc6299db9ec823/triple_accel-0.4.0/src/lib.rs","byte_start":2931,"byte_end":3025,"line_start":52,"line_end":52,"column_start":1,"column_end":95}},{"value":"/ haystack","span":{"file_name":"/Users/shelwitz/.cargo/registry/src/github.com-1ecc6299db9ec823/triple_accel-0.4.0/src/lib.rs","byte_start":3026,"byte_end":3038,"line_start":53,"line_end":53,"column_start":1,"column_end":13}},{"value":"/","span":{"file_name":"/Users/shelwitz/.cargo/registry/src/github.com-1ecc6299db9ec823/triple_accel-0.4.0/src/lib.rs","byte_start":3039,"byte_end":3042,"line_start":54,"line_end":54,"column_start":1,"column_end":4}},{"value":"/ ## Examples","span":{"file_name":"/Users/shelwitz/.cargo/registry/src/github.com-1ecc6299db9ec823/triple_accel-0.4.0/src/lib.rs","byte_start":3043,"byte_end":3058,"line_start":55,"line_end":55,"column_start":1,"column_end":16}},{"value":"/","span":{"file_name":"/Users/shelwitz/.cargo/registry/src/github.com-1ecc6299db9ec823/triple_accel-0.4.0/src/lib.rs","byte_start":3059,"byte_end":3062,"line_start":56,"line_end":56,"column_start":1,"column_end":4}},{"value":"/ Calculating the Hamming distance (number of mismatches) between two strings is extremely simple:","span":{"file_name":"/Users/shelwitz/.cargo/registry/src/github.com-1ecc6299db9ec823/triple_accel-0.4.0/src/lib.rs","byte_start":3063,"byte_end":3163,"line_start":57,"line_end":57,"column_start":1,"column_end":101}},{"value":"/ ```","span":{"file_name":"/Users/shelwitz/.cargo/registry/src/github.com-1ecc6299db9ec823/triple_accel-0.4.0/src/lib.rs","byte_start":3164,"byte_end":3171,"line_start":58,"line_end":58,"column_start":1,"column_end":8}},{"value":"/ use triple_accel::*;","span":{"file_name":"/Users/shelwitz/.cargo/registry/src/github.com-1ecc6299db9ec823/triple_accel-0.4.0/src/lib.rs","byte_start":3172,"byte_end":3196,"line_start":59,"line_end":59,"column_start":1,"column_end":25}},{"value":"/","span":{"file_name":"/Users/shelwitz/.cargo/registry/src/github.com-1ecc6299db9ec823/triple_accel-0.4.0/src/lib.rs","byte_start":3197,"byte_end":3200,"line_start":60,"line_end":60,"column_start":1,"column_end":4}},{"value":"/ let a = b\"abcd\";","span":{"file_name":"/Users/shelwitz/.cargo/registry/src/github.com-1ecc6299db9ec823/triple_accel-0.4.0/src/lib.rs","byte_start":3201,"byte_end":3221,"line_start":61,"line_end":61,"column_start":1,"column_end":21}},{"value":"/ let b = b\"abcc\";","span":{"file_name":"/Users/shelwitz/.cargo/registry/src/github.com-1ecc6299db9ec823/triple_accel-0.4.0/src/lib.rs","byte_start":3222,"byte_end":3242,"line_start":62,"line_end":62,"column_start":1,"column_end":21}},{"value":"/","span":{"file_name":"/Users/shelwitz/.cargo/registry/src/github.com-1ecc6299db9ec823/triple_accel-0.4.0/src/lib.rs","byte_start":3243,"byte_end":3246,"line_start":63,"line_end":63,"column_start":1,"column_end":4}},{"value":"/ let dist = hamming(a, b);","span":{"file_name":"/Users/shelwitz/.cargo/registry/src/github.com-1ecc6299db9ec823/triple_accel-0.4.0/src/lib.rs","byte_start":3247,"byte_end":3276,"line_start":64,"line_end":64,"column_start":1,"column_end":30}},{"value":"/ assert!(dist == 1);","span":{"file_name":"/Users/shelwitz/.cargo/registry/src/github.com-1ecc6299db9ec823/triple_accel-0.4.0/src/lib.rs","byte_start":3277,"byte_end":3300,"line_start":65,"line_end":65,"column_start":1,"column_end":24}},{"value":"/ ```","span":{"file_name":"/Users/shelwitz/.cargo/registry/src/github.com-1ecc6299db9ec823/triple_accel-0.4.0/src/lib.rs","byte_start":3301,"byte_end":3308,"line_start":66,"line_end":66,"column_start":1,"column_end":8}},{"value":"/ By default, SIMD will be used if possible. Similarly, we can easily calculate the Levenshtein","span":{"file_name":"/Users/shelwitz/.cargo/registry/src/github.com-1ecc6299db9ec823/triple_accel-0.4.0/src/lib.rs","byte_start":3309,"byte_end":3406,"line_start":67,"line_end":67,"column_start":1,"column_end":98}},{"value":"/ distance (character mismatches and gaps all have a cost of 1) between two strings with the","span":{"file_name":"/Users/shelwitz/.cargo/registry/src/github.com-1ecc6299db9ec823/triple_accel-0.4.0/src/lib.rs","byte_start":3407,"byte_end":3501,"line_start":68,"line_end":68,"column_start":1,"column_end":95}},{"value":"/ following code:","span":{"file_name":"/Users/shelwitz/.cargo/registry/src/github.com-1ecc6299db9ec823/triple_accel-0.4.0/src/lib.rs","byte_start":3502,"byte_end":3521,"line_start":69,"line_end":69,"column_start":1,"column_end":20}},{"value":"/ ```","span":{"file_name":"/Users/shelwitz/.cargo/registry/src/github.com-1ecc6299db9ec823/triple_accel-0.4.0/src/lib.rs","byte_start":3522,"byte_end":3529,"line_start":70,"line_end":70,"column_start":1,"column_end":8}},{"value":"/ use triple_accel::*;","span":{"file_name":"/Users/shelwitz/.cargo/registry/src/github.com-1ecc6299db9ec823/triple_accel-0.4.0/src/lib.rs","byte_start":3530,"byte_end":3554,"line_start":71,"line_end":71,"column_start":1,"column_end":25}},{"value":"/","span":{"file_name":"/Users/shelwitz/.cargo/registry/src/github.com-1ecc6299db9ec823/triple_accel-0.4.0/src/lib.rs","byte_start":3555,"byte_end":3558,"line_start":72,"line_end":72,"column_start":1,"column_end":4}},{"value":"/ let a = b\"abc\";","span":{"file_name":"/Users/shelwitz/.cargo/registry/src/github.com-1ecc6299db9ec823/triple_accel-0.4.0/src/lib.rs","byte_start":3559,"byte_end":3578,"line_start":73,"line_end":73,"column_start":1,"column_end":20}},{"value":"/ let b = b\"abcd\";","span":{"file_name":"/Users/shelwitz/.cargo/registry/src/github.com-1ecc6299db9ec823/triple_accel-0.4.0/src/lib.rs","byte_start":3579,"byte_end":3599,"line_start":74,"line_end":74,"column_start":1,"column_end":21}},{"value":"/","span":{"file_name":"/Users/shelwitz/.cargo/registry/src/github.com-1ecc6299db9ec823/triple_accel-0.4.0/src/lib.rs","byte_start":3600,"byte_end":3603,"line_start":75,"line_end":75,"column_start":1,"column_end":4}},{"value":"/ let dist = levenshtein_exp(a, b);","span":{"file_name":"/Users/shelwitz/.cargo/registry/src/github.com-1ecc6299db9ec823/triple_accel-0.4.0/src/lib.rs","byte_start":3604,"byte_end":3641,"line_start":76,"line_end":76,"column_start":1,"column_end":38}},{"value":"/ assert!(dist == 1);","span":{"file_name":"/Users/shelwitz/.cargo/registry/src/github.com-1ecc6299db9ec823/triple_accel-0.4.0/src/lib.rs","byte_start":3642,"byte_end":3665,"line_start":77,"line_end":77,"column_start":1,"column_end":24}},{"value":"/ ```","span":{"file_name":"/Users/shelwitz/.cargo/registry/src/github.com-1ecc6299db9ec823/triple_accel-0.4.0/src/lib.rs","byte_start":3666,"byte_end":3673,"line_start":78,"line_end":78,"column_start":1,"column_end":8}},{"value":"/ This uses exponential search to estimate the number of edits between `a` and `b`, which makes it","span":{"file_name":"/Users/shelwitz/.cargo/registry/src/github.com-1ecc6299db9ec823/triple_accel-0.4.0/src/lib.rs","byte_start":3674,"byte_end":3774,"line_start":79,"line_end":79,"column_start":1,"column_end":101}},{"value":"/ more efficient than the alternative `levenshtein` function when the number of edits between `a`","span":{"file_name":"/Users/shelwitz/.cargo/registry/src/github.com-1ecc6299db9ec823/triple_accel-0.4.0/src/lib.rs","byte_start":3775,"byte_end":3874,"line_start":80,"line_end":80,"column_start":1,"column_end":100}},{"value":"/ and `b` is low.","span":{"file_name":"/Users/shelwitz/.cargo/registry/src/github.com-1ecc6299db9ec823/triple_accel-0.4.0/src/lib.rs","byte_start":3875,"byte_end":3894,"line_start":81,"line_end":81,"column_start":1,"column_end":20}},{"value":"/","span":{"file_name":"/Users/shelwitz/.cargo/registry/src/github.com-1ecc6299db9ec823/triple_accel-0.4.0/src/lib.rs","byte_start":3895,"byte_end":3898,"line_start":82,"line_end":82,"column_start":1,"column_end":4}},{"value":"/ In addition to edit distance routines, `triple_accel` also provides search routines. These","span":{"file_name":"/Users/shelwitz/.cargo/registry/src/github.com-1ecc6299db9ec823/triple_accel-0.4.0/src/lib.rs","byte_start":3899,"byte_end":3993,"line_start":83,"line_end":83,"column_start":1,"column_end":95}},{"value":"/ routines return an iterator over matches that indicate where the `needle` string matches the `haystack`","span":{"file_name":"/Users/shelwitz/.cargo/registry/src/github.com-1ecc6299db9ec823/triple_accel-0.4.0/src/lib.rs","byte_start":3994,"byte_end":4101,"line_start":84,"line_end":84,"column_start":1,"column_end":108}},{"value":"/ string. `triple_accel` will attempt to maximize the length of matches that end at the same position and","span":{"file_name":"/Users/shelwitz/.cargo/registry/src/github.com-1ecc6299db9ec823/triple_accel-0.4.0/src/lib.rs","byte_start":4102,"byte_end":4209,"line_start":85,"line_end":85,"column_start":1,"column_end":108}},{"value":"/ remove shorter matches when some matches fully overlap.","span":{"file_name":"/Users/shelwitz/.cargo/registry/src/github.com-1ecc6299db9ec823/triple_accel-0.4.0/src/lib.rs","byte_start":4210,"byte_end":4269,"line_start":86,"line_end":86,"column_start":1,"column_end":60}},{"value":"/ ```","span":{"file_name":"/Users/shelwitz/.cargo/registry/src/github.com-1ecc6299db9ec823/triple_accel-0.4.0/src/lib.rs","byte_start":4270,"byte_end":4277,"line_start":87,"line_end":87,"column_start":1,"column_end":8}},{"value":"/ use triple_accel::*;","span":{"file_name":"/Users/shelwitz/.cargo/registry/src/github.com-1ecc6299db9ec823/triple_accel-0.4.0/src/lib.rs","byte_start":4278,"byte_end":4302,"line_start":88,"line_end":88,"column_start":1,"column_end":25}},{"value":"/","span":{"file_name":"/Users/shelwitz/.cargo/registry/src/github.com-1ecc6299db9ec823/triple_accel-0.4.0/src/lib.rs","byte_start":4303,"byte_end":4306,"line_start":89,"line_end":89,"column_start":1,"column_end":4}},{"value":"/ let needle = b\"helllo\";","span":{"file_name":"/Users/shelwitz/.cargo/registry/src/github.com-1ecc6299db9ec823/triple_accel-0.4.0/src/lib.rs","byte_start":4307,"byte_end":4334,"line_start":90,"line_end":90,"column_start":1,"column_end":28}},{"value":"/ let haystack = b\"hello world\";","span":{"file_name":"/Users/shelwitz/.cargo/registry/src/github.com-1ecc6299db9ec823/triple_accel-0.4.0/src/lib.rs","byte_start":4335,"byte_end":4369,"line_start":91,"line_end":91,"column_start":1,"column_end":35}},{"value":"/","span":{"file_name":"/Users/shelwitz/.cargo/registry/src/github.com-1ecc6299db9ec823/triple_accel-0.4.0/src/lib.rs","byte_start":4370,"byte_end":4373,"line_start":92,"line_end":92,"column_start":1,"column_end":4}},{"value":"/ let matches: Vec<Match> = levenshtein_search(needle, haystack).collect();","span":{"file_name":"/Users/shelwitz/.cargo/registry/src/github.com-1ecc6299db9ec823/triple_accel-0.4.0/src/lib.rs","byte_start":4374,"byte_end":4451,"line_start":93,"line_end":93,"column_start":1,"column_end":78}},{"value":"/ // note: start index is inclusive, end index is exclusive!","span":{"file_name":"/Users/shelwitz/.cargo/registry/src/github.com-1ecc6299db9ec823/triple_accel-0.4.0/src/lib.rs","byte_start":4452,"byte_end":4514,"line_start":94,"line_end":94,"column_start":1,"column_end":63}},{"value":"/ assert!(matches == vec![Match{start: 0, end: 5, k: 1}]);","span":{"file_name":"/Users/shelwitz/.cargo/registry/src/github.com-1ecc6299db9ec823/triple_accel-0.4.0/src/lib.rs","byte_start":4515,"byte_end":4575,"line_start":95,"line_end":95,"column_start":1,"column_end":61}},{"value":"/ ```","span":{"file_name":"/Users/shelwitz/.cargo/registry/src/github.com-1ecc6299db9ec823/triple_accel-0.4.0/src/lib.rs","byte_start":4576,"byte_end":4583,"line_start":96,"line_end":96,"column_start":1,"column_end":8}},{"value":"/ Sometimes, it is necessary to use the slightly lower level, but also more powerful routines","span":{"file_name":"/Users/shelwitz/.cargo/registry/src/github.com-1ecc6299db9ec823/triple_accel-0.4.0/src/lib.rs","byte_start":4584,"byte_end":4679,"line_start":97,"line_end":97,"column_start":1,"column_end":96}},{"value":"/ that `triple_accel` provides. For example, it is possible to allow transpositions (character swaps)","span":{"file_name":"/Users/shelwitz/.cargo/registry/src/github.com-1ecc6299db9ec823/triple_accel-0.4.0/src/lib.rs","byte_start":4680,"byte_end":4783,"line_start":98,"line_end":98,"column_start":1,"column_end":104}},{"value":"/ that have a cost of 1, in addition to mismatches and gaps:","span":{"file_name":"/Users/shelwitz/.cargo/registry/src/github.com-1ecc6299db9ec823/triple_accel-0.4.0/src/lib.rs","byte_start":4784,"byte_end":4846,"line_start":99,"line_end":99,"column_start":1,"column_end":63}},{"value":"/ ```","span":{"file_name":"/Users/shelwitz/.cargo/registry/src/github.com-1ecc6299db9ec823/triple_accel-0.4.0/src/lib.rs","byte_start":4847,"byte_end":4854,"line_start":100,"line_end":100,"column_start":1,"column_end":8}},{"value":"/ use triple_accel::levenshtein::*;","span":{"file_name":"/Users/shelwitz/.cargo/registry/src/github.com-1ecc6299db9ec823/triple_accel-0.4.0/src/lib.rs","byte_start":4855,"byte_end":4892,"line_start":101,"line_end":101,"column_start":1,"column_end":38}},{"value":"/","span":{"file_name":"/Users/shelwitz/.cargo/registry/src/github.com-1ecc6299db9ec823/triple_accel-0.4.0/src/lib.rs","byte_start":4893,"byte_end":4896,"line_start":102,"line_end":102,"column_start":1,"column_end":4}},{"value":"/ let a = b\"abcd\";","span":{"file_name":"/Users/shelwitz/.cargo/registry/src/github.com-1ecc6299db9ec823/triple_accel-0.4.0/src/lib.rs","byte_start":4897,"byte_end":4917,"line_start":103,"line_end":103,"column_start":1,"column_end":21}},{"value":"/ let b = b\"abdc\";","span":{"file_name":"/Users/shelwitz/.cargo/registry/src/github.com-1ecc6299db9ec823/triple_accel-0.4.0/src/lib.rs","byte_start":4918,"byte_end":4938,"line_start":104,"line_end":104,"column_start":1,"column_end":21}},{"value":"/ let k = 2; // upper bound on allowed cost","span":{"file_name":"/Users/shelwitz/.cargo/registry/src/github.com-1ecc6299db9ec823/triple_accel-0.4.0/src/lib.rs","byte_start":4939,"byte_end":4984,"line_start":105,"line_end":105,"column_start":1,"column_end":46}},{"value":"/ let trace_on = false; // return edit traceback?","span":{"file_name":"/Users/shelwitz/.cargo/registry/src/github.com-1ecc6299db9ec823/triple_accel-0.4.0/src/lib.rs","byte_start":4985,"byte_end":5036,"line_start":106,"line_end":106,"column_start":1,"column_end":52}},{"value":"/","span":{"file_name":"/Users/shelwitz/.cargo/registry/src/github.com-1ecc6299db9ec823/triple_accel-0.4.0/src/lib.rs","byte_start":5037,"byte_end":5040,"line_start":107,"line_end":107,"column_start":1,"column_end":4}},{"value":"/ let dist = levenshtein_simd_k_with_opts(a, b, k, trace_on, RDAMERAU_COSTS);","span":{"file_name":"/Users/shelwitz/.cargo/registry/src/github.com-1ecc6299db9ec823/triple_accel-0.4.0/src/lib.rs","byte_start":5041,"byte_end":5120,"line_start":108,"line_end":108,"column_start":1,"column_end":80}},{"value":"/ // note: dist may be None if a and b do not match within a cost of k","span":{"file_name":"/Users/shelwitz/.cargo/registry/src/github.com-1ecc6299db9ec823/triple_accel-0.4.0/src/lib.rs","byte_start":5121,"byte_end":5193,"line_start":109,"line_end":109,"column_start":1,"column_end":73}},{"value":"/ assert!(dist.unwrap().0 == 1);","span":{"file_name":"/Users/shelwitz/.cargo/registry/src/github.com-1ecc6299db9ec823/triple_accel-0.4.0/src/lib.rs","byte_start":5194,"byte_end":5228,"line_start":110,"line_end":110,"column_start":1,"column_end":35}},{"value":"/ ```","span":{"file_name":"/Users/shelwitz/.cargo/registry/src/github.com-1ecc6299db9ec823/triple_accel-0.4.0/src/lib.rs","byte_start":5229,"byte_end":5236,"line_start":111,"line_end":111,"column_start":1,"column_end":8}},{"value":"/ Don't let the name of the function fool you! `levenshtein_simd_k_with_opts` will still fall back to","span":{"file_name":"/Users/shelwitz/.cargo/registry/src/github.com-1ecc6299db9ec823/triple_accel-0.4.0/src/lib.rs","byte_start":5237,"byte_end":5340,"line_start":112,"line_end":112,"column_start":1,"column_end":104}},{"value":"/ the scalar implementation if AVX2 or SSE4.1 support is not available. It just prefers to use SIMD","span":{"file_name":"/Users/shelwitz/.cargo/registry/src/github.com-1ecc6299db9ec823/triple_accel-0.4.0/src/lib.rs","byte_start":5341,"byte_end":5442,"line_start":113,"line_end":113,"column_start":1,"column_end":102}},{"value":"/ where possible.","span":{"file_name":"/Users/shelwitz/.cargo/registry/src/github.com-1ecc6299db9ec823/triple_accel-0.4.0/src/lib.rs","byte_start":5443,"byte_end":5462,"line_start":114,"line_end":114,"column_start":1,"column_end":20}},{"value":"/","span":{"file_name":"/Users/shelwitz/.cargo/registry/src/github.com-1ecc6299db9ec823/triple_accel-0.4.0/src/lib.rs","byte_start":5463,"byte_end":5466,"line_start":115,"line_end":115,"column_start":1,"column_end":4}},{"value":"/ For most common cases, the re-exported functions are enough, and the low level functions do not","span":{"file_name":"/Users/shelwitz/.cargo/registry/src/github.com-1ecc6299db9ec823/triple_accel-0.4.0/src/lib.rs","byte_start":5467,"byte_end":5566,"line_start":116,"line_end":116,"column_start":1,"column_end":100}},{"value":"/ have to be used directly.","span":{"file_name":"/Users/shelwitz/.cargo/registry/src/github.com-1ecc6299db9ec823/triple_accel-0.4.0/src/lib.rs","byte_start":5567,"byte_end":5596,"line_start":117,"line_end":117,"column_start":1,"column_end":30}}]},{"kind":"Mod","id":{"krate":0,"index":205},"span":{"file_name":"/Users/shelwitz/.cargo/registry/src/github.com-1ecc6299db9ec823/triple_accel-0.4.0/src/hamming.rs","byte_start":0,"byte_end":0,"line_start":1,"line_end":1,"column_start":1,"column_end":1},"name":"hamming","qualname":"::hamming","value":"/Users/shelwitz/.cargo/registry/src/github.com-1ecc6299db9ec823/triple_accel-0.4.0/src/hamming.rs","parent":null,"children":[{"krate":0,"index":206},{"krate":0,"index":207},{"krate":0,"index":208},{"krate":0,"index":209},{"krate":0,"index":210},{"krate":0,"index":212},{"krate":0,"index":218},{"krate":0,"index":219},{"krate":0,"index":220},{"krate":0,"index":221},{"krate":0,"index":222},{"krate":0,"index":223},{"krate":0,"index":225},{"krate":0,"index":793},{"krate":0,"index":799},{"krate":0,"index":228}],"decl_id":null,"docs":" This module provides many Hamming distance routines.","sig":null,"attributes":[{"value":"/ This module provides many Hamming distance routines.","span":{"file_name":"/Users/shelwitz/.cargo/registry/src/github.com-1ecc6299db9ec823/triple_accel-0.4.0/src/hamming.rs","byte_start":114286,"byte_end":114342,"line_start":1,"line_end":1,"column_start":1,"column_end":57}},{"value":"/","span":{"file_name":"/Users/shelwitz/.cargo/registry/src/github.com-1ecc6299db9ec823/triple_accel-0.4.0/src/hamming.rs","byte_start":114343,"byte_end":114346,"line_start":2,"line_end":2,"column_start":1,"column_end":4}},{"value":"/ These distance functions share the same efficient underlying SIMD-accelerated implementation:","span":{"file_name":"/Users/shelwitz/.cargo/registry/src/github.com-1ecc6299db9ec823/triple_accel-0.4.0/src/hamming.rs","byte_start":114347,"byte_end":114444,"line_start":3,"line_end":3,"column_start":1,"column_end":98}},{"value":"/ * `hamming`","span":{"file_name":"/Users/shelwitz/.cargo/registry/src/github.com-1ecc6299db9ec823/triple_accel-0.4.0/src/hamming.rs","byte_start":114445,"byte_end":114460,"line_start":4,"line_end":4,"column_start":1,"column_end":16}},{"value":"/ * `hamming_simd_parallel`","span":{"file_name":"/Users/shelwitz/.cargo/registry/src/github.com-1ecc6299db9ec823/triple_accel-0.4.0/src/hamming.rs","byte_start":114461,"byte_end":114490,"line_start":5,"line_end":5,"column_start":1,"column_end":30}},{"value":"/","span":{"file_name":"/Users/shelwitz/.cargo/registry/src/github.com-1ecc6299db9ec823/triple_accel-0.4.0/src/hamming.rs","byte_start":114491,"byte_end":114494,"line_start":6,"line_end":6,"column_start":1,"column_end":4}},{"value":"/ These search functions share the same efficient underlying SIMD-accelerated implementation:","span":{"file_name":"/Users/shelwitz/.cargo/registry/src/github.com-1ecc6299db9ec823/triple_accel-0.4.0/src/hamming.rs","byte_start":114495,"byte_end":114590,"line_start":7,"line_end":7,"column_start":1,"column_end":96}},{"value":"/ * `hamming_search`","span":{"file_name":"/Users/shelwitz/.cargo/registry/src/github.com-1ecc6299db9ec823/triple_accel-0.4.0/src/hamming.rs","byte_start":114591,"byte_end":114613,"line_start":8,"line_end":8,"column_start":1,"column_end":23}},{"value":"/ * `hamming_search_simd`","span":{"file_name":"/Users/shelwitz/.cargo/registry/src/github.com-1ecc6299db9ec823/triple_accel-0.4.0/src/hamming.rs","byte_start":114614,"byte_end":114641,"line_start":9,"line_end":9,"column_start":1,"column_end":28}},{"value":"/ * `hamming_search_simd_with_opts`","span":{"file_name":"/Users/shelwitz/.cargo/registry/src/github.com-1ecc6299db9ec823/triple_accel-0.4.0/src/hamming.rs","byte_start":114642,"byte_end":114679,"line_start":10,"line_end":10,"column_start":1,"column_end":38}}]},{"kind":"Function","id":{"krate":0,"index":209},"span":{"file_name":"/Users/shelwitz/.cargo/registry/src/github.com-1ecc6299db9ec823/triple_accel-0.4.0/src/hamming.rs","byte_start":115210,"byte_end":115223,"line_start":36,"line_end":36,"column_start":8,"column_end":21},"name":"hamming_naive","qualname":"::hamming::hamming_naive","value":"pub fn hamming_naive(&[u8], &[u8]) -> u32","parent":null,"children":[],"decl_id":null,"docs":" Returns the hamming distance between two strings by naively counting mismatches.","sig":null,"attributes":[{"value":"/ Returns the hamming distance between two strings by naively counting mismatches.","span":{"file_name":"/Users/shelwitz/.cargo/registry/src/github.com-1ecc6299db9ec823/triple_accel-0.4.0/src/hamming.rs","byte_start":114730,"byte_end":114814,"line_start":17,"line_end":17,"column_start":1,"column_end":85}},{"value":"/","span":{"file_name":"/Users/shelwitz/.cargo/registry/src/github.com-1ecc6299db9ec823/triple_accel-0.4.0/src/hamming.rs","byte_start":114815,"byte_end":114818,"line_start":18,"line_end":18,"column_start":1,"column_end":4}},{"value":"/ The length of `a` and `b` must be the same.","span":{"file_name":"/Users/shelwitz/.cargo/registry/src/github.com-1ecc6299db9ec823/triple_accel-0.4.0/src/hamming.rs","byte_start":114819,"byte_end":114866,"line_start":19,"line_end":19,"column_start":1,"column_end":48}},{"value":"/","span":{"file_name":"/Users/shelwitz/.cargo/registry/src/github.com-1ecc6299db9ec823/triple_accel-0.4.0/src/hamming.rs","byte_start":114867,"byte_end":114870,"line_start":20,"line_end":20,"column_start":1,"column_end":4}},{"value":"/ # Arguments","span":{"file_name":"/Users/shelwitz/.cargo/registry/src/github.com-1ecc6299db9ec823/triple_accel-0.4.0/src/hamming.rs","byte_start":114871,"byte_end":114886,"line_start":21,"line_end":21,"column_start":1,"column_end":16}},{"value":"/ * `a` - first string (slice)","span":{"file_name":"/Users/shelwitz/.cargo/registry/src/github.com-1ecc6299db9ec823/triple_accel-0.4.0/src/hamming.rs","byte_start":114887,"byte_end":114919,"line_start":22,"line_end":22,"column_start":1,"column_end":33}},{"value":"/ * `b` - second string (slice)","span":{"file_name":"/Users/shelwitz/.cargo/registry/src/github.com-1ecc6299db9ec823/triple_accel-0.4.0/src/hamming.rs","byte_start":114920,"byte_end":114953,"line_start":23,"line_end":23,"column_start":1,"column_end":34}},{"value":"/","span":{"file_name":"/Users/shelwitz/.cargo/registry/src/github.com-1ecc6299db9ec823/triple_accel-0.4.0/src/hamming.rs","byte_start":114954,"byte_end":114957,"line_start":24,"line_end":24,"column_start":1,"column_end":4}},{"value":"/ # Panics","span":{"file_name":"/Users/shelwitz/.cargo/registry/src/github.com-1ecc6299db9ec823/triple_accel-0.4.0/src/hamming.rs","byte_start":114958,"byte_end":114970,"line_start":25,"line_end":25,"column_start":1,"column_end":13}},{"value":"/ * If the length of `a` does not equal the length of `b`.","span":{"file_name":"/Users/shelwitz/.cargo/registry/src/github.com-1ecc6299db9ec823/triple_accel-0.4.0/src/hamming.rs","byte_start":114971,"byte_end":115031,"line_start":26,"line_end":26,"column_start":1,"column_end":61}},{"value":"/","span":{"file_name":"/Users/shelwitz/.cargo/registry/src/github.com-1ecc6299db9ec823/triple_accel-0.4.0/src/hamming.rs","byte_start":115032,"byte_end":115035,"line_start":27,"line_end":27,"column_start":1,"column_end":4}},{"value":"/ # Example","span":{"file_name":"/Users/shelwitz/.cargo/registry/src/github.com-1ecc6299db9ec823/triple_accel-0.4.0/src/hamming.rs","byte_start":115036,"byte_end":115049,"line_start":28,"line_end":28,"column_start":1,"column_end":14}},{"value":"/ ```","span":{"file_name":"/Users/shelwitz/.cargo/registry/src/github.com-1ecc6299db9ec823/triple_accel-0.4.0/src/hamming.rs","byte_start":115050,"byte_end":115057,"line_start":29,"line_end":29,"column_start":1,"column_end":8}},{"value":"/ # use triple_accel::*;","span":{"file_name":"/Users/shelwitz/.cargo/registry/src/github.com-1ecc6299db9ec823/triple_accel-0.4.0/src/hamming.rs","byte_start":115058,"byte_end":115084,"line_start":30,"line_end":30,"column_start":1,"column_end":27}},{"value":"/ # use triple_accel::hamming::*;","span":{"file_name":"/Users/shelwitz/.cargo/registry/src/github.com-1ecc6299db9ec823/triple_accel-0.4.0/src/hamming.rs","byte_start":115085,"byte_end":115120,"line_start":31,"line_end":31,"column_start":1,"column_end":36}},{"value":"/ let dist = hamming_naive(b\"abc\", b\"abd\");","span":{"file_name":"/Users/shelwitz/.cargo/registry/src/github.com-1ecc6299db9ec823/triple_accel-0.4.0/src/hamming.rs","byte_start":115121,"byte_end":115166,"line_start":32,"line_end":32,"column_start":1,"column_end":46}},{"value":"/","span":{"file_name":"/Users/shelwitz/.cargo/registry/src/github.com-1ecc6299db9ec823/triple_accel-0.4.0/src/hamming.rs","byte_start":115167,"byte_end":115170,"line_start":33,"line_end":33,"column_start":1,"column_end":4}},{"value":"/ assert!(dist == 1);","span":{"file_name":"/Users/shelwitz/.cargo/registry/src/github.com-1ecc6299db9ec823/triple_accel-0.4.0/src/hamming.rs","byte_start":115171,"byte_end":115194,"line_start":34,"line_end":34,"column_start":1,"column_end":24}},{"value":"/ ```","span":{"file_name":"/Users/shelwitz/.cargo/registry/src/github.com-1ecc6299db9ec823/triple_accel-0.4.0/src/hamming.rs","byte_start":115195,"byte_end":115202,"line_start":35,"line_end":35,"column_start":1,"column_end":8}}]},{"kind":"Function","id":{"krate":0,"index":210},"span":{"file_name":"/Users/shelwitz/.cargo/registry/src/github.com-1ecc6299db9ec823/triple_accel-0.4.0/src/hamming.rs","byte_start":116236,"byte_end":116256,"line_start":70,"line_end":70,"column_start":8,"column_end":28},"name":"hamming_search_naive","qualname":"::hamming::hamming_search_naive","value":"pub fn hamming_search_naive<'a>(&'a [u8], &'a [u8])\n-> Box<dyn Iterator<Item = Match> + 'a>","parent":null,"children":[],"decl_id":null,"docs":" Returns an iterator over best `Match`s by naively searching through the text `haystack`\n for the pattern `needle`.","sig":null,"attributes":[{"value":"/ Returns an iterator over best `Match`s by naively searching through the text `haystack`","span":{"file_name":"/Users/shelwitz/.cargo/registry/src/github.com-1ecc6299db9ec823/triple_accel-0.4.0/src/hamming.rs","byte_start":115409,"byte_end":115500,"line_start":49,"line_end":49,"column_start":1,"column_end":92}},{"value":"/ for the pattern `needle`.","span":{"file_name":"/Users/shelwitz/.cargo/registry/src/github.com-1ecc6299db9ec823/triple_accel-0.4.0/src/hamming.rs","byte_start":115501,"byte_end":115530,"line_start":50,"line_end":50,"column_start":1,"column_end":30}},{"value":"/","span":{"file_name":"/Users/shelwitz/.cargo/registry/src/github.com-1ecc6299db9ec823/triple_accel-0.4.0/src/hamming.rs","byte_start":115531,"byte_end":115534,"line_start":51,"line_end":51,"column_start":1,"column_end":4}},{"value":"/ This is done by naively counting mismatches at every position in `haystack`.","span":{"file_name":"/Users/shelwitz/.cargo/registry/src/github.com-1ecc6299db9ec823/triple_accel-0.4.0/src/hamming.rs","byte_start":115535,"byte_end":115615,"line_start":52,"line_end":52,"column_start":1,"column_end":81}},{"value":"/ Only the matches with the lowest Hamming distance are returned.","span":{"file_name":"/Users/shelwitz/.cargo/registry/src/github.com-1ecc6299db9ec823/triple_accel-0.4.0/src/hamming.rs","byte_start":115616,"byte_end":115683,"line_start":53,"line_end":53,"column_start":1,"column_end":68}},{"value":"/ Each returned `Match` requires at least half or more bytes of the `needle` to match","span":{"file_name":"/Users/shelwitz/.cargo/registry/src/github.com-1ecc6299db9ec823/triple_accel-0.4.0/src/hamming.rs","byte_start":115684,"byte_end":115771,"line_start":54,"line_end":54,"column_start":1,"column_end":88}},{"value":"/ somewhere in the `haystack`.","span":{"file_name":"/Users/shelwitz/.cargo/registry/src/github.com-1ecc6299db9ec823/triple_accel-0.4.0/src/hamming.rs","byte_start":115772,"byte_end":115804,"line_start":55,"line_end":55,"column_start":1,"column_end":33}},{"value":"/ The length of `needle` must be less than or equal to the length of `haystack`.","span":{"file_name":"/Users/shelwitz/.cargo/registry/src/github.com-1ecc6299db9ec823/triple_accel-0.4.0/src/hamming.rs","byte_start":115805,"byte_end":115887,"line_start":56,"line_end":56,"column_start":1,"column_end":83}},{"value":"/","span":{"file_name":"/Users/shelwitz/.cargo/registry/src/github.com-1ecc6299db9ec823/triple_accel-0.4.0/src/hamming.rs","byte_start":115888,"byte_end":115891,"line_start":57,"line_end":57,"column_start":1,"column_end":4}},{"value":"/ # Arguments","span":{"file_name":"/Users/shelwitz/.cargo/registry/src/github.com-1ecc6299db9ec823/triple_accel-0.4.0/src/hamming.rs","byte_start":115892,"byte_end":115907,"line_start":58,"line_end":58,"column_start":1,"column_end":16}},{"value":"/ * `needle` - pattern string (slice)","span":{"file_name":"/Users/shelwitz/.cargo/registry/src/github.com-1ecc6299db9ec823/triple_accel-0.4.0/src/hamming.rs","byte_start":115908,"byte_end":115947,"line_start":59,"line_end":59,"column_start":1,"column_end":40}},{"value":"/ * `haystack` - text string (slice)","span":{"file_name":"/Users/shelwitz/.cargo/registry/src/github.com-1ecc6299db9ec823/triple_accel-0.4.0/src/hamming.rs","byte_start":115948,"byte_end":115986,"line_start":60,"line_end":60,"column_start":1,"column_end":39}},{"value":"/","span":{"file_name":"/Users/shelwitz/.cargo/registry/src/github.com-1ecc6299db9ec823/triple_accel-0.4.0/src/hamming.rs","byte_start":115987,"byte_end":115990,"line_start":61,"line_end":61,"column_start":1,"column_end":4}},{"value":"/ # Example","span":{"file_name":"/Users/shelwitz/.cargo/registry/src/github.com-1ecc6299db9ec823/triple_accel-0.4.0/src/hamming.rs","byte_start":115991,"byte_end":116004,"line_start":62,"line_end":62,"column_start":1,"column_end":14}},{"value":"/ ```","span":{"file_name":"/Users/shelwitz/.cargo/registry/src/github.com-1ecc6299db9ec823/triple_accel-0.4.0/src/hamming.rs","byte_start":116005,"byte_end":116012,"line_start":63,"line_end":63,"column_start":1,"column_end":8}},{"value":"/ # use triple_accel::*;","span":{"file_name":"/Users/shelwitz/.cargo/registry/src/github.com-1ecc6299db9ec823/triple_accel-0.4.0/src/hamming.rs","byte_start":116013,"byte_end":116039,"line_start":64,"line_end":64,"column_start":1,"column_end":27}},{"value":"/ # use triple_accel::hamming::*;","span":{"file_name":"/Users/shelwitz/.cargo/registry/src/github.com-1ecc6299db9ec823/triple_accel-0.4.0/src/hamming.rs","byte_start":116040,"byte_end":116075,"line_start":65,"line_end":65,"column_start":1,"column_end":36}},{"value":"/ let matches: Vec<Match> = hamming_search_naive(b\"abc\", b\"  abd\").collect();","span":{"file_name":"/Users/shelwitz/.cargo/registry/src/github.com-1ecc6299db9ec823/triple_accel-0.4.0/src/hamming.rs","byte_start":116076,"byte_end":116155,"line_start":66,"line_end":66,"column_start":1,"column_end":80}},{"value":"/","span":{"file_name":"/Users/shelwitz/.cargo/registry/src/github.com-1ecc6299db9ec823/triple_accel-0.4.0/src/hamming.rs","byte_start":116156,"byte_end":116159,"line_start":67,"line_end":67,"column_start":1,"column_end":4}},{"value":"/ assert!(matches == vec![Match{start: 2, end: 5, k: 1}]);","span":{"file_name":"/Users/shelwitz/.cargo/registry/src/github.com-1ecc6299db9ec823/triple_accel-0.4.0/src/hamming.rs","byte_start":116160,"byte_end":116220,"line_start":68,"line_end":68,"column_start":1,"column_end":61}},{"value":"/ ```","span":{"file_name":"/Users/shelwitz/.cargo/registry/src/github.com-1ecc6299db9ec823/triple_accel-0.4.0/src/hamming.rs","byte_start":116221,"byte_end":116228,"line_start":69,"line_end":69,"column_start":1,"column_end":8}}]},{"kind":"Function","id":{"krate":0,"index":212},"span":{"file_name":"/Users/shelwitz/.cargo/registry/src/github.com-1ecc6299db9ec823/triple_accel-0.4.0/src/hamming.rs","byte_start":117377,"byte_end":117407,"line_start":96,"line_end":96,"column_start":8,"column_end":38},"name":"hamming_search_naive_with_opts","qualname":"::hamming::hamming_search_naive_with_opts","value":"pub fn hamming_search_naive_with_opts<'a>(&'a [u8], &'a [u8], u32, SearchType)\n-> Box<dyn Iterator<Item = Match> + 'a>","parent":null,"children":[],"decl_id":null,"docs":" Returns an iterator over `Match`s by naively searching through the text `haystack`\n for the pattern `needle`, with extra options.","sig":null,"attributes":[{"value":"/ Returns an iterator over `Match`s by naively searching through the text `haystack`","span":{"file_name":"/Users/shelwitz/.cargo/registry/src/github.com-1ecc6299db9ec823/triple_accel-0.4.0/src/hamming.rs","byte_start":116475,"byte_end":116561,"line_start":74,"line_end":74,"column_start":1,"column_end":87}},{"value":"/ for the pattern `needle`, with extra options.","span":{"file_name":"/Users/shelwitz/.cargo/registry/src/github.com-1ecc6299db9ec823/triple_accel-0.4.0/src/hamming.rs","byte_start":116562,"byte_end":116611,"line_start":75,"line_end":75,"column_start":1,"column_end":50}},{"value":"/","span":{"file_name":"/Users/shelwitz/.cargo/registry/src/github.com-1ecc6299db9ec823/triple_accel-0.4.0/src/hamming.rs","byte_start":116612,"byte_end":116615,"line_start":76,"line_end":76,"column_start":1,"column_end":4}},{"value":"/ Only matches with less than `k` mismatches are returned.","span":{"file_name":"/Users/shelwitz/.cargo/registry/src/github.com-1ecc6299db9ec823/triple_accel-0.4.0/src/hamming.rs","byte_start":116616,"byte_end":116676,"line_start":77,"line_end":77,"column_start":1,"column_end":61}},{"value":"/ This is done by naively counting mismatches at every position in `haystack`.","span":{"file_name":"/Users/shelwitz/.cargo/registry/src/github.com-1ecc6299db9ec823/triple_accel-0.4.0/src/hamming.rs","byte_start":116677,"byte_end":116757,"line_start":78,"line_end":78,"column_start":1,"column_end":81}},{"value":"/ The length of `needle` must be less than or equal to the length of `haystack`.","span":{"file_name":"/Users/shelwitz/.cargo/registry/src/github.com-1ecc6299db9ec823/triple_accel-0.4.0/src/hamming.rs","byte_start":116758,"byte_end":116840,"line_start":79,"line_end":79,"column_start":1,"column_end":83}},{"value":"/","span":{"file_name":"/Users/shelwitz/.cargo/registry/src/github.com-1ecc6299db9ec823/triple_accel-0.4.0/src/hamming.rs","byte_start":116841,"byte_end":116844,"line_start":80,"line_end":80,"column_start":1,"column_end":4}},{"value":"/ # Arguments","span":{"file_name":"/Users/shelwitz/.cargo/registry/src/github.com-1ecc6299db9ec823/triple_accel-0.4.0/src/hamming.rs","byte_start":116845,"byte_end":116860,"line_start":81,"line_end":81,"column_start":1,"column_end":16}},{"value":"/ * `needle` - pattern string (slice)","span":{"file_name":"/Users/shelwitz/.cargo/registry/src/github.com-1ecc6299db9ec823/triple_accel-0.4.0/src/hamming.rs","byte_start":116861,"byte_end":116900,"line_start":82,"line_end":82,"column_start":1,"column_end":40}},{"value":"/ * `haystack` - text string (slice)","span":{"file_name":"/Users/shelwitz/.cargo/registry/src/github.com-1ecc6299db9ec823/triple_accel-0.4.0/src/hamming.rs","byte_start":116901,"byte_end":116939,"line_start":83,"line_end":83,"column_start":1,"column_end":39}},{"value":"/ * `k` - number of mismatches allowed","span":{"file_name":"/Users/shelwitz/.cargo/registry/src/github.com-1ecc6299db9ec823/triple_accel-0.4.0/src/hamming.rs","byte_start":116940,"byte_end":116980,"line_start":84,"line_end":84,"column_start":1,"column_end":41}},{"value":"/ * `search_type` - whether to only return the \"best\" matches with the lowest Hamming distance, or","span":{"file_name":"/Users/shelwitz/.cargo/registry/src/github.com-1ecc6299db9ec823/triple_accel-0.4.0/src/hamming.rs","byte_start":116981,"byte_end":117081,"line_start":85,"line_end":85,"column_start":1,"column_end":101}},{"value":"/ all matches","span":{"file_name":"/Users/shelwitz/.cargo/registry/src/github.com-1ecc6299db9ec823/triple_accel-0.4.0/src/hamming.rs","byte_start":117082,"byte_end":117097,"line_start":86,"line_end":86,"column_start":1,"column_end":16}},{"value":"/","span":{"file_name":"/Users/shelwitz/.cargo/registry/src/github.com-1ecc6299db9ec823/triple_accel-0.4.0/src/hamming.rs","byte_start":117098,"byte_end":117101,"line_start":87,"line_end":87,"column_start":1,"column_end":4}},{"value":"/ # Example","span":{"file_name":"/Users/shelwitz/.cargo/registry/src/github.com-1ecc6299db9ec823/triple_accel-0.4.0/src/hamming.rs","byte_start":117102,"byte_end":117115,"line_start":88,"line_end":88,"column_start":1,"column_end":14}},{"value":"/ ```","span":{"file_name":"/Users/shelwitz/.cargo/registry/src/github.com-1ecc6299db9ec823/triple_accel-0.4.0/src/hamming.rs","byte_start":117116,"byte_end":117123,"line_start":89,"line_end":89,"column_start":1,"column_end":8}},{"value":"/ # use triple_accel::*;","span":{"file_name":"/Users/shelwitz/.cargo/registry/src/github.com-1ecc6299db9ec823/triple_accel-0.4.0/src/hamming.rs","byte_start":117124,"byte_end":117150,"line_start":90,"line_end":90,"column_start":1,"column_end":27}},{"value":"/ # use triple_accel::hamming::*;","span":{"file_name":"/Users/shelwitz/.cargo/registry/src/github.com-1ecc6299db9ec823/triple_accel-0.4.0/src/hamming.rs","byte_start":117151,"byte_end":117186,"line_start":91,"line_end":91,"column_start":1,"column_end":36}},{"value":"/ let matches: Vec<Match> = hamming_search_naive_with_opts(b\"abc\", b\"  abd\", 1, SearchType::All).collect();","span":{"file_name":"/Users/shelwitz/.cargo/registry/src/github.com-1ecc6299db9ec823/triple_accel-0.4.0/src/hamming.rs","byte_start":117187,"byte_end":117296,"line_start":92,"line_end":92,"column_start":1,"column_end":110}},{"value":"/","span":{"file_name":"/Users/shelwitz/.cargo/registry/src/github.com-1ecc6299db9ec823/triple_accel-0.4.0/src/hamming.rs","byte_start":117297,"byte_end":117300,"line_start":93,"line_end":93,"column_start":1,"column_end":4}},{"value":"/ assert!(matches == vec![Match{start: 2, end: 5, k: 1}]);","span":{"file_name":"/Users/shelwitz/.cargo/registry/src/github.com-1ecc6299db9ec823/triple_accel-0.4.0/src/hamming.rs","byte_start":117301,"byte_end":117361,"line_start":94,"line_end":94,"column_start":1,"column_end":61}},{"value":"/ ```","span":{"file_name":"/Users/shelwitz/.cargo/registry/src/github.com-1ecc6299db9ec823/triple_accel-0.4.0/src/hamming.rs","byte_start":117362,"byte_end":117369,"line_start":95,"line_end":95,"column_start":1,"column_end":8}}]},{"kind":"Function","id":{"krate":0,"index":218},"span":{"file_name":"/Users/shelwitz/.cargo/registry/src/github.com-1ecc6299db9ec823/triple_accel-0.4.0/src/hamming.rs","byte_start":119688,"byte_end":119704,"line_start":176,"line_end":176,"column_start":8,"column_end":24},"name":"hamming_words_64","qualname":"::hamming::hamming_words_64","value":"pub fn hamming_words_64(&[u8], &[u8]) -> u32","parent":null,"children":[],"decl_id":null,"docs":" Returns the hamming distance between two strings by efficiently counting mismatches in chunks of 64 bits.","sig":null,"attributes":[{"value":"/ Returns the hamming distance between two strings by efficiently counting mismatches in chunks of 64 bits.","span":{"file_name":"/Users/shelwitz/.cargo/registry/src/github.com-1ecc6299db9ec823/triple_accel-0.4.0/src/hamming.rs","byte_start":118759,"byte_end":118868,"line_start":148,"line_end":148,"column_start":1,"column_end":110}},{"value":"/","span":{"file_name":"/Users/shelwitz/.cargo/registry/src/github.com-1ecc6299db9ec823/triple_accel-0.4.0/src/hamming.rs","byte_start":118869,"byte_end":118872,"line_start":149,"line_end":149,"column_start":1,"column_end":4}},{"value":"/ The length of `a` and `b` must be the same.","span":{"file_name":"/Users/shelwitz/.cargo/registry/src/github.com-1ecc6299db9ec823/triple_accel-0.4.0/src/hamming.rs","byte_start":118873,"byte_end":118920,"line_start":150,"line_end":150,"column_start":1,"column_end":48}},{"value":"/ Both `a` and `b` must be aligned and padded so they can be directly casted to chunks of `u64`.","span":{"file_name":"/Users/shelwitz/.cargo/registry/src/github.com-1ecc6299db9ec823/triple_accel-0.4.0/src/hamming.rs","byte_start":118921,"byte_end":119019,"line_start":151,"line_end":151,"column_start":1,"column_end":99}},{"value":"/ Use `alloc_str` to create aligned and padded strings.","span":{"file_name":"/Users/shelwitz/.cargo/registry/src/github.com-1ecc6299db9ec823/triple_accel-0.4.0/src/hamming.rs","byte_start":119020,"byte_end":119077,"line_start":152,"line_end":152,"column_start":1,"column_end":58}},{"value":"/ This should be faster than `hamming_naive` and maybe even `hamming_words_128`. This should be slower","span":{"file_name":"/Users/shelwitz/.cargo/registry/src/github.com-1ecc6299db9ec823/triple_accel-0.4.0/src/hamming.rs","byte_start":119078,"byte_end":119182,"line_start":153,"line_end":153,"column_start":1,"column_end":105}},{"value":"/ than `hamming_simd_parallel/movemask`.","span":{"file_name":"/Users/shelwitz/.cargo/registry/src/github.com-1ecc6299db9ec823/triple_accel-0.4.0/src/hamming.rs","byte_start":119183,"byte_end":119225,"line_start":154,"line_end":154,"column_start":1,"column_end":43}},{"value":"/","span":{"file_name":"/Users/shelwitz/.cargo/registry/src/github.com-1ecc6299db9ec823/triple_accel-0.4.0/src/hamming.rs","byte_start":119226,"byte_end":119229,"line_start":155,"line_end":155,"column_start":1,"column_end":4}},{"value":"/ # Arguments","span":{"file_name":"/Users/shelwitz/.cargo/registry/src/github.com-1ecc6299db9ec823/triple_accel-0.4.0/src/hamming.rs","byte_start":119230,"byte_end":119245,"line_start":156,"line_end":156,"column_start":1,"column_end":16}},{"value":"/ * `a` - first string (slice)","span":{"file_name":"/Users/shelwitz/.cargo/registry/src/github.com-1ecc6299db9ec823/triple_accel-0.4.0/src/hamming.rs","byte_start":119246,"byte_end":119278,"line_start":157,"line_end":157,"column_start":1,"column_end":33}},{"value":"/ * `b` - second string (slice)","span":{"file_name":"/Users/shelwitz/.cargo/registry/src/github.com-1ecc6299db9ec823/triple_accel-0.4.0/src/hamming.rs","byte_start":119279,"byte_end":119312,"line_start":158,"line_end":158,"column_start":1,"column_end":34}},{"value":"/","span":{"file_name":"/Users/shelwitz/.cargo/registry/src/github.com-1ecc6299db9ec823/triple_accel-0.4.0/src/hamming.rs","byte_start":119313,"byte_end":119316,"line_start":159,"line_end":159,"column_start":1,"column_end":4}},{"value":"/ # Panics","span":{"file_name":"/Users/shelwitz/.cargo/registry/src/github.com-1ecc6299db9ec823/triple_accel-0.4.0/src/hamming.rs","byte_start":119317,"byte_end":119329,"line_start":160,"line_end":160,"column_start":1,"column_end":13}},{"value":"/ * If the length of `a` does not equal the length of `b`.","span":{"file_name":"/Users/shelwitz/.cargo/registry/src/github.com-1ecc6299db9ec823/triple_accel-0.4.0/src/hamming.rs","byte_start":119330,"byte_end":119390,"line_start":161,"line_end":161,"column_start":1,"column_end":61}},{"value":"/","span":{"file_name":"/Users/shelwitz/.cargo/registry/src/github.com-1ecc6299db9ec823/triple_accel-0.4.0/src/hamming.rs","byte_start":119391,"byte_end":119394,"line_start":162,"line_end":162,"column_start":1,"column_end":4}},{"value":"/ # Example","span":{"file_name":"/Users/shelwitz/.cargo/registry/src/github.com-1ecc6299db9ec823/triple_accel-0.4.0/src/hamming.rs","byte_start":119395,"byte_end":119408,"line_start":163,"line_end":163,"column_start":1,"column_end":14}},{"value":"/ ```","span":{"file_name":"/Users/shelwitz/.cargo/registry/src/github.com-1ecc6299db9ec823/triple_accel-0.4.0/src/hamming.rs","byte_start":119409,"byte_end":119416,"line_start":164,"line_end":164,"column_start":1,"column_end":8}},{"value":"/ # use triple_accel::*;","span":{"file_name":"/Users/shelwitz/.cargo/registry/src/github.com-1ecc6299db9ec823/triple_accel-0.4.0/src/hamming.rs","byte_start":119417,"byte_end":119443,"line_start":165,"line_end":165,"column_start":1,"column_end":27}},{"value":"/ # use triple_accel::hamming::*;","span":{"file_name":"/Users/shelwitz/.cargo/registry/src/github.com-1ecc6299db9ec823/triple_accel-0.4.0/src/hamming.rs","byte_start":119444,"byte_end":119479,"line_start":166,"line_end":166,"column_start":1,"column_end":36}},{"value":"/ let mut a = alloc_str(3);","span":{"file_name":"/Users/shelwitz/.cargo/registry/src/github.com-1ecc6299db9ec823/triple_accel-0.4.0/src/hamming.rs","byte_start":119480,"byte_end":119509,"line_start":167,"line_end":167,"column_start":1,"column_end":30}},{"value":"/ let mut b = alloc_str(3);","span":{"file_name":"/Users/shelwitz/.cargo/registry/src/github.com-1ecc6299db9ec823/triple_accel-0.4.0/src/hamming.rs","byte_start":119510,"byte_end":119539,"line_start":168,"line_end":168,"column_start":1,"column_end":30}},{"value":"/ fill_str(&mut a, b\"abc\");","span":{"file_name":"/Users/shelwitz/.cargo/registry/src/github.com-1ecc6299db9ec823/triple_accel-0.4.0/src/hamming.rs","byte_start":119540,"byte_end":119569,"line_start":169,"line_end":169,"column_start":1,"column_end":30}},{"value":"/ fill_str(&mut b, b\"abd\");","span":{"file_name":"/Users/shelwitz/.cargo/registry/src/github.com-1ecc6299db9ec823/triple_accel-0.4.0/src/hamming.rs","byte_start":119570,"byte_end":119599,"line_start":170,"line_end":170,"column_start":1,"column_end":30}},{"value":"/","span":{"file_name":"/Users/shelwitz/.cargo/registry/src/github.com-1ecc6299db9ec823/triple_accel-0.4.0/src/hamming.rs","byte_start":119600,"byte_end":119603,"line_start":171,"line_end":171,"column_start":1,"column_end":4}},{"value":"/ let dist = hamming_words_64(&a, &b);","span":{"file_name":"/Users/shelwitz/.cargo/registry/src/github.com-1ecc6299db9ec823/triple_accel-0.4.0/src/hamming.rs","byte_start":119604,"byte_end":119644,"line_start":172,"line_end":172,"column_start":1,"column_end":41}},{"value":"/","span":{"file_name":"/Users/shelwitz/.cargo/registry/src/github.com-1ecc6299db9ec823/triple_accel-0.4.0/src/hamming.rs","byte_start":119645,"byte_end":119648,"line_start":173,"line_end":173,"column_start":1,"column_end":4}},{"value":"/ assert!(dist == 1);","span":{"file_name":"/Users/shelwitz/.cargo/registry/src/github.com-1ecc6299db9ec823/triple_accel-0.4.0/src/hamming.rs","byte_start":119649,"byte_end":119672,"line_start":174,"line_end":174,"column_start":1,"column_end":24}},{"value":"/ ```","span":{"file_name":"/Users/shelwitz/.cargo/registry/src/github.com-1ecc6299db9ec823/triple_accel-0.4.0/src/hamming.rs","byte_start":119673,"byte_end":119680,"line_start":175,"line_end":175,"column_start":1,"column_end":8}}]},{"kind":"Function","id":{"krate":0,"index":219},"span":{"file_name":"/Users/shelwitz/.cargo/registry/src/github.com-1ecc6299db9ec823/triple_accel-0.4.0/src/hamming.rs","byte_start":122118,"byte_end":122135,"line_start":249,"line_end":249,"column_start":8,"column_end":25},"name":"hamming_words_128","qualname":"::hamming::hamming_words_128","value":"pub fn hamming_words_128(&[u8], &[u8]) -> u32","parent":null,"children":[],"decl_id":null,"docs":" Returns the hamming distance between two strings by counting mismatches in chunks of 128 bits.","sig":null,"attributes":[{"value":"/ Returns the hamming distance between two strings by counting mismatches in chunks of 128 bits.","span":{"file_name":"/Users/shelwitz/.cargo/registry/src/github.com-1ecc6299db9ec823/triple_accel-0.4.0/src/hamming.rs","byte_start":121173,"byte_end":121271,"line_start":221,"line_end":221,"column_start":1,"column_end":99}},{"value":"/","span":{"file_name":"/Users/shelwitz/.cargo/registry/src/github.com-1ecc6299db9ec823/triple_accel-0.4.0/src/hamming.rs","byte_start":121272,"byte_end":121275,"line_start":222,"line_end":222,"column_start":1,"column_end":4}},{"value":"/ The length of `a` and `b` must be the same.","span":{"file_name":"/Users/shelwitz/.cargo/registry/src/github.com-1ecc6299db9ec823/triple_accel-0.4.0/src/hamming.rs","byte_start":121276,"byte_end":121323,"line_start":223,"line_end":223,"column_start":1,"column_end":48}},{"value":"/ Both `a` and `b` must be aligned and padded so they can be directly casted to chunks of `u128`.","span":{"file_name":"/Users/shelwitz/.cargo/registry/src/github.com-1ecc6299db9ec823/triple_accel-0.4.0/src/hamming.rs","byte_start":121324,"byte_end":121423,"line_start":224,"line_end":224,"column_start":1,"column_end":100}},{"value":"/ Use `alloc_str` to create aligned and padded strings.","span":{"file_name":"/Users/shelwitz/.cargo/registry/src/github.com-1ecc6299db9ec823/triple_accel-0.4.0/src/hamming.rs","byte_start":121424,"byte_end":121481,"line_start":225,"line_end":225,"column_start":1,"column_end":58}},{"value":"/ This may be slower than `hamming_words_64` in practice, probably since Rust `u128` is not as","span":{"file_name":"/Users/shelwitz/.cargo/registry/src/github.com-1ecc6299db9ec823/triple_accel-0.4.0/src/hamming.rs","byte_start":121482,"byte_end":121578,"line_start":226,"line_end":226,"column_start":1,"column_end":97}},{"value":"/ optimized. This should be slower than `hamming_simd_parallel/movemask`.","span":{"file_name":"/Users/shelwitz/.cargo/registry/src/github.com-1ecc6299db9ec823/triple_accel-0.4.0/src/hamming.rs","byte_start":121579,"byte_end":121654,"line_start":227,"line_end":227,"column_start":1,"column_end":76}},{"value":"/","span":{"file_name":"/Users/shelwitz/.cargo/registry/src/github.com-1ecc6299db9ec823/triple_accel-0.4.0/src/hamming.rs","byte_start":121655,"byte_end":121658,"line_start":228,"line_end":228,"column_start":1,"column_end":4}},{"value":"/ # Arguments","span":{"file_name":"/Users/shelwitz/.cargo/registry/src/github.com-1ecc6299db9ec823/triple_accel-0.4.0/src/hamming.rs","byte_start":121659,"byte_end":121674,"line_start":229,"line_end":229,"column_start":1,"column_end":16}},{"value":"/ * `a` - first string (slice)","span":{"file_name":"/Users/shelwitz/.cargo/registry/src/github.com-1ecc6299db9ec823/triple_accel-0.4.0/src/hamming.rs","byte_start":121675,"byte_end":121707,"line_start":230,"line_end":230,"column_start":1,"column_end":33}},{"value":"/ * `b` - second string (slice)","span":{"file_name":"/Users/shelwitz/.cargo/registry/src/github.com-1ecc6299db9ec823/triple_accel-0.4.0/src/hamming.rs","byte_start":121708,"byte_end":121741,"line_start":231,"line_end":231,"column_start":1,"column_end":34}},{"value":"/","span":{"file_name":"/Users/shelwitz/.cargo/registry/src/github.com-1ecc6299db9ec823/triple_accel-0.4.0/src/hamming.rs","byte_start":121742,"byte_end":121745,"line_start":232,"line_end":232,"column_start":1,"column_end":4}},{"value":"/ # Panics","span":{"file_name":"/Users/shelwitz/.cargo/registry/src/github.com-1ecc6299db9ec823/triple_accel-0.4.0/src/hamming.rs","byte_start":121746,"byte_end":121758,"line_start":233,"line_end":233,"column_start":1,"column_end":13}},{"value":"/ * If the length of `a` does not equal the length of `b`.","span":{"file_name":"/Users/shelwitz/.cargo/registry/src/github.com-1ecc6299db9ec823/triple_accel-0.4.0/src/hamming.rs","byte_start":121759,"byte_end":121819,"line_start":234,"line_end":234,"column_start":1,"column_end":61}},{"value":"/","span":{"file_name":"/Users/shelwitz/.cargo/registry/src/github.com-1ecc6299db9ec823/triple_accel-0.4.0/src/hamming.rs","byte_start":121820,"byte_end":121823,"line_start":235,"line_end":235,"column_start":1,"column_end":4}},{"value":"/ # Example","span":{"file_name":"/Users/shelwitz/.cargo/registry/src/github.com-1ecc6299db9ec823/triple_accel-0.4.0/src/hamming.rs","byte_start":121824,"byte_end":121837,"line_start":236,"line_end":236,"column_start":1,"column_end":14}},{"value":"/ ```","span":{"file_name":"/Users/shelwitz/.cargo/registry/src/github.com-1ecc6299db9ec823/triple_accel-0.4.0/src/hamming.rs","byte_start":121838,"byte_end":121845,"line_start":237,"line_end":237,"column_start":1,"column_end":8}},{"value":"/ # use triple_accel::*;","span":{"file_name":"/Users/shelwitz/.cargo/registry/src/github.com-1ecc6299db9ec823/triple_accel-0.4.0/src/hamming.rs","byte_start":121846,"byte_end":121872,"line_start":238,"line_end":238,"column_start":1,"column_end":27}},{"value":"/ # use triple_accel::hamming::*;","span":{"file_name":"/Users/shelwitz/.cargo/registry/src/github.com-1ecc6299db9ec823/triple_accel-0.4.0/src/hamming.rs","byte_start":121873,"byte_end":121908,"line_start":239,"line_end":239,"column_start":1,"column_end":36}},{"value":"/ let mut a = alloc_str(3);","span":{"file_name":"/Users/shelwitz/.cargo/registry/src/github.com-1ecc6299db9ec823/triple_accel-0.4.0/src/hamming.rs","byte_start":121909,"byte_end":121938,"line_start":240,"line_end":240,"column_start":1,"column_end":30}},{"value":"/ let mut b = alloc_str(3);","span":{"file_name":"/Users/shelwitz/.cargo/registry/src/github.com-1ecc6299db9ec823/triple_accel-0.4.0/src/hamming.rs","byte_start":121939,"byte_end":121968,"line_start":241,"line_end":241,"column_start":1,"column_end":30}},{"value":"/ fill_str(&mut a, b\"abc\");","span":{"file_name":"/Users/shelwitz/.cargo/registry/src/github.com-1ecc6299db9ec823/triple_accel-0.4.0/src/hamming.rs","byte_start":121969,"byte_end":121998,"line_start":242,"line_end":242,"column_start":1,"column_end":30}},{"value":"/ fill_str(&mut b, b\"abd\");","span":{"file_name":"/Users/shelwitz/.cargo/registry/src/github.com-1ecc6299db9ec823/triple_accel-0.4.0/src/hamming.rs","byte_start":121999,"byte_end":122028,"line_start":243,"line_end":243,"column_start":1,"column_end":30}},{"value":"/","span":{"file_name":"/Users/shelwitz/.cargo/registry/src/github.com-1ecc6299db9ec823/triple_accel-0.4.0/src/hamming.rs","byte_start":122029,"byte_end":122032,"line_start":244,"line_end":244,"column_start":1,"column_end":4}},{"value":"/ let dist = hamming_words_128(&a, &b);","span":{"file_name":"/Users/shelwitz/.cargo/registry/src/github.com-1ecc6299db9ec823/triple_accel-0.4.0/src/hamming.rs","byte_start":122033,"byte_end":122074,"line_start":245,"line_end":245,"column_start":1,"column_end":42}},{"value":"/","span":{"file_name":"/Users/shelwitz/.cargo/registry/src/github.com-1ecc6299db9ec823/triple_accel-0.4.0/src/hamming.rs","byte_start":122075,"byte_end":122078,"line_start":246,"line_end":246,"column_start":1,"column_end":4}},{"value":"/ assert!(dist == 1);","span":{"file_name":"/Users/shelwitz/.cargo/registry/src/github.com-1ecc6299db9ec823/triple_accel-0.4.0/src/hamming.rs","byte_start":122079,"byte_end":122102,"line_start":247,"line_end":247,"column_start":1,"column_end":24}},{"value":"/ ```","span":{"file_name":"/Users/shelwitz/.cargo/registry/src/github.com-1ecc6299db9ec823/triple_accel-0.4.0/src/hamming.rs","byte_start":122103,"byte_end":122110,"line_start":248,"line_end":248,"column_start":1,"column_end":8}}]},{"kind":"Function","id":{"krate":0,"index":220},"span":{"file_name":"/Users/shelwitz/.cargo/registry/src/github.com-1ecc6299db9ec823/triple_accel-0.4.0/src/hamming.rs","byte_start":124515,"byte_end":124536,"line_start":317,"line_end":317,"column_start":8,"column_end":29},"name":"hamming_simd_parallel","qualname":"::hamming::hamming_simd_parallel","value":"pub fn hamming_simd_parallel(&[u8], &[u8]) -> u32","parent":null,"children":[],"decl_id":null,"docs":" Returns the hamming distance between two strings by counting mismatches using SIMD vectors to\n increment multiple counters in parallel.","sig":null,"attributes":[{"value":"/ Returns the hamming distance between two strings by counting mismatches using SIMD vectors to","span":{"file_name":"/Users/shelwitz/.cargo/registry/src/github.com-1ecc6299db9ec823/triple_accel-0.4.0/src/hamming.rs","byte_start":123714,"byte_end":123811,"line_start":294,"line_end":294,"column_start":1,"column_end":98}},{"value":"/ increment multiple counters in parallel.","span":{"file_name":"/Users/shelwitz/.cargo/registry/src/github.com-1ecc6299db9ec823/triple_accel-0.4.0/src/hamming.rs","byte_start":123812,"byte_end":123856,"line_start":295,"line_end":295,"column_start":1,"column_end":45}},{"value":"/","span":{"file_name":"/Users/shelwitz/.cargo/registry/src/github.com-1ecc6299db9ec823/triple_accel-0.4.0/src/hamming.rs","byte_start":123857,"byte_end":123860,"line_start":296,"line_end":296,"column_start":1,"column_end":4}},{"value":"/ The length of `a` and `b` must be the same.","span":{"file_name":"/Users/shelwitz/.cargo/registry/src/github.com-1ecc6299db9ec823/triple_accel-0.4.0/src/hamming.rs","byte_start":123861,"byte_end":123908,"line_start":297,"line_end":297,"column_start":1,"column_end":48}},{"value":"/ There are no constraints on how `a` and `b` are aligned and padded.","span":{"file_name":"/Users/shelwitz/.cargo/registry/src/github.com-1ecc6299db9ec823/triple_accel-0.4.0/src/hamming.rs","byte_start":123909,"byte_end":123980,"line_start":298,"line_end":298,"column_start":1,"column_end":72}},{"value":"/ This will automatically fall back to `hamming_naive`, if AVX2 and SSE4.1 are not supported.","span":{"file_name":"/Users/shelwitz/.cargo/registry/src/github.com-1ecc6299db9ec823/triple_accel-0.4.0/src/hamming.rs","byte_start":123981,"byte_end":124076,"line_start":299,"line_end":299,"column_start":1,"column_end":96}},{"value":"/ This should be faster than both `hamming_word_64/128` and `hamming_simd_movemask`.","span":{"file_name":"/Users/shelwitz/.cargo/registry/src/github.com-1ecc6299db9ec823/triple_accel-0.4.0/src/hamming.rs","byte_start":124077,"byte_end":124163,"line_start":300,"line_end":300,"column_start":1,"column_end":87}},{"value":"/","span":{"file_name":"/Users/shelwitz/.cargo/registry/src/github.com-1ecc6299db9ec823/triple_accel-0.4.0/src/hamming.rs","byte_start":124164,"byte_end":124167,"line_start":301,"line_end":301,"column_start":1,"column_end":4}},{"value":"/ # Arguments","span":{"file_name":"/Users/shelwitz/.cargo/registry/src/github.com-1ecc6299db9ec823/triple_accel-0.4.0/src/hamming.rs","byte_start":124168,"byte_end":124183,"line_start":302,"line_end":302,"column_start":1,"column_end":16}},{"value":"/ * `a` - first string (slice)","span":{"file_name":"/Users/shelwitz/.cargo/registry/src/github.com-1ecc6299db9ec823/triple_accel-0.4.0/src/hamming.rs","byte_start":124184,"byte_end":124216,"line_start":303,"line_end":303,"column_start":1,"column_end":33}},{"value":"/ * `b` - second string (slice)","span":{"file_name":"/Users/shelwitz/.cargo/registry/src/github.com-1ecc6299db9ec823/triple_accel-0.4.0/src/hamming.rs","byte_start":124217,"byte_end":124250,"line_start":304,"line_end":304,"column_start":1,"column_end":34}},{"value":"/","span":{"file_name":"/Users/shelwitz/.cargo/registry/src/github.com-1ecc6299db9ec823/triple_accel-0.4.0/src/hamming.rs","byte_start":124251,"byte_end":124254,"line_start":305,"line_end":305,"column_start":1,"column_end":4}},{"value":"/ # Panics","span":{"file_name":"/Users/shelwitz/.cargo/registry/src/github.com-1ecc6299db9ec823/triple_accel-0.4.0/src/hamming.rs","byte_start":124255,"byte_end":124267,"line_start":306,"line_end":306,"column_start":1,"column_end":13}},{"value":"/ * If the length of `a` does not equal the length of `b`.","span":{"file_name":"/Users/shelwitz/.cargo/registry/src/github.com-1ecc6299db9ec823/triple_accel-0.4.0/src/hamming.rs","byte_start":124268,"byte_end":124328,"line_start":307,"line_end":307,"column_start":1,"column_end":61}},{"value":"/","span":{"file_name":"/Users/shelwitz/.cargo/registry/src/github.com-1ecc6299db9ec823/triple_accel-0.4.0/src/hamming.rs","byte_start":124329,"byte_end":124332,"line_start":308,"line_end":308,"column_start":1,"column_end":4}},{"value":"/ # Example","span":{"file_name":"/Users/shelwitz/.cargo/registry/src/github.com-1ecc6299db9ec823/triple_accel-0.4.0/src/hamming.rs","byte_start":124333,"byte_end":124346,"line_start":309,"line_end":309,"column_start":1,"column_end":14}},{"value":"/ ```","span":{"file_name":"/Users/shelwitz/.cargo/registry/src/github.com-1ecc6299db9ec823/triple_accel-0.4.0/src/hamming.rs","byte_start":124347,"byte_end":124354,"line_start":310,"line_end":310,"column_start":1,"column_end":8}},{"value":"/ # use triple_accel::*;","span":{"file_name":"/Users/shelwitz/.cargo/registry/src/github.com-1ecc6299db9ec823/triple_accel-0.4.0/src/hamming.rs","byte_start":124355,"byte_end":124381,"line_start":311,"line_end":311,"column_start":1,"column_end":27}},{"value":"/ # use triple_accel::hamming::*;","span":{"file_name":"/Users/shelwitz/.cargo/registry/src/github.com-1ecc6299db9ec823/triple_accel-0.4.0/src/hamming.rs","byte_start":124382,"byte_end":124417,"line_start":312,"line_end":312,"column_start":1,"column_end":36}},{"value":"/ let dist = hamming_simd_parallel(b\"abc\", b\"abd\");","span":{"file_name":"/Users/shelwitz/.cargo/registry/src/github.com-1ecc6299db9ec823/triple_accel-0.4.0/src/hamming.rs","byte_start":124418,"byte_end":124471,"line_start":313,"line_end":313,"column_start":1,"column_end":54}},{"value":"/","span":{"file_name":"/Users/shelwitz/.cargo/registry/src/github.com-1ecc6299db9ec823/triple_accel-0.4.0/src/hamming.rs","byte_start":124472,"byte_end":124475,"line_start":314,"line_end":314,"column_start":1,"column_end":4}},{"value":"/ assert!(dist == 1);","span":{"file_name":"/Users/shelwitz/.cargo/registry/src/github.com-1ecc6299db9ec823/triple_accel-0.4.0/src/hamming.rs","byte_start":124476,"byte_end":124499,"line_start":315,"line_end":315,"column_start":1,"column_end":24}},{"value":"/ ```","span":{"file_name":"/Users/shelwitz/.cargo/registry/src/github.com-1ecc6299db9ec823/triple_accel-0.4.0/src/hamming.rs","byte_start":124500,"byte_end":124507,"line_start":316,"line_end":316,"column_start":1,"column_end":8}}]},{"kind":"Function","id":{"krate":0,"index":221},"span":{"file_name":"/Users/shelwitz/.cargo/registry/src/github.com-1ecc6299db9ec823/triple_accel-0.4.0/src/hamming.rs","byte_start":125818,"byte_end":125839,"line_start":354,"line_end":354,"column_start":8,"column_end":29},"name":"hamming_simd_movemask","qualname":"::hamming::hamming_simd_movemask","value":"pub fn hamming_simd_movemask(&[u8], &[u8]) -> u32","parent":null,"children":[],"decl_id":null,"docs":" Returns the hamming distance between two strings by counting mismatches using the SIMD movemask intrinsic.","sig":null,"attributes":[{"value":"/ Returns the hamming distance between two strings by counting mismatches using the SIMD movemask intrinsic.","span":{"file_name":"/Users/shelwitz/.cargo/registry/src/github.com-1ecc6299db9ec823/triple_accel-0.4.0/src/hamming.rs","byte_start":125041,"byte_end":125151,"line_start":332,"line_end":332,"column_start":1,"column_end":111}},{"value":"/","span":{"file_name":"/Users/shelwitz/.cargo/registry/src/github.com-1ecc6299db9ec823/triple_accel-0.4.0/src/hamming.rs","byte_start":125152,"byte_end":125155,"line_start":333,"line_end":333,"column_start":1,"column_end":4}},{"value":"/ The length of `a` and `b` must be the same.","span":{"file_name":"/Users/shelwitz/.cargo/registry/src/github.com-1ecc6299db9ec823/triple_accel-0.4.0/src/hamming.rs","byte_start":125156,"byte_end":125203,"line_start":334,"line_end":334,"column_start":1,"column_end":48}},{"value":"/ There are no constraints on how `a` and `b` are aligned and padded.","span":{"file_name":"/Users/shelwitz/.cargo/registry/src/github.com-1ecc6299db9ec823/triple_accel-0.4.0/src/hamming.rs","byte_start":125204,"byte_end":125275,"line_start":335,"line_end":335,"column_start":1,"column_end":72}},{"value":"/ This will automatically fall back to `hamming_naive`, if AVX2 and SSE4.1 are not supported.","span":{"file_name":"/Users/shelwitz/.cargo/registry/src/github.com-1ecc6299db9ec823/triple_accel-0.4.0/src/hamming.rs","byte_start":125276,"byte_end":125371,"line_start":336,"line_end":336,"column_start":1,"column_end":96}},{"value":"/ This should be faster than `hamming_word_64/128`, but slower than `hamming_simd_parallel`.","span":{"file_name":"/Users/shelwitz/.cargo/registry/src/github.com-1ecc6299db9ec823/triple_accel-0.4.0/src/hamming.rs","byte_start":125372,"byte_end":125466,"line_start":337,"line_end":337,"column_start":1,"column_end":95}},{"value":"/","span":{"file_name":"/Users/shelwitz/.cargo/registry/src/github.com-1ecc6299db9ec823/triple_accel-0.4.0/src/hamming.rs","byte_start":125467,"byte_end":125470,"line_start":338,"line_end":338,"column_start":1,"column_end":4}},{"value":"/ # Arguments","span":{"file_name":"/Users/shelwitz/.cargo/registry/src/github.com-1ecc6299db9ec823/triple_accel-0.4.0/src/hamming.rs","byte_start":125471,"byte_end":125486,"line_start":339,"line_end":339,"column_start":1,"column_end":16}},{"value":"/ * `a` - first string (slice)","span":{"file_name":"/Users/shelwitz/.cargo/registry/src/github.com-1ecc6299db9ec823/triple_accel-0.4.0/src/hamming.rs","byte_start":125487,"byte_end":125519,"line_start":340,"line_end":340,"column_start":1,"column_end":33}},{"value":"/ * `b` - second string (slice)","span":{"file_name":"/Users/shelwitz/.cargo/registry/src/github.com-1ecc6299db9ec823/triple_accel-0.4.0/src/hamming.rs","byte_start":125520,"byte_end":125553,"line_start":341,"line_end":341,"column_start":1,"column_end":34}},{"value":"/","span":{"file_name":"/Users/shelwitz/.cargo/registry/src/github.com-1ecc6299db9ec823/triple_accel-0.4.0/src/hamming.rs","byte_start":125554,"byte_end":125557,"line_start":342,"line_end":342,"column_start":1,"column_end":4}},{"value":"/ # Panics","span":{"file_name":"/Users/shelwitz/.cargo/registry/src/github.com-1ecc6299db9ec823/triple_accel-0.4.0/src/hamming.rs","byte_start":125558,"byte_end":125570,"line_start":343,"line_end":343,"column_start":1,"column_end":13}},{"value":"/ * If the length of `a` does not equal the length of `b`.","span":{"file_name":"/Users/shelwitz/.cargo/registry/src/github.com-1ecc6299db9ec823/triple_accel-0.4.0/src/hamming.rs","byte_start":125571,"byte_end":125631,"line_start":344,"line_end":344,"column_start":1,"column_end":61}},{"value":"/","span":{"file_name":"/Users/shelwitz/.cargo/registry/src/github.com-1ecc6299db9ec823/triple_accel-0.4.0/src/hamming.rs","byte_start":125632,"byte_end":125635,"line_start":345,"line_end":345,"column_start":1,"column_end":4}},{"value":"/ # Example","span":{"file_name":"/Users/shelwitz/.cargo/registry/src/github.com-1ecc6299db9ec823/triple_accel-0.4.0/src/hamming.rs","byte_start":125636,"byte_end":125649,"line_start":346,"line_end":346,"column_start":1,"column_end":14}},{"value":"/ ```","span":{"file_name":"/Users/shelwitz/.cargo/registry/src/github.com-1ecc6299db9ec823/triple_accel-0.4.0/src/hamming.rs","byte_start":125650,"byte_end":125657,"line_start":347,"line_end":347,"column_start":1,"column_end":8}},{"value":"/ # use triple_accel::*;","span":{"file_name":"/Users/shelwitz/.cargo/registry/src/github.com-1ecc6299db9ec823/triple_accel-0.4.0/src/hamming.rs","byte_start":125658,"byte_end":125684,"line_start":348,"line_end":348,"column_start":1,"column_end":27}},{"value":"/ # use triple_accel::hamming::*;","span":{"file_name":"/Users/shelwitz/.cargo/registry/src/github.com-1ecc6299db9ec823/triple_accel-0.4.0/src/hamming.rs","byte_start":125685,"byte_end":125720,"line_start":349,"line_end":349,"column_start":1,"column_end":36}},{"value":"/ let dist = hamming_simd_movemask(b\"abc\", b\"abd\");","span":{"file_name":"/Users/shelwitz/.cargo/registry/src/github.com-1ecc6299db9ec823/triple_accel-0.4.0/src/hamming.rs","byte_start":125721,"byte_end":125774,"line_start":350,"line_end":350,"column_start":1,"column_end":54}},{"value":"/","span":{"file_name":"/Users/shelwitz/.cargo/registry/src/github.com-1ecc6299db9ec823/triple_accel-0.4.0/src/hamming.rs","byte_start":125775,"byte_end":125778,"line_start":351,"line_end":351,"column_start":1,"column_end":4}},{"value":"/ assert!(dist == 1);","span":{"file_name":"/Users/shelwitz/.cargo/registry/src/github.com-1ecc6299db9ec823/triple_accel-0.4.0/src/hamming.rs","byte_start":125779,"byte_end":125802,"line_start":352,"line_end":352,"column_start":1,"column_end":24}},{"value":"/ ```","span":{"file_name":"/Users/shelwitz/.cargo/registry/src/github.com-1ecc6299db9ec823/triple_accel-0.4.0/src/hamming.rs","byte_start":125803,"byte_end":125810,"line_start":353,"line_end":353,"column_start":1,"column_end":8}}]},{"kind":"Function","id":{"krate":0,"index":222},"span":{"file_name":"/Users/shelwitz/.cargo/registry/src/github.com-1ecc6299db9ec823/triple_accel-0.4.0/src/hamming.rs","byte_start":126935,"byte_end":126942,"line_start":390,"line_end":390,"column_start":8,"column_end":15},"name":"hamming","qualname":"::hamming::hamming","value":"pub fn hamming(&[u8], &[u8]) -> u32","parent":null,"children":[],"decl_id":null,"docs":" Returns the hamming distance between two strings using the best method.","sig":null,"attributes":[{"value":"/ Returns the hamming distance between two strings using the best method.","span":{"file_name":"/Users/shelwitz/.cargo/registry/src/github.com-1ecc6299db9ec823/triple_accel-0.4.0/src/hamming.rs","byte_start":126350,"byte_end":126425,"line_start":369,"line_end":369,"column_start":1,"column_end":76}},{"value":"/","span":{"file_name":"/Users/shelwitz/.cargo/registry/src/github.com-1ecc6299db9ec823/triple_accel-0.4.0/src/hamming.rs","byte_start":126426,"byte_end":126429,"line_start":370,"line_end":370,"column_start":1,"column_end":4}},{"value":"/ The length of `a` and `b` must be the same.","span":{"file_name":"/Users/shelwitz/.cargo/registry/src/github.com-1ecc6299db9ec823/triple_accel-0.4.0/src/hamming.rs","byte_start":126430,"byte_end":126477,"line_start":371,"line_end":371,"column_start":1,"column_end":48}},{"value":"/ This will automatically fall back to a scalar alternative if AVX2 and","span":{"file_name":"/Users/shelwitz/.cargo/registry/src/github.com-1ecc6299db9ec823/triple_accel-0.4.0/src/hamming.rs","byte_start":126478,"byte_end":126551,"line_start":372,"line_end":372,"column_start":1,"column_end":74}},{"value":"/ SSE4.1 are not supported.","span":{"file_name":"/Users/shelwitz/.cargo/registry/src/github.com-1ecc6299db9ec823/triple_accel-0.4.0/src/hamming.rs","byte_start":126552,"byte_end":126581,"line_start":373,"line_end":373,"column_start":1,"column_end":30}},{"value":"/ Internally, this calls `hamming_simd_parallel`.","span":{"file_name":"/Users/shelwitz/.cargo/registry/src/github.com-1ecc6299db9ec823/triple_accel-0.4.0/src/hamming.rs","byte_start":126582,"byte_end":126633,"line_start":374,"line_end":374,"column_start":1,"column_end":52}},{"value":"/","span":{"file_name":"/Users/shelwitz/.cargo/registry/src/github.com-1ecc6299db9ec823/triple_accel-0.4.0/src/hamming.rs","byte_start":126634,"byte_end":126637,"line_start":375,"line_end":375,"column_start":1,"column_end":4}},{"value":"/ # Arguments","span":{"file_name":"/Users/shelwitz/.cargo/registry/src/github.com-1ecc6299db9ec823/triple_accel-0.4.0/src/hamming.rs","byte_start":126638,"byte_end":126653,"line_start":376,"line_end":376,"column_start":1,"column_end":16}},{"value":"/ * `a` - first string (slice)","span":{"file_name":"/Users/shelwitz/.cargo/registry/src/github.com-1ecc6299db9ec823/triple_accel-0.4.0/src/hamming.rs","byte_start":126654,"byte_end":126686,"line_start":377,"line_end":377,"column_start":1,"column_end":33}},{"value":"/ * `b` - second string (slice)","span":{"file_name":"/Users/shelwitz/.cargo/registry/src/github.com-1ecc6299db9ec823/triple_accel-0.4.0/src/hamming.rs","byte_start":126687,"byte_end":126720,"line_start":378,"line_end":378,"column_start":1,"column_end":34}},{"value":"/","span":{"file_name":"/Users/shelwitz/.cargo/registry/src/github.com-1ecc6299db9ec823/triple_accel-0.4.0/src/hamming.rs","byte_start":126721,"byte_end":126724,"line_start":379,"line_end":379,"column_start":1,"column_end":4}},{"value":"/ # Panics","span":{"file_name":"/Users/shelwitz/.cargo/registry/src/github.com-1ecc6299db9ec823/triple_accel-0.4.0/src/hamming.rs","byte_start":126725,"byte_end":126737,"line_start":380,"line_end":380,"column_start":1,"column_end":13}},{"value":"/ * If the length of `a` does not equal the length of `b`.","span":{"file_name":"/Users/shelwitz/.cargo/registry/src/github.com-1ecc6299db9ec823/triple_accel-0.4.0/src/hamming.rs","byte_start":126738,"byte_end":126798,"line_start":381,"line_end":381,"column_start":1,"column_end":61}},{"value":"/","span":{"file_name":"/Users/shelwitz/.cargo/registry/src/github.com-1ecc6299db9ec823/triple_accel-0.4.0/src/hamming.rs","byte_start":126799,"byte_end":126802,"line_start":382,"line_end":382,"column_start":1,"column_end":4}},{"value":"/ # Example","span":{"file_name":"/Users/shelwitz/.cargo/registry/src/github.com-1ecc6299db9ec823/triple_accel-0.4.0/src/hamming.rs","byte_start":126803,"byte_end":126816,"line_start":383,"line_end":383,"column_start":1,"column_end":14}},{"value":"/ ```","span":{"file_name":"/Users/shelwitz/.cargo/registry/src/github.com-1ecc6299db9ec823/triple_accel-0.4.0/src/hamming.rs","byte_start":126817,"byte_end":126824,"line_start":384,"line_end":384,"column_start":1,"column_end":8}},{"value":"/ # use triple_accel::*;","span":{"file_name":"/Users/shelwitz/.cargo/registry/src/github.com-1ecc6299db9ec823/triple_accel-0.4.0/src/hamming.rs","byte_start":126825,"byte_end":126851,"line_start":385,"line_end":385,"column_start":1,"column_end":27}},{"value":"/ let dist = hamming(b\"abc\", b\"abd\");","span":{"file_name":"/Users/shelwitz/.cargo/registry/src/github.com-1ecc6299db9ec823/triple_accel-0.4.0/src/hamming.rs","byte_start":126852,"byte_end":126891,"line_start":386,"line_end":386,"column_start":1,"column_end":40}},{"value":"/","span":{"file_name":"/Users/shelwitz/.cargo/registry/src/github.com-1ecc6299db9ec823/triple_accel-0.4.0/src/hamming.rs","byte_start":126892,"byte_end":126895,"line_start":387,"line_end":387,"column_start":1,"column_end":4}},{"value":"/ assert!(dist == 1);","span":{"file_name":"/Users/shelwitz/.cargo/registry/src/github.com-1ecc6299db9ec823/triple_accel-0.4.0/src/hamming.rs","byte_start":126896,"byte_end":126919,"line_start":388,"line_end":388,"column_start":1,"column_end":24}},{"value":"/ ```","span":{"file_name":"/Users/shelwitz/.cargo/registry/src/github.com-1ecc6299db9ec823/triple_accel-0.4.0/src/hamming.rs","byte_start":126920,"byte_end":126927,"line_start":389,"line_end":389,"column_start":1,"column_end":8}}]},{"kind":"Function","id":{"krate":0,"index":223},"span":{"file_name":"/Users/shelwitz/.cargo/registry/src/github.com-1ecc6299db9ec823/triple_accel-0.4.0/src/hamming.rs","byte_start":128123,"byte_end":128142,"line_start":422,"line_end":422,"column_start":8,"column_end":27},"name":"hamming_search_simd","qualname":"::hamming::hamming_search_simd","value":"pub fn hamming_search_simd<'a>(&'a [u8], &'a [u8])\n-> Box<dyn Iterator<Item = Match> + 'a>","parent":null,"children":[],"decl_id":null,"docs":" Returns an iterator over best `Match`s by searching through the text `haystack`\n for the pattern `needle` using SIMD.","sig":null,"attributes":[{"value":"/ Returns an iterator over best `Match`s by searching through the text `haystack`","span":{"file_name":"/Users/shelwitz/.cargo/registry/src/github.com-1ecc6299db9ec823/triple_accel-0.4.0/src/hamming.rs","byte_start":127007,"byte_end":127090,"line_start":394,"line_end":394,"column_start":1,"column_end":84}},{"value":"/ for the pattern `needle` using SIMD.","span":{"file_name":"/Users/shelwitz/.cargo/registry/src/github.com-1ecc6299db9ec823/triple_accel-0.4.0/src/hamming.rs","byte_start":127091,"byte_end":127131,"line_start":395,"line_end":395,"column_start":1,"column_end":41}},{"value":"/","span":{"file_name":"/Users/shelwitz/.cargo/registry/src/github.com-1ecc6299db9ec823/triple_accel-0.4.0/src/hamming.rs","byte_start":127132,"byte_end":127135,"line_start":396,"line_end":396,"column_start":1,"column_end":4}},{"value":"/ This is done by counting mismatches at every position in `haystack`.","span":{"file_name":"/Users/shelwitz/.cargo/registry/src/github.com-1ecc6299db9ec823/triple_accel-0.4.0/src/hamming.rs","byte_start":127136,"byte_end":127208,"line_start":397,"line_end":397,"column_start":1,"column_end":73}},{"value":"/ This will automatically fall back to `hamming_search_naive_with_opts` if AVX2 and SSE4.1","span":{"file_name":"/Users/shelwitz/.cargo/registry/src/github.com-1ecc6299db9ec823/triple_accel-0.4.0/src/hamming.rs","byte_start":127209,"byte_end":127301,"line_start":398,"line_end":398,"column_start":1,"column_end":93}},{"value":"/ are not supported.","span":{"file_name":"/Users/shelwitz/.cargo/registry/src/github.com-1ecc6299db9ec823/triple_accel-0.4.0/src/hamming.rs","byte_start":127302,"byte_end":127324,"line_start":399,"line_end":399,"column_start":1,"column_end":23}},{"value":"/ Null bytes/characters are not supported.","span":{"file_name":"/Users/shelwitz/.cargo/registry/src/github.com-1ecc6299db9ec823/triple_accel-0.4.0/src/hamming.rs","byte_start":127325,"byte_end":127369,"line_start":400,"line_end":400,"column_start":1,"column_end":45}},{"value":"/ The length of `needle` must be less than or equal to the length of `haystack`.","span":{"file_name":"/Users/shelwitz/.cargo/registry/src/github.com-1ecc6299db9ec823/triple_accel-0.4.0/src/hamming.rs","byte_start":127370,"byte_end":127452,"line_start":401,"line_end":401,"column_start":1,"column_end":83}},{"value":"/ Each returned `Match` requires at least half or more bytes of the `needle` to match","span":{"file_name":"/Users/shelwitz/.cargo/registry/src/github.com-1ecc6299db9ec823/triple_accel-0.4.0/src/hamming.rs","byte_start":127453,"byte_end":127540,"line_start":402,"line_end":402,"column_start":1,"column_end":88}},{"value":"/ somwhere in the `haystack`.","span":{"file_name":"/Users/shelwitz/.cargo/registry/src/github.com-1ecc6299db9ec823/triple_accel-0.4.0/src/hamming.rs","byte_start":127541,"byte_end":127572,"line_start":403,"line_end":403,"column_start":1,"column_end":32}},{"value":"/ Only the matches with the lowest Hamming distance are returned.","span":{"file_name":"/Users/shelwitz/.cargo/registry/src/github.com-1ecc6299db9ec823/triple_accel-0.4.0/src/hamming.rs","byte_start":127573,"byte_end":127640,"line_start":404,"line_end":404,"column_start":1,"column_end":68}},{"value":"/ This should be faster than `hamming_search_naive`.","span":{"file_name":"/Users/shelwitz/.cargo/registry/src/github.com-1ecc6299db9ec823/triple_accel-0.4.0/src/hamming.rs","byte_start":127641,"byte_end":127695,"line_start":405,"line_end":405,"column_start":1,"column_end":55}},{"value":"/","span":{"file_name":"/Users/shelwitz/.cargo/registry/src/github.com-1ecc6299db9ec823/triple_accel-0.4.0/src/hamming.rs","byte_start":127696,"byte_end":127699,"line_start":406,"line_end":406,"column_start":1,"column_end":4}},{"value":"/ # Arguments","span":{"file_name":"/Users/shelwitz/.cargo/registry/src/github.com-1ecc6299db9ec823/triple_accel-0.4.0/src/hamming.rs","byte_start":127700,"byte_end":127715,"line_start":407,"line_end":407,"column_start":1,"column_end":16}},{"value":"/ * `needle` - pattern string (slice)","span":{"file_name":"/Users/shelwitz/.cargo/registry/src/github.com-1ecc6299db9ec823/triple_accel-0.4.0/src/hamming.rs","byte_start":127716,"byte_end":127755,"line_start":408,"line_end":408,"column_start":1,"column_end":40}},{"value":"/ * `haystack` - text string (slice)","span":{"file_name":"/Users/shelwitz/.cargo/registry/src/github.com-1ecc6299db9ec823/triple_accel-0.4.0/src/hamming.rs","byte_start":127756,"byte_end":127794,"line_start":409,"line_end":409,"column_start":1,"column_end":39}},{"value":"/","span":{"file_name":"/Users/shelwitz/.cargo/registry/src/github.com-1ecc6299db9ec823/triple_accel-0.4.0/src/hamming.rs","byte_start":127795,"byte_end":127798,"line_start":410,"line_end":410,"column_start":1,"column_end":4}},{"value":"/ # Panics","span":{"file_name":"/Users/shelwitz/.cargo/registry/src/github.com-1ecc6299db9ec823/triple_accel-0.4.0/src/hamming.rs","byte_start":127799,"byte_end":127811,"line_start":411,"line_end":411,"column_start":1,"column_end":13}},{"value":"/ * When there are zero/null bytes in the `haystack` string.","span":{"file_name":"/Users/shelwitz/.cargo/registry/src/github.com-1ecc6299db9ec823/triple_accel-0.4.0/src/hamming.rs","byte_start":127812,"byte_end":127874,"line_start":412,"line_end":412,"column_start":1,"column_end":63}},{"value":"/","span":{"file_name":"/Users/shelwitz/.cargo/registry/src/github.com-1ecc6299db9ec823/triple_accel-0.4.0/src/hamming.rs","byte_start":127875,"byte_end":127878,"line_start":413,"line_end":413,"column_start":1,"column_end":4}},{"value":"/ # Example","span":{"file_name":"/Users/shelwitz/.cargo/registry/src/github.com-1ecc6299db9ec823/triple_accel-0.4.0/src/hamming.rs","byte_start":127879,"byte_end":127892,"line_start":414,"line_end":414,"column_start":1,"column_end":14}},{"value":"/ ```","span":{"file_name":"/Users/shelwitz/.cargo/registry/src/github.com-1ecc6299db9ec823/triple_accel-0.4.0/src/hamming.rs","byte_start":127893,"byte_end":127900,"line_start":415,"line_end":415,"column_start":1,"column_end":8}},{"value":"/ # use triple_accel::*;","span":{"file_name":"/Users/shelwitz/.cargo/registry/src/github.com-1ecc6299db9ec823/triple_accel-0.4.0/src/hamming.rs","byte_start":127901,"byte_end":127927,"line_start":416,"line_end":416,"column_start":1,"column_end":27}},{"value":"/ # use triple_accel::hamming::*;","span":{"file_name":"/Users/shelwitz/.cargo/registry/src/github.com-1ecc6299db9ec823/triple_accel-0.4.0/src/hamming.rs","byte_start":127928,"byte_end":127963,"line_start":417,"line_end":417,"column_start":1,"column_end":36}},{"value":"/ let matches: Vec<Match> = hamming_search_simd(b\"abc\", b\"  abd\").collect();","span":{"file_name":"/Users/shelwitz/.cargo/registry/src/github.com-1ecc6299db9ec823/triple_accel-0.4.0/src/hamming.rs","byte_start":127964,"byte_end":128042,"line_start":418,"line_end":418,"column_start":1,"column_end":79}},{"value":"/","span":{"file_name":"/Users/shelwitz/.cargo/registry/src/github.com-1ecc6299db9ec823/triple_accel-0.4.0/src/hamming.rs","byte_start":128043,"byte_end":128046,"line_start":419,"line_end":419,"column_start":1,"column_end":4}},{"value":"/ assert!(matches == vec![Match{start: 2, end: 5, k: 1}]);","span":{"file_name":"/Users/shelwitz/.cargo/registry/src/github.com-1ecc6299db9ec823/triple_accel-0.4.0/src/hamming.rs","byte_start":128047,"byte_end":128107,"line_start":420,"line_end":420,"column_start":1,"column_end":61}},{"value":"/ ```","span":{"file_name":"/Users/shelwitz/.cargo/registry/src/github.com-1ecc6299db9ec823/triple_accel-0.4.0/src/hamming.rs","byte_start":128108,"byte_end":128115,"line_start":421,"line_end":421,"column_start":1,"column_end":8}}]},{"kind":"Function","id":{"krate":0,"index":225},"span":{"file_name":"/Users/shelwitz/.cargo/registry/src/github.com-1ecc6299db9ec823/triple_accel-0.4.0/src/hamming.rs","byte_start":129512,"byte_end":129541,"line_start":454,"line_end":454,"column_start":8,"column_end":37},"name":"hamming_search_simd_with_opts","qualname":"::hamming::hamming_search_simd_with_opts","value":"pub fn hamming_search_simd_with_opts<'a>(&'a [u8], &'a [u8], u32, SearchType)\n-> Box<dyn Iterator<Item = Match> + 'a>","parent":null,"children":[],"decl_id":null,"docs":" Returns an iterator over `Match`s by searching through the text `haystack` for the\n pattern `needle` using SIMD, with extra options.","sig":null,"attributes":[{"value":"/ Returns an iterator over `Match`s by searching through the text `haystack` for the","span":{"file_name":"/Users/shelwitz/.cargo/registry/src/github.com-1ecc6299db9ec823/triple_accel-0.4.0/src/hamming.rs","byte_start":128360,"byte_end":128446,"line_start":426,"line_end":426,"column_start":1,"column_end":87}},{"value":"/ pattern `needle` using SIMD, with extra options.","span":{"file_name":"/Users/shelwitz/.cargo/registry/src/github.com-1ecc6299db9ec823/triple_accel-0.4.0/src/hamming.rs","byte_start":128447,"byte_end":128499,"line_start":427,"line_end":427,"column_start":1,"column_end":53}},{"value":"/","span":{"file_name":"/Users/shelwitz/.cargo/registry/src/github.com-1ecc6299db9ec823/triple_accel-0.4.0/src/hamming.rs","byte_start":128500,"byte_end":128503,"line_start":428,"line_end":428,"column_start":1,"column_end":4}},{"value":"/ This is done by using SIMD to count mismatches at every position in `haystack`.","span":{"file_name":"/Users/shelwitz/.cargo/registry/src/github.com-1ecc6299db9ec823/triple_accel-0.4.0/src/hamming.rs","byte_start":128504,"byte_end":128587,"line_start":429,"line_end":429,"column_start":1,"column_end":84}},{"value":"/ This will automatically fall back to `hamming_search_naive_with_opts` if AVX2 and SSE4.1","span":{"file_name":"/Users/shelwitz/.cargo/registry/src/github.com-1ecc6299db9ec823/triple_accel-0.4.0/src/hamming.rs","byte_start":128588,"byte_end":128680,"line_start":430,"line_end":430,"column_start":1,"column_end":93}},{"value":"/ are not supported.","span":{"file_name":"/Users/shelwitz/.cargo/registry/src/github.com-1ecc6299db9ec823/triple_accel-0.4.0/src/hamming.rs","byte_start":128681,"byte_end":128703,"line_start":431,"line_end":431,"column_start":1,"column_end":23}},{"value":"/ Null bytes/characters are not supported.","span":{"file_name":"/Users/shelwitz/.cargo/registry/src/github.com-1ecc6299db9ec823/triple_accel-0.4.0/src/hamming.rs","byte_start":128704,"byte_end":128748,"line_start":432,"line_end":432,"column_start":1,"column_end":45}},{"value":"/ The length of `needle` must be less than or equal to the length of `haystack`.","span":{"file_name":"/Users/shelwitz/.cargo/registry/src/github.com-1ecc6299db9ec823/triple_accel-0.4.0/src/hamming.rs","byte_start":128749,"byte_end":128831,"line_start":433,"line_end":433,"column_start":1,"column_end":83}},{"value":"/ This should be faster than `hamming_search_naive_with_opts`.","span":{"file_name":"/Users/shelwitz/.cargo/registry/src/github.com-1ecc6299db9ec823/triple_accel-0.4.0/src/hamming.rs","byte_start":128832,"byte_end":128896,"line_start":434,"line_end":434,"column_start":1,"column_end":65}},{"value":"/","span":{"file_name":"/Users/shelwitz/.cargo/registry/src/github.com-1ecc6299db9ec823/triple_accel-0.4.0/src/hamming.rs","byte_start":128897,"byte_end":128900,"line_start":435,"line_end":435,"column_start":1,"column_end":4}},{"value":"/ # Arguments","span":{"file_name":"/Users/shelwitz/.cargo/registry/src/github.com-1ecc6299db9ec823/triple_accel-0.4.0/src/hamming.rs","byte_start":128901,"byte_end":128916,"line_start":436,"line_end":436,"column_start":1,"column_end":16}},{"value":"/ * `needle` - pattern string (slice)","span":{"file_name":"/Users/shelwitz/.cargo/registry/src/github.com-1ecc6299db9ec823/triple_accel-0.4.0/src/hamming.rs","byte_start":128917,"byte_end":128956,"line_start":437,"line_end":437,"column_start":1,"column_end":40}},{"value":"/ * `haystack` - text string (slice)","span":{"file_name":"/Users/shelwitz/.cargo/registry/src/github.com-1ecc6299db9ec823/triple_accel-0.4.0/src/hamming.rs","byte_start":128957,"byte_end":128995,"line_start":438,"line_end":438,"column_start":1,"column_end":39}},{"value":"/ * `k` - number of mismatches allowed","span":{"file_name":"/Users/shelwitz/.cargo/registry/src/github.com-1ecc6299db9ec823/triple_accel-0.4.0/src/hamming.rs","byte_start":128996,"byte_end":129036,"line_start":439,"line_end":439,"column_start":1,"column_end":41}},{"value":"/ * `search_type` - whether to only return the \"best\" matches with the lowest Hamming distance, or","span":{"file_name":"/Users/shelwitz/.cargo/registry/src/github.com-1ecc6299db9ec823/triple_accel-0.4.0/src/hamming.rs","byte_start":129037,"byte_end":129137,"line_start":440,"line_end":440,"column_start":1,"column_end":101}},{"value":"/ all matches","span":{"file_name":"/Users/shelwitz/.cargo/registry/src/github.com-1ecc6299db9ec823/triple_accel-0.4.0/src/hamming.rs","byte_start":129138,"byte_end":129153,"line_start":441,"line_end":441,"column_start":1,"column_end":16}},{"value":"/","span":{"file_name":"/Users/shelwitz/.cargo/registry/src/github.com-1ecc6299db9ec823/triple_accel-0.4.0/src/hamming.rs","byte_start":129154,"byte_end":129157,"line_start":442,"line_end":442,"column_start":1,"column_end":4}},{"value":"/ # Panics","span":{"file_name":"/Users/shelwitz/.cargo/registry/src/github.com-1ecc6299db9ec823/triple_accel-0.4.0/src/hamming.rs","byte_start":129158,"byte_end":129170,"line_start":443,"line_end":443,"column_start":1,"column_end":13}},{"value":"/ * When there are zero/null bytes in the `haystack` string.","span":{"file_name":"/Users/shelwitz/.cargo/registry/src/github.com-1ecc6299db9ec823/triple_accel-0.4.0/src/hamming.rs","byte_start":129171,"byte_end":129233,"line_start":444,"line_end":444,"column_start":1,"column_end":63}},{"value":"/","span":{"file_name":"/Users/shelwitz/.cargo/registry/src/github.com-1ecc6299db9ec823/triple_accel-0.4.0/src/hamming.rs","byte_start":129234,"byte_end":129237,"line_start":445,"line_end":445,"column_start":1,"column_end":4}},{"value":"/ # Example","span":{"file_name":"/Users/shelwitz/.cargo/registry/src/github.com-1ecc6299db9ec823/triple_accel-0.4.0/src/hamming.rs","byte_start":129238,"byte_end":129251,"line_start":446,"line_end":446,"column_start":1,"column_end":14}},{"value":"/ ```","span":{"file_name":"/Users/shelwitz/.cargo/registry/src/github.com-1ecc6299db9ec823/triple_accel-0.4.0/src/hamming.rs","byte_start":129252,"byte_end":129259,"line_start":447,"line_end":447,"column_start":1,"column_end":8}},{"value":"/ # use triple_accel::*;","span":{"file_name":"/Users/shelwitz/.cargo/registry/src/github.com-1ecc6299db9ec823/triple_accel-0.4.0/src/hamming.rs","byte_start":129260,"byte_end":129286,"line_start":448,"line_end":448,"column_start":1,"column_end":27}},{"value":"/ # use triple_accel::hamming::*;","span":{"file_name":"/Users/shelwitz/.cargo/registry/src/github.com-1ecc6299db9ec823/triple_accel-0.4.0/src/hamming.rs","byte_start":129287,"byte_end":129322,"line_start":449,"line_end":449,"column_start":1,"column_end":36}},{"value":"/ let matches: Vec<Match> = hamming_search_simd_with_opts(b\"abc\", b\"  abd\", 1, SearchType::All).collect();","span":{"file_name":"/Users/shelwitz/.cargo/registry/src/github.com-1ecc6299db9ec823/triple_accel-0.4.0/src/hamming.rs","byte_start":129323,"byte_end":129431,"line_start":450,"line_end":450,"column_start":1,"column_end":109}},{"value":"/","span":{"file_name":"/Users/shelwitz/.cargo/registry/src/github.com-1ecc6299db9ec823/triple_accel-0.4.0/src/hamming.rs","byte_start":129432,"byte_end":129435,"line_start":451,"line_end":451,"column_start":1,"column_end":4}},{"value":"/ assert!(matches == vec![Match{start: 2, end: 5, k: 1}]);","span":{"file_name":"/Users/shelwitz/.cargo/registry/src/github.com-1ecc6299db9ec823/triple_accel-0.4.0/src/hamming.rs","byte_start":129436,"byte_end":129496,"line_start":452,"line_end":452,"column_start":1,"column_end":61}},{"value":"/ ```","span":{"file_name":"/Users/shelwitz/.cargo/registry/src/github.com-1ecc6299db9ec823/triple_accel-0.4.0/src/hamming.rs","byte_start":129497,"byte_end":129504,"line_start":453,"line_end":453,"column_start":1,"column_end":8}}]},{"kind":"Function","id":{"krate":0,"index":228},"span":{"file_name":"/Users/shelwitz/.cargo/registry/src/github.com-1ecc6299db9ec823/triple_accel-0.4.0/src/hamming.rs","byte_start":134788,"byte_end":134802,"line_start":588,"line_end":588,"column_start":8,"column_end":22},"name":"hamming_search","qualname":"::hamming::hamming_search","value":"pub fn hamming_search<'a>(&'a [u8], &'a [u8])\n-> Box<dyn Iterator<Item = Match> + 'a>","parent":null,"children":[],"decl_id":null,"docs":" Returns an iterator over best `Match`s by searching through the text `haystack`\n for the pattern `needle` using SIMD.","sig":null,"attributes":[{"value":"/ Returns an iterator over best `Match`s by searching through the text `haystack`","span":{"file_name":"/Users/shelwitz/.cargo/registry/src/github.com-1ecc6299db9ec823/triple_accel-0.4.0/src/hamming.rs","byte_start":133802,"byte_end":133885,"line_start":562,"line_end":562,"column_start":1,"column_end":84}},{"value":"/ for the pattern `needle` using SIMD.","span":{"file_name":"/Users/shelwitz/.cargo/registry/src/github.com-1ecc6299db9ec823/triple_accel-0.4.0/src/hamming.rs","byte_start":133886,"byte_end":133926,"line_start":563,"line_end":563,"column_start":1,"column_end":41}},{"value":"/","span":{"file_name":"/Users/shelwitz/.cargo/registry/src/github.com-1ecc6299db9ec823/triple_accel-0.4.0/src/hamming.rs","byte_start":133927,"byte_end":133930,"line_start":564,"line_end":564,"column_start":1,"column_end":4}},{"value":"/ This will automatically fall back to a scalar alternative if AVX2 and SSE4.1","span":{"file_name":"/Users/shelwitz/.cargo/registry/src/github.com-1ecc6299db9ec823/triple_accel-0.4.0/src/hamming.rs","byte_start":133931,"byte_end":134011,"line_start":565,"line_end":565,"column_start":1,"column_end":81}},{"value":"/ are not supported.","span":{"file_name":"/Users/shelwitz/.cargo/registry/src/github.com-1ecc6299db9ec823/triple_accel-0.4.0/src/hamming.rs","byte_start":134012,"byte_end":134034,"line_start":566,"line_end":566,"column_start":1,"column_end":23}},{"value":"/ Null bytes/characters are not supported.","span":{"file_name":"/Users/shelwitz/.cargo/registry/src/github.com-1ecc6299db9ec823/triple_accel-0.4.0/src/hamming.rs","byte_start":134035,"byte_end":134079,"line_start":567,"line_end":567,"column_start":1,"column_end":45}},{"value":"/ The length of `needle` must be less than or equal to the length of `haystack`.","span":{"file_name":"/Users/shelwitz/.cargo/registry/src/github.com-1ecc6299db9ec823/triple_accel-0.4.0/src/hamming.rs","byte_start":134080,"byte_end":134162,"line_start":568,"line_end":568,"column_start":1,"column_end":83}},{"value":"/ Each returned `Match` requires at least half or more bytes of the `needle` to match","span":{"file_name":"/Users/shelwitz/.cargo/registry/src/github.com-1ecc6299db9ec823/triple_accel-0.4.0/src/hamming.rs","byte_start":134163,"byte_end":134250,"line_start":569,"line_end":569,"column_start":1,"column_end":88}},{"value":"/ somewhere in the `haystack`.","span":{"file_name":"/Users/shelwitz/.cargo/registry/src/github.com-1ecc6299db9ec823/triple_accel-0.4.0/src/hamming.rs","byte_start":134251,"byte_end":134283,"line_start":570,"line_end":570,"column_start":1,"column_end":33}},{"value":"/ Only the matches with the lowest Hamming distance are returned.","span":{"file_name":"/Users/shelwitz/.cargo/registry/src/github.com-1ecc6299db9ec823/triple_accel-0.4.0/src/hamming.rs","byte_start":134284,"byte_end":134351,"line_start":571,"line_end":571,"column_start":1,"column_end":68}},{"value":"/ Internally, this calls `hamming_search_simd`.","span":{"file_name":"/Users/shelwitz/.cargo/registry/src/github.com-1ecc6299db9ec823/triple_accel-0.4.0/src/hamming.rs","byte_start":134352,"byte_end":134401,"line_start":572,"line_end":572,"column_start":1,"column_end":50}},{"value":"/","span":{"file_name":"/Users/shelwitz/.cargo/registry/src/github.com-1ecc6299db9ec823/triple_accel-0.4.0/src/hamming.rs","byte_start":134402,"byte_end":134405,"line_start":573,"line_end":573,"column_start":1,"column_end":4}},{"value":"/ # Arguments","span":{"file_name":"/Users/shelwitz/.cargo/registry/src/github.com-1ecc6299db9ec823/triple_accel-0.4.0/src/hamming.rs","byte_start":134406,"byte_end":134421,"line_start":574,"line_end":574,"column_start":1,"column_end":16}},{"value":"/ * `needle` - pattern string (slice)","span":{"file_name":"/Users/shelwitz/.cargo/registry/src/github.com-1ecc6299db9ec823/triple_accel-0.4.0/src/hamming.rs","byte_start":134422,"byte_end":134461,"line_start":575,"line_end":575,"column_start":1,"column_end":40}},{"value":"/ * `haystack` - text string (slice)","span":{"file_name":"/Users/shelwitz/.cargo/registry/src/github.com-1ecc6299db9ec823/triple_accel-0.4.0/src/hamming.rs","byte_start":134462,"byte_end":134500,"line_start":576,"line_end":576,"column_start":1,"column_end":39}},{"value":"/","span":{"file_name":"/Users/shelwitz/.cargo/registry/src/github.com-1ecc6299db9ec823/triple_accel-0.4.0/src/hamming.rs","byte_start":134501,"byte_end":134504,"line_start":577,"line_end":577,"column_start":1,"column_end":4}},{"value":"/ # Panics","span":{"file_name":"/Users/shelwitz/.cargo/registry/src/github.com-1ecc6299db9ec823/triple_accel-0.4.0/src/hamming.rs","byte_start":134505,"byte_end":134517,"line_start":578,"line_end":578,"column_start":1,"column_end":13}},{"value":"/ * When there are zero/null bytes in the `haystack` string.","span":{"file_name":"/Users/shelwitz/.cargo/registry/src/github.com-1ecc6299db9ec823/triple_accel-0.4.0/src/hamming.rs","byte_start":134518,"byte_end":134580,"line_start":579,"line_end":579,"column_start":1,"column_end":63}},{"value":"/","span":{"file_name":"/Users/shelwitz/.cargo/registry/src/github.com-1ecc6299db9ec823/triple_accel-0.4.0/src/hamming.rs","byte_start":134581,"byte_end":134584,"line_start":580,"line_end":580,"column_start":1,"column_end":4}},{"value":"/ # Example","span":{"file_name":"/Users/shelwitz/.cargo/registry/src/github.com-1ecc6299db9ec823/triple_accel-0.4.0/src/hamming.rs","byte_start":134585,"byte_end":134598,"line_start":581,"line_end":581,"column_start":1,"column_end":14}},{"value":"/ ```","span":{"file_name":"/Users/shelwitz/.cargo/registry/src/github.com-1ecc6299db9ec823/triple_accel-0.4.0/src/hamming.rs","byte_start":134599,"byte_end":134606,"line_start":582,"line_end":582,"column_start":1,"column_end":8}},{"value":"/ # use triple_accel::*;","span":{"file_name":"/Users/shelwitz/.cargo/registry/src/github.com-1ecc6299db9ec823/triple_accel-0.4.0/src/hamming.rs","byte_start":134607,"byte_end":134633,"line_start":583,"line_end":583,"column_start":1,"column_end":27}},{"value":"/ let matches: Vec<Match> = hamming_search(b\"abc\", b\"  abd\").collect();","span":{"file_name":"/Users/shelwitz/.cargo/registry/src/github.com-1ecc6299db9ec823/triple_accel-0.4.0/src/hamming.rs","byte_start":134634,"byte_end":134707,"line_start":584,"line_end":584,"column_start":1,"column_end":74}},{"value":"/","span":{"file_name":"/Users/shelwitz/.cargo/registry/src/github.com-1ecc6299db9ec823/triple_accel-0.4.0/src/hamming.rs","byte_start":134708,"byte_end":134711,"line_start":585,"line_end":585,"column_start":1,"column_end":4}},{"value":"/ assert!(matches == vec![Match{start: 2, end: 5, k: 1}]);","span":{"file_name":"/Users/shelwitz/.cargo/registry/src/github.com-1ecc6299db9ec823/triple_accel-0.4.0/src/hamming.rs","byte_start":134712,"byte_end":134772,"line_start":586,"line_end":586,"column_start":1,"column_end":61}},{"value":"/ ```","span":{"file_name":"/Users/shelwitz/.cargo/registry/src/github.com-1ecc6299db9ec823/triple_accel-0.4.0/src/hamming.rs","byte_start":134773,"byte_end":134780,"line_start":587,"line_end":587,"column_start":1,"column_end":8}}]},{"kind":"Mod","id":{"krate":0,"index":230},"span":{"file_name":"/Users/shelwitz/.cargo/registry/src/github.com-1ecc6299db9ec823/triple_accel-0.4.0/src/levenshtein.rs","byte_start":0,"byte_end":0,"line_start":1,"line_end":1,"column_start":1,"column_end":1},"name":"levenshtein","qualname":"::levenshtein","value":"/Users/shelwitz/.cargo/registry/src/github.com-1ecc6299db9ec823/triple_accel-0.4.0/src/levenshtein.rs","parent":null,"children":[{"krate":0,"index":231},{"krate":0,"index":232},{"krate":0,"index":233},{"krate":0,"index":805},{"krate":0,"index":810},{"krate":0,"index":811},{"krate":0,"index":813},{"krate":0,"index":234},{"krate":0,"index":237},{"krate":0,"index":238},{"krate":0,"index":239},{"krate":0,"index":241},{"krate":0,"index":242},{"krate":0,"index":244},{"krate":0,"index":245},{"krate":0,"index":247},{"krate":0,"index":250},{"krate":0,"index":251},{"krate":0,"index":252},{"krate":0,"index":815},{"krate":0,"index":816},{"krate":0,"index":817},{"krate":0,"index":818},{"krate":0,"index":819},{"krate":0,"index":820},{"krate":0,"index":821},{"krate":0,"index":822},{"krate":0,"index":823},{"krate":0,"index":824},{"krate":0,"index":825},{"krate":0,"index":826},{"krate":0,"index":827},{"krate":0,"index":828},{"krate":0,"index":829},{"krate":0,"index":830},{"krate":0,"index":831},{"krate":0,"index":832},{"krate":0,"index":833},{"krate":0,"index":834},{"krate":0,"index":835},{"krate":0,"index":836},{"krate":0,"index":837},{"krate":0,"index":838},{"krate":0,"index":839},{"krate":0,"index":840},{"krate":0,"index":254},{"krate":0,"index":255},{"krate":0,"index":256},{"krate":0,"index":257},{"krate":0,"index":258},{"krate":0,"index":260},{"krate":0,"index":266},{"krate":0,"index":268},{"krate":0,"index":841},{"krate":0,"index":846},{"krate":0,"index":851},{"krate":0,"index":856},{"krate":0,"index":861},{"krate":0,"index":866},{"krate":0,"index":871},{"krate":0,"index":876},{"krate":0,"index":881},{"krate":0,"index":886},{"krate":0,"index":891},{"krate":0,"index":896},{"krate":0,"index":901},{"krate":0,"index":272}],"decl_id":null,"docs":" This module provides many Levenshtein distance routines.","sig":null,"attributes":[{"value":"/ This module provides many Levenshtein distance routines.","span":{"file_name":"/Users/shelwitz/.cargo/registry/src/github.com-1ecc6299db9ec823/triple_accel-0.4.0/src/levenshtein.rs","byte_start":134933,"byte_end":134993,"line_start":1,"line_end":1,"column_start":1,"column_end":61}},{"value":"/","span":{"file_name":"/Users/shelwitz/.cargo/registry/src/github.com-1ecc6299db9ec823/triple_accel-0.4.0/src/levenshtein.rs","byte_start":134994,"byte_end":134997,"line_start":2,"line_end":2,"column_start":1,"column_end":4}},{"value":"/ These distance functions share the same efficient underlying SIMD-accelerated implementation:","span":{"file_name":"/Users/shelwitz/.cargo/registry/src/github.com-1ecc6299db9ec823/triple_accel-0.4.0/src/levenshtein.rs","byte_start":134998,"byte_end":135095,"line_start":3,"line_end":3,"column_start":1,"column_end":98}},{"value":"/ * `levenshtein_exp` for low number of edits, otherwise `levenshtein`","span":{"file_name":"/Users/shelwitz/.cargo/registry/src/github.com-1ecc6299db9ec823/triple_accel-0.4.0/src/levenshtein.rs","byte_start":135096,"byte_end":135168,"line_start":4,"line_end":4,"column_start":1,"column_end":73}},{"value":"/ * `rdamerau_exp` for low number of edits, otherwise `rdamerau`","span":{"file_name":"/Users/shelwitz/.cargo/registry/src/github.com-1ecc6299db9ec823/triple_accel-0.4.0/src/levenshtein.rs","byte_start":135169,"byte_end":135235,"line_start":5,"line_end":5,"column_start":1,"column_end":67}},{"value":"/ * `levenshtein_simd_k`","span":{"file_name":"/Users/shelwitz/.cargo/registry/src/github.com-1ecc6299db9ec823/triple_accel-0.4.0/src/levenshtein.rs","byte_start":135236,"byte_end":135262,"line_start":6,"line_end":6,"column_start":1,"column_end":27}},{"value":"/ * `levenshtein_simd_k_with_opts`","span":{"file_name":"/Users/shelwitz/.cargo/registry/src/github.com-1ecc6299db9ec823/triple_accel-0.4.0/src/levenshtein.rs","byte_start":135263,"byte_end":135299,"line_start":7,"line_end":7,"column_start":1,"column_end":37}},{"value":"/","span":{"file_name":"/Users/shelwitz/.cargo/registry/src/github.com-1ecc6299db9ec823/triple_accel-0.4.0/src/levenshtein.rs","byte_start":135300,"byte_end":135303,"line_start":8,"line_end":8,"column_start":1,"column_end":4}},{"value":"/ These search functions share the same efficient underlying SIMD-accelerated implementation:","span":{"file_name":"/Users/shelwitz/.cargo/registry/src/github.com-1ecc6299db9ec823/triple_accel-0.4.0/src/levenshtein.rs","byte_start":135304,"byte_end":135399,"line_start":9,"line_end":9,"column_start":1,"column_end":96}},{"value":"/ * `levenshtein_search`","span":{"file_name":"/Users/shelwitz/.cargo/registry/src/github.com-1ecc6299db9ec823/triple_accel-0.4.0/src/levenshtein.rs","byte_start":135400,"byte_end":135426,"line_start":10,"line_end":10,"column_start":1,"column_end":27}},{"value":"/ * `levenshtein_search_simd`","span":{"file_name":"/Users/shelwitz/.cargo/registry/src/github.com-1ecc6299db9ec823/triple_accel-0.4.0/src/levenshtein.rs","byte_start":135427,"byte_end":135458,"line_start":11,"line_end":11,"column_start":1,"column_end":32}},{"value":"/ * `levenshtein_search_simd_with_opts`","span":{"file_name":"/Users/shelwitz/.cargo/registry/src/github.com-1ecc6299db9ec823/triple_accel-0.4.0/src/levenshtein.rs","byte_start":135459,"byte_end":135500,"line_start":12,"line_end":12,"column_start":1,"column_end":42}}]},{"kind":"Struct","id":{"krate":0,"index":805},"span":{"file_name":"/Users/shelwitz/.cargo/registry/src/github.com-1ecc6299db9ec823/triple_accel-0.4.0/src/levenshtein.rs","byte_start":135766,"byte_end":135775,"line_start":22,"line_end":22,"column_start":12,"column_end":21},"name":"EditCosts","qualname":"::levenshtein::EditCosts","value":"EditCosts {  }","parent":null,"children":[{"krate":0,"index":806},{"krate":0,"index":807},{"krate":0,"index":808},{"krate":0,"index":809}],"decl_id":null,"docs":" A struct holding the edit costs for mismatches, gaps, and possibly transpositions.","sig":null,"attributes":[{"value":"/ A struct holding the edit costs for mismatches, gaps, and possibly transpositions.","span":{"file_name":"/Users/shelwitz/.cargo/registry/src/github.com-1ecc6299db9ec823/triple_accel-0.4.0/src/levenshtein.rs","byte_start":135550,"byte_end":135636,"line_start":18,"line_end":18,"column_start":1,"column_end":87}},{"value":"/","span":{"file_name":"/Users/shelwitz/.cargo/registry/src/github.com-1ecc6299db9ec823/triple_accel-0.4.0/src/levenshtein.rs","byte_start":135637,"byte_end":135640,"line_start":19,"line_end":19,"column_start":1,"column_end":4}},{"value":"/ This should be used as a parameter for Levenshtein distance or search routines.","span":{"file_name":"/Users/shelwitz/.cargo/registry/src/github.com-1ecc6299db9ec823/triple_accel-0.4.0/src/levenshtein.rs","byte_start":135641,"byte_end":135724,"line_start":20,"line_end":20,"column_start":1,"column_end":84}}]},{"kind":"Method","id":{"krate":0,"index":235},"span":{"file_name":"/Users/shelwitz/.cargo/registry/src/github.com-1ecc6299db9ec823/triple_accel-0.4.0/src/levenshtein.rs","byte_start":136436,"byte_end":136439,"line_start":39,"line_end":39,"column_start":12,"column_end":15},"name":"new","qualname":"<EditCosts>::new","value":"pub fn new(u8, u8, u8, Option<u8>) -> Self","parent":null,"children":[],"decl_id":null,"docs":" Create a new `EditCosts` struct, checking for whether the specified costs are valid.","sig":null,"attributes":[{"value":"/ Create a new `EditCosts` struct, checking for whether the specified costs are valid.","span":{"file_name":"/Users/shelwitz/.cargo/registry/src/github.com-1ecc6299db9ec823/triple_accel-0.4.0/src/levenshtein.rs","byte_start":135898,"byte_end":135986,"line_start":30,"line_end":30,"column_start":5,"column_end":93}},{"value":"/","span":{"file_name":"/Users/shelwitz/.cargo/registry/src/github.com-1ecc6299db9ec823/triple_accel-0.4.0/src/levenshtein.rs","byte_start":135991,"byte_end":135994,"line_start":31,"line_end":31,"column_start":5,"column_end":8}},{"value":"/ # Arguments","span":{"file_name":"/Users/shelwitz/.cargo/registry/src/github.com-1ecc6299db9ec823/triple_accel-0.4.0/src/levenshtein.rs","byte_start":135999,"byte_end":136014,"line_start":32,"line_end":32,"column_start":5,"column_end":20}},{"value":"/ * `mismatch_cost` - cost of a mismatch edit, which must be positive","span":{"file_name":"/Users/shelwitz/.cargo/registry/src/github.com-1ecc6299db9ec823/triple_accel-0.4.0/src/levenshtein.rs","byte_start":136019,"byte_end":136090,"line_start":33,"line_end":33,"column_start":5,"column_end":76}},{"value":"/ * `gap_cost` - cost of a gap, which must be positive","span":{"file_name":"/Users/shelwitz/.cargo/registry/src/github.com-1ecc6299db9ec823/triple_accel-0.4.0/src/levenshtein.rs","byte_start":136095,"byte_end":136151,"line_start":34,"line_end":34,"column_start":5,"column_end":61}},{"value":"/ * `start_gap_cost` - additional cost of starting a gap, for affine gap costs; this can","span":{"file_name":"/Users/shelwitz/.cargo/registry/src/github.com-1ecc6299db9ec823/triple_accel-0.4.0/src/levenshtein.rs","byte_start":136156,"byte_end":136246,"line_start":35,"line_end":35,"column_start":5,"column_end":95}},{"value":"/ be zero for linear gap costs","span":{"file_name":"/Users/shelwitz/.cargo/registry/src/github.com-1ecc6299db9ec823/triple_accel-0.4.0/src/levenshtein.rs","byte_start":136251,"byte_end":136283,"line_start":36,"line_end":36,"column_start":5,"column_end":37}},{"value":"/ * `transpose_cost` - cost of a transpose, which must be cheaper than doing the equivalent","span":{"file_name":"/Users/shelwitz/.cargo/registry/src/github.com-1ecc6299db9ec823/triple_accel-0.4.0/src/levenshtein.rs","byte_start":136288,"byte_end":136381,"line_start":37,"line_end":37,"column_start":5,"column_end":98}},{"value":"/ operation with mismatches and gaps","span":{"file_name":"/Users/shelwitz/.cargo/registry/src/github.com-1ecc6299db9ec823/triple_accel-0.4.0/src/levenshtein.rs","byte_start":136386,"byte_end":136424,"line_start":38,"line_end":38,"column_start":5,"column_end":43}}]},{"kind":"Const","id":{"krate":0,"index":237},"span":{"file_name":"/Users/shelwitz/.cargo/registry/src/github.com-1ecc6299db9ec823/triple_accel-0.4.0/src/levenshtein.rs","byte_start":137672,"byte_end":137689,"line_start":72,"line_end":72,"column_start":11,"column_end":28},"name":"LEVENSHTEIN_COSTS","qualname":"::levenshtein::LEVENSHTEIN_COSTS","value":"EditCosts","parent":null,"children":[],"decl_id":null,"docs":" Costs for Levenshtein distance, where mismatches and gaps both have a cost of 1, and\n transpositions are not allowed.\n","sig":null,"attributes":[{"value":"/ Costs for Levenshtein distance, where mismatches and gaps both have a cost of 1, and","span":{"file_name":"/Users/shelwitz/.cargo/registry/src/github.com-1ecc6299db9ec823/triple_accel-0.4.0/src/levenshtein.rs","byte_start":137537,"byte_end":137625,"line_start":70,"line_end":70,"column_start":1,"column_end":89}},{"value":"/ transpositions are not allowed.","span":{"file_name":"/Users/shelwitz/.cargo/registry/src/github.com-1ecc6299db9ec823/triple_accel-0.4.0/src/levenshtein.rs","byte_start":137626,"byte_end":137661,"line_start":71,"line_end":71,"column_start":1,"column_end":36}}]},{"kind":"Const","id":{"krate":0,"index":238},"span":{"file_name":"/Users/shelwitz/.cargo/registry/src/github.com-1ecc6299db9ec823/triple_accel-0.4.0/src/levenshtein.rs","byte_start":137920,"byte_end":137934,"line_start":75,"line_end":75,"column_start":11,"column_end":25},"name":"RDAMERAU_COSTS","qualname":"::levenshtein::RDAMERAU_COSTS","value":"EditCosts","parent":null,"children":[],"decl_id":null,"docs":" Costs for restricted Damerau-Levenshtein distance, where mismatches, gaps, and transpositions\n all have a cost of 1.\n","sig":null,"attributes":[{"value":"/ Costs for restricted Damerau-Levenshtein distance, where mismatches, gaps, and transpositions","span":{"file_name":"/Users/shelwitz/.cargo/registry/src/github.com-1ecc6299db9ec823/triple_accel-0.4.0/src/levenshtein.rs","byte_start":137786,"byte_end":137883,"line_start":73,"line_end":73,"column_start":1,"column_end":98}},{"value":"/ all have a cost of 1.","span":{"file_name":"/Users/shelwitz/.cargo/registry/src/github.com-1ecc6299db9ec823/triple_accel-0.4.0/src/levenshtein.rs","byte_start":137884,"byte_end":137909,"line_start":74,"line_end":74,"column_start":1,"column_end":26}}]},{"kind":"Function","id":{"krate":0,"index":239},"span":{"file_name":"/Users/shelwitz/.cargo/registry/src/github.com-1ecc6299db9ec823/triple_accel-0.4.0/src/levenshtein.rs","byte_start":138398,"byte_end":138415,"line_start":91,"line_end":91,"column_start":8,"column_end":25},"name":"levenshtein_naive","qualname":"::levenshtein::levenshtein_naive","value":"pub fn levenshtein_naive<T: PartialEq>(&[T], &[T]) -> u32","parent":null,"children":[],"decl_id":null,"docs":" Returns the Levenshtein distance between two strings using the naive scalar algorithm.","sig":null,"attributes":[{"value":"/ Returns the Levenshtein distance between two strings using the naive scalar algorithm.","span":{"file_name":"/Users/shelwitz/.cargo/registry/src/github.com-1ecc6299db9ec823/triple_accel-0.4.0/src/levenshtein.rs","byte_start":138035,"byte_end":138125,"line_start":77,"line_end":77,"column_start":1,"column_end":91}},{"value":"/","span":{"file_name":"/Users/shelwitz/.cargo/registry/src/github.com-1ecc6299db9ec823/triple_accel-0.4.0/src/levenshtein.rs","byte_start":138126,"byte_end":138129,"line_start":78,"line_end":78,"column_start":1,"column_end":4}},{"value":"/ # Arguments","span":{"file_name":"/Users/shelwitz/.cargo/registry/src/github.com-1ecc6299db9ec823/triple_accel-0.4.0/src/levenshtein.rs","byte_start":138130,"byte_end":138145,"line_start":79,"line_end":79,"column_start":1,"column_end":16}},{"value":"/ * `a` - first string (slice)","span":{"file_name":"/Users/shelwitz/.cargo/registry/src/github.com-1ecc6299db9ec823/triple_accel-0.4.0/src/levenshtein.rs","byte_start":138146,"byte_end":138178,"line_start":80,"line_end":80,"column_start":1,"column_end":33}},{"value":"/ * `b` - second string (slice)","span":{"file_name":"/Users/shelwitz/.cargo/registry/src/github.com-1ecc6299db9ec823/triple_accel-0.4.0/src/levenshtein.rs","byte_start":138179,"byte_end":138212,"line_start":81,"line_end":81,"column_start":1,"column_end":34}},{"value":"/","span":{"file_name":"/Users/shelwitz/.cargo/registry/src/github.com-1ecc6299db9ec823/triple_accel-0.4.0/src/levenshtein.rs","byte_start":138213,"byte_end":138216,"line_start":82,"line_end":82,"column_start":1,"column_end":4}},{"value":"/ # Example","span":{"file_name":"/Users/shelwitz/.cargo/registry/src/github.com-1ecc6299db9ec823/triple_accel-0.4.0/src/levenshtein.rs","byte_start":138217,"byte_end":138230,"line_start":83,"line_end":83,"column_start":1,"column_end":14}},{"value":"/ ```","span":{"file_name":"/Users/shelwitz/.cargo/registry/src/github.com-1ecc6299db9ec823/triple_accel-0.4.0/src/levenshtein.rs","byte_start":138231,"byte_end":138238,"line_start":84,"line_end":84,"column_start":1,"column_end":8}},{"value":"/ # use triple_accel::*;","span":{"file_name":"/Users/shelwitz/.cargo/registry/src/github.com-1ecc6299db9ec823/triple_accel-0.4.0/src/levenshtein.rs","byte_start":138239,"byte_end":138265,"line_start":85,"line_end":85,"column_start":1,"column_end":27}},{"value":"/ # use triple_accel::levenshtein::*;","span":{"file_name":"/Users/shelwitz/.cargo/registry/src/github.com-1ecc6299db9ec823/triple_accel-0.4.0/src/levenshtein.rs","byte_start":138266,"byte_end":138305,"line_start":86,"line_end":86,"column_start":1,"column_end":40}},{"value":"/ let dist = levenshtein_naive(b\"abc\", b\"ab\");","span":{"file_name":"/Users/shelwitz/.cargo/registry/src/github.com-1ecc6299db9ec823/triple_accel-0.4.0/src/levenshtein.rs","byte_start":138306,"byte_end":138354,"line_start":87,"line_end":87,"column_start":1,"column_end":49}},{"value":"/","span":{"file_name":"/Users/shelwitz/.cargo/registry/src/github.com-1ecc6299db9ec823/triple_accel-0.4.0/src/levenshtein.rs","byte_start":138355,"byte_end":138358,"line_start":88,"line_end":88,"column_start":1,"column_end":4}},{"value":"/ assert!(dist == 1);","span":{"file_name":"/Users/shelwitz/.cargo/registry/src/github.com-1ecc6299db9ec823/triple_accel-0.4.0/src/levenshtein.rs","byte_start":138359,"byte_end":138382,"line_start":89,"line_end":89,"column_start":1,"column_end":24}},{"value":"/ ```","span":{"file_name":"/Users/shelwitz/.cargo/registry/src/github.com-1ecc6299db9ec823/triple_accel-0.4.0/src/levenshtein.rs","byte_start":138383,"byte_end":138390,"line_start":90,"line_end":90,"column_start":1,"column_end":8}}]},{"kind":"Function","id":{"krate":0,"index":241},"span":{"file_name":"/Users/shelwitz/.cargo/registry/src/github.com-1ecc6299db9ec823/triple_accel-0.4.0/src/levenshtein.rs","byte_start":138888,"byte_end":138908,"line_start":109,"line_end":109,"column_start":8,"column_end":28},"name":"levenstein_naive_str","qualname":"::levenshtein::levenstein_naive_str","value":"pub fn levenstein_naive_str(&str, &str) -> u32","parent":null,"children":[],"decl_id":null,"docs":" Returns the Levenshtein distance between two strings using the naive scalar algorithm.","sig":null,"attributes":[{"value":"/ Returns the Levenshtein distance between two strings using the naive scalar algorithm.","span":{"file_name":"/Users/shelwitz/.cargo/registry/src/github.com-1ecc6299db9ec823/triple_accel-0.4.0/src/levenshtein.rs","byte_start":138526,"byte_end":138616,"line_start":95,"line_end":95,"column_start":1,"column_end":91}},{"value":"/","span":{"file_name":"/Users/shelwitz/.cargo/registry/src/github.com-1ecc6299db9ec823/triple_accel-0.4.0/src/levenshtein.rs","byte_start":138617,"byte_end":138620,"line_start":96,"line_end":96,"column_start":1,"column_end":4}},{"value":"/ # Arguments","span":{"file_name":"/Users/shelwitz/.cargo/registry/src/github.com-1ecc6299db9ec823/triple_accel-0.4.0/src/levenshtein.rs","byte_start":138621,"byte_end":138636,"line_start":97,"line_end":97,"column_start":1,"column_end":16}},{"value":"/ * `a` - first string (&str)","span":{"file_name":"/Users/shelwitz/.cargo/registry/src/github.com-1ecc6299db9ec823/triple_accel-0.4.0/src/levenshtein.rs","byte_start":138637,"byte_end":138668,"line_start":98,"line_end":98,"column_start":1,"column_end":32}},{"value":"/ * `b` - second string (&str)","span":{"file_name":"/Users/shelwitz/.cargo/registry/src/github.com-1ecc6299db9ec823/triple_accel-0.4.0/src/levenshtein.rs","byte_start":138669,"byte_end":138701,"line_start":99,"line_end":99,"column_start":1,"column_end":33}},{"value":"/","span":{"file_name":"/Users/shelwitz/.cargo/registry/src/github.com-1ecc6299db9ec823/triple_accel-0.4.0/src/levenshtein.rs","byte_start":138702,"byte_end":138705,"line_start":100,"line_end":100,"column_start":1,"column_end":4}},{"value":"/ # Example","span":{"file_name":"/Users/shelwitz/.cargo/registry/src/github.com-1ecc6299db9ec823/triple_accel-0.4.0/src/levenshtein.rs","byte_start":138706,"byte_end":138719,"line_start":101,"line_end":101,"column_start":1,"column_end":14}},{"value":"/ ```","span":{"file_name":"/Users/shelwitz/.cargo/registry/src/github.com-1ecc6299db9ec823/triple_accel-0.4.0/src/levenshtein.rs","byte_start":138720,"byte_end":138727,"line_start":102,"line_end":102,"column_start":1,"column_end":8}},{"value":"/ # use triple_accel::*;","span":{"file_name":"/Users/shelwitz/.cargo/registry/src/github.com-1ecc6299db9ec823/triple_accel-0.4.0/src/levenshtein.rs","byte_start":138728,"byte_end":138754,"line_start":103,"line_end":103,"column_start":1,"column_end":27}},{"value":"/ # use triple_accel::levenshtein::*;","span":{"file_name":"/Users/shelwitz/.cargo/registry/src/github.com-1ecc6299db9ec823/triple_accel-0.4.0/src/levenshtein.rs","byte_start":138755,"byte_end":138794,"line_start":104,"line_end":104,"column_start":1,"column_end":40}},{"value":"/ let dist = levenstein_naive_str(\"abc\", \"ab\");","span":{"file_name":"/Users/shelwitz/.cargo/registry/src/github.com-1ecc6299db9ec823/triple_accel-0.4.0/src/levenshtein.rs","byte_start":138795,"byte_end":138844,"line_start":105,"line_end":105,"column_start":1,"column_end":50}},{"value":"/","span":{"file_name":"/Users/shelwitz/.cargo/registry/src/github.com-1ecc6299db9ec823/triple_accel-0.4.0/src/levenshtein.rs","byte_start":138845,"byte_end":138848,"line_start":106,"line_end":106,"column_start":1,"column_end":4}},{"value":"/ assert!(dist == 1);","span":{"file_name":"/Users/shelwitz/.cargo/registry/src/github.com-1ecc6299db9ec823/triple_accel-0.4.0/src/levenshtein.rs","byte_start":138849,"byte_end":138872,"line_start":107,"line_end":107,"column_start":1,"column_end":24}},{"value":"/ ```","span":{"file_name":"/Users/shelwitz/.cargo/registry/src/github.com-1ecc6299db9ec823/triple_accel-0.4.0/src/levenshtein.rs","byte_start":138873,"byte_end":138880,"line_start":108,"line_end":108,"column_start":1,"column_end":8}}]},{"kind":"Function","id":{"krate":0,"index":242},"span":{"file_name":"/Users/shelwitz/.cargo/registry/src/github.com-1ecc6299db9ec823/triple_accel-0.4.0/src/levenshtein.rs","byte_start":139815,"byte_end":139842,"line_start":134,"line_end":134,"column_start":8,"column_end":35},"name":"levenshtein_naive_with_opts","qualname":"::levenshtein::levenshtein_naive_with_opts","value":"pub fn levenshtein_naive_with_opts<T>(&[T], &[T], bool, EditCosts)\n-> (u32, Option<Vec<Edit>>) where T: PartialEq","parent":null,"children":[],"decl_id":null,"docs":" Returns the Levenshtein distance between two strings and optionally, the edit traceback,\n using the naive scalar algorithm, with extra options.","sig":null,"attributes":[{"value":"/ Returns the Levenshtein distance between two strings and optionally, the edit traceback,","span":{"file_name":"/Users/shelwitz/.cargo/registry/src/github.com-1ecc6299db9ec823/triple_accel-0.4.0/src/levenshtein.rs","byte_start":139057,"byte_end":139149,"line_start":115,"line_end":115,"column_start":1,"column_end":93}},{"value":"/ using the naive scalar algorithm, with extra options.","span":{"file_name":"/Users/shelwitz/.cargo/registry/src/github.com-1ecc6299db9ec823/triple_accel-0.4.0/src/levenshtein.rs","byte_start":139150,"byte_end":139207,"line_start":116,"line_end":116,"column_start":1,"column_end":58}},{"value":"/","span":{"file_name":"/Users/shelwitz/.cargo/registry/src/github.com-1ecc6299db9ec823/triple_accel-0.4.0/src/levenshtein.rs","byte_start":139208,"byte_end":139211,"line_start":117,"line_end":117,"column_start":1,"column_end":4}},{"value":"/ # Arguments","span":{"file_name":"/Users/shelwitz/.cargo/registry/src/github.com-1ecc6299db9ec823/triple_accel-0.4.0/src/levenshtein.rs","byte_start":139212,"byte_end":139227,"line_start":118,"line_end":118,"column_start":1,"column_end":16}},{"value":"/ * `a` - first string (slice)","span":{"file_name":"/Users/shelwitz/.cargo/registry/src/github.com-1ecc6299db9ec823/triple_accel-0.4.0/src/levenshtein.rs","byte_start":139228,"byte_end":139260,"line_start":119,"line_end":119,"column_start":1,"column_end":33}},{"value":"/ * `b` - second string (slice)","span":{"file_name":"/Users/shelwitz/.cargo/registry/src/github.com-1ecc6299db9ec823/triple_accel-0.4.0/src/levenshtein.rs","byte_start":139261,"byte_end":139294,"line_start":120,"line_end":120,"column_start":1,"column_end":34}},{"value":"/ * `trace_on` - whether to return the traceback, the sequence of edits between `a` and `b`","span":{"file_name":"/Users/shelwitz/.cargo/registry/src/github.com-1ecc6299db9ec823/triple_accel-0.4.0/src/levenshtein.rs","byte_start":139295,"byte_end":139388,"line_start":121,"line_end":121,"column_start":1,"column_end":94}},{"value":"/ * `costs` - `EditCosts` struct for the cost of each edit operation","span":{"file_name":"/Users/shelwitz/.cargo/registry/src/github.com-1ecc6299db9ec823/triple_accel-0.4.0/src/levenshtein.rs","byte_start":139389,"byte_end":139459,"line_start":122,"line_end":122,"column_start":1,"column_end":71}},{"value":"/","span":{"file_name":"/Users/shelwitz/.cargo/registry/src/github.com-1ecc6299db9ec823/triple_accel-0.4.0/src/levenshtein.rs","byte_start":139460,"byte_end":139463,"line_start":123,"line_end":123,"column_start":1,"column_end":4}},{"value":"/ # Example","span":{"file_name":"/Users/shelwitz/.cargo/registry/src/github.com-1ecc6299db9ec823/triple_accel-0.4.0/src/levenshtein.rs","byte_start":139464,"byte_end":139477,"line_start":124,"line_end":124,"column_start":1,"column_end":14}},{"value":"/ ```","span":{"file_name":"/Users/shelwitz/.cargo/registry/src/github.com-1ecc6299db9ec823/triple_accel-0.4.0/src/levenshtein.rs","byte_start":139478,"byte_end":139485,"line_start":125,"line_end":125,"column_start":1,"column_end":8}},{"value":"/ # use triple_accel::*;","span":{"file_name":"/Users/shelwitz/.cargo/registry/src/github.com-1ecc6299db9ec823/triple_accel-0.4.0/src/levenshtein.rs","byte_start":139486,"byte_end":139512,"line_start":126,"line_end":126,"column_start":1,"column_end":27}},{"value":"/ # use triple_accel::levenshtein::*;","span":{"file_name":"/Users/shelwitz/.cargo/registry/src/github.com-1ecc6299db9ec823/triple_accel-0.4.0/src/levenshtein.rs","byte_start":139513,"byte_end":139552,"line_start":127,"line_end":127,"column_start":1,"column_end":40}},{"value":"/ let dist = levenshtein_naive_with_opts(b\"abc\", b\"ab\", true, LEVENSHTEIN_COSTS);","span":{"file_name":"/Users/shelwitz/.cargo/registry/src/github.com-1ecc6299db9ec823/triple_accel-0.4.0/src/levenshtein.rs","byte_start":139553,"byte_end":139636,"line_start":128,"line_end":128,"column_start":1,"column_end":84}},{"value":"/","span":{"file_name":"/Users/shelwitz/.cargo/registry/src/github.com-1ecc6299db9ec823/triple_accel-0.4.0/src/levenshtein.rs","byte_start":139637,"byte_end":139640,"line_start":129,"line_end":129,"column_start":1,"column_end":4}},{"value":"/ assert!(dist == (1, Some(vec![Edit{edit: EditType::Match, count: 2},","span":{"file_name":"/Users/shelwitz/.cargo/registry/src/github.com-1ecc6299db9ec823/triple_accel-0.4.0/src/levenshtein.rs","byte_start":139641,"byte_end":139713,"line_start":130,"line_end":130,"column_start":1,"column_end":73}},{"value":"/                               Edit{edit: EditType::BGap, count: 1}])));","span":{"file_name":"/Users/shelwitz/.cargo/registry/src/github.com-1ecc6299db9ec823/triple_accel-0.4.0/src/levenshtein.rs","byte_start":139714,"byte_end":139789,"line_start":131,"line_end":131,"column_start":1,"column_end":76}},{"value":"/ ```","span":{"file_name":"/Users/shelwitz/.cargo/registry/src/github.com-1ecc6299db9ec823/triple_accel-0.4.0/src/levenshtein.rs","byte_start":139790,"byte_end":139797,"line_start":132,"line_end":132,"column_start":1,"column_end":8}},{"value":"inline","span":{"file_name":"/Users/shelwitz/.cargo/registry/src/github.com-1ecc6299db9ec823/triple_accel-0.4.0/src/levenshtein.rs","byte_start":139798,"byte_end":139807,"line_start":133,"line_end":133,"column_start":1,"column_end":10}}]},{"kind":"Function","id":{"krate":0,"index":244},"span":{"file_name":"/Users/shelwitz/.cargo/registry/src/github.com-1ecc6299db9ec823/triple_accel-0.4.0/src/levenshtein.rs","byte_start":144961,"byte_end":144980,"line_start":293,"line_end":293,"column_start":8,"column_end":27},"name":"levenshtein_naive_k","qualname":"::levenshtein::levenshtein_naive_k","value":"pub fn levenshtein_naive_k(&[u8], &[u8], u32) -> Option<u32>","parent":null,"children":[],"decl_id":null,"docs":" Returns the Levenshtein distance, bounded by a cost threshold `k`, between two strings, using the\n naive scalar algorithm.","sig":null,"attributes":[{"value":"/ Returns the Levenshtein distance, bounded by a cost threshold `k`, between two strings, using the","span":{"file_name":"/Users/shelwitz/.cargo/registry/src/github.com-1ecc6299db9ec823/triple_accel-0.4.0/src/levenshtein.rs","byte_start":144246,"byte_end":144347,"line_start":272,"line_end":272,"column_start":1,"column_end":102}},{"value":"/ naive scalar algorithm.","span":{"file_name":"/Users/shelwitz/.cargo/registry/src/github.com-1ecc6299db9ec823/triple_accel-0.4.0/src/levenshtein.rs","byte_start":144348,"byte_end":144375,"line_start":273,"line_end":273,"column_start":1,"column_end":28}},{"value":"/","span":{"file_name":"/Users/shelwitz/.cargo/registry/src/github.com-1ecc6299db9ec823/triple_accel-0.4.0/src/levenshtein.rs","byte_start":144376,"byte_end":144379,"line_start":274,"line_end":274,"column_start":1,"column_end":4}},{"value":"/ This will return `None` if the Levenshtein distance between `a` and `b` is greater than the","span":{"file_name":"/Users/shelwitz/.cargo/registry/src/github.com-1ecc6299db9ec823/triple_accel-0.4.0/src/levenshtein.rs","byte_start":144380,"byte_end":144475,"line_start":275,"line_end":275,"column_start":1,"column_end":96}},{"value":"/ threshold `k`.","span":{"file_name":"/Users/shelwitz/.cargo/registry/src/github.com-1ecc6299db9ec823/triple_accel-0.4.0/src/levenshtein.rs","byte_start":144476,"byte_end":144494,"line_start":276,"line_end":276,"column_start":1,"column_end":19}},{"value":"/ This should be much faster than `levenshtein_naive` if `k` is small compared to the lengths of","span":{"file_name":"/Users/shelwitz/.cargo/registry/src/github.com-1ecc6299db9ec823/triple_accel-0.4.0/src/levenshtein.rs","byte_start":144495,"byte_end":144593,"line_start":277,"line_end":277,"column_start":1,"column_end":99}},{"value":"/ `a` and `b`.","span":{"file_name":"/Users/shelwitz/.cargo/registry/src/github.com-1ecc6299db9ec823/triple_accel-0.4.0/src/levenshtein.rs","byte_start":144594,"byte_end":144610,"line_start":278,"line_end":278,"column_start":1,"column_end":17}},{"value":"/","span":{"file_name":"/Users/shelwitz/.cargo/registry/src/github.com-1ecc6299db9ec823/triple_accel-0.4.0/src/levenshtein.rs","byte_start":144611,"byte_end":144614,"line_start":279,"line_end":279,"column_start":1,"column_end":4}},{"value":"/ # Arguments","span":{"file_name":"/Users/shelwitz/.cargo/registry/src/github.com-1ecc6299db9ec823/triple_accel-0.4.0/src/levenshtein.rs","byte_start":144615,"byte_end":144630,"line_start":280,"line_end":280,"column_start":1,"column_end":16}},{"value":"/ * `a` - first string (slice)","span":{"file_name":"/Users/shelwitz/.cargo/registry/src/github.com-1ecc6299db9ec823/triple_accel-0.4.0/src/levenshtein.rs","byte_start":144631,"byte_end":144663,"line_start":281,"line_end":281,"column_start":1,"column_end":33}},{"value":"/ * `b` - second string (slice)","span":{"file_name":"/Users/shelwitz/.cargo/registry/src/github.com-1ecc6299db9ec823/triple_accel-0.4.0/src/levenshtein.rs","byte_start":144664,"byte_end":144697,"line_start":282,"line_end":282,"column_start":1,"column_end":34}},{"value":"/ * `k` - maximum number of edits allowed between `a` and `b`","span":{"file_name":"/Users/shelwitz/.cargo/registry/src/github.com-1ecc6299db9ec823/triple_accel-0.4.0/src/levenshtein.rs","byte_start":144698,"byte_end":144761,"line_start":283,"line_end":283,"column_start":1,"column_end":64}},{"value":"/","span":{"file_name":"/Users/shelwitz/.cargo/registry/src/github.com-1ecc6299db9ec823/triple_accel-0.4.0/src/levenshtein.rs","byte_start":144762,"byte_end":144765,"line_start":284,"line_end":284,"column_start":1,"column_end":4}},{"value":"/ # Example","span":{"file_name":"/Users/shelwitz/.cargo/registry/src/github.com-1ecc6299db9ec823/triple_accel-0.4.0/src/levenshtein.rs","byte_start":144766,"byte_end":144779,"line_start":285,"line_end":285,"column_start":1,"column_end":14}},{"value":"/ ```","span":{"file_name":"/Users/shelwitz/.cargo/registry/src/github.com-1ecc6299db9ec823/triple_accel-0.4.0/src/levenshtein.rs","byte_start":144780,"byte_end":144787,"line_start":286,"line_end":286,"column_start":1,"column_end":8}},{"value":"/ # use triple_accel::*;","span":{"file_name":"/Users/shelwitz/.cargo/registry/src/github.com-1ecc6299db9ec823/triple_accel-0.4.0/src/levenshtein.rs","byte_start":144788,"byte_end":144814,"line_start":287,"line_end":287,"column_start":1,"column_end":27}},{"value":"/ # use triple_accel::levenshtein::*;","span":{"file_name":"/Users/shelwitz/.cargo/registry/src/github.com-1ecc6299db9ec823/triple_accel-0.4.0/src/levenshtein.rs","byte_start":144815,"byte_end":144854,"line_start":288,"line_end":288,"column_start":1,"column_end":40}},{"value":"/ let dist = levenshtein_naive_k(b\"abc\", b\"ab\", 1);","span":{"file_name":"/Users/shelwitz/.cargo/registry/src/github.com-1ecc6299db9ec823/triple_accel-0.4.0/src/levenshtein.rs","byte_start":144855,"byte_end":144908,"line_start":289,"line_end":289,"column_start":1,"column_end":54}},{"value":"/","span":{"file_name":"/Users/shelwitz/.cargo/registry/src/github.com-1ecc6299db9ec823/triple_accel-0.4.0/src/levenshtein.rs","byte_start":144909,"byte_end":144912,"line_start":290,"line_end":290,"column_start":1,"column_end":4}},{"value":"/ assert!(dist.unwrap() == 1);","span":{"file_name":"/Users/shelwitz/.cargo/registry/src/github.com-1ecc6299db9ec823/triple_accel-0.4.0/src/levenshtein.rs","byte_start":144913,"byte_end":144945,"line_start":291,"line_end":291,"column_start":1,"column_end":33}},{"value":"/ ```","span":{"file_name":"/Users/shelwitz/.cargo/registry/src/github.com-1ecc6299db9ec823/triple_accel-0.4.0/src/levenshtein.rs","byte_start":144946,"byte_end":144953,"line_start":292,"line_end":292,"column_start":1,"column_end":8}}]},{"kind":"Function","id":{"krate":0,"index":245},"span":{"file_name":"/Users/shelwitz/.cargo/registry/src/github.com-1ecc6299db9ec823/triple_accel-0.4.0/src/levenshtein.rs","byte_start":146317,"byte_end":146346,"line_start":327,"line_end":327,"column_start":8,"column_end":37},"name":"levenshtein_naive_k_with_opts","qualname":"::levenshtein::levenshtein_naive_k_with_opts","value":"pub fn levenshtein_naive_k_with_opts<T>(&[T], &[T], u32, bool, EditCosts)\n-> Option<(u32, Option<Vec<Edit>>)> where T: PartialEq","parent":null,"children":[],"decl_id":null,"docs":" Returns the Levenshtein distance, bounded by a cost threshold `k`, between two strings and optionally,\n the edit traceback, using the naive scalar algorithm, with extra options.","sig":null,"attributes":[{"value":"/ Returns the Levenshtein distance, bounded by a cost threshold `k`, between two strings and optionally,","span":{"file_name":"/Users/shelwitz/.cargo/registry/src/github.com-1ecc6299db9ec823/triple_accel-0.4.0/src/levenshtein.rs","byte_start":145194,"byte_end":145300,"line_start":302,"line_end":302,"column_start":1,"column_end":107}},{"value":"/ the edit traceback, using the naive scalar algorithm, with extra options.","span":{"file_name":"/Users/shelwitz/.cargo/registry/src/github.com-1ecc6299db9ec823/triple_accel-0.4.0/src/levenshtein.rs","byte_start":145301,"byte_end":145378,"line_start":303,"line_end":303,"column_start":1,"column_end":78}},{"value":"/","span":{"file_name":"/Users/shelwitz/.cargo/registry/src/github.com-1ecc6299db9ec823/triple_accel-0.4.0/src/levenshtein.rs","byte_start":145379,"byte_end":145382,"line_start":304,"line_end":304,"column_start":1,"column_end":4}},{"value":"/ This will return `None` if the Levenshtein distance between `a` and `b` is greater than the","span":{"file_name":"/Users/shelwitz/.cargo/registry/src/github.com-1ecc6299db9ec823/triple_accel-0.4.0/src/levenshtein.rs","byte_start":145383,"byte_end":145478,"line_start":305,"line_end":305,"column_start":1,"column_end":96}},{"value":"/ threshold `k`.","span":{"file_name":"/Users/shelwitz/.cargo/registry/src/github.com-1ecc6299db9ec823/triple_accel-0.4.0/src/levenshtein.rs","byte_start":145479,"byte_end":145497,"line_start":306,"line_end":306,"column_start":1,"column_end":19}},{"value":"/ This should be much faster than `levenshtein_naive_with_opts` if `k` is small compared to the lengths of","span":{"file_name":"/Users/shelwitz/.cargo/registry/src/github.com-1ecc6299db9ec823/triple_accel-0.4.0/src/levenshtein.rs","byte_start":145498,"byte_end":145606,"line_start":307,"line_end":307,"column_start":1,"column_end":109}},{"value":"/ `a` and `b`.","span":{"file_name":"/Users/shelwitz/.cargo/registry/src/github.com-1ecc6299db9ec823/triple_accel-0.4.0/src/levenshtein.rs","byte_start":145607,"byte_end":145623,"line_start":308,"line_end":308,"column_start":1,"column_end":17}},{"value":"/","span":{"file_name":"/Users/shelwitz/.cargo/registry/src/github.com-1ecc6299db9ec823/triple_accel-0.4.0/src/levenshtein.rs","byte_start":145624,"byte_end":145627,"line_start":309,"line_end":309,"column_start":1,"column_end":4}},{"value":"/ # Arguments","span":{"file_name":"/Users/shelwitz/.cargo/registry/src/github.com-1ecc6299db9ec823/triple_accel-0.4.0/src/levenshtein.rs","byte_start":145628,"byte_end":145643,"line_start":310,"line_end":310,"column_start":1,"column_end":16}},{"value":"/ * `a` - first string (slice)","span":{"file_name":"/Users/shelwitz/.cargo/registry/src/github.com-1ecc6299db9ec823/triple_accel-0.4.0/src/levenshtein.rs","byte_start":145644,"byte_end":145676,"line_start":311,"line_end":311,"column_start":1,"column_end":33}},{"value":"/ * `b` - second string (slice)","span":{"file_name":"/Users/shelwitz/.cargo/registry/src/github.com-1ecc6299db9ec823/triple_accel-0.4.0/src/levenshtein.rs","byte_start":145677,"byte_end":145710,"line_start":312,"line_end":312,"column_start":1,"column_end":34}},{"value":"/ * `k` - maximum number of cost allowed between `a` and `b`","span":{"file_name":"/Users/shelwitz/.cargo/registry/src/github.com-1ecc6299db9ec823/triple_accel-0.4.0/src/levenshtein.rs","byte_start":145711,"byte_end":145773,"line_start":313,"line_end":313,"column_start":1,"column_end":63}},{"value":"/ * `trace_on` - whether to return the traceback, the sequence of edits between `a` and `b`","span":{"file_name":"/Users/shelwitz/.cargo/registry/src/github.com-1ecc6299db9ec823/triple_accel-0.4.0/src/levenshtein.rs","byte_start":145774,"byte_end":145867,"line_start":314,"line_end":314,"column_start":1,"column_end":94}},{"value":"/ * `costs` - `EditCosts` struct for the cost of each edit operation","span":{"file_name":"/Users/shelwitz/.cargo/registry/src/github.com-1ecc6299db9ec823/triple_accel-0.4.0/src/levenshtein.rs","byte_start":145868,"byte_end":145938,"line_start":315,"line_end":315,"column_start":1,"column_end":71}},{"value":"/","span":{"file_name":"/Users/shelwitz/.cargo/registry/src/github.com-1ecc6299db9ec823/triple_accel-0.4.0/src/levenshtein.rs","byte_start":145939,"byte_end":145942,"line_start":316,"line_end":316,"column_start":1,"column_end":4}},{"value":"/ # Example","span":{"file_name":"/Users/shelwitz/.cargo/registry/src/github.com-1ecc6299db9ec823/triple_accel-0.4.0/src/levenshtein.rs","byte_start":145943,"byte_end":145956,"line_start":317,"line_end":317,"column_start":1,"column_end":14}},{"value":"/ ```","span":{"file_name":"/Users/shelwitz/.cargo/registry/src/github.com-1ecc6299db9ec823/triple_accel-0.4.0/src/levenshtein.rs","byte_start":145957,"byte_end":145964,"line_start":318,"line_end":318,"column_start":1,"column_end":8}},{"value":"/ # use triple_accel::*;","span":{"file_name":"/Users/shelwitz/.cargo/registry/src/github.com-1ecc6299db9ec823/triple_accel-0.4.0/src/levenshtein.rs","byte_start":145965,"byte_end":145991,"line_start":319,"line_end":319,"column_start":1,"column_end":27}},{"value":"/ # use triple_accel::levenshtein::*;","span":{"file_name":"/Users/shelwitz/.cargo/registry/src/github.com-1ecc6299db9ec823/triple_accel-0.4.0/src/levenshtein.rs","byte_start":145992,"byte_end":146031,"line_start":320,"line_end":320,"column_start":1,"column_end":40}},{"value":"/ let dist = levenshtein_naive_k_with_opts(b\"abc\", b\"ab\", 1, true, LEVENSHTEIN_COSTS);","span":{"file_name":"/Users/shelwitz/.cargo/registry/src/github.com-1ecc6299db9ec823/triple_accel-0.4.0/src/levenshtein.rs","byte_start":146032,"byte_end":146120,"line_start":321,"line_end":321,"column_start":1,"column_end":89}},{"value":"/","span":{"file_name":"/Users/shelwitz/.cargo/registry/src/github.com-1ecc6299db9ec823/triple_accel-0.4.0/src/levenshtein.rs","byte_start":146121,"byte_end":146124,"line_start":322,"line_end":322,"column_start":1,"column_end":4}},{"value":"/ assert!(dist.unwrap() == (1, Some(vec![Edit{edit: EditType::Match, count: 2},","span":{"file_name":"/Users/shelwitz/.cargo/registry/src/github.com-1ecc6299db9ec823/triple_accel-0.4.0/src/levenshtein.rs","byte_start":146125,"byte_end":146206,"line_start":323,"line_end":323,"column_start":1,"column_end":82}},{"value":"/                                        Edit{edit: EditType::BGap, count: 1}])));","span":{"file_name":"/Users/shelwitz/.cargo/registry/src/github.com-1ecc6299db9ec823/triple_accel-0.4.0/src/levenshtein.rs","byte_start":146207,"byte_end":146291,"line_start":324,"line_end":324,"column_start":1,"column_end":85}},{"value":"/ ```","span":{"file_name":"/Users/shelwitz/.cargo/registry/src/github.com-1ecc6299db9ec823/triple_accel-0.4.0/src/levenshtein.rs","byte_start":146292,"byte_end":146299,"line_start":325,"line_end":325,"column_start":1,"column_end":8}},{"value":"inline","span":{"file_name":"/Users/shelwitz/.cargo/registry/src/github.com-1ecc6299db9ec823/triple_accel-0.4.0/src/levenshtein.rs","byte_start":146300,"byte_end":146309,"line_start":326,"line_end":326,"column_start":1,"column_end":10}}]},{"kind":"Function","id":{"krate":0,"index":250},"span":{"file_name":"/Users/shelwitz/.cargo/registry/src/github.com-1ecc6299db9ec823/triple_accel-0.4.0/src/levenshtein.rs","byte_start":153016,"byte_end":153038,"line_start":537,"line_end":537,"column_start":8,"column_end":30},"name":"levenshtein_simd_k_str","qualname":"::levenshtein::levenshtein_simd_k_str","value":"pub fn levenshtein_simd_k_str(&str, &str, u32) -> Option<u32>","parent":null,"children":[],"decl_id":null,"docs":" Returns the Levenshtein distance, bounded by a cost threshold `k`, between two utf8 encoded strings, using\n SIMD acceleration.\n # Arguments\n * `a` - first string (&str)\n * `b` - second string (&str)\n * `k` - maximum number of edits allowed between `a` and `b`","sig":null,"attributes":[{"value":"/ Returns the Levenshtein distance, bounded by a cost threshold `k`, between two utf8 encoded strings, using","span":{"file_name":"/Users/shelwitz/.cargo/registry/src/github.com-1ecc6299db9ec823/triple_accel-0.4.0/src/levenshtein.rs","byte_start":152537,"byte_end":152647,"line_start":522,"line_end":522,"column_start":1,"column_end":111}},{"value":"/ SIMD acceleration.","span":{"file_name":"/Users/shelwitz/.cargo/registry/src/github.com-1ecc6299db9ec823/triple_accel-0.4.0/src/levenshtein.rs","byte_start":152648,"byte_end":152670,"line_start":523,"line_end":523,"column_start":1,"column_end":23}},{"value":"/ # Arguments","span":{"file_name":"/Users/shelwitz/.cargo/registry/src/github.com-1ecc6299db9ec823/triple_accel-0.4.0/src/levenshtein.rs","byte_start":152671,"byte_end":152686,"line_start":524,"line_end":524,"column_start":1,"column_end":16}},{"value":"/ * `a` - first string (&str)","span":{"file_name":"/Users/shelwitz/.cargo/registry/src/github.com-1ecc6299db9ec823/triple_accel-0.4.0/src/levenshtein.rs","byte_start":152687,"byte_end":152718,"line_start":525,"line_end":525,"column_start":1,"column_end":32}},{"value":"/ * `b` - second string (&str)","span":{"file_name":"/Users/shelwitz/.cargo/registry/src/github.com-1ecc6299db9ec823/triple_accel-0.4.0/src/levenshtein.rs","byte_start":152719,"byte_end":152751,"line_start":526,"line_end":526,"column_start":1,"column_end":33}},{"value":"/ * `k` - maximum number of edits allowed between `a` and `b`","span":{"file_name":"/Users/shelwitz/.cargo/registry/src/github.com-1ecc6299db9ec823/triple_accel-0.4.0/src/levenshtein.rs","byte_start":152752,"byte_end":152815,"line_start":527,"line_end":527,"column_start":1,"column_end":64}},{"value":"/","span":{"file_name":"/Users/shelwitz/.cargo/registry/src/github.com-1ecc6299db9ec823/triple_accel-0.4.0/src/levenshtein.rs","byte_start":152816,"byte_end":152819,"line_start":528,"line_end":528,"column_start":1,"column_end":4}},{"value":"/ # Example","span":{"file_name":"/Users/shelwitz/.cargo/registry/src/github.com-1ecc6299db9ec823/triple_accel-0.4.0/src/levenshtein.rs","byte_start":152820,"byte_end":152833,"line_start":529,"line_end":529,"column_start":1,"column_end":14}},{"value":"/ ```","span":{"file_name":"/Users/shelwitz/.cargo/registry/src/github.com-1ecc6299db9ec823/triple_accel-0.4.0/src/levenshtein.rs","byte_start":152834,"byte_end":152841,"line_start":530,"line_end":530,"column_start":1,"column_end":8}},{"value":"/ # use triple_accel::*;","span":{"file_name":"/Users/shelwitz/.cargo/registry/src/github.com-1ecc6299db9ec823/triple_accel-0.4.0/src/levenshtein.rs","byte_start":152842,"byte_end":152868,"line_start":531,"line_end":531,"column_start":1,"column_end":27}},{"value":"/ # use triple_accel::levenshtein::*;","span":{"file_name":"/Users/shelwitz/.cargo/registry/src/github.com-1ecc6299db9ec823/triple_accel-0.4.0/src/levenshtein.rs","byte_start":152869,"byte_end":152908,"line_start":532,"line_end":532,"column_start":1,"column_end":40}},{"value":"/ let dist = levenshtein_simd_k_str(\"abc\", \"ab\", 1);","span":{"file_name":"/Users/shelwitz/.cargo/registry/src/github.com-1ecc6299db9ec823/triple_accel-0.4.0/src/levenshtein.rs","byte_start":152909,"byte_end":152963,"line_start":533,"line_end":533,"column_start":1,"column_end":55}},{"value":"/","span":{"file_name":"/Users/shelwitz/.cargo/registry/src/github.com-1ecc6299db9ec823/triple_accel-0.4.0/src/levenshtein.rs","byte_start":152964,"byte_end":152967,"line_start":534,"line_end":534,"column_start":1,"column_end":4}},{"value":"/ assert!(dist.unwrap() == 1);","span":{"file_name":"/Users/shelwitz/.cargo/registry/src/github.com-1ecc6299db9ec823/triple_accel-0.4.0/src/levenshtein.rs","byte_start":152968,"byte_end":153000,"line_start":535,"line_end":535,"column_start":1,"column_end":33}},{"value":"/ ```","span":{"file_name":"/Users/shelwitz/.cargo/registry/src/github.com-1ecc6299db9ec823/triple_accel-0.4.0/src/levenshtein.rs","byte_start":153001,"byte_end":153008,"line_start":536,"line_end":536,"column_start":1,"column_end":8}}]},{"kind":"Function","id":{"krate":0,"index":251},"span":{"file_name":"/Users/shelwitz/.cargo/registry/src/github.com-1ecc6299db9ec823/triple_accel-0.4.0/src/levenshtein.rs","byte_start":154379,"byte_end":154397,"line_start":573,"line_end":573,"column_start":8,"column_end":26},"name":"levenshtein_simd_k","qualname":"::levenshtein::levenshtein_simd_k","value":"pub fn levenshtein_simd_k(&[u8], &[u8], u32) -> Option<u32>","parent":null,"children":[],"decl_id":null,"docs":" Returns the Levenshtein distance, bounded by a cost threshold `k`, between two strings, using\n SIMD acceleration.","sig":null,"attributes":[{"value":"/ Returns the Levenshtein distance, bounded by a cost threshold `k`, between two strings, using","span":{"file_name":"/Users/shelwitz/.cargo/registry/src/github.com-1ecc6299db9ec823/triple_accel-0.4.0/src/levenshtein.rs","byte_start":153382,"byte_end":153479,"line_start":549,"line_end":549,"column_start":1,"column_end":98}},{"value":"/ SIMD acceleration.","span":{"file_name":"/Users/shelwitz/.cargo/registry/src/github.com-1ecc6299db9ec823/triple_accel-0.4.0/src/levenshtein.rs","byte_start":153480,"byte_end":153502,"line_start":550,"line_end":550,"column_start":1,"column_end":23}},{"value":"/","span":{"file_name":"/Users/shelwitz/.cargo/registry/src/github.com-1ecc6299db9ec823/triple_accel-0.4.0/src/levenshtein.rs","byte_start":153503,"byte_end":153506,"line_start":551,"line_end":551,"column_start":1,"column_end":4}},{"value":"/ This will return `None` if the Levenshtein distance between `a` and `b` is greater than the","span":{"file_name":"/Users/shelwitz/.cargo/registry/src/github.com-1ecc6299db9ec823/triple_accel-0.4.0/src/levenshtein.rs","byte_start":153507,"byte_end":153602,"line_start":552,"line_end":552,"column_start":1,"column_end":96}},{"value":"/ threshold `k`.","span":{"file_name":"/Users/shelwitz/.cargo/registry/src/github.com-1ecc6299db9ec823/triple_accel-0.4.0/src/levenshtein.rs","byte_start":153603,"byte_end":153621,"line_start":553,"line_end":553,"column_start":1,"column_end":19}},{"value":"/ This should be much faster than `levenshtein_naive` and `levenshtein_naive_k`.","span":{"file_name":"/Users/shelwitz/.cargo/registry/src/github.com-1ecc6299db9ec823/triple_accel-0.4.0/src/levenshtein.rs","byte_start":153622,"byte_end":153704,"line_start":554,"line_end":554,"column_start":1,"column_end":83}},{"value":"/ Internally, this will automatically use AVX or SSE vectors with 8-bit, 16-bit, or 32-bit elements","span":{"file_name":"/Users/shelwitz/.cargo/registry/src/github.com-1ecc6299db9ec823/triple_accel-0.4.0/src/levenshtein.rs","byte_start":153705,"byte_end":153806,"line_start":555,"line_end":555,"column_start":1,"column_end":102}},{"value":"/ to represent anti-diagonals in the dynamic programming matrix for calculating Levenshtein distance.","span":{"file_name":"/Users/shelwitz/.cargo/registry/src/github.com-1ecc6299db9ec823/triple_accel-0.4.0/src/levenshtein.rs","byte_start":153807,"byte_end":153910,"line_start":556,"line_end":556,"column_start":1,"column_end":104}},{"value":"/ If AVX2 or SSE4.1 is not supported, then this will automatically fall back to","span":{"file_name":"/Users/shelwitz/.cargo/registry/src/github.com-1ecc6299db9ec823/triple_accel-0.4.0/src/levenshtein.rs","byte_start":153911,"byte_end":153992,"line_start":557,"line_end":557,"column_start":1,"column_end":82}},{"value":"/ `levenshtein_naive_k_with_opts`.","span":{"file_name":"/Users/shelwitz/.cargo/registry/src/github.com-1ecc6299db9ec823/triple_accel-0.4.0/src/levenshtein.rs","byte_start":153993,"byte_end":154029,"line_start":558,"line_end":558,"column_start":1,"column_end":37}},{"value":"/","span":{"file_name":"/Users/shelwitz/.cargo/registry/src/github.com-1ecc6299db9ec823/triple_accel-0.4.0/src/levenshtein.rs","byte_start":154030,"byte_end":154033,"line_start":559,"line_end":559,"column_start":1,"column_end":4}},{"value":"/ # Arguments","span":{"file_name":"/Users/shelwitz/.cargo/registry/src/github.com-1ecc6299db9ec823/triple_accel-0.4.0/src/levenshtein.rs","byte_start":154034,"byte_end":154049,"line_start":560,"line_end":560,"column_start":1,"column_end":16}},{"value":"/ * `a` - first string (slice)","span":{"file_name":"/Users/shelwitz/.cargo/registry/src/github.com-1ecc6299db9ec823/triple_accel-0.4.0/src/levenshtein.rs","byte_start":154050,"byte_end":154082,"line_start":561,"line_end":561,"column_start":1,"column_end":33}},{"value":"/ * `b` - second string (slice)","span":{"file_name":"/Users/shelwitz/.cargo/registry/src/github.com-1ecc6299db9ec823/triple_accel-0.4.0/src/levenshtein.rs","byte_start":154083,"byte_end":154116,"line_start":562,"line_end":562,"column_start":1,"column_end":34}},{"value":"/ * `k` - maximum number of edits allowed between `a` and `b`","span":{"file_name":"/Users/shelwitz/.cargo/registry/src/github.com-1ecc6299db9ec823/triple_accel-0.4.0/src/levenshtein.rs","byte_start":154117,"byte_end":154180,"line_start":563,"line_end":563,"column_start":1,"column_end":64}},{"value":"/","span":{"file_name":"/Users/shelwitz/.cargo/registry/src/github.com-1ecc6299db9ec823/triple_accel-0.4.0/src/levenshtein.rs","byte_start":154181,"byte_end":154184,"line_start":564,"line_end":564,"column_start":1,"column_end":4}},{"value":"/ # Example","span":{"file_name":"/Users/shelwitz/.cargo/registry/src/github.com-1ecc6299db9ec823/triple_accel-0.4.0/src/levenshtein.rs","byte_start":154185,"byte_end":154198,"line_start":565,"line_end":565,"column_start":1,"column_end":14}},{"value":"/ ```","span":{"file_name":"/Users/shelwitz/.cargo/registry/src/github.com-1ecc6299db9ec823/triple_accel-0.4.0/src/levenshtein.rs","byte_start":154199,"byte_end":154206,"line_start":566,"line_end":566,"column_start":1,"column_end":8}},{"value":"/ # use triple_accel::*;","span":{"file_name":"/Users/shelwitz/.cargo/registry/src/github.com-1ecc6299db9ec823/triple_accel-0.4.0/src/levenshtein.rs","byte_start":154207,"byte_end":154233,"line_start":567,"line_end":567,"column_start":1,"column_end":27}},{"value":"/ # use triple_accel::levenshtein::*;","span":{"file_name":"/Users/shelwitz/.cargo/registry/src/github.com-1ecc6299db9ec823/triple_accel-0.4.0/src/levenshtein.rs","byte_start":154234,"byte_end":154273,"line_start":568,"line_end":568,"column_start":1,"column_end":40}},{"value":"/ let dist = levenshtein_simd_k(b\"abc\", b\"ab\", 1);","span":{"file_name":"/Users/shelwitz/.cargo/registry/src/github.com-1ecc6299db9ec823/triple_accel-0.4.0/src/levenshtein.rs","byte_start":154274,"byte_end":154326,"line_start":569,"line_end":569,"column_start":1,"column_end":53}},{"value":"/","span":{"file_name":"/Users/shelwitz/.cargo/registry/src/github.com-1ecc6299db9ec823/triple_accel-0.4.0/src/levenshtein.rs","byte_start":154327,"byte_end":154330,"line_start":570,"line_end":570,"column_start":1,"column_end":4}},{"value":"/ assert!(dist.unwrap() == 1);","span":{"file_name":"/Users/shelwitz/.cargo/registry/src/github.com-1ecc6299db9ec823/triple_accel-0.4.0/src/levenshtein.rs","byte_start":154331,"byte_end":154363,"line_start":571,"line_end":571,"column_start":1,"column_end":33}},{"value":"/ ```","span":{"file_name":"/Users/shelwitz/.cargo/registry/src/github.com-1ecc6299db9ec823/triple_accel-0.4.0/src/levenshtein.rs","byte_start":154364,"byte_end":154371,"line_start":572,"line_end":572,"column_start":1,"column_end":8}}]},{"kind":"Function","id":{"krate":0,"index":252},"span":{"file_name":"/Users/shelwitz/.cargo/registry/src/github.com-1ecc6299db9ec823/triple_accel-0.4.0/src/levenshtein.rs","byte_start":156019,"byte_end":156047,"line_start":610,"line_end":610,"column_start":8,"column_end":36},"name":"levenshtein_simd_k_with_opts","qualname":"::levenshtein::levenshtein_simd_k_with_opts","value":"pub fn levenshtein_simd_k_with_opts(&[u8], &[u8], u32, bool, EditCosts)\n-> Option<(u32, Option<Vec<Edit>>)>","parent":null,"children":[],"decl_id":null,"docs":" Returns the Levenshtein distance, bounded by a cost threshold `k`, between two strings and optionally,\n the edit traceback, using SIMD acceleration, with extra options.","sig":null,"attributes":[{"value":"/ Returns the Levenshtein distance, bounded by a cost threshold `k`, between two strings and optionally,","span":{"file_name":"/Users/shelwitz/.cargo/registry/src/github.com-1ecc6299db9ec823/triple_accel-0.4.0/src/levenshtein.rs","byte_start":154610,"byte_end":154716,"line_start":582,"line_end":582,"column_start":1,"column_end":107}},{"value":"/ the edit traceback, using SIMD acceleration, with extra options.","span":{"file_name":"/Users/shelwitz/.cargo/registry/src/github.com-1ecc6299db9ec823/triple_accel-0.4.0/src/levenshtein.rs","byte_start":154717,"byte_end":154785,"line_start":583,"line_end":583,"column_start":1,"column_end":69}},{"value":"/","span":{"file_name":"/Users/shelwitz/.cargo/registry/src/github.com-1ecc6299db9ec823/triple_accel-0.4.0/src/levenshtein.rs","byte_start":154786,"byte_end":154789,"line_start":584,"line_end":584,"column_start":1,"column_end":4}},{"value":"/ This will return `None` if the Levenshtein distance between `a` and `b` is greater than the","span":{"file_name":"/Users/shelwitz/.cargo/registry/src/github.com-1ecc6299db9ec823/triple_accel-0.4.0/src/levenshtein.rs","byte_start":154790,"byte_end":154885,"line_start":585,"line_end":585,"column_start":1,"column_end":96}},{"value":"/ threshold `k`.","span":{"file_name":"/Users/shelwitz/.cargo/registry/src/github.com-1ecc6299db9ec823/triple_accel-0.4.0/src/levenshtein.rs","byte_start":154886,"byte_end":154904,"line_start":586,"line_end":586,"column_start":1,"column_end":19}},{"value":"/ This should be much faster than `levenshtein_naive_with_opts` and","span":{"file_name":"/Users/shelwitz/.cargo/registry/src/github.com-1ecc6299db9ec823/triple_accel-0.4.0/src/levenshtein.rs","byte_start":154905,"byte_end":154974,"line_start":587,"line_end":587,"column_start":1,"column_end":70}},{"value":"/ `levenshtein_naive_k_with_opts`.","span":{"file_name":"/Users/shelwitz/.cargo/registry/src/github.com-1ecc6299db9ec823/triple_accel-0.4.0/src/levenshtein.rs","byte_start":154975,"byte_end":155011,"line_start":588,"line_end":588,"column_start":1,"column_end":37}},{"value":"/ Internally, this will automatically use AVX or SSE vectors with 8-bit, 16-bit, or 32-bit elements","span":{"file_name":"/Users/shelwitz/.cargo/registry/src/github.com-1ecc6299db9ec823/triple_accel-0.4.0/src/levenshtein.rs","byte_start":155012,"byte_end":155113,"line_start":589,"line_end":589,"column_start":1,"column_end":102}},{"value":"/ to represent anti-diagonals in the dynamic programming matrix for calculating Levenshtein distance.","span":{"file_name":"/Users/shelwitz/.cargo/registry/src/github.com-1ecc6299db9ec823/triple_accel-0.4.0/src/levenshtein.rs","byte_start":155114,"byte_end":155217,"line_start":590,"line_end":590,"column_start":1,"column_end":104}},{"value":"/ If AVX2 or SSE4.1 is not supported, then this will automatically fall back to","span":{"file_name":"/Users/shelwitz/.cargo/registry/src/github.com-1ecc6299db9ec823/triple_accel-0.4.0/src/levenshtein.rs","byte_start":155218,"byte_end":155299,"line_start":591,"line_end":591,"column_start":1,"column_end":82}},{"value":"/ `levenshtein_naive_k_with_opts`.","span":{"file_name":"/Users/shelwitz/.cargo/registry/src/github.com-1ecc6299db9ec823/triple_accel-0.4.0/src/levenshtein.rs","byte_start":155300,"byte_end":155336,"line_start":592,"line_end":592,"column_start":1,"column_end":37}},{"value":"/","span":{"file_name":"/Users/shelwitz/.cargo/registry/src/github.com-1ecc6299db9ec823/triple_accel-0.4.0/src/levenshtein.rs","byte_start":155337,"byte_end":155340,"line_start":593,"line_end":593,"column_start":1,"column_end":4}},{"value":"/ # Arguments","span":{"file_name":"/Users/shelwitz/.cargo/registry/src/github.com-1ecc6299db9ec823/triple_accel-0.4.0/src/levenshtein.rs","byte_start":155341,"byte_end":155356,"line_start":594,"line_end":594,"column_start":1,"column_end":16}},{"value":"/ * `a` - first string (slice)","span":{"file_name":"/Users/shelwitz/.cargo/registry/src/github.com-1ecc6299db9ec823/triple_accel-0.4.0/src/levenshtein.rs","byte_start":155357,"byte_end":155389,"line_start":595,"line_end":595,"column_start":1,"column_end":33}},{"value":"/ * `b` - second string (slice)","span":{"file_name":"/Users/shelwitz/.cargo/registry/src/github.com-1ecc6299db9ec823/triple_accel-0.4.0/src/levenshtein.rs","byte_start":155390,"byte_end":155423,"line_start":596,"line_end":596,"column_start":1,"column_end":34}},{"value":"/ * `k` - maximum number of cost allowed between `a` and `b`","span":{"file_name":"/Users/shelwitz/.cargo/registry/src/github.com-1ecc6299db9ec823/triple_accel-0.4.0/src/levenshtein.rs","byte_start":155424,"byte_end":155486,"line_start":597,"line_end":597,"column_start":1,"column_end":63}},{"value":"/ * `trace_on` - whether to return the traceback, the sequence of edits between `a` and `b`","span":{"file_name":"/Users/shelwitz/.cargo/registry/src/github.com-1ecc6299db9ec823/triple_accel-0.4.0/src/levenshtein.rs","byte_start":155487,"byte_end":155580,"line_start":598,"line_end":598,"column_start":1,"column_end":94}},{"value":"/ * `costs` - `EditCosts` struct for the cost of each edit operation","span":{"file_name":"/Users/shelwitz/.cargo/registry/src/github.com-1ecc6299db9ec823/triple_accel-0.4.0/src/levenshtein.rs","byte_start":155581,"byte_end":155651,"line_start":599,"line_end":599,"column_start":1,"column_end":71}},{"value":"/","span":{"file_name":"/Users/shelwitz/.cargo/registry/src/github.com-1ecc6299db9ec823/triple_accel-0.4.0/src/levenshtein.rs","byte_start":155652,"byte_end":155655,"line_start":600,"line_end":600,"column_start":1,"column_end":4}},{"value":"/ # Example","span":{"file_name":"/Users/shelwitz/.cargo/registry/src/github.com-1ecc6299db9ec823/triple_accel-0.4.0/src/levenshtein.rs","byte_start":155656,"byte_end":155669,"line_start":601,"line_end":601,"column_start":1,"column_end":14}},{"value":"/ ```","span":{"file_name":"/Users/shelwitz/.cargo/registry/src/github.com-1ecc6299db9ec823/triple_accel-0.4.0/src/levenshtein.rs","byte_start":155670,"byte_end":155677,"line_start":602,"line_end":602,"column_start":1,"column_end":8}},{"value":"/ # use triple_accel::*;","span":{"file_name":"/Users/shelwitz/.cargo/registry/src/github.com-1ecc6299db9ec823/triple_accel-0.4.0/src/levenshtein.rs","byte_start":155678,"byte_end":155704,"line_start":603,"line_end":603,"column_start":1,"column_end":27}},{"value":"/ # use triple_accel::levenshtein::*;","span":{"file_name":"/Users/shelwitz/.cargo/registry/src/github.com-1ecc6299db9ec823/triple_accel-0.4.0/src/levenshtein.rs","byte_start":155705,"byte_end":155744,"line_start":604,"line_end":604,"column_start":1,"column_end":40}},{"value":"/ let dist = levenshtein_simd_k_with_opts(b\"abc\", b\"ab\", 1, true, LEVENSHTEIN_COSTS);","span":{"file_name":"/Users/shelwitz/.cargo/registry/src/github.com-1ecc6299db9ec823/triple_accel-0.4.0/src/levenshtein.rs","byte_start":155745,"byte_end":155832,"line_start":605,"line_end":605,"column_start":1,"column_end":88}},{"value":"/","span":{"file_name":"/Users/shelwitz/.cargo/registry/src/github.com-1ecc6299db9ec823/triple_accel-0.4.0/src/levenshtein.rs","byte_start":155833,"byte_end":155836,"line_start":606,"line_end":606,"column_start":1,"column_end":4}},{"value":"/ assert!(dist.unwrap() == (1, Some(vec![Edit{edit: EditType::Match, count: 2},","span":{"file_name":"/Users/shelwitz/.cargo/registry/src/github.com-1ecc6299db9ec823/triple_accel-0.4.0/src/levenshtein.rs","byte_start":155837,"byte_end":155918,"line_start":607,"line_end":607,"column_start":1,"column_end":82}},{"value":"/                                        Edit{edit: EditType::BGap, count: 1}])));","span":{"file_name":"/Users/shelwitz/.cargo/registry/src/github.com-1ecc6299db9ec823/triple_accel-0.4.0/src/levenshtein.rs","byte_start":155919,"byte_end":156003,"line_start":608,"line_end":608,"column_start":1,"column_end":85}},{"value":"/ ```","span":{"file_name":"/Users/shelwitz/.cargo/registry/src/github.com-1ecc6299db9ec823/triple_accel-0.4.0/src/levenshtein.rs","byte_start":156004,"byte_end":156011,"line_start":609,"line_end":609,"column_start":1,"column_end":8}}]},{"kind":"Function","id":{"krate":0,"index":254},"span":{"file_name":"/Users/shelwitz/.cargo/registry/src/github.com-1ecc6299db9ec823/triple_accel-0.4.0/src/levenshtein.rs","byte_start":181068,"byte_end":181079,"line_start":1107,"line_end":1107,"column_start":8,"column_end":19},"name":"levenshtein","qualname":"::levenshtein::levenshtein","value":"pub fn levenshtein(&[u8], &[u8]) -> u32","parent":null,"children":[],"decl_id":null,"docs":" Returns the Levenshtein distance between two strings using SIMD acceleration.","sig":null,"attributes":[{"value":"/ Returns the Levenshtein distance between two strings using SIMD acceleration.","span":{"file_name":"/Users/shelwitz/.cargo/registry/src/github.com-1ecc6299db9ec823/triple_accel-0.4.0/src/levenshtein.rs","byte_start":180472,"byte_end":180553,"line_start":1089,"line_end":1089,"column_start":1,"column_end":82}},{"value":"/","span":{"file_name":"/Users/shelwitz/.cargo/registry/src/github.com-1ecc6299db9ec823/triple_accel-0.4.0/src/levenshtein.rs","byte_start":180554,"byte_end":180557,"line_start":1090,"line_end":1090,"column_start":1,"column_end":4}},{"value":"/ Note that `levenshtein_exp` may be much faster if the number of edits between the two strings","span":{"file_name":"/Users/shelwitz/.cargo/registry/src/github.com-1ecc6299db9ec823/triple_accel-0.4.0/src/levenshtein.rs","byte_start":180558,"byte_end":180655,"line_start":1091,"line_end":1091,"column_start":1,"column_end":98}},{"value":"/ is expected to be small.","span":{"file_name":"/Users/shelwitz/.cargo/registry/src/github.com-1ecc6299db9ec823/triple_accel-0.4.0/src/levenshtein.rs","byte_start":180656,"byte_end":180684,"line_start":1092,"line_end":1092,"column_start":1,"column_end":29}},{"value":"/ Internally, this will call `levenshtein_simd_k`.","span":{"file_name":"/Users/shelwitz/.cargo/registry/src/github.com-1ecc6299db9ec823/triple_accel-0.4.0/src/levenshtein.rs","byte_start":180685,"byte_end":180737,"line_start":1093,"line_end":1093,"column_start":1,"column_end":53}},{"value":"/ If AVX2 or SSE4.1 is not supported, then this will automatically fall back to a scalar alternative.","span":{"file_name":"/Users/shelwitz/.cargo/registry/src/github.com-1ecc6299db9ec823/triple_accel-0.4.0/src/levenshtein.rs","byte_start":180738,"byte_end":180841,"line_start":1094,"line_end":1094,"column_start":1,"column_end":104}},{"value":"/","span":{"file_name":"/Users/shelwitz/.cargo/registry/src/github.com-1ecc6299db9ec823/triple_accel-0.4.0/src/levenshtein.rs","byte_start":180842,"byte_end":180845,"line_start":1095,"line_end":1095,"column_start":1,"column_end":4}},{"value":"/ # Arguments","span":{"file_name":"/Users/shelwitz/.cargo/registry/src/github.com-1ecc6299db9ec823/triple_accel-0.4.0/src/levenshtein.rs","byte_start":180846,"byte_end":180861,"line_start":1096,"line_end":1096,"column_start":1,"column_end":16}},{"value":"/ * `a` - first string (slice)","span":{"file_name":"/Users/shelwitz/.cargo/registry/src/github.com-1ecc6299db9ec823/triple_accel-0.4.0/src/levenshtein.rs","byte_start":180862,"byte_end":180894,"line_start":1097,"line_end":1097,"column_start":1,"column_end":33}},{"value":"/ * `b` - second string (slice)","span":{"file_name":"/Users/shelwitz/.cargo/registry/src/github.com-1ecc6299db9ec823/triple_accel-0.4.0/src/levenshtein.rs","byte_start":180895,"byte_end":180928,"line_start":1098,"line_end":1098,"column_start":1,"column_end":34}},{"value":"/","span":{"file_name":"/Users/shelwitz/.cargo/registry/src/github.com-1ecc6299db9ec823/triple_accel-0.4.0/src/levenshtein.rs","byte_start":180929,"byte_end":180932,"line_start":1099,"line_end":1099,"column_start":1,"column_end":4}},{"value":"/ # Example","span":{"file_name":"/Users/shelwitz/.cargo/registry/src/github.com-1ecc6299db9ec823/triple_accel-0.4.0/src/levenshtein.rs","byte_start":180933,"byte_end":180946,"line_start":1100,"line_end":1100,"column_start":1,"column_end":14}},{"value":"/ ```","span":{"file_name":"/Users/shelwitz/.cargo/registry/src/github.com-1ecc6299db9ec823/triple_accel-0.4.0/src/levenshtein.rs","byte_start":180947,"byte_end":180954,"line_start":1101,"line_end":1101,"column_start":1,"column_end":8}},{"value":"/ # use triple_accel::*;","span":{"file_name":"/Users/shelwitz/.cargo/registry/src/github.com-1ecc6299db9ec823/triple_accel-0.4.0/src/levenshtein.rs","byte_start":180955,"byte_end":180981,"line_start":1102,"line_end":1102,"column_start":1,"column_end":27}},{"value":"/ let dist = levenshtein(b\"abc\", b\"ab\");","span":{"file_name":"/Users/shelwitz/.cargo/registry/src/github.com-1ecc6299db9ec823/triple_accel-0.4.0/src/levenshtein.rs","byte_start":180982,"byte_end":181024,"line_start":1103,"line_end":1103,"column_start":1,"column_end":43}},{"value":"/","span":{"file_name":"/Users/shelwitz/.cargo/registry/src/github.com-1ecc6299db9ec823/triple_accel-0.4.0/src/levenshtein.rs","byte_start":181025,"byte_end":181028,"line_start":1104,"line_end":1104,"column_start":1,"column_end":4}},{"value":"/ assert!(dist == 1);","span":{"file_name":"/Users/shelwitz/.cargo/registry/src/github.com-1ecc6299db9ec823/triple_accel-0.4.0/src/levenshtein.rs","byte_start":181029,"byte_end":181052,"line_start":1105,"line_end":1105,"column_start":1,"column_end":24}},{"value":"/ ```","span":{"file_name":"/Users/shelwitz/.cargo/registry/src/github.com-1ecc6299db9ec823/triple_accel-0.4.0/src/levenshtein.rs","byte_start":181053,"byte_end":181060,"line_start":1106,"line_end":1106,"column_start":1,"column_end":8}}]},{"kind":"Function","id":{"krate":0,"index":255},"span":{"file_name":"/Users/shelwitz/.cargo/registry/src/github.com-1ecc6299db9ec823/triple_accel-0.4.0/src/levenshtein.rs","byte_start":181780,"byte_end":181788,"line_start":1129,"line_end":1129,"column_start":8,"column_end":16},"name":"rdamerau","qualname":"::levenshtein::rdamerau","value":"pub fn rdamerau(&[u8], &[u8]) -> u32","parent":null,"children":[],"decl_id":null,"docs":" Returns the restricted Damerau-Levenshtein distance between two strings using SIMD acceleration.","sig":null,"attributes":[{"value":"/ Returns the restricted Damerau-Levenshtein distance between two strings using SIMD acceleration.","span":{"file_name":"/Users/shelwitz/.cargo/registry/src/github.com-1ecc6299db9ec823/triple_accel-0.4.0/src/levenshtein.rs","byte_start":181160,"byte_end":181260,"line_start":1111,"line_end":1111,"column_start":1,"column_end":101}},{"value":"/","span":{"file_name":"/Users/shelwitz/.cargo/registry/src/github.com-1ecc6299db9ec823/triple_accel-0.4.0/src/levenshtein.rs","byte_start":181261,"byte_end":181264,"line_start":1112,"line_end":1112,"column_start":1,"column_end":4}},{"value":"/ Note that `rdamerau_exp` may be much faster if the number of edits between the two strings","span":{"file_name":"/Users/shelwitz/.cargo/registry/src/github.com-1ecc6299db9ec823/triple_accel-0.4.0/src/levenshtein.rs","byte_start":181265,"byte_end":181359,"line_start":1113,"line_end":1113,"column_start":1,"column_end":95}},{"value":"/ is expected to be small.","span":{"file_name":"/Users/shelwitz/.cargo/registry/src/github.com-1ecc6299db9ec823/triple_accel-0.4.0/src/levenshtein.rs","byte_start":181360,"byte_end":181388,"line_start":1114,"line_end":1114,"column_start":1,"column_end":29}},{"value":"/ Internally, this will call `levenshtein_simd_k_with_opts`.","span":{"file_name":"/Users/shelwitz/.cargo/registry/src/github.com-1ecc6299db9ec823/triple_accel-0.4.0/src/levenshtein.rs","byte_start":181389,"byte_end":181451,"line_start":1115,"line_end":1115,"column_start":1,"column_end":63}},{"value":"/ If AVX2 or SSE4.1 is not supported, then this will automatically fall back to a scalar alternative.","span":{"file_name":"/Users/shelwitz/.cargo/registry/src/github.com-1ecc6299db9ec823/triple_accel-0.4.0/src/levenshtein.rs","byte_start":181452,"byte_end":181555,"line_start":1116,"line_end":1116,"column_start":1,"column_end":104}},{"value":"/","span":{"file_name":"/Users/shelwitz/.cargo/registry/src/github.com-1ecc6299db9ec823/triple_accel-0.4.0/src/levenshtein.rs","byte_start":181556,"byte_end":181559,"line_start":1117,"line_end":1117,"column_start":1,"column_end":4}},{"value":"/ # Arguments","span":{"file_name":"/Users/shelwitz/.cargo/registry/src/github.com-1ecc6299db9ec823/triple_accel-0.4.0/src/levenshtein.rs","byte_start":181560,"byte_end":181575,"line_start":1118,"line_end":1118,"column_start":1,"column_end":16}},{"value":"/ * `a` - first string (slice)","span":{"file_name":"/Users/shelwitz/.cargo/registry/src/github.com-1ecc6299db9ec823/triple_accel-0.4.0/src/levenshtein.rs","byte_start":181576,"byte_end":181608,"line_start":1119,"line_end":1119,"column_start":1,"column_end":33}},{"value":"/ * `b` - second string (slice)","span":{"file_name":"/Users/shelwitz/.cargo/registry/src/github.com-1ecc6299db9ec823/triple_accel-0.4.0/src/levenshtein.rs","byte_start":181609,"byte_end":181642,"line_start":1120,"line_end":1120,"column_start":1,"column_end":34}},{"value":"/","span":{"file_name":"/Users/shelwitz/.cargo/registry/src/github.com-1ecc6299db9ec823/triple_accel-0.4.0/src/levenshtein.rs","byte_start":181643,"byte_end":181646,"line_start":1121,"line_end":1121,"column_start":1,"column_end":4}},{"value":"/ # Example","span":{"file_name":"/Users/shelwitz/.cargo/registry/src/github.com-1ecc6299db9ec823/triple_accel-0.4.0/src/levenshtein.rs","byte_start":181647,"byte_end":181660,"line_start":1122,"line_end":1122,"column_start":1,"column_end":14}},{"value":"/ ```","span":{"file_name":"/Users/shelwitz/.cargo/registry/src/github.com-1ecc6299db9ec823/triple_accel-0.4.0/src/levenshtein.rs","byte_start":181661,"byte_end":181668,"line_start":1123,"line_end":1123,"column_start":1,"column_end":8}},{"value":"/ # use triple_accel::*;","span":{"file_name":"/Users/shelwitz/.cargo/registry/src/github.com-1ecc6299db9ec823/triple_accel-0.4.0/src/levenshtein.rs","byte_start":181669,"byte_end":181695,"line_start":1124,"line_end":1124,"column_start":1,"column_end":27}},{"value":"/ let dist = rdamerau(b\"abc\", b\"acb\");","span":{"file_name":"/Users/shelwitz/.cargo/registry/src/github.com-1ecc6299db9ec823/triple_accel-0.4.0/src/levenshtein.rs","byte_start":181696,"byte_end":181736,"line_start":1125,"line_end":1125,"column_start":1,"column_end":41}},{"value":"/","span":{"file_name":"/Users/shelwitz/.cargo/registry/src/github.com-1ecc6299db9ec823/triple_accel-0.4.0/src/levenshtein.rs","byte_start":181737,"byte_end":181740,"line_start":1126,"line_end":1126,"column_start":1,"column_end":4}},{"value":"/ assert!(dist == 1);","span":{"file_name":"/Users/shelwitz/.cargo/registry/src/github.com-1ecc6299db9ec823/triple_accel-0.4.0/src/levenshtein.rs","byte_start":181741,"byte_end":181764,"line_start":1127,"line_end":1127,"column_start":1,"column_end":24}},{"value":"/ ```","span":{"file_name":"/Users/shelwitz/.cargo/registry/src/github.com-1ecc6299db9ec823/triple_accel-0.4.0/src/levenshtein.rs","byte_start":181765,"byte_end":181772,"line_start":1128,"line_end":1128,"column_start":1,"column_end":8}}]},{"kind":"Function","id":{"krate":0,"index":256},"span":{"file_name":"/Users/shelwitz/.cargo/registry/src/github.com-1ecc6299db9ec823/triple_accel-0.4.0/src/levenshtein.rs","byte_start":182592,"byte_end":182607,"line_start":1153,"line_end":1153,"column_start":8,"column_end":23},"name":"levenshtein_exp","qualname":"::levenshtein::levenshtein_exp","value":"pub fn levenshtein_exp(&[u8], &[u8]) -> u32","parent":null,"children":[],"decl_id":null,"docs":" Returns the Levenshtein distance between two strings using exponential search and SIMD\n acceleration.","sig":null,"attributes":[{"value":"/ Returns the Levenshtein distance between two strings using exponential search and SIMD","span":{"file_name":"/Users/shelwitz/.cargo/registry/src/github.com-1ecc6299db9ec823/triple_accel-0.4.0/src/levenshtein.rs","byte_start":181904,"byte_end":181994,"line_start":1133,"line_end":1133,"column_start":1,"column_end":91}},{"value":"/ acceleration.","span":{"file_name":"/Users/shelwitz/.cargo/registry/src/github.com-1ecc6299db9ec823/triple_accel-0.4.0/src/levenshtein.rs","byte_start":181995,"byte_end":182012,"line_start":1134,"line_end":1134,"column_start":1,"column_end":18}},{"value":"/","span":{"file_name":"/Users/shelwitz/.cargo/registry/src/github.com-1ecc6299db9ec823/triple_accel-0.4.0/src/levenshtein.rs","byte_start":182013,"byte_end":182016,"line_start":1135,"line_end":1135,"column_start":1,"column_end":4}},{"value":"/ This may be much more efficient than `levenshtein` if the number of edits between `a` and `b`","span":{"file_name":"/Users/shelwitz/.cargo/registry/src/github.com-1ecc6299db9ec823/triple_accel-0.4.0/src/levenshtein.rs","byte_start":182017,"byte_end":182114,"line_start":1136,"line_end":1136,"column_start":1,"column_end":98}},{"value":"/ is expected to be small.","span":{"file_name":"/Users/shelwitz/.cargo/registry/src/github.com-1ecc6299db9ec823/triple_accel-0.4.0/src/levenshtein.rs","byte_start":182115,"byte_end":182143,"line_start":1137,"line_end":1137,"column_start":1,"column_end":29}},{"value":"/ Internally, this will call `levenshtein_simd_k` with values of `k` determined through","span":{"file_name":"/Users/shelwitz/.cargo/registry/src/github.com-1ecc6299db9ec823/triple_accel-0.4.0/src/levenshtein.rs","byte_start":182144,"byte_end":182233,"line_start":1138,"line_end":1138,"column_start":1,"column_end":90}},{"value":"/ exponential search.","span":{"file_name":"/Users/shelwitz/.cargo/registry/src/github.com-1ecc6299db9ec823/triple_accel-0.4.0/src/levenshtein.rs","byte_start":182234,"byte_end":182257,"line_start":1139,"line_end":1139,"column_start":1,"column_end":24}},{"value":"/ If AVX2 or SSE4.1 is not supported, then this will automatically fall back to a scalar alternative.","span":{"file_name":"/Users/shelwitz/.cargo/registry/src/github.com-1ecc6299db9ec823/triple_accel-0.4.0/src/levenshtein.rs","byte_start":182258,"byte_end":182361,"line_start":1140,"line_end":1140,"column_start":1,"column_end":104}},{"value":"/","span":{"file_name":"/Users/shelwitz/.cargo/registry/src/github.com-1ecc6299db9ec823/triple_accel-0.4.0/src/levenshtein.rs","byte_start":182362,"byte_end":182365,"line_start":1141,"line_end":1141,"column_start":1,"column_end":4}},{"value":"/ # Arguments","span":{"file_name":"/Users/shelwitz/.cargo/registry/src/github.com-1ecc6299db9ec823/triple_accel-0.4.0/src/levenshtein.rs","byte_start":182366,"byte_end":182381,"line_start":1142,"line_end":1142,"column_start":1,"column_end":16}},{"value":"/ * `a` - first string (slice)","span":{"file_name":"/Users/shelwitz/.cargo/registry/src/github.com-1ecc6299db9ec823/triple_accel-0.4.0/src/levenshtein.rs","byte_start":182382,"byte_end":182414,"line_start":1143,"line_end":1143,"column_start":1,"column_end":33}},{"value":"/ * `b` - second string (slice)","span":{"file_name":"/Users/shelwitz/.cargo/registry/src/github.com-1ecc6299db9ec823/triple_accel-0.4.0/src/levenshtein.rs","byte_start":182415,"byte_end":182448,"line_start":1144,"line_end":1144,"column_start":1,"column_end":34}},{"value":"/","span":{"file_name":"/Users/shelwitz/.cargo/registry/src/github.com-1ecc6299db9ec823/triple_accel-0.4.0/src/levenshtein.rs","byte_start":182449,"byte_end":182452,"line_start":1145,"line_end":1145,"column_start":1,"column_end":4}},{"value":"/ # Example","span":{"file_name":"/Users/shelwitz/.cargo/registry/src/github.com-1ecc6299db9ec823/triple_accel-0.4.0/src/levenshtein.rs","byte_start":182453,"byte_end":182466,"line_start":1146,"line_end":1146,"column_start":1,"column_end":14}},{"value":"/ ```","span":{"file_name":"/Users/shelwitz/.cargo/registry/src/github.com-1ecc6299db9ec823/triple_accel-0.4.0/src/levenshtein.rs","byte_start":182467,"byte_end":182474,"line_start":1147,"line_end":1147,"column_start":1,"column_end":8}},{"value":"/ # use triple_accel::*;","span":{"file_name":"/Users/shelwitz/.cargo/registry/src/github.com-1ecc6299db9ec823/triple_accel-0.4.0/src/levenshtein.rs","byte_start":182475,"byte_end":182501,"line_start":1148,"line_end":1148,"column_start":1,"column_end":27}},{"value":"/ let dist = levenshtein_exp(b\"abc\", b\"ab\");","span":{"file_name":"/Users/shelwitz/.cargo/registry/src/github.com-1ecc6299db9ec823/triple_accel-0.4.0/src/levenshtein.rs","byte_start":182502,"byte_end":182548,"line_start":1149,"line_end":1149,"column_start":1,"column_end":47}},{"value":"/","span":{"file_name":"/Users/shelwitz/.cargo/registry/src/github.com-1ecc6299db9ec823/triple_accel-0.4.0/src/levenshtein.rs","byte_start":182549,"byte_end":182552,"line_start":1150,"line_end":1150,"column_start":1,"column_end":4}},{"value":"/ assert!(dist == 1);","span":{"file_name":"/Users/shelwitz/.cargo/registry/src/github.com-1ecc6299db9ec823/triple_accel-0.4.0/src/levenshtein.rs","byte_start":182553,"byte_end":182576,"line_start":1151,"line_end":1151,"column_start":1,"column_end":24}},{"value":"/ ```","span":{"file_name":"/Users/shelwitz/.cargo/registry/src/github.com-1ecc6299db9ec823/triple_accel-0.4.0/src/levenshtein.rs","byte_start":182577,"byte_end":182584,"line_start":1152,"line_end":1152,"column_start":1,"column_end":8}}]},{"kind":"Function","id":{"krate":0,"index":257},"span":{"file_name":"/Users/shelwitz/.cargo/registry/src/github.com-1ecc6299db9ec823/triple_accel-0.4.0/src/levenshtein.rs","byte_start":183580,"byte_end":183592,"line_start":1187,"line_end":1187,"column_start":8,"column_end":20},"name":"rdamerau_exp","qualname":"::levenshtein::rdamerau_exp","value":"pub fn rdamerau_exp(&[u8], &[u8]) -> u32","parent":null,"children":[],"decl_id":null,"docs":" Returns the restricted Damerau-Levenshtein distance between two strings using exponential\n search and SIMD acceleration.","sig":null,"attributes":[{"value":"/ Returns the restricted Damerau-Levenshtein distance between two strings using exponential","span":{"file_name":"/Users/shelwitz/.cargo/registry/src/github.com-1ecc6299db9ec823/triple_accel-0.4.0/src/levenshtein.rs","byte_start":182868,"byte_end":182961,"line_start":1167,"line_end":1167,"column_start":1,"column_end":94}},{"value":"/ search and SIMD acceleration.","span":{"file_name":"/Users/shelwitz/.cargo/registry/src/github.com-1ecc6299db9ec823/triple_accel-0.4.0/src/levenshtein.rs","byte_start":182962,"byte_end":182995,"line_start":1168,"line_end":1168,"column_start":1,"column_end":34}},{"value":"/","span":{"file_name":"/Users/shelwitz/.cargo/registry/src/github.com-1ecc6299db9ec823/triple_accel-0.4.0/src/levenshtein.rs","byte_start":182996,"byte_end":182999,"line_start":1169,"line_end":1169,"column_start":1,"column_end":4}},{"value":"/ This may be much more efficient than `rdamerau` if the number of edits between `a` and `b`","span":{"file_name":"/Users/shelwitz/.cargo/registry/src/github.com-1ecc6299db9ec823/triple_accel-0.4.0/src/levenshtein.rs","byte_start":183000,"byte_end":183094,"line_start":1170,"line_end":1170,"column_start":1,"column_end":95}},{"value":"/ is expected to be small.","span":{"file_name":"/Users/shelwitz/.cargo/registry/src/github.com-1ecc6299db9ec823/triple_accel-0.4.0/src/levenshtein.rs","byte_start":183095,"byte_end":183123,"line_start":1171,"line_end":1171,"column_start":1,"column_end":29}},{"value":"/ Internally, this will call `levenshtein_simd_k_with_opts` with values of `k` determined through","span":{"file_name":"/Users/shelwitz/.cargo/registry/src/github.com-1ecc6299db9ec823/triple_accel-0.4.0/src/levenshtein.rs","byte_start":183124,"byte_end":183223,"line_start":1172,"line_end":1172,"column_start":1,"column_end":100}},{"value":"/ exponential search.","span":{"file_name":"/Users/shelwitz/.cargo/registry/src/github.com-1ecc6299db9ec823/triple_accel-0.4.0/src/levenshtein.rs","byte_start":183224,"byte_end":183247,"line_start":1173,"line_end":1173,"column_start":1,"column_end":24}},{"value":"/ If AVX2 or SSE4.1 is not supported, then this will automatically fall back to a scalar alternative.","span":{"file_name":"/Users/shelwitz/.cargo/registry/src/github.com-1ecc6299db9ec823/triple_accel-0.4.0/src/levenshtein.rs","byte_start":183248,"byte_end":183351,"line_start":1174,"line_end":1174,"column_start":1,"column_end":104}},{"value":"/","span":{"file_name":"/Users/shelwitz/.cargo/registry/src/github.com-1ecc6299db9ec823/triple_accel-0.4.0/src/levenshtein.rs","byte_start":183352,"byte_end":183355,"line_start":1175,"line_end":1175,"column_start":1,"column_end":4}},{"value":"/ # Arguments","span":{"file_name":"/Users/shelwitz/.cargo/registry/src/github.com-1ecc6299db9ec823/triple_accel-0.4.0/src/levenshtein.rs","byte_start":183356,"byte_end":183371,"line_start":1176,"line_end":1176,"column_start":1,"column_end":16}},{"value":"/ * `a` - first string (slice)","span":{"file_name":"/Users/shelwitz/.cargo/registry/src/github.com-1ecc6299db9ec823/triple_accel-0.4.0/src/levenshtein.rs","byte_start":183372,"byte_end":183404,"line_start":1177,"line_end":1177,"column_start":1,"column_end":33}},{"value":"/ * `b` - second string (slice)","span":{"file_name":"/Users/shelwitz/.cargo/registry/src/github.com-1ecc6299db9ec823/triple_accel-0.4.0/src/levenshtein.rs","byte_start":183405,"byte_end":183438,"line_start":1178,"line_end":1178,"column_start":1,"column_end":34}},{"value":"/","span":{"file_name":"/Users/shelwitz/.cargo/registry/src/github.com-1ecc6299db9ec823/triple_accel-0.4.0/src/levenshtein.rs","byte_start":183439,"byte_end":183442,"line_start":1179,"line_end":1179,"column_start":1,"column_end":4}},{"value":"/ # Example","span":{"file_name":"/Users/shelwitz/.cargo/registry/src/github.com-1ecc6299db9ec823/triple_accel-0.4.0/src/levenshtein.rs","byte_start":183443,"byte_end":183456,"line_start":1180,"line_end":1180,"column_start":1,"column_end":14}},{"value":"/ ```","span":{"file_name":"/Users/shelwitz/.cargo/registry/src/github.com-1ecc6299db9ec823/triple_accel-0.4.0/src/levenshtein.rs","byte_start":183457,"byte_end":183464,"line_start":1181,"line_end":1181,"column_start":1,"column_end":8}},{"value":"/ # use triple_accel::*;","span":{"file_name":"/Users/shelwitz/.cargo/registry/src/github.com-1ecc6299db9ec823/triple_accel-0.4.0/src/levenshtein.rs","byte_start":183465,"byte_end":183491,"line_start":1182,"line_end":1182,"column_start":1,"column_end":27}},{"value":"/ let dist = rdamerau_exp(b\"abc\", b\"acb\");","span":{"file_name":"/Users/shelwitz/.cargo/registry/src/github.com-1ecc6299db9ec823/triple_accel-0.4.0/src/levenshtein.rs","byte_start":183492,"byte_end":183536,"line_start":1183,"line_end":1183,"column_start":1,"column_end":45}},{"value":"/","span":{"file_name":"/Users/shelwitz/.cargo/registry/src/github.com-1ecc6299db9ec823/triple_accel-0.4.0/src/levenshtein.rs","byte_start":183537,"byte_end":183540,"line_start":1184,"line_end":1184,"column_start":1,"column_end":4}},{"value":"/ assert!(dist == 1);","span":{"file_name":"/Users/shelwitz/.cargo/registry/src/github.com-1ecc6299db9ec823/triple_accel-0.4.0/src/levenshtein.rs","byte_start":183541,"byte_end":183564,"line_start":1185,"line_end":1185,"column_start":1,"column_end":24}},{"value":"/ ```","span":{"file_name":"/Users/shelwitz/.cargo/registry/src/github.com-1ecc6299db9ec823/triple_accel-0.4.0/src/levenshtein.rs","byte_start":183565,"byte_end":183572,"line_start":1186,"line_end":1186,"column_start":1,"column_end":8}}]},{"kind":"Function","id":{"krate":0,"index":258},"span":{"file_name":"/Users/shelwitz/.cargo/registry/src/github.com-1ecc6299db9ec823/triple_accel-0.4.0/src/levenshtein.rs","byte_start":184785,"byte_end":184809,"line_start":1222,"line_end":1222,"column_start":8,"column_end":32},"name":"levenshtein_search_naive","qualname":"::levenshtein::levenshtein_search_naive","value":"pub fn levenshtein_search_naive<'a>(&'a [u8], &'a [u8])\n-> Box<dyn Iterator<Item = Match> + 'a>","parent":null,"children":[],"decl_id":null,"docs":" Returns an iterator over the best `Match`s by searching through the text `haystack` for the\n pattern `needle` using the naive algorithm.","sig":null,"attributes":[{"value":"/ Returns an iterator over the best `Match`s by searching through the text `haystack` for the","span":{"file_name":"/Users/shelwitz/.cargo/registry/src/github.com-1ecc6299db9ec823/triple_accel-0.4.0/src/levenshtein.rs","byte_start":183921,"byte_end":184016,"line_start":1201,"line_end":1201,"column_start":1,"column_end":96}},{"value":"/ pattern `needle` using the naive algorithm.","span":{"file_name":"/Users/shelwitz/.cargo/registry/src/github.com-1ecc6299db9ec823/triple_accel-0.4.0/src/levenshtein.rs","byte_start":184017,"byte_end":184064,"line_start":1202,"line_end":1202,"column_start":1,"column_end":48}},{"value":"/","span":{"file_name":"/Users/shelwitz/.cargo/registry/src/github.com-1ecc6299db9ec823/triple_accel-0.4.0/src/levenshtein.rs","byte_start":184065,"byte_end":184068,"line_start":1203,"line_end":1203,"column_start":1,"column_end":4}},{"value":"/ The best matches are the matches with the lowest Levenshtein distance.","span":{"file_name":"/Users/shelwitz/.cargo/registry/src/github.com-1ecc6299db9ec823/triple_accel-0.4.0/src/levenshtein.rs","byte_start":184069,"byte_end":184143,"line_start":1204,"line_end":1204,"column_start":1,"column_end":75}},{"value":"/ If multiple best matches end at the same position or fully overlap, then the longest match is chosen.","span":{"file_name":"/Users/shelwitz/.cargo/registry/src/github.com-1ecc6299db9ec823/triple_accel-0.4.0/src/levenshtein.rs","byte_start":184144,"byte_end":184249,"line_start":1205,"line_end":1205,"column_start":1,"column_end":106}},{"value":"/ If `needle` is empty, then no `Match`es are returned.","span":{"file_name":"/Users/shelwitz/.cargo/registry/src/github.com-1ecc6299db9ec823/triple_accel-0.4.0/src/levenshtein.rs","byte_start":184250,"byte_end":184307,"line_start":1206,"line_end":1206,"column_start":1,"column_end":58}},{"value":"/ Each returned `Match` requires at least half or more bytes of the `needle` to match","span":{"file_name":"/Users/shelwitz/.cargo/registry/src/github.com-1ecc6299db9ec823/triple_accel-0.4.0/src/levenshtein.rs","byte_start":184308,"byte_end":184395,"line_start":1207,"line_end":1207,"column_start":1,"column_end":88}},{"value":"/ somewhere in the `haystack`.","span":{"file_name":"/Users/shelwitz/.cargo/registry/src/github.com-1ecc6299db9ec823/triple_accel-0.4.0/src/levenshtein.rs","byte_start":184396,"byte_end":184428,"line_start":1208,"line_end":1208,"column_start":1,"column_end":33}},{"value":"/","span":{"file_name":"/Users/shelwitz/.cargo/registry/src/github.com-1ecc6299db9ec823/triple_accel-0.4.0/src/levenshtein.rs","byte_start":184429,"byte_end":184432,"line_start":1209,"line_end":1209,"column_start":1,"column_end":4}},{"value":"/ # Arguments","span":{"file_name":"/Users/shelwitz/.cargo/registry/src/github.com-1ecc6299db9ec823/triple_accel-0.4.0/src/levenshtein.rs","byte_start":184433,"byte_end":184448,"line_start":1210,"line_end":1210,"column_start":1,"column_end":16}},{"value":"/ * `needle` - pattern string (slice)","span":{"file_name":"/Users/shelwitz/.cargo/registry/src/github.com-1ecc6299db9ec823/triple_accel-0.4.0/src/levenshtein.rs","byte_start":184449,"byte_end":184488,"line_start":1211,"line_end":1211,"column_start":1,"column_end":40}},{"value":"/ * `haystack` - text string (slice)","span":{"file_name":"/Users/shelwitz/.cargo/registry/src/github.com-1ecc6299db9ec823/triple_accel-0.4.0/src/levenshtein.rs","byte_start":184489,"byte_end":184527,"line_start":1212,"line_end":1212,"column_start":1,"column_end":39}},{"value":"/","span":{"file_name":"/Users/shelwitz/.cargo/registry/src/github.com-1ecc6299db9ec823/triple_accel-0.4.0/src/levenshtein.rs","byte_start":184528,"byte_end":184531,"line_start":1213,"line_end":1213,"column_start":1,"column_end":4}},{"value":"/ # Example","span":{"file_name":"/Users/shelwitz/.cargo/registry/src/github.com-1ecc6299db9ec823/triple_accel-0.4.0/src/levenshtein.rs","byte_start":184532,"byte_end":184545,"line_start":1214,"line_end":1214,"column_start":1,"column_end":14}},{"value":"/ ```","span":{"file_name":"/Users/shelwitz/.cargo/registry/src/github.com-1ecc6299db9ec823/triple_accel-0.4.0/src/levenshtein.rs","byte_start":184546,"byte_end":184553,"line_start":1215,"line_end":1215,"column_start":1,"column_end":8}},{"value":"/ # use triple_accel::*;","span":{"file_name":"/Users/shelwitz/.cargo/registry/src/github.com-1ecc6299db9ec823/triple_accel-0.4.0/src/levenshtein.rs","byte_start":184554,"byte_end":184580,"line_start":1216,"line_end":1216,"column_start":1,"column_end":27}},{"value":"/ # use triple_accel::levenshtein::*;","span":{"file_name":"/Users/shelwitz/.cargo/registry/src/github.com-1ecc6299db9ec823/triple_accel-0.4.0/src/levenshtein.rs","byte_start":184581,"byte_end":184620,"line_start":1217,"line_end":1217,"column_start":1,"column_end":40}},{"value":"/ let matches: Vec<Match> = levenshtein_search_naive(b\"abc\", b\"  abd\").collect();","span":{"file_name":"/Users/shelwitz/.cargo/registry/src/github.com-1ecc6299db9ec823/triple_accel-0.4.0/src/levenshtein.rs","byte_start":184621,"byte_end":184704,"line_start":1218,"line_end":1218,"column_start":1,"column_end":84}},{"value":"/","span":{"file_name":"/Users/shelwitz/.cargo/registry/src/github.com-1ecc6299db9ec823/triple_accel-0.4.0/src/levenshtein.rs","byte_start":184705,"byte_end":184708,"line_start":1219,"line_end":1219,"column_start":1,"column_end":4}},{"value":"/ assert!(matches == vec![Match{start: 2, end: 5, k: 1}]);","span":{"file_name":"/Users/shelwitz/.cargo/registry/src/github.com-1ecc6299db9ec823/triple_accel-0.4.0/src/levenshtein.rs","byte_start":184709,"byte_end":184769,"line_start":1220,"line_end":1220,"column_start":1,"column_end":61}},{"value":"/ ```","span":{"file_name":"/Users/shelwitz/.cargo/registry/src/github.com-1ecc6299db9ec823/triple_accel-0.4.0/src/levenshtein.rs","byte_start":184770,"byte_end":184777,"line_start":1221,"line_end":1221,"column_start":1,"column_end":8}}]},{"kind":"Function","id":{"krate":0,"index":260},"span":{"file_name":"/Users/shelwitz/.cargo/registry/src/github.com-1ecc6299db9ec823/triple_accel-0.4.0/src/levenshtein.rs","byte_start":186434,"byte_end":186468,"line_start":1252,"line_end":1252,"column_start":8,"column_end":42},"name":"levenshtein_search_naive_with_opts","qualname":"::levenshtein::levenshtein_search_naive_with_opts","value":"pub fn levenshtein_search_naive_with_opts<'a>(&'a [u8], &'a [u8], u32,\n                                              SearchType, EditCosts, bool)\n-> Box<dyn Iterator<Item = Match> + 'a>","parent":null,"children":[],"decl_id":null,"docs":" Returns an iterator over `Match`s by searching through the text `haystack` for the\n pattern `needle` using the naive algorithm, with extra options.","sig":null,"attributes":[{"value":"/ Returns an iterator over `Match`s by searching through the text `haystack` for the","span":{"file_name":"/Users/shelwitz/.cargo/registry/src/github.com-1ecc6299db9ec823/triple_accel-0.4.0/src/levenshtein.rs","byte_start":185058,"byte_end":185144,"line_start":1226,"line_end":1226,"column_start":1,"column_end":87}},{"value":"/ pattern `needle` using the naive algorithm, with extra options.","span":{"file_name":"/Users/shelwitz/.cargo/registry/src/github.com-1ecc6299db9ec823/triple_accel-0.4.0/src/levenshtein.rs","byte_start":185145,"byte_end":185212,"line_start":1227,"line_end":1227,"column_start":1,"column_end":68}},{"value":"/","span":{"file_name":"/Users/shelwitz/.cargo/registry/src/github.com-1ecc6299db9ec823/triple_accel-0.4.0/src/levenshtein.rs","byte_start":185213,"byte_end":185216,"line_start":1228,"line_end":1228,"column_start":1,"column_end":4}},{"value":"/ Note that overlapping matches may be returned.","span":{"file_name":"/Users/shelwitz/.cargo/registry/src/github.com-1ecc6299db9ec823/triple_accel-0.4.0/src/levenshtein.rs","byte_start":185217,"byte_end":185267,"line_start":1229,"line_end":1229,"column_start":1,"column_end":51}},{"value":"/ If multiple matches end at the same position, then the longest match is chosen.","span":{"file_name":"/Users/shelwitz/.cargo/registry/src/github.com-1ecc6299db9ec823/triple_accel-0.4.0/src/levenshtein.rs","byte_start":185268,"byte_end":185351,"line_start":1230,"line_end":1230,"column_start":1,"column_end":84}},{"value":"/ If `needle` is empty and `anchored` is false, then no `Match`es are returned.","span":{"file_name":"/Users/shelwitz/.cargo/registry/src/github.com-1ecc6299db9ec823/triple_accel-0.4.0/src/levenshtein.rs","byte_start":185352,"byte_end":185433,"line_start":1231,"line_end":1231,"column_start":1,"column_end":82}},{"value":"/","span":{"file_name":"/Users/shelwitz/.cargo/registry/src/github.com-1ecc6299db9ec823/triple_accel-0.4.0/src/levenshtein.rs","byte_start":185434,"byte_end":185437,"line_start":1232,"line_end":1232,"column_start":1,"column_end":4}},{"value":"/ # Arguments","span":{"file_name":"/Users/shelwitz/.cargo/registry/src/github.com-1ecc6299db9ec823/triple_accel-0.4.0/src/levenshtein.rs","byte_start":185438,"byte_end":185453,"line_start":1233,"line_end":1233,"column_start":1,"column_end":16}},{"value":"/ * `needle` - pattern string (slice)","span":{"file_name":"/Users/shelwitz/.cargo/registry/src/github.com-1ecc6299db9ec823/triple_accel-0.4.0/src/levenshtein.rs","byte_start":185454,"byte_end":185493,"line_start":1234,"line_end":1234,"column_start":1,"column_end":40}},{"value":"/ * `haystack` - text string (slice)","span":{"file_name":"/Users/shelwitz/.cargo/registry/src/github.com-1ecc6299db9ec823/triple_accel-0.4.0/src/levenshtein.rs","byte_start":185494,"byte_end":185532,"line_start":1235,"line_end":1235,"column_start":1,"column_end":39}},{"value":"/ * `k` - maximum cost threshold for a match to be returned","span":{"file_name":"/Users/shelwitz/.cargo/registry/src/github.com-1ecc6299db9ec823/triple_accel-0.4.0/src/levenshtein.rs","byte_start":185533,"byte_end":185594,"line_start":1236,"line_end":1236,"column_start":1,"column_end":62}},{"value":"/ * `search_type` - indicates whether to return all matches (within a cost of `k`), or the best matches with","span":{"file_name":"/Users/shelwitz/.cargo/registry/src/github.com-1ecc6299db9ec823/triple_accel-0.4.0/src/levenshtein.rs","byte_start":185595,"byte_end":185705,"line_start":1237,"line_end":1237,"column_start":1,"column_end":111}},{"value":"/ the lowest cost (additionally, only the longest matches are retained for matches that fully overlap)","span":{"file_name":"/Users/shelwitz/.cargo/registry/src/github.com-1ecc6299db9ec823/triple_accel-0.4.0/src/levenshtein.rs","byte_start":185706,"byte_end":185810,"line_start":1238,"line_end":1238,"column_start":1,"column_end":105}},{"value":"/ * `costs` - `EditCosts` struct for the cost of each edit operation","span":{"file_name":"/Users/shelwitz/.cargo/registry/src/github.com-1ecc6299db9ec823/triple_accel-0.4.0/src/levenshtein.rs","byte_start":185811,"byte_end":185881,"line_start":1239,"line_end":1239,"column_start":1,"column_end":71}},{"value":"/ * `anchored` - whether the `needle` should be anchored to the start of the `haystack` string,","span":{"file_name":"/Users/shelwitz/.cargo/registry/src/github.com-1ecc6299db9ec823/triple_accel-0.4.0/src/levenshtein.rs","byte_start":185882,"byte_end":185979,"line_start":1240,"line_end":1240,"column_start":1,"column_end":98}},{"value":"/ causing any shifts to cost gap edits","span":{"file_name":"/Users/shelwitz/.cargo/registry/src/github.com-1ecc6299db9ec823/triple_accel-0.4.0/src/levenshtein.rs","byte_start":185980,"byte_end":186020,"line_start":1241,"line_end":1241,"column_start":1,"column_end":41}},{"value":"/","span":{"file_name":"/Users/shelwitz/.cargo/registry/src/github.com-1ecc6299db9ec823/triple_accel-0.4.0/src/levenshtein.rs","byte_start":186021,"byte_end":186024,"line_start":1242,"line_end":1242,"column_start":1,"column_end":4}},{"value":"/ # Example","span":{"file_name":"/Users/shelwitz/.cargo/registry/src/github.com-1ecc6299db9ec823/triple_accel-0.4.0/src/levenshtein.rs","byte_start":186025,"byte_end":186038,"line_start":1243,"line_end":1243,"column_start":1,"column_end":14}},{"value":"/ ```","span":{"file_name":"/Users/shelwitz/.cargo/registry/src/github.com-1ecc6299db9ec823/triple_accel-0.4.0/src/levenshtein.rs","byte_start":186039,"byte_end":186046,"line_start":1244,"line_end":1244,"column_start":1,"column_end":8}},{"value":"/ # use triple_accel::*;","span":{"file_name":"/Users/shelwitz/.cargo/registry/src/github.com-1ecc6299db9ec823/triple_accel-0.4.0/src/levenshtein.rs","byte_start":186047,"byte_end":186073,"line_start":1245,"line_end":1245,"column_start":1,"column_end":27}},{"value":"/ # use triple_accel::levenshtein::*;","span":{"file_name":"/Users/shelwitz/.cargo/registry/src/github.com-1ecc6299db9ec823/triple_accel-0.4.0/src/levenshtein.rs","byte_start":186074,"byte_end":186113,"line_start":1246,"line_end":1246,"column_start":1,"column_end":40}},{"value":"/ let matches: Vec<Match> = levenshtein_search_naive_with_opts(b\"abc\", b\"  acb\", 1, SearchType::All, RDAMERAU_COSTS, false).collect();","span":{"file_name":"/Users/shelwitz/.cargo/registry/src/github.com-1ecc6299db9ec823/triple_accel-0.4.0/src/levenshtein.rs","byte_start":186114,"byte_end":186250,"line_start":1247,"line_end":1247,"column_start":1,"column_end":137}},{"value":"/","span":{"file_name":"/Users/shelwitz/.cargo/registry/src/github.com-1ecc6299db9ec823/triple_accel-0.4.0/src/levenshtein.rs","byte_start":186251,"byte_end":186254,"line_start":1248,"line_end":1248,"column_start":1,"column_end":4}},{"value":"/ // note: it is possible to end the match at two different positions","span":{"file_name":"/Users/shelwitz/.cargo/registry/src/github.com-1ecc6299db9ec823/triple_accel-0.4.0/src/levenshtein.rs","byte_start":186255,"byte_end":186326,"line_start":1249,"line_end":1249,"column_start":1,"column_end":72}},{"value":"/ assert!(matches == vec![Match{start: 2, end: 4, k: 1}, Match{start: 2, end: 5, k: 1}]);","span":{"file_name":"/Users/shelwitz/.cargo/registry/src/github.com-1ecc6299db9ec823/triple_accel-0.4.0/src/levenshtein.rs","byte_start":186327,"byte_end":186418,"line_start":1250,"line_end":1250,"column_start":1,"column_end":92}},{"value":"/ ```","span":{"file_name":"/Users/shelwitz/.cargo/registry/src/github.com-1ecc6299db9ec823/triple_accel-0.4.0/src/levenshtein.rs","byte_start":186419,"byte_end":186426,"line_start":1251,"line_end":1251,"column_start":1,"column_end":8}}]},{"kind":"Function","id":{"krate":0,"index":266},"span":{"file_name":"/Users/shelwitz/.cargo/registry/src/github.com-1ecc6299db9ec823/triple_accel-0.4.0/src/levenshtein.rs","byte_start":194816,"byte_end":194839,"line_start":1477,"line_end":1477,"column_start":8,"column_end":31},"name":"levenshtein_search_simd","qualname":"::levenshtein::levenshtein_search_simd","value":"pub fn levenshtein_search_simd<'a>(&'a [u8], &'a [u8])\n-> Box<dyn Iterator<Item = Match> + 'a>","parent":null,"children":[],"decl_id":null,"docs":" Returns an iterator over the best `Match`s by searching through the text `haystack` for the\n pattern `needle` using SIMD acceleration.","sig":null,"attributes":[{"value":"/ Returns an iterator over the best `Match`s by searching through the text `haystack` for the","span":{"file_name":"/Users/shelwitz/.cargo/registry/src/github.com-1ecc6299db9ec823/triple_accel-0.4.0/src/levenshtein.rs","byte_start":193561,"byte_end":193656,"line_start":1451,"line_end":1451,"column_start":1,"column_end":96}},{"value":"/ pattern `needle` using SIMD acceleration.","span":{"file_name":"/Users/shelwitz/.cargo/registry/src/github.com-1ecc6299db9ec823/triple_accel-0.4.0/src/levenshtein.rs","byte_start":193657,"byte_end":193702,"line_start":1452,"line_end":1452,"column_start":1,"column_end":46}},{"value":"/","span":{"file_name":"/Users/shelwitz/.cargo/registry/src/github.com-1ecc6299db9ec823/triple_accel-0.4.0/src/levenshtein.rs","byte_start":193703,"byte_end":193706,"line_start":1453,"line_end":1453,"column_start":1,"column_end":4}},{"value":"/ The best matches are the matches with the lowest Levenshtein distance.","span":{"file_name":"/Users/shelwitz/.cargo/registry/src/github.com-1ecc6299db9ec823/triple_accel-0.4.0/src/levenshtein.rs","byte_start":193707,"byte_end":193781,"line_start":1454,"line_end":1454,"column_start":1,"column_end":75}},{"value":"/ If multiple best matches end at the same position or fully overlap, then the longest match is chosen.","span":{"file_name":"/Users/shelwitz/.cargo/registry/src/github.com-1ecc6299db9ec823/triple_accel-0.4.0/src/levenshtein.rs","byte_start":193782,"byte_end":193887,"line_start":1455,"line_end":1455,"column_start":1,"column_end":106}},{"value":"/ If `needle` is empty, then no `Match`es are returned.","span":{"file_name":"/Users/shelwitz/.cargo/registry/src/github.com-1ecc6299db9ec823/triple_accel-0.4.0/src/levenshtein.rs","byte_start":193888,"byte_end":193945,"line_start":1456,"line_end":1456,"column_start":1,"column_end":58}},{"value":"/ Each returned `Match` requires at least half or more bytes of the `needle` to match","span":{"file_name":"/Users/shelwitz/.cargo/registry/src/github.com-1ecc6299db9ec823/triple_accel-0.4.0/src/levenshtein.rs","byte_start":193946,"byte_end":194033,"line_start":1457,"line_end":1457,"column_start":1,"column_end":88}},{"value":"/ somewhere in the `haystack`.","span":{"file_name":"/Users/shelwitz/.cargo/registry/src/github.com-1ecc6299db9ec823/triple_accel-0.4.0/src/levenshtein.rs","byte_start":194034,"byte_end":194066,"line_start":1458,"line_end":1458,"column_start":1,"column_end":33}},{"value":"/ This should be much faster than `levenshtein_search_naive`.","span":{"file_name":"/Users/shelwitz/.cargo/registry/src/github.com-1ecc6299db9ec823/triple_accel-0.4.0/src/levenshtein.rs","byte_start":194067,"byte_end":194130,"line_start":1459,"line_end":1459,"column_start":1,"column_end":64}},{"value":"/ Internally, this will automatically use AVX or SSE vectors with 8-bit, 16-bit, or 32-bit elements","span":{"file_name":"/Users/shelwitz/.cargo/registry/src/github.com-1ecc6299db9ec823/triple_accel-0.4.0/src/levenshtein.rs","byte_start":194131,"byte_end":194232,"line_start":1460,"line_end":1460,"column_start":1,"column_end":102}},{"value":"/ to represent anti-diagonals in the dynamic programming matrix for calculating Levenshtein distance.","span":{"file_name":"/Users/shelwitz/.cargo/registry/src/github.com-1ecc6299db9ec823/triple_accel-0.4.0/src/levenshtein.rs","byte_start":194233,"byte_end":194336,"line_start":1461,"line_end":1461,"column_start":1,"column_end":104}},{"value":"/ If AVX2 or SSE4.1 is not supported, then this will automatically fall back to","span":{"file_name":"/Users/shelwitz/.cargo/registry/src/github.com-1ecc6299db9ec823/triple_accel-0.4.0/src/levenshtein.rs","byte_start":194337,"byte_end":194418,"line_start":1462,"line_end":1462,"column_start":1,"column_end":82}},{"value":"/ `levenshtein_search_naive_with_opts`.","span":{"file_name":"/Users/shelwitz/.cargo/registry/src/github.com-1ecc6299db9ec823/triple_accel-0.4.0/src/levenshtein.rs","byte_start":194419,"byte_end":194460,"line_start":1463,"line_end":1463,"column_start":1,"column_end":42}},{"value":"/","span":{"file_name":"/Users/shelwitz/.cargo/registry/src/github.com-1ecc6299db9ec823/triple_accel-0.4.0/src/levenshtein.rs","byte_start":194461,"byte_end":194464,"line_start":1464,"line_end":1464,"column_start":1,"column_end":4}},{"value":"/ # Arguments","span":{"file_name":"/Users/shelwitz/.cargo/registry/src/github.com-1ecc6299db9ec823/triple_accel-0.4.0/src/levenshtein.rs","byte_start":194465,"byte_end":194480,"line_start":1465,"line_end":1465,"column_start":1,"column_end":16}},{"value":"/ * `needle` - pattern string (slice)","span":{"file_name":"/Users/shelwitz/.cargo/registry/src/github.com-1ecc6299db9ec823/triple_accel-0.4.0/src/levenshtein.rs","byte_start":194481,"byte_end":194520,"line_start":1466,"line_end":1466,"column_start":1,"column_end":40}},{"value":"/ * `haystack` - text string (slice)","span":{"file_name":"/Users/shelwitz/.cargo/registry/src/github.com-1ecc6299db9ec823/triple_accel-0.4.0/src/levenshtein.rs","byte_start":194521,"byte_end":194559,"line_start":1467,"line_end":1467,"column_start":1,"column_end":39}},{"value":"/","span":{"file_name":"/Users/shelwitz/.cargo/registry/src/github.com-1ecc6299db9ec823/triple_accel-0.4.0/src/levenshtein.rs","byte_start":194560,"byte_end":194563,"line_start":1468,"line_end":1468,"column_start":1,"column_end":4}},{"value":"/ # Example","span":{"file_name":"/Users/shelwitz/.cargo/registry/src/github.com-1ecc6299db9ec823/triple_accel-0.4.0/src/levenshtein.rs","byte_start":194564,"byte_end":194577,"line_start":1469,"line_end":1469,"column_start":1,"column_end":14}},{"value":"/ ```","span":{"file_name":"/Users/shelwitz/.cargo/registry/src/github.com-1ecc6299db9ec823/triple_accel-0.4.0/src/levenshtein.rs","byte_start":194578,"byte_end":194585,"line_start":1470,"line_end":1470,"column_start":1,"column_end":8}},{"value":"/ # use triple_accel::*;","span":{"file_name":"/Users/shelwitz/.cargo/registry/src/github.com-1ecc6299db9ec823/triple_accel-0.4.0/src/levenshtein.rs","byte_start":194586,"byte_end":194612,"line_start":1471,"line_end":1471,"column_start":1,"column_end":27}},{"value":"/ # use triple_accel::levenshtein::*;","span":{"file_name":"/Users/shelwitz/.cargo/registry/src/github.com-1ecc6299db9ec823/triple_accel-0.4.0/src/levenshtein.rs","byte_start":194613,"byte_end":194652,"line_start":1472,"line_end":1472,"column_start":1,"column_end":40}},{"value":"/ let matches: Vec<Match> = levenshtein_search_simd(b\"abc\", b\"  abd\").collect();","span":{"file_name":"/Users/shelwitz/.cargo/registry/src/github.com-1ecc6299db9ec823/triple_accel-0.4.0/src/levenshtein.rs","byte_start":194653,"byte_end":194735,"line_start":1473,"line_end":1473,"column_start":1,"column_end":83}},{"value":"/","span":{"file_name":"/Users/shelwitz/.cargo/registry/src/github.com-1ecc6299db9ec823/triple_accel-0.4.0/src/levenshtein.rs","byte_start":194736,"byte_end":194739,"line_start":1474,"line_end":1474,"column_start":1,"column_end":4}},{"value":"/ assert!(matches == vec![Match{start: 2, end: 5, k: 1}]);","span":{"file_name":"/Users/shelwitz/.cargo/registry/src/github.com-1ecc6299db9ec823/triple_accel-0.4.0/src/levenshtein.rs","byte_start":194740,"byte_end":194800,"line_start":1475,"line_end":1475,"column_start":1,"column_end":61}},{"value":"/ ```","span":{"file_name":"/Users/shelwitz/.cargo/registry/src/github.com-1ecc6299db9ec823/triple_accel-0.4.0/src/levenshtein.rs","byte_start":194801,"byte_end":194808,"line_start":1476,"line_end":1476,"column_start":1,"column_end":8}}]},{"kind":"Function","id":{"krate":0,"index":268},"span":{"file_name":"/Users/shelwitz/.cargo/registry/src/github.com-1ecc6299db9ec823/triple_accel-0.4.0/src/levenshtein.rs","byte_start":196864,"byte_end":196897,"line_start":1512,"line_end":1512,"column_start":8,"column_end":41},"name":"levenshtein_search_simd_with_opts","qualname":"::levenshtein::levenshtein_search_simd_with_opts","value":"pub fn levenshtein_search_simd_with_opts<'a>(&'a [u8], &'a [u8], u32,\n                                             SearchType, EditCosts, bool)\n-> Box<dyn Iterator<Item = Match> + 'a>","parent":null,"children":[],"decl_id":null,"docs":" Returns an iterator over `Match`s by searching through the text `haystack` for the\n pattern `needle` using SIMD acceleration, with extra options.","sig":null,"attributes":[{"value":"/ Returns an iterator over `Match`s by searching through the text `haystack` for the","span":{"file_name":"/Users/shelwitz/.cargo/registry/src/github.com-1ecc6299db9ec823/triple_accel-0.4.0/src/levenshtein.rs","byte_start":195087,"byte_end":195173,"line_start":1481,"line_end":1481,"column_start":1,"column_end":87}},{"value":"/ pattern `needle` using SIMD acceleration, with extra options.","span":{"file_name":"/Users/shelwitz/.cargo/registry/src/github.com-1ecc6299db9ec823/triple_accel-0.4.0/src/levenshtein.rs","byte_start":195174,"byte_end":195239,"line_start":1482,"line_end":1482,"column_start":1,"column_end":66}},{"value":"/","span":{"file_name":"/Users/shelwitz/.cargo/registry/src/github.com-1ecc6299db9ec823/triple_accel-0.4.0/src/levenshtein.rs","byte_start":195240,"byte_end":195243,"line_start":1483,"line_end":1483,"column_start":1,"column_end":4}},{"value":"/ Note that overlapping matches may be returned.","span":{"file_name":"/Users/shelwitz/.cargo/registry/src/github.com-1ecc6299db9ec823/triple_accel-0.4.0/src/levenshtein.rs","byte_start":195244,"byte_end":195294,"line_start":1484,"line_end":1484,"column_start":1,"column_end":51}},{"value":"/ If multiple matches end at the same position, then the longest match is chosen.","span":{"file_name":"/Users/shelwitz/.cargo/registry/src/github.com-1ecc6299db9ec823/triple_accel-0.4.0/src/levenshtein.rs","byte_start":195295,"byte_end":195378,"line_start":1485,"line_end":1485,"column_start":1,"column_end":84}},{"value":"/ If `needle` is empty and `anchored` is false, then no `Match`es are returned.","span":{"file_name":"/Users/shelwitz/.cargo/registry/src/github.com-1ecc6299db9ec823/triple_accel-0.4.0/src/levenshtein.rs","byte_start":195379,"byte_end":195460,"line_start":1486,"line_end":1486,"column_start":1,"column_end":82}},{"value":"/ This should be much faster than `levenshtein_search_naive_with_opts`.","span":{"file_name":"/Users/shelwitz/.cargo/registry/src/github.com-1ecc6299db9ec823/triple_accel-0.4.0/src/levenshtein.rs","byte_start":195461,"byte_end":195534,"line_start":1487,"line_end":1487,"column_start":1,"column_end":74}},{"value":"/ Internally, this will automatically use AVX or SSE vectors with 8-bit, 16-bit, or 32-bit elements","span":{"file_name":"/Users/shelwitz/.cargo/registry/src/github.com-1ecc6299db9ec823/triple_accel-0.4.0/src/levenshtein.rs","byte_start":195535,"byte_end":195636,"line_start":1488,"line_end":1488,"column_start":1,"column_end":102}},{"value":"/ to represent anti-diagonals in the dynamic programming matrix for calculating Levenshtein distance.","span":{"file_name":"/Users/shelwitz/.cargo/registry/src/github.com-1ecc6299db9ec823/triple_accel-0.4.0/src/levenshtein.rs","byte_start":195637,"byte_end":195740,"line_start":1489,"line_end":1489,"column_start":1,"column_end":104}},{"value":"/ If AVX2 or SSE4.1 is not supported, then this will automatically fall back to","span":{"file_name":"/Users/shelwitz/.cargo/registry/src/github.com-1ecc6299db9ec823/triple_accel-0.4.0/src/levenshtein.rs","byte_start":195741,"byte_end":195822,"line_start":1490,"line_end":1490,"column_start":1,"column_end":82}},{"value":"/ `levenshtein_search_naive_with_opts`.","span":{"file_name":"/Users/shelwitz/.cargo/registry/src/github.com-1ecc6299db9ec823/triple_accel-0.4.0/src/levenshtein.rs","byte_start":195823,"byte_end":195864,"line_start":1491,"line_end":1491,"column_start":1,"column_end":42}},{"value":"/","span":{"file_name":"/Users/shelwitz/.cargo/registry/src/github.com-1ecc6299db9ec823/triple_accel-0.4.0/src/levenshtein.rs","byte_start":195865,"byte_end":195868,"line_start":1492,"line_end":1492,"column_start":1,"column_end":4}},{"value":"/ # Arguments","span":{"file_name":"/Users/shelwitz/.cargo/registry/src/github.com-1ecc6299db9ec823/triple_accel-0.4.0/src/levenshtein.rs","byte_start":195869,"byte_end":195884,"line_start":1493,"line_end":1493,"column_start":1,"column_end":16}},{"value":"/ * `needle` - pattern string (slice)","span":{"file_name":"/Users/shelwitz/.cargo/registry/src/github.com-1ecc6299db9ec823/triple_accel-0.4.0/src/levenshtein.rs","byte_start":195885,"byte_end":195924,"line_start":1494,"line_end":1494,"column_start":1,"column_end":40}},{"value":"/ * `haystack` - text string (slice)","span":{"file_name":"/Users/shelwitz/.cargo/registry/src/github.com-1ecc6299db9ec823/triple_accel-0.4.0/src/levenshtein.rs","byte_start":195925,"byte_end":195963,"line_start":1495,"line_end":1495,"column_start":1,"column_end":39}},{"value":"/ * `k` - maximum cost threshold for a match to be returned","span":{"file_name":"/Users/shelwitz/.cargo/registry/src/github.com-1ecc6299db9ec823/triple_accel-0.4.0/src/levenshtein.rs","byte_start":195964,"byte_end":196025,"line_start":1496,"line_end":1496,"column_start":1,"column_end":62}},{"value":"/ * `search_type` - indicates whether to return all matches (within a cost of `k`), or the best matches with","span":{"file_name":"/Users/shelwitz/.cargo/registry/src/github.com-1ecc6299db9ec823/triple_accel-0.4.0/src/levenshtein.rs","byte_start":196026,"byte_end":196136,"line_start":1497,"line_end":1497,"column_start":1,"column_end":111}},{"value":"/ the lowest cost (additionally, only the longest matches are retained for matches that fully overlap)","span":{"file_name":"/Users/shelwitz/.cargo/registry/src/github.com-1ecc6299db9ec823/triple_accel-0.4.0/src/levenshtein.rs","byte_start":196137,"byte_end":196241,"line_start":1498,"line_end":1498,"column_start":1,"column_end":105}},{"value":"/ * `costs` - `EditCosts` struct for the cost of each edit operation","span":{"file_name":"/Users/shelwitz/.cargo/registry/src/github.com-1ecc6299db9ec823/triple_accel-0.4.0/src/levenshtein.rs","byte_start":196242,"byte_end":196312,"line_start":1499,"line_end":1499,"column_start":1,"column_end":71}},{"value":"/ * `anchored` - whether the `needle` should be anchored to the start of the `haystack` string,","span":{"file_name":"/Users/shelwitz/.cargo/registry/src/github.com-1ecc6299db9ec823/triple_accel-0.4.0/src/levenshtein.rs","byte_start":196313,"byte_end":196410,"line_start":1500,"line_end":1500,"column_start":1,"column_end":98}},{"value":"/ causing any shifts to cost gap edits","span":{"file_name":"/Users/shelwitz/.cargo/registry/src/github.com-1ecc6299db9ec823/triple_accel-0.4.0/src/levenshtein.rs","byte_start":196411,"byte_end":196451,"line_start":1501,"line_end":1501,"column_start":1,"column_end":41}},{"value":"/","span":{"file_name":"/Users/shelwitz/.cargo/registry/src/github.com-1ecc6299db9ec823/triple_accel-0.4.0/src/levenshtein.rs","byte_start":196452,"byte_end":196455,"line_start":1502,"line_end":1502,"column_start":1,"column_end":4}},{"value":"/ # Example","span":{"file_name":"/Users/shelwitz/.cargo/registry/src/github.com-1ecc6299db9ec823/triple_accel-0.4.0/src/levenshtein.rs","byte_start":196456,"byte_end":196469,"line_start":1503,"line_end":1503,"column_start":1,"column_end":14}},{"value":"/ ```","span":{"file_name":"/Users/shelwitz/.cargo/registry/src/github.com-1ecc6299db9ec823/triple_accel-0.4.0/src/levenshtein.rs","byte_start":196470,"byte_end":196477,"line_start":1504,"line_end":1504,"column_start":1,"column_end":8}},{"value":"/ # use triple_accel::*;","span":{"file_name":"/Users/shelwitz/.cargo/registry/src/github.com-1ecc6299db9ec823/triple_accel-0.4.0/src/levenshtein.rs","byte_start":196478,"byte_end":196504,"line_start":1505,"line_end":1505,"column_start":1,"column_end":27}},{"value":"/ # use triple_accel::levenshtein::*;","span":{"file_name":"/Users/shelwitz/.cargo/registry/src/github.com-1ecc6299db9ec823/triple_accel-0.4.0/src/levenshtein.rs","byte_start":196505,"byte_end":196544,"line_start":1506,"line_end":1506,"column_start":1,"column_end":40}},{"value":"/ let matches: Vec<Match> = levenshtein_search_simd_with_opts(b\"abc\", b\"  acb\", 1, SearchType::All, RDAMERAU_COSTS, false).collect();","span":{"file_name":"/Users/shelwitz/.cargo/registry/src/github.com-1ecc6299db9ec823/triple_accel-0.4.0/src/levenshtein.rs","byte_start":196545,"byte_end":196680,"line_start":1507,"line_end":1507,"column_start":1,"column_end":136}},{"value":"/","span":{"file_name":"/Users/shelwitz/.cargo/registry/src/github.com-1ecc6299db9ec823/triple_accel-0.4.0/src/levenshtein.rs","byte_start":196681,"byte_end":196684,"line_start":1508,"line_end":1508,"column_start":1,"column_end":4}},{"value":"/ // note: it is possible to end the match at two different positions","span":{"file_name":"/Users/shelwitz/.cargo/registry/src/github.com-1ecc6299db9ec823/triple_accel-0.4.0/src/levenshtein.rs","byte_start":196685,"byte_end":196756,"line_start":1509,"line_end":1509,"column_start":1,"column_end":72}},{"value":"/ assert!(matches == vec![Match{start: 2, end: 4, k: 1}, Match{start: 2, end: 5, k: 1}]);","span":{"file_name":"/Users/shelwitz/.cargo/registry/src/github.com-1ecc6299db9ec823/triple_accel-0.4.0/src/levenshtein.rs","byte_start":196757,"byte_end":196848,"line_start":1510,"line_end":1510,"column_start":1,"column_end":92}},{"value":"/ ```","span":{"file_name":"/Users/shelwitz/.cargo/registry/src/github.com-1ecc6299db9ec823/triple_accel-0.4.0/src/levenshtein.rs","byte_start":196849,"byte_end":196856,"line_start":1511,"line_end":1511,"column_start":1,"column_end":8}}]},{"kind":"Function","id":{"krate":0,"index":272},"span":{"file_name":"/Users/shelwitz/.cargo/registry/src/github.com-1ecc6299db9ec823/triple_accel-0.4.0/src/levenshtein.rs","byte_start":216665,"byte_end":216683,"line_start":1876,"line_end":1876,"column_start":8,"column_end":26},"name":"levenshtein_search","qualname":"::levenshtein::levenshtein_search","value":"pub fn levenshtein_search<'a>(&'a [u8], &'a [u8])\n-> Box<dyn Iterator<Item = Match> + 'a>","parent":null,"children":[],"decl_id":null,"docs":" Returns an iterator over best `Match`s by searching through the text `haystack` for the\n pattern `needle` using SIMD acceleration.","sig":null,"attributes":[{"value":"/ Returns an iterator over best `Match`s by searching through the text `haystack` for the","span":{"file_name":"/Users/shelwitz/.cargo/registry/src/github.com-1ecc6299db9ec823/triple_accel-0.4.0/src/levenshtein.rs","byte_start":215691,"byte_end":215782,"line_start":1854,"line_end":1854,"column_start":1,"column_end":92}},{"value":"/ pattern `needle` using SIMD acceleration.","span":{"file_name":"/Users/shelwitz/.cargo/registry/src/github.com-1ecc6299db9ec823/triple_accel-0.4.0/src/levenshtein.rs","byte_start":215783,"byte_end":215828,"line_start":1855,"line_end":1855,"column_start":1,"column_end":46}},{"value":"/","span":{"file_name":"/Users/shelwitz/.cargo/registry/src/github.com-1ecc6299db9ec823/triple_accel-0.4.0/src/levenshtein.rs","byte_start":215829,"byte_end":215832,"line_start":1856,"line_end":1856,"column_start":1,"column_end":4}},{"value":"/ The best matches are the matches with the lowest Levenshtein distance.","span":{"file_name":"/Users/shelwitz/.cargo/registry/src/github.com-1ecc6299db9ec823/triple_accel-0.4.0/src/levenshtein.rs","byte_start":215833,"byte_end":215907,"line_start":1857,"line_end":1857,"column_start":1,"column_end":75}},{"value":"/ If multiple best matches end at the same position or fully overlap, then the longest match is chosen.","span":{"file_name":"/Users/shelwitz/.cargo/registry/src/github.com-1ecc6299db9ec823/triple_accel-0.4.0/src/levenshtein.rs","byte_start":215908,"byte_end":216013,"line_start":1858,"line_end":1858,"column_start":1,"column_end":106}},{"value":"/ If `needle` is empty, then no `Match`es are returned.","span":{"file_name":"/Users/shelwitz/.cargo/registry/src/github.com-1ecc6299db9ec823/triple_accel-0.4.0/src/levenshtein.rs","byte_start":216014,"byte_end":216071,"line_start":1859,"line_end":1859,"column_start":1,"column_end":58}},{"value":"/ Each returned `Match` requires at least half or more bytes of the `needle` to match","span":{"file_name":"/Users/shelwitz/.cargo/registry/src/github.com-1ecc6299db9ec823/triple_accel-0.4.0/src/levenshtein.rs","byte_start":216072,"byte_end":216159,"line_start":1860,"line_end":1860,"column_start":1,"column_end":88}},{"value":"/ somewhere in the `haystack`.","span":{"file_name":"/Users/shelwitz/.cargo/registry/src/github.com-1ecc6299db9ec823/triple_accel-0.4.0/src/levenshtein.rs","byte_start":216160,"byte_end":216192,"line_start":1861,"line_end":1861,"column_start":1,"column_end":33}},{"value":"/ Internally, this will call `levenshtein_search_simd`.","span":{"file_name":"/Users/shelwitz/.cargo/registry/src/github.com-1ecc6299db9ec823/triple_accel-0.4.0/src/levenshtein.rs","byte_start":216193,"byte_end":216250,"line_start":1862,"line_end":1862,"column_start":1,"column_end":58}},{"value":"/ If AVX2 or SSE4.1 is not supported, then this will automatically fall back to a scalar alternative.","span":{"file_name":"/Users/shelwitz/.cargo/registry/src/github.com-1ecc6299db9ec823/triple_accel-0.4.0/src/levenshtein.rs","byte_start":216251,"byte_end":216354,"line_start":1863,"line_end":1863,"column_start":1,"column_end":104}},{"value":"/","span":{"file_name":"/Users/shelwitz/.cargo/registry/src/github.com-1ecc6299db9ec823/triple_accel-0.4.0/src/levenshtein.rs","byte_start":216355,"byte_end":216358,"line_start":1864,"line_end":1864,"column_start":1,"column_end":4}},{"value":"/ # Arguments","span":{"file_name":"/Users/shelwitz/.cargo/registry/src/github.com-1ecc6299db9ec823/triple_accel-0.4.0/src/levenshtein.rs","byte_start":216359,"byte_end":216374,"line_start":1865,"line_end":1865,"column_start":1,"column_end":16}},{"value":"/ * `needle` - pattern string (slice)","span":{"file_name":"/Users/shelwitz/.cargo/registry/src/github.com-1ecc6299db9ec823/triple_accel-0.4.0/src/levenshtein.rs","byte_start":216375,"byte_end":216414,"line_start":1866,"line_end":1866,"column_start":1,"column_end":40}},{"value":"/ * `haystack` - text string (slice)","span":{"file_name":"/Users/shelwitz/.cargo/registry/src/github.com-1ecc6299db9ec823/triple_accel-0.4.0/src/levenshtein.rs","byte_start":216415,"byte_end":216453,"line_start":1867,"line_end":1867,"column_start":1,"column_end":39}},{"value":"/","span":{"file_name":"/Users/shelwitz/.cargo/registry/src/github.com-1ecc6299db9ec823/triple_accel-0.4.0/src/levenshtein.rs","byte_start":216454,"byte_end":216457,"line_start":1868,"line_end":1868,"column_start":1,"column_end":4}},{"value":"/ # Example","span":{"file_name":"/Users/shelwitz/.cargo/registry/src/github.com-1ecc6299db9ec823/triple_accel-0.4.0/src/levenshtein.rs","byte_start":216458,"byte_end":216471,"line_start":1869,"line_end":1869,"column_start":1,"column_end":14}},{"value":"/ ```","span":{"file_name":"/Users/shelwitz/.cargo/registry/src/github.com-1ecc6299db9ec823/triple_accel-0.4.0/src/levenshtein.rs","byte_start":216472,"byte_end":216479,"line_start":1870,"line_end":1870,"column_start":1,"column_end":8}},{"value":"/ # use triple_accel::*;","span":{"file_name":"/Users/shelwitz/.cargo/registry/src/github.com-1ecc6299db9ec823/triple_accel-0.4.0/src/levenshtein.rs","byte_start":216480,"byte_end":216506,"line_start":1871,"line_end":1871,"column_start":1,"column_end":27}},{"value":"/ let matches: Vec<Match> = levenshtein_search(b\"abc\", b\"  abd\").collect();","span":{"file_name":"/Users/shelwitz/.cargo/registry/src/github.com-1ecc6299db9ec823/triple_accel-0.4.0/src/levenshtein.rs","byte_start":216507,"byte_end":216584,"line_start":1872,"line_end":1872,"column_start":1,"column_end":78}},{"value":"/","span":{"file_name":"/Users/shelwitz/.cargo/registry/src/github.com-1ecc6299db9ec823/triple_accel-0.4.0/src/levenshtein.rs","byte_start":216585,"byte_end":216588,"line_start":1873,"line_end":1873,"column_start":1,"column_end":4}},{"value":"/ assert!(matches == vec![Match{start: 2, end: 5, k: 1}]);","span":{"file_name":"/Users/shelwitz/.cargo/registry/src/github.com-1ecc6299db9ec823/triple_accel-0.4.0/src/levenshtein.rs","byte_start":216589,"byte_end":216649,"line_start":1874,"line_end":1874,"column_start":1,"column_end":61}},{"value":"/ ```","span":{"file_name":"/Users/shelwitz/.cargo/registry/src/github.com-1ecc6299db9ec823/triple_accel-0.4.0/src/levenshtein.rs","byte_start":216650,"byte_end":216657,"line_start":1875,"line_end":1875,"column_start":1,"column_end":8}}]},{"kind":"Struct","id":{"krate":0,"index":906},"span":{"file_name":"/Users/shelwitz/.cargo/registry/src/github.com-1ecc6299db9ec823/triple_accel-0.4.0/src/lib.rs","byte_start":6028,"byte_end":6033,"line_start":135,"line_end":135,"column_start":12,"column_end":17},"name":"Match","qualname":"::Match","value":"Match { start, end, k }","parent":null,"children":[{"krate":0,"index":907},{"krate":0,"index":908},{"krate":0,"index":909}],"decl_id":null,"docs":" A struct that describes a single matching location.","sig":null,"attributes":[{"value":"/ A struct that describes a single matching location.","span":{"file_name":"/Users/shelwitz/.cargo/registry/src/github.com-1ecc6299db9ec823/triple_accel-0.4.0/src/lib.rs","byte_start":5869,"byte_end":5924,"line_start":131,"line_end":131,"column_start":1,"column_end":56}},{"value":"/","span":{"file_name":"/Users/shelwitz/.cargo/registry/src/github.com-1ecc6299db9ec823/triple_accel-0.4.0/src/lib.rs","byte_start":5925,"byte_end":5928,"line_start":132,"line_end":132,"column_start":1,"column_end":4}},{"value":"/ This is usually returned as part of searching routines.","span":{"file_name":"/Users/shelwitz/.cargo/registry/src/github.com-1ecc6299db9ec823/triple_accel-0.4.0/src/lib.rs","byte_start":5929,"byte_end":5988,"line_start":133,"line_end":133,"column_start":1,"column_end":60}}]},{"kind":"Field","id":{"krate":0,"index":907},"span":{"file_name":"/Users/shelwitz/.cargo/registry/src/github.com-1ecc6299db9ec823/triple_accel-0.4.0/src/lib.rs","byte_start":6094,"byte_end":6099,"line_start":137,"line_end":137,"column_start":9,"column_end":14},"name":"start","qualname":"::Match::start","value":"usize","parent":{"krate":0,"index":906},"children":[],"decl_id":null,"docs":" The start index of the match (inclusive).\n","sig":null,"attributes":[{"value":"/ The start index of the match (inclusive).","span":{"file_name":"/Users/shelwitz/.cargo/registry/src/github.com-1ecc6299db9ec823/triple_accel-0.4.0/src/lib.rs","byte_start":6040,"byte_end":6085,"line_start":136,"line_end":136,"column_start":5,"column_end":50}}]},{"kind":"Field","id":{"krate":0,"index":908},"span":{"file_name":"/Users/shelwitz/.cargo/registry/src/github.com-1ecc6299db9ec823/triple_accel-0.4.0/src/lib.rs","byte_start":6164,"byte_end":6167,"line_start":139,"line_end":139,"column_start":9,"column_end":12},"name":"end","qualname":"::Match::end","value":"usize","parent":{"krate":0,"index":906},"children":[],"decl_id":null,"docs":" The end index of the match (exclusive).\n","sig":null,"attributes":[{"value":"/ The end index of the match (exclusive).","span":{"file_name":"/Users/shelwitz/.cargo/registry/src/github.com-1ecc6299db9ec823/triple_accel-0.4.0/src/lib.rs","byte_start":6112,"byte_end":6155,"line_start":138,"line_end":138,"column_start":5,"column_end":48}}]},{"kind":"Field","id":{"krate":0,"index":909},"span":{"file_name":"/Users/shelwitz/.cargo/registry/src/github.com-1ecc6299db9ec823/triple_accel-0.4.0/src/lib.rs","byte_start":6223,"byte_end":6224,"line_start":141,"line_end":141,"column_start":9,"column_end":10},"name":"k","qualname":"::Match::k","value":"u32","parent":{"krate":0,"index":906},"children":[],"decl_id":null,"docs":" Number of edits for the match.\n","sig":null,"attributes":[{"value":"/ Number of edits for the match.","span":{"file_name":"/Users/shelwitz/.cargo/registry/src/github.com-1ecc6299db9ec823/triple_accel-0.4.0/src/lib.rs","byte_start":6180,"byte_end":6214,"line_start":140,"line_end":140,"column_start":5,"column_end":39}}]},{"kind":"TupleVariant","id":{"krate":0,"index":917},"span":{"file_name":"/Users/shelwitz/.cargo/registry/src/github.com-1ecc6299db9ec823/triple_accel-0.4.0/src/lib.rs","byte_start":6420,"byte_end":6425,"line_start":149,"line_end":149,"column_start":5,"column_end":10},"name":"Match","qualname":"::EditType::Match","value":"EditType::Match","parent":{"krate":0,"index":916},"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"TupleVariant","id":{"krate":0,"index":919},"span":{"file_name":"/Users/shelwitz/.cargo/registry/src/github.com-1ecc6299db9ec823/triple_accel-0.4.0/src/lib.rs","byte_start":6431,"byte_end":6439,"line_start":150,"line_end":150,"column_start":5,"column_end":13},"name":"Mismatch","qualname":"::EditType::Mismatch","value":"EditType::Mismatch","parent":{"krate":0,"index":916},"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"TupleVariant","id":{"krate":0,"index":921},"span":{"file_name":"/Users/shelwitz/.cargo/registry/src/github.com-1ecc6299db9ec823/triple_accel-0.4.0/src/lib.rs","byte_start":6445,"byte_end":6449,"line_start":151,"line_end":151,"column_start":5,"column_end":9},"name":"AGap","qualname":"::EditType::AGap","value":"EditType::AGap","parent":{"krate":0,"index":916},"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"TupleVariant","id":{"krate":0,"index":923},"span":{"file_name":"/Users/shelwitz/.cargo/registry/src/github.com-1ecc6299db9ec823/triple_accel-0.4.0/src/lib.rs","byte_start":6455,"byte_end":6459,"line_start":152,"line_end":152,"column_start":5,"column_end":9},"name":"BGap","qualname":"::EditType::BGap","value":"EditType::BGap","parent":{"krate":0,"index":916},"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"TupleVariant","id":{"krate":0,"index":925},"span":{"file_name":"/Users/shelwitz/.cargo/registry/src/github.com-1ecc6299db9ec823/triple_accel-0.4.0/src/lib.rs","byte_start":6465,"byte_end":6474,"line_start":153,"line_end":153,"column_start":5,"column_end":14},"name":"Transpose","qualname":"::EditType::Transpose","value":"EditType::Transpose","parent":{"krate":0,"index":916},"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Enum","id":{"krate":0,"index":916},"span":{"file_name":"/Users/shelwitz/.cargo/registry/src/github.com-1ecc6299db9ec823/triple_accel-0.4.0/src/lib.rs","byte_start":6405,"byte_end":6413,"line_start":148,"line_end":148,"column_start":10,"column_end":18},"name":"EditType","qualname":"::EditType","value":"pub enum EditType { Match, Mismatch, AGap, BGap, Transpose, }","parent":null,"children":[{"krate":0,"index":917},{"krate":0,"index":919},{"krate":0,"index":921},{"krate":0,"index":923},{"krate":0,"index":925}],"decl_id":null,"docs":" An enum describing possible edit operations.","sig":null,"attributes":[{"value":"/ An enum describing possible edit operations.","span":{"file_name":"/Users/shelwitz/.cargo/registry/src/github.com-1ecc6299db9ec823/triple_accel-0.4.0/src/lib.rs","byte_start":6233,"byte_end":6281,"line_start":144,"line_end":144,"column_start":1,"column_end":49}},{"value":"/","span":{"file_name":"/Users/shelwitz/.cargo/registry/src/github.com-1ecc6299db9ec823/triple_accel-0.4.0/src/lib.rs","byte_start":6282,"byte_end":6285,"line_start":145,"line_end":145,"column_start":1,"column_end":4}},{"value":"/ This is usually returned as part of the traceback for edit distance routines.","span":{"file_name":"/Users/shelwitz/.cargo/registry/src/github.com-1ecc6299db9ec823/triple_accel-0.4.0/src/lib.rs","byte_start":6286,"byte_end":6367,"line_start":146,"line_end":146,"column_start":1,"column_end":82}}]},{"kind":"Struct","id":{"krate":0,"index":932},"span":{"file_name":"/Users/shelwitz/.cargo/registry/src/github.com-1ecc6299db9ec823/triple_accel-0.4.0/src/lib.rs","byte_start":6669,"byte_end":6673,"line_start":160,"line_end":160,"column_start":12,"column_end":16},"name":"Edit","qualname":"::Edit","value":"Edit { edit, count }","parent":null,"children":[{"krate":0,"index":933},{"krate":0,"index":934}],"decl_id":null,"docs":" A struct representing a sequence of edits of the same type.","sig":null,"attributes":[{"value":"/ A struct representing a sequence of edits of the same type.","span":{"file_name":"/Users/shelwitz/.cargo/registry/src/github.com-1ecc6299db9ec823/triple_accel-0.4.0/src/lib.rs","byte_start":6478,"byte_end":6541,"line_start":156,"line_end":156,"column_start":1,"column_end":64}},{"value":"/","span":{"file_name":"/Users/shelwitz/.cargo/registry/src/github.com-1ecc6299db9ec823/triple_accel-0.4.0/src/lib.rs","byte_start":6542,"byte_end":6545,"line_start":157,"line_end":157,"column_start":1,"column_end":4}},{"value":"/ This is returned in the run-length encoded traceback of edit distance routines.","span":{"file_name":"/Users/shelwitz/.cargo/registry/src/github.com-1ecc6299db9ec823/triple_accel-0.4.0/src/lib.rs","byte_start":6546,"byte_end":6629,"line_start":158,"line_end":158,"column_start":1,"column_end":84}}]},{"kind":"Field","id":{"krate":0,"index":933},"span":{"file_name":"/Users/shelwitz/.cargo/registry/src/github.com-1ecc6299db9ec823/triple_accel-0.4.0/src/lib.rs","byte_start":6720,"byte_end":6724,"line_start":162,"line_end":162,"column_start":9,"column_end":13},"name":"edit","qualname":"::Edit::edit","value":"EditType","parent":{"krate":0,"index":932},"children":[],"decl_id":null,"docs":" The type of edit operation.\n","sig":null,"attributes":[{"value":"/ The type of edit operation.","span":{"file_name":"/Users/shelwitz/.cargo/registry/src/github.com-1ecc6299db9ec823/triple_accel-0.4.0/src/lib.rs","byte_start":6680,"byte_end":6711,"line_start":161,"line_end":161,"column_start":5,"column_end":36}}]},{"kind":"Field","id":{"krate":0,"index":934},"span":{"file_name":"/Users/shelwitz/.cargo/registry/src/github.com-1ecc6299db9ec823/triple_accel-0.4.0/src/lib.rs","byte_start":6812,"byte_end":6817,"line_start":164,"line_end":164,"column_start":9,"column_end":14},"name":"count","qualname":"::Edit::count","value":"usize","parent":{"krate":0,"index":932},"children":[],"decl_id":null,"docs":" The number of consecutive edit operations of the same type.\n","sig":null,"attributes":[{"value":"/ The number of consecutive edit operations of the same type.","span":{"file_name":"/Users/shelwitz/.cargo/registry/src/github.com-1ecc6299db9ec823/triple_accel-0.4.0/src/lib.rs","byte_start":6740,"byte_end":6803,"line_start":163,"line_end":163,"column_start":5,"column_end":68}}]},{"kind":"TupleVariant","id":{"krate":0,"index":942},"span":{"file_name":"/Users/shelwitz/.cargo/registry/src/github.com-1ecc6299db9ec823/triple_accel-0.4.0/src/lib.rs","byte_start":7036,"byte_end":7039,"line_start":172,"line_end":172,"column_start":5,"column_end":8},"name":"All","qualname":"::SearchType::All","value":"SearchType::All","parent":{"krate":0,"index":941},"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"TupleVariant","id":{"krate":0,"index":944},"span":{"file_name":"/Users/shelwitz/.cargo/registry/src/github.com-1ecc6299db9ec823/triple_accel-0.4.0/src/lib.rs","byte_start":7045,"byte_end":7049,"line_start":173,"line_end":173,"column_start":5,"column_end":9},"name":"Best","qualname":"::SearchType::Best","value":"SearchType::Best","parent":{"krate":0,"index":941},"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Enum","id":{"krate":0,"index":941},"span":{"file_name":"/Users/shelwitz/.cargo/registry/src/github.com-1ecc6299db9ec823/triple_accel-0.4.0/src/lib.rs","byte_start":7019,"byte_end":7029,"line_start":171,"line_end":171,"column_start":10,"column_end":20},"name":"SearchType","qualname":"::SearchType","value":"pub enum SearchType { All, Best, }","parent":null,"children":[{"krate":0,"index":942},{"krate":0,"index":944}],"decl_id":null,"docs":" An enum representing whether to return all matches or just the best matches.","sig":null,"attributes":[{"value":"/ An enum representing whether to return all matches or just the best matches.","span":{"file_name":"/Users/shelwitz/.cargo/registry/src/github.com-1ecc6299db9ec823/triple_accel-0.4.0/src/lib.rs","byte_start":6828,"byte_end":6908,"line_start":167,"line_end":167,"column_start":1,"column_end":81}},{"value":"/","span":{"file_name":"/Users/shelwitz/.cargo/registry/src/github.com-1ecc6299db9ec823/triple_accel-0.4.0/src/lib.rs","byte_start":6909,"byte_end":6912,"line_start":168,"line_end":168,"column_start":1,"column_end":4}},{"value":"/ This is used as an argument for searching routines.","span":{"file_name":"/Users/shelwitz/.cargo/registry/src/github.com-1ecc6299db9ec823/triple_accel-0.4.0/src/lib.rs","byte_start":6913,"byte_end":6968,"line_start":169,"line_end":169,"column_start":1,"column_end":56}}]},{"kind":"Function","id":{"krate":0,"index":297},"span":{"file_name":"/Users/shelwitz/.cargo/registry/src/github.com-1ecc6299db9ec823/triple_accel-0.4.0/src/lib.rs","byte_start":7779,"byte_end":7788,"line_start":197,"line_end":197,"column_start":8,"column_end":17},"name":"alloc_str","qualname":"::alloc_str","value":"pub fn alloc_str(usize) -> Vec<u8>","parent":null,"children":[],"decl_id":null,"docs":" This creates a vector with the alignment and padding for `u128` values, and\n then convert it to a vector of `u8` values that is returned.","sig":null,"attributes":[{"value":"/ This creates a vector with the alignment and padding for `u128` values, and","span":{"file_name":"/Users/shelwitz/.cargo/registry/src/github.com-1ecc6299db9ec823/triple_accel-0.4.0/src/lib.rs","byte_start":7053,"byte_end":7132,"line_start":176,"line_end":176,"column_start":1,"column_end":80}},{"value":"/ then convert it to a vector of `u8` values that is returned.","span":{"file_name":"/Users/shelwitz/.cargo/registry/src/github.com-1ecc6299db9ec823/triple_accel-0.4.0/src/lib.rs","byte_start":7133,"byte_end":7197,"line_start":177,"line_end":177,"column_start":1,"column_end":65}},{"value":"/","span":{"file_name":"/Users/shelwitz/.cargo/registry/src/github.com-1ecc6299db9ec823/triple_accel-0.4.0/src/lib.rs","byte_start":7198,"byte_end":7201,"line_start":178,"line_end":178,"column_start":1,"column_end":4}},{"value":"/ This is possible because u8 has looser alignment requirements than `u128`.","span":{"file_name":"/Users/shelwitz/.cargo/registry/src/github.com-1ecc6299db9ec823/triple_accel-0.4.0/src/lib.rs","byte_start":7202,"byte_end":7280,"line_start":179,"line_end":179,"column_start":1,"column_end":79}},{"value":"/ This vector can be easily converted back to `u128` or `u64` later, for Hamming","span":{"file_name":"/Users/shelwitz/.cargo/registry/src/github.com-1ecc6299db9ec823/triple_accel-0.4.0/src/lib.rs","byte_start":7281,"byte_end":7363,"line_start":180,"line_end":180,"column_start":1,"column_end":83}},{"value":"/ distance routines.","span":{"file_name":"/Users/shelwitz/.cargo/registry/src/github.com-1ecc6299db9ec823/triple_accel-0.4.0/src/lib.rs","byte_start":7364,"byte_end":7386,"line_start":181,"line_end":181,"column_start":1,"column_end":23}},{"value":"/ The returned vector can be edited by copying `u8` values into it.","span":{"file_name":"/Users/shelwitz/.cargo/registry/src/github.com-1ecc6299db9ec823/triple_accel-0.4.0/src/lib.rs","byte_start":7387,"byte_end":7456,"line_start":182,"line_end":182,"column_start":1,"column_end":70}},{"value":"/ However, do not do any operation (like `push`) that may cause the the vector to be","span":{"file_name":"/Users/shelwitz/.cargo/registry/src/github.com-1ecc6299db9ec823/triple_accel-0.4.0/src/lib.rs","byte_start":7457,"byte_end":7543,"line_start":183,"line_end":183,"column_start":1,"column_end":87}},{"value":"/ reallocated.","span":{"file_name":"/Users/shelwitz/.cargo/registry/src/github.com-1ecc6299db9ec823/triple_accel-0.4.0/src/lib.rs","byte_start":7544,"byte_end":7560,"line_start":184,"line_end":184,"column_start":1,"column_end":17}},{"value":"/","span":{"file_name":"/Users/shelwitz/.cargo/registry/src/github.com-1ecc6299db9ec823/triple_accel-0.4.0/src/lib.rs","byte_start":7561,"byte_end":7564,"line_start":185,"line_end":185,"column_start":1,"column_end":4}},{"value":"/ # Arguments","span":{"file_name":"/Users/shelwitz/.cargo/registry/src/github.com-1ecc6299db9ec823/triple_accel-0.4.0/src/lib.rs","byte_start":7565,"byte_end":7580,"line_start":186,"line_end":186,"column_start":1,"column_end":16}},{"value":"/ * `len` - the length of the resulting array of u8 values","span":{"file_name":"/Users/shelwitz/.cargo/registry/src/github.com-1ecc6299db9ec823/triple_accel-0.4.0/src/lib.rs","byte_start":7581,"byte_end":7641,"line_start":187,"line_end":187,"column_start":1,"column_end":61}},{"value":"/","span":{"file_name":"/Users/shelwitz/.cargo/registry/src/github.com-1ecc6299db9ec823/triple_accel-0.4.0/src/lib.rs","byte_start":7642,"byte_end":7645,"line_start":188,"line_end":188,"column_start":1,"column_end":4}},{"value":"/ # Example","span":{"file_name":"/Users/shelwitz/.cargo/registry/src/github.com-1ecc6299db9ec823/triple_accel-0.4.0/src/lib.rs","byte_start":7646,"byte_end":7659,"line_start":189,"line_end":189,"column_start":1,"column_end":14}},{"value":"/ ```","span":{"file_name":"/Users/shelwitz/.cargo/registry/src/github.com-1ecc6299db9ec823/triple_accel-0.4.0/src/lib.rs","byte_start":7660,"byte_end":7667,"line_start":190,"line_end":190,"column_start":1,"column_end":8}},{"value":"/ # use triple_accel::*;","span":{"file_name":"/Users/shelwitz/.cargo/registry/src/github.com-1ecc6299db9ec823/triple_accel-0.4.0/src/lib.rs","byte_start":7668,"byte_end":7694,"line_start":191,"line_end":191,"column_start":1,"column_end":27}},{"value":"/ let s = alloc_str(10);","span":{"file_name":"/Users/shelwitz/.cargo/registry/src/github.com-1ecc6299db9ec823/triple_accel-0.4.0/src/lib.rs","byte_start":7695,"byte_end":7721,"line_start":192,"line_end":192,"column_start":1,"column_end":27}},{"value":"/","span":{"file_name":"/Users/shelwitz/.cargo/registry/src/github.com-1ecc6299db9ec823/triple_accel-0.4.0/src/lib.rs","byte_start":7722,"byte_end":7725,"line_start":193,"line_end":193,"column_start":1,"column_end":4}},{"value":"/ assert!(s.len() == 10);","span":{"file_name":"/Users/shelwitz/.cargo/registry/src/github.com-1ecc6299db9ec823/triple_accel-0.4.0/src/lib.rs","byte_start":7726,"byte_end":7753,"line_start":194,"line_end":194,"column_start":1,"column_end":28}},{"value":"/ ```","span":{"file_name":"/Users/shelwitz/.cargo/registry/src/github.com-1ecc6299db9ec823/triple_accel-0.4.0/src/lib.rs","byte_start":7754,"byte_end":7761,"line_start":195,"line_end":195,"column_start":1,"column_end":8}},{"value":"inline","span":{"file_name":"/Users/shelwitz/.cargo/registry/src/github.com-1ecc6299db9ec823/triple_accel-0.4.0/src/lib.rs","byte_start":7762,"byte_end":7771,"line_start":196,"line_end":196,"column_start":1,"column_end":10}}]},{"kind":"Function","id":{"krate":0,"index":298},"span":{"file_name":"/Users/shelwitz/.cargo/registry/src/github.com-1ecc6299db9ec823/triple_accel-0.4.0/src/lib.rs","byte_start":8637,"byte_end":8645,"line_start":229,"line_end":229,"column_start":8,"column_end":16},"name":"fill_str","qualname":"::fill_str","value":"pub fn fill_str(&mut [u8], &[u8])","parent":null,"children":[],"decl_id":null,"docs":" Directly copy from the a source `u8` slice to a destination `u8` slice.","sig":null,"attributes":[{"value":"/ Directly copy from the a source `u8` slice to a destination `u8` slice.","span":{"file_name":"/Users/shelwitz/.cargo/registry/src/github.com-1ecc6299db9ec823/triple_accel-0.4.0/src/lib.rs","byte_start":8075,"byte_end":8150,"line_start":207,"line_end":207,"column_start":1,"column_end":76}},{"value":"/","span":{"file_name":"/Users/shelwitz/.cargo/registry/src/github.com-1ecc6299db9ec823/triple_accel-0.4.0/src/lib.rs","byte_start":8151,"byte_end":8154,"line_start":208,"line_end":208,"column_start":1,"column_end":4}},{"value":"/ Can be used to copy string data after allocating a vector using `alloc_str`.","span":{"file_name":"/Users/shelwitz/.cargo/registry/src/github.com-1ecc6299db9ec823/triple_accel-0.4.0/src/lib.rs","byte_start":8155,"byte_end":8235,"line_start":209,"line_end":209,"column_start":1,"column_end":81}},{"value":"/","span":{"file_name":"/Users/shelwitz/.cargo/registry/src/github.com-1ecc6299db9ec823/triple_accel-0.4.0/src/lib.rs","byte_start":8236,"byte_end":8239,"line_start":210,"line_end":210,"column_start":1,"column_end":4}},{"value":"/ # Arguments","span":{"file_name":"/Users/shelwitz/.cargo/registry/src/github.com-1ecc6299db9ec823/triple_accel-0.4.0/src/lib.rs","byte_start":8240,"byte_end":8255,"line_start":211,"line_end":211,"column_start":1,"column_end":16}},{"value":"/ * `dest` - the destination slice","span":{"file_name":"/Users/shelwitz/.cargo/registry/src/github.com-1ecc6299db9ec823/triple_accel-0.4.0/src/lib.rs","byte_start":8256,"byte_end":8292,"line_start":212,"line_end":212,"column_start":1,"column_end":37}},{"value":"/ * `src` - the source slice","span":{"file_name":"/Users/shelwitz/.cargo/registry/src/github.com-1ecc6299db9ec823/triple_accel-0.4.0/src/lib.rs","byte_start":8293,"byte_end":8323,"line_start":213,"line_end":213,"column_start":1,"column_end":31}},{"value":"/","span":{"file_name":"/Users/shelwitz/.cargo/registry/src/github.com-1ecc6299db9ec823/triple_accel-0.4.0/src/lib.rs","byte_start":8324,"byte_end":8327,"line_start":214,"line_end":214,"column_start":1,"column_end":4}},{"value":"/ # Panics","span":{"file_name":"/Users/shelwitz/.cargo/registry/src/github.com-1ecc6299db9ec823/triple_accel-0.4.0/src/lib.rs","byte_start":8328,"byte_end":8340,"line_start":215,"line_end":215,"column_start":1,"column_end":13}},{"value":"/ * If the length of `src` is greater than the length of `dest`.","span":{"file_name":"/Users/shelwitz/.cargo/registry/src/github.com-1ecc6299db9ec823/triple_accel-0.4.0/src/lib.rs","byte_start":8341,"byte_end":8407,"line_start":216,"line_end":216,"column_start":1,"column_end":67}},{"value":"/","span":{"file_name":"/Users/shelwitz/.cargo/registry/src/github.com-1ecc6299db9ec823/triple_accel-0.4.0/src/lib.rs","byte_start":8408,"byte_end":8411,"line_start":217,"line_end":217,"column_start":1,"column_end":4}},{"value":"/ # Example","span":{"file_name":"/Users/shelwitz/.cargo/registry/src/github.com-1ecc6299db9ec823/triple_accel-0.4.0/src/lib.rs","byte_start":8412,"byte_end":8425,"line_start":218,"line_end":218,"column_start":1,"column_end":14}},{"value":"/ ```","span":{"file_name":"/Users/shelwitz/.cargo/registry/src/github.com-1ecc6299db9ec823/triple_accel-0.4.0/src/lib.rs","byte_start":8426,"byte_end":8433,"line_start":219,"line_end":219,"column_start":1,"column_end":8}},{"value":"/ # use triple_accel::*;","span":{"file_name":"/Users/shelwitz/.cargo/registry/src/github.com-1ecc6299db9ec823/triple_accel-0.4.0/src/lib.rs","byte_start":8434,"byte_end":8460,"line_start":220,"line_end":220,"column_start":1,"column_end":27}},{"value":"/ let mut a = vec![0u8; 5];","span":{"file_name":"/Users/shelwitz/.cargo/registry/src/github.com-1ecc6299db9ec823/triple_accel-0.4.0/src/lib.rs","byte_start":8461,"byte_end":8490,"line_start":221,"line_end":221,"column_start":1,"column_end":30}},{"value":"/ let b = vec![1u8, 2u8, 3u8, 4u8];","span":{"file_name":"/Users/shelwitz/.cargo/registry/src/github.com-1ecc6299db9ec823/triple_accel-0.4.0/src/lib.rs","byte_start":8491,"byte_end":8528,"line_start":222,"line_end":222,"column_start":1,"column_end":38}},{"value":"/","span":{"file_name":"/Users/shelwitz/.cargo/registry/src/github.com-1ecc6299db9ec823/triple_accel-0.4.0/src/lib.rs","byte_start":8529,"byte_end":8532,"line_start":223,"line_end":223,"column_start":1,"column_end":4}},{"value":"/ fill_str(&mut a, &b);","span":{"file_name":"/Users/shelwitz/.cargo/registry/src/github.com-1ecc6299db9ec823/triple_accel-0.4.0/src/lib.rs","byte_start":8533,"byte_end":8558,"line_start":224,"line_end":224,"column_start":1,"column_end":26}},{"value":"/","span":{"file_name":"/Users/shelwitz/.cargo/registry/src/github.com-1ecc6299db9ec823/triple_accel-0.4.0/src/lib.rs","byte_start":8559,"byte_end":8562,"line_start":225,"line_end":225,"column_start":1,"column_end":4}},{"value":"/ assert!(a == vec![1u8, 2u8, 3u8, 4u8, 0u8]);","span":{"file_name":"/Users/shelwitz/.cargo/registry/src/github.com-1ecc6299db9ec823/triple_accel-0.4.0/src/lib.rs","byte_start":8563,"byte_end":8611,"line_start":226,"line_end":226,"column_start":1,"column_end":49}},{"value":"/ ```","span":{"file_name":"/Users/shelwitz/.cargo/registry/src/github.com-1ecc6299db9ec823/triple_accel-0.4.0/src/lib.rs","byte_start":8612,"byte_end":8619,"line_start":227,"line_end":227,"column_start":1,"column_end":8}},{"value":"inline","span":{"file_name":"/Users/shelwitz/.cargo/registry/src/github.com-1ecc6299db9ec823/triple_accel-0.4.0/src/lib.rs","byte_start":8620,"byte_end":8629,"line_start":228,"line_end":228,"column_start":1,"column_end":10}}]}],"impls":[{"id":0,"kind":"Direct","span":{"file_name":"/Users/shelwitz/.cargo/registry/src/github.com-1ecc6299db9ec823/triple_accel-0.4.0/src/jewel.rs","byte_start":30905,"byte_end":30915,"line_start":477,"line_end":477,"column_start":16,"column_end":26},"value":"","parent":null,"children":[{"krate":0,"index":49},{"krate":0,"index":50},{"krate":0,"index":51},{"krate":0,"index":52},{"krate":0,"index":53},{"krate":0,"index":55},{"krate":0,"index":57},{"krate":0,"index":59},{"krate":0,"index":60},{"krate":0,"index":61},{"krate":0,"index":62},{"krate":0,"index":63},{"krate":0,"index":64},{"krate":0,"index":496},{"krate":0,"index":497},{"krate":0,"index":498},{"krate":0,"index":499},{"krate":0,"index":500},{"krate":0,"index":501},{"krate":0,"index":502},{"krate":0,"index":65},{"krate":0,"index":66},{"krate":0,"index":67},{"krate":0,"index":68},{"krate":0,"index":503},{"krate":0,"index":504},{"krate":0,"index":505},{"krate":0,"index":506},{"krate":0,"index":507},{"krate":0,"index":508},{"krate":0,"index":69},{"krate":0,"index":70},{"krate":0,"index":71},{"krate":0,"index":72},{"krate":0,"index":73}],"docs":"","sig":null,"attributes":[]},{"id":1,"kind":"Direct","span":{"file_name":"/Users/shelwitz/.cargo/registry/src/github.com-1ecc6299db9ec823/triple_accel-0.4.0/src/jewel.rs","byte_start":44475,"byte_end":44485,"line_start":793,"line_end":793,"column_start":23,"column_end":33},"value":"","parent":null,"children":[{"krate":0,"index":75}],"docs":"","sig":null,"attributes":[]},{"id":2,"kind":"Direct","span":{"file_name":"/Users/shelwitz/.cargo/registry/src/github.com-1ecc6299db9ec823/triple_accel-0.4.0/src/jewel.rs","byte_start":46433,"byte_end":46442,"line_start":853,"line_end":853,"column_start":16,"column_end":25},"value":"","parent":null,"children":[{"krate":0,"index":82},{"krate":0,"index":83},{"krate":0,"index":84},{"krate":0,"index":85},{"krate":0,"index":86},{"krate":0,"index":88},{"krate":0,"index":90},{"krate":0,"index":92},{"krate":0,"index":93},{"krate":0,"index":94},{"krate":0,"index":95},{"krate":0,"index":96},{"krate":0,"index":97},{"krate":0,"index":509},{"krate":0,"index":510},{"krate":0,"index":511},{"krate":0,"index":512},{"krate":0,"index":513},{"krate":0,"index":514},{"krate":0,"index":515},{"krate":0,"index":98},{"krate":0,"index":99},{"krate":0,"index":100},{"krate":0,"index":101},{"krate":0,"index":516},{"krate":0,"index":517},{"krate":0,"index":518},{"krate":0,"index":519},{"krate":0,"index":520},{"krate":0,"index":521},{"krate":0,"index":102},{"krate":0,"index":103},{"krate":0,"index":104},{"krate":0,"index":105},{"krate":0,"index":106}],"docs":"","sig":null,"attributes":[]},{"id":3,"kind":"Direct","span":{"file_name":"/Users/shelwitz/.cargo/registry/src/github.com-1ecc6299db9ec823/triple_accel-0.4.0/src/jewel.rs","byte_start":59974,"byte_end":59983,"line_start":1169,"line_end":1169,"column_start":23,"column_end":32},"value":"","parent":null,"children":[{"krate":0,"index":108}],"docs":"","sig":null,"attributes":[]},{"id":4,"kind":"Direct","span":{"file_name":"/Users/shelwitz/.cargo/registry/src/github.com-1ecc6299db9ec823/triple_accel-0.4.0/src/jewel.rs","byte_start":76828,"byte_end":76837,"line_start":1565,"line_end":1565,"column_start":16,"column_end":25},"value":"","parent":null,"children":[{"krate":0,"index":115},{"krate":0,"index":116},{"krate":0,"index":117},{"krate":0,"index":118},{"krate":0,"index":119},{"krate":0,"index":121},{"krate":0,"index":123},{"krate":0,"index":125},{"krate":0,"index":126},{"krate":0,"index":127},{"krate":0,"index":128},{"krate":0,"index":129},{"krate":0,"index":130},{"krate":0,"index":767},{"krate":0,"index":768},{"krate":0,"index":769},{"krate":0,"index":770},{"krate":0,"index":771},{"krate":0,"index":772},{"krate":0,"index":773},{"krate":0,"index":131},{"krate":0,"index":132},{"krate":0,"index":133},{"krate":0,"index":134},{"krate":0,"index":774},{"krate":0,"index":775},{"krate":0,"index":776},{"krate":0,"index":777},{"krate":0,"index":778},{"krate":0,"index":779},{"krate":0,"index":135},{"krate":0,"index":136},{"krate":0,"index":137},{"krate":0,"index":138},{"krate":0,"index":139}],"docs":"","sig":null,"attributes":[]},{"id":5,"kind":"Direct","span":{"file_name":"/Users/shelwitz/.cargo/registry/src/github.com-1ecc6299db9ec823/triple_accel-0.4.0/src/jewel.rs","byte_start":88398,"byte_end":88407,"line_start":1856,"line_end":1856,"column_start":23,"column_end":32},"value":"","parent":null,"children":[{"krate":0,"index":141}],"docs":"","sig":null,"attributes":[]},{"id":6,"kind":"Direct","span":{"file_name":"/Users/shelwitz/.cargo/registry/src/github.com-1ecc6299db9ec823/triple_accel-0.4.0/src/jewel.rs","byte_start":90329,"byte_end":90338,"line_start":1916,"line_end":1916,"column_start":16,"column_end":25},"value":"","parent":null,"children":[{"krate":0,"index":148},{"krate":0,"index":149},{"krate":0,"index":150},{"krate":0,"index":151},{"krate":0,"index":152},{"krate":0,"index":154},{"krate":0,"index":156},{"krate":0,"index":158},{"krate":0,"index":159},{"krate":0,"index":160},{"krate":0,"index":161},{"krate":0,"index":162},{"krate":0,"index":163},{"krate":0,"index":780},{"krate":0,"index":781},{"krate":0,"index":782},{"krate":0,"index":783},{"krate":0,"index":784},{"krate":0,"index":785},{"krate":0,"index":786},{"krate":0,"index":164},{"krate":0,"index":165},{"krate":0,"index":166},{"krate":0,"index":167},{"krate":0,"index":787},{"krate":0,"index":788},{"krate":0,"index":789},{"krate":0,"index":790},{"krate":0,"index":791},{"krate":0,"index":792},{"krate":0,"index":168},{"krate":0,"index":169},{"krate":0,"index":170},{"krate":0,"index":171},{"krate":0,"index":172}],"docs":"","sig":null,"attributes":[]},{"id":7,"kind":"Direct","span":{"file_name":"/Users/shelwitz/.cargo/registry/src/github.com-1ecc6299db9ec823/triple_accel-0.4.0/src/jewel.rs","byte_start":101865,"byte_end":101874,"line_start":2207,"line_end":2207,"column_start":23,"column_end":32},"value":"","parent":null,"children":[{"krate":0,"index":174}],"docs":"","sig":null,"attributes":[]},{"id":8,"kind":"Direct","span":{"file_name":"/Users/shelwitz/.cargo/registry/src/github.com-1ecc6299db9ec823/triple_accel-0.4.0/src/jewel.rs","byte_start":103615,"byte_end":103618,"line_start":2261,"line_end":2261,"column_start":23,"column_end":26},"value":"","parent":null,"children":[{"krate":0,"index":186},{"krate":0,"index":188},{"krate":0,"index":189},{"krate":0,"index":190},{"krate":0,"index":192}],"docs":"","sig":null,"attributes":[]},{"id":9,"kind":"Direct","span":{"file_name":"/Users/shelwitz/.cargo/registry/src/github.com-1ecc6299db9ec823/triple_accel-0.4.0/src/jewel.rs","byte_start":109159,"byte_end":109162,"line_start":2417,"line_end":2417,"column_start":23,"column_end":26},"value":"","parent":null,"children":[{"krate":0,"index":197},{"krate":0,"index":199},{"krate":0,"index":200},{"krate":0,"index":201},{"krate":0,"index":203}],"docs":"","sig":null,"attributes":[]},{"id":10,"kind":"Inherent","span":{"file_name":"/Users/shelwitz/.cargo/registry/src/github.com-1ecc6299db9ec823/triple_accel-0.4.0/src/levenshtein.rs","byte_start":135882,"byte_end":135891,"line_start":29,"line_end":29,"column_start":6,"column_end":15},"value":"","parent":null,"children":[{"krate":0,"index":235},{"krate":0,"index":236}],"docs":"","sig":null,"attributes":[]}],"refs":[{"kind":"Mod","span":{"file_name":"/Users/shelwitz/.cargo/registry/src/github.com-1ecc6299db9ec823/triple_accel-0.4.0/src/lib.rs","byte_start":5630,"byte_end":5637,"line_start":122,"line_end":122,"column_start":9,"column_end":16},"ref_id":{"krate":0,"index":205}},{"kind":"Mod","span":{"file_name":"/Users/shelwitz/.cargo/registry/src/github.com-1ecc6299db9ec823/triple_accel-0.4.0/src/lib.rs","byte_start":5647,"byte_end":5658,"line_start":123,"line_end":123,"column_start":9,"column_end":20},"ref_id":{"krate":0,"index":230}}],"macro_refs":[],"relations":[{"span":{"file_name":"/Users/shelwitz/.cargo/registry/src/github.com-1ecc6299db9ec823/triple_accel-0.4.0/src/jewel.rs","byte_start":9507,"byte_end":9514,"line_start":17,"line_end":17,"column_start":23,"column_end":30},"kind":"SuperTrait","from":{"krate":2,"index":8894},"to":{"krate":0,"index":7}},{"span":{"file_name":"/Users/shelwitz/.cargo/registry/src/github.com-1ecc6299db9ec823/triple_accel-0.4.0/src/jewel.rs","byte_start":30905,"byte_end":30915,"line_start":477,"line_end":477,"column_start":16,"column_end":26},"kind":{"Impl":{"id":0}},"from":{"krate":0,"index":46},"to":{"krate":0,"index":7}},{"span":{"file_name":"/Users/shelwitz/.cargo/registry/src/github.com-1ecc6299db9ec823/triple_accel-0.4.0/src/jewel.rs","byte_start":44475,"byte_end":44485,"line_start":793,"line_end":793,"column_start":23,"column_end":33},"kind":{"Impl":{"id":1}},"from":{"krate":0,"index":46},"to":{"krate":2,"index":8894}},{"span":{"file_name":"/Users/shelwitz/.cargo/registry/src/github.com-1ecc6299db9ec823/triple_accel-0.4.0/src/jewel.rs","byte_start":46433,"byte_end":46442,"line_start":853,"line_end":853,"column_start":16,"column_end":25},"kind":{"Impl":{"id":2}},"from":{"krate":0,"index":78},"to":{"krate":0,"index":7}},{"span":{"file_name":"/Users/shelwitz/.cargo/registry/src/github.com-1ecc6299db9ec823/triple_accel-0.4.0/src/jewel.rs","byte_start":59974,"byte_end":59983,"line_start":1169,"line_end":1169,"column_start":23,"column_end":32},"kind":{"Impl":{"id":3}},"from":{"krate":0,"index":78},"to":{"krate":2,"index":8894}},{"span":{"file_name":"/Users/shelwitz/.cargo/registry/src/github.com-1ecc6299db9ec823/triple_accel-0.4.0/src/jewel.rs","byte_start":76828,"byte_end":76837,"line_start":1565,"line_end":1565,"column_start":16,"column_end":25},"kind":{"Impl":{"id":4}},"from":{"krate":0,"index":112},"to":{"krate":0,"index":7}},{"span":{"file_name":"/Users/shelwitz/.cargo/registry/src/github.com-1ecc6299db9ec823/triple_accel-0.4.0/src/jewel.rs","byte_start":88398,"byte_end":88407,"line_start":1856,"line_end":1856,"column_start":23,"column_end":32},"kind":{"Impl":{"id":5}},"from":{"krate":0,"index":112},"to":{"krate":2,"index":8894}},{"span":{"file_name":"/Users/shelwitz/.cargo/registry/src/github.com-1ecc6299db9ec823/triple_accel-0.4.0/src/jewel.rs","byte_start":90329,"byte_end":90338,"line_start":1916,"line_end":1916,"column_start":16,"column_end":25},"kind":{"Impl":{"id":6}},"from":{"krate":0,"index":144},"to":{"krate":0,"index":7}},{"span":{"file_name":"/Users/shelwitz/.cargo/registry/src/github.com-1ecc6299db9ec823/triple_accel-0.4.0/src/jewel.rs","byte_start":101865,"byte_end":101874,"line_start":2207,"line_end":2207,"column_start":23,"column_end":32},"kind":{"Impl":{"id":7}},"from":{"krate":0,"index":144},"to":{"krate":2,"index":8894}},{"span":{"file_name":"/Users/shelwitz/.cargo/registry/src/github.com-1ecc6299db9ec823/triple_accel-0.4.0/src/jewel.rs","byte_start":103615,"byte_end":103618,"line_start":2261,"line_end":2261,"column_start":23,"column_end":26},"kind":{"Impl":{"id":8}},"from":{"krate":0,"index":183},"to":{"krate":0,"index":177}},{"span":{"file_name":"/Users/shelwitz/.cargo/registry/src/github.com-1ecc6299db9ec823/triple_accel-0.4.0/src/jewel.rs","byte_start":109159,"byte_end":109162,"line_start":2417,"line_end":2417,"column_start":23,"column_end":26},"kind":{"Impl":{"id":9}},"from":{"krate":0,"index":194},"to":{"krate":0,"index":177}},{"span":{"file_name":"/Users/shelwitz/.cargo/registry/src/github.com-1ecc6299db9ec823/triple_accel-0.4.0/src/levenshtein.rs","byte_start":135882,"byte_end":135891,"line_start":29,"line_end":29,"column_start":6,"column_end":15},"kind":{"Impl":{"id":10}},"from":{"krate":0,"index":805},"to":{"krate":4294967295,"index":4294967295}}]}