{"config":{"output_file":null,"full_docs":false,"pub_only":true,"reachable_only":true,"distro_crate":false,"signatures":false,"borrow_data":false},"version":"0.19.1","compilation":{"directory":"/Users/shelwitz/.cargo/registry/src/github.com-1ecc6299db9ec823/bio-0.39.0","program":"/Users/shelwitz/.rustup/toolchains/stable-x86_64-apple-darwin/bin/rls","arguments":["--crate-name","bio","--edition=2018","/Users/shelwitz/.cargo/registry/src/github.com-1ecc6299db9ec823/bio-0.39.0/src/lib.rs","--json=diagnostic-rendered-ansi","--crate-type","lib","--emit=dep-info,metadata","-C","embed-bitcode=no","-C","split-debuginfo=unpacked","-C","debuginfo=2","-C","metadata=a0e382f1c1344355","-C","extra-filename=-a0e382f1c1344355","--out-dir","/Users/shelwitz/Bioinfo/Coursera_Bioinfo/Fidding_Hidden_MessageInDNA/practice/target/rls/debug/deps","-L","dependency=/Users/shelwitz/Bioinfo/Coursera_Bioinfo/Fidding_Hidden_MessageInDNA/practice/target/rls/debug/deps","--extern","anyhow=/Users/shelwitz/Bioinfo/Coursera_Bioinfo/Fidding_Hidden_MessageInDNA/practice/target/rls/debug/deps/libanyhow-0900c0e692a3f730.rmeta","--extern","approx=/Users/shelwitz/Bioinfo/Coursera_Bioinfo/Fidding_Hidden_MessageInDNA/practice/target/rls/debug/deps/libapprox-70cfe5ee38c88559.rmeta","--extern","bio_types=/Users/shelwitz/Bioinfo/Coursera_Bioinfo/Fidding_Hidden_MessageInDNA/practice/target/rls/debug/deps/libbio_types-17334e89bc5be563.rmeta","--extern","bit_set=/Users/shelwitz/Bioinfo/Coursera_Bioinfo/Fidding_Hidden_MessageInDNA/practice/target/rls/debug/deps/libbit_set-74a5135faa441e41.rmeta","--extern","bv=/Users/shelwitz/Bioinfo/Coursera_Bioinfo/Fidding_Hidden_MessageInDNA/practice/target/rls/debug/deps/libbv-a2923c480c2dc0d3.rmeta","--extern","bytecount=/Users/shelwitz/Bioinfo/Coursera_Bioinfo/Fidding_Hidden_MessageInDNA/practice/target/rls/debug/deps/libbytecount-3dbbebf446052dec.rmeta","--extern","csv=/Users/shelwitz/Bioinfo/Coursera_Bioinfo/Fidding_Hidden_MessageInDNA/practice/target/rls/debug/deps/libcsv-513a1fdd83981c51.rmeta","--extern","custom_derive=/Users/shelwitz/Bioinfo/Coursera_Bioinfo/Fidding_Hidden_MessageInDNA/practice/target/rls/debug/deps/libcustom_derive-4d808dd02bf5ea20.rmeta","--extern","enum_map=/Users/shelwitz/Bioinfo/Coursera_Bioinfo/Fidding_Hidden_MessageInDNA/practice/target/rls/debug/deps/libenum_map-884b1fc97f351081.rmeta","--extern","fnv=/Users/shelwitz/Bioinfo/Coursera_Bioinfo/Fidding_Hidden_MessageInDNA/practice/target/rls/debug/deps/libfnv-876c6e2b04b7ba38.rmeta","--extern","fxhash=/Users/shelwitz/Bioinfo/Coursera_Bioinfo/Fidding_Hidden_MessageInDNA/practice/target/rls/debug/deps/libfxhash-cc573b1f1ef806f6.rmeta","--extern","getset=/Users/shelwitz/Bioinfo/Coursera_Bioinfo/Fidding_Hidden_MessageInDNA/practice/target/rls/debug/deps/libgetset-48c10a9b5fdb40ec.dylib","--extern","itertools=/Users/shelwitz/Bioinfo/Coursera_Bioinfo/Fidding_Hidden_MessageInDNA/practice/target/rls/debug/deps/libitertools-7f090363b0c9cc89.rmeta","--extern","itertools_num=/Users/shelwitz/Bioinfo/Coursera_Bioinfo/Fidding_Hidden_MessageInDNA/practice/target/rls/debug/deps/libitertools_num-8ab7565b6af10d1e.rmeta","--extern","lazy_static=/Users/shelwitz/Bioinfo/Coursera_Bioinfo/Fidding_Hidden_MessageInDNA/practice/target/rls/debug/deps/liblazy_static-9e7e7395d04a3f16.rmeta","--extern","multimap=/Users/shelwitz/Bioinfo/Coursera_Bioinfo/Fidding_Hidden_MessageInDNA/practice/target/rls/debug/deps/libmultimap-beed32cf1db4e257.rmeta","--extern","ndarray=/Users/shelwitz/Bioinfo/Coursera_Bioinfo/Fidding_Hidden_MessageInDNA/practice/target/rls/debug/deps/libndarray-052bb446ed00e959.rmeta","--extern","newtype_derive=/Users/shelwitz/Bioinfo/Coursera_Bioinfo/Fidding_Hidden_MessageInDNA/practice/target/rls/debug/deps/libnewtype_derive-9cd07bf8b12f2da7.rmeta","--extern","num_integer=/Users/shelwitz/Bioinfo/Coursera_Bioinfo/Fidding_Hidden_MessageInDNA/practice/target/rls/debug/deps/libnum_integer-fe360546a35a3370.rmeta","--extern","num_traits=/Users/shelwitz/Bioinfo/Coursera_Bioinfo/Fidding_Hidden_MessageInDNA/practice/target/rls/debug/deps/libnum_traits-8c17aba81b3df1b5.rmeta","--extern","ordered_float=/Users/shelwitz/Bioinfo/Coursera_Bioinfo/Fidding_Hidden_MessageInDNA/practice/target/rls/debug/deps/libordered_float-1475cb4beebfd739.rmeta","--extern","petgraph=/Users/shelwitz/Bioinfo/Coursera_Bioinfo/Fidding_Hidden_MessageInDNA/practice/target/rls/debug/deps/libpetgraph-90cd7196a4bb0ea2.rmeta","--extern","rand=/Users/shelwitz/Bioinfo/Coursera_Bioinfo/Fidding_Hidden_MessageInDNA/practice/target/rls/debug/deps/librand-713ac63007d59047.rmeta","--extern","regex=/Users/shelwitz/Bioinfo/Coursera_Bioinfo/Fidding_Hidden_MessageInDNA/practice/target/rls/debug/deps/libregex-a4731e7fba990637.rmeta","--extern","serde=/Users/shelwitz/Bioinfo/Coursera_Bioinfo/Fidding_Hidden_MessageInDNA/practice/target/rls/debug/deps/libserde-01a598a2ef2052de.rmeta","--extern","serde_derive=/Users/shelwitz/Bioinfo/Coursera_Bioinfo/Fidding_Hidden_MessageInDNA/practice/target/rls/debug/deps/libserde_derive-3e519561a6ea032a.dylib","--extern","statrs=/Users/shelwitz/Bioinfo/Coursera_Bioinfo/Fidding_Hidden_MessageInDNA/practice/target/rls/debug/deps/libstatrs-62bd2af97ed1fdb6.rmeta","--extern","strum=/Users/shelwitz/Bioinfo/Coursera_Bioinfo/Fidding_Hidden_MessageInDNA/practice/target/rls/debug/deps/libstrum-336de2f26884127e.rmeta","--extern","strum_macros=/Users/shelwitz/Bioinfo/Coursera_Bioinfo/Fidding_Hidden_MessageInDNA/practice/target/rls/debug/deps/libstrum_macros-03d5397143387c67.dylib","--extern","thiserror=/Users/shelwitz/Bioinfo/Coursera_Bioinfo/Fidding_Hidden_MessageInDNA/practice/target/rls/debug/deps/libthiserror-26c17a278626d116.rmeta","--extern","triple_accel=/Users/shelwitz/Bioinfo/Coursera_Bioinfo/Fidding_Hidden_MessageInDNA/practice/target/rls/debug/deps/libtriple_accel-6e791ace7c6830ae.rmeta","--extern","vec_map=/Users/shelwitz/Bioinfo/Coursera_Bioinfo/Fidding_Hidden_MessageInDNA/practice/target/rls/debug/deps/libvec_map-c0559a98b60a5128.rmeta","--cap-lints","allow","--cfg","has_u128","--error-format=json","--sysroot","/Users/shelwitz/.rustup/toolchains/stable-x86_64-apple-darwin"],"output":"/Users/shelwitz/Bioinfo/Coursera_Bioinfo/Fidding_Hidden_MessageInDNA/practice/target/rls/debug/deps/libbio-a0e382f1c1344355.rmeta"},"prelude":{"crate_id":{"name":"bio","disambiguator":[10434791248810002643,9082785271376079264]},"crate_root":"/Users/shelwitz/.cargo/registry/src/github.com-1ecc6299db9ec823/bio-0.39.0/src","external_crates":[{"file_name":"/Users/shelwitz/.cargo/registry/src/github.com-1ecc6299db9ec823/bio-0.39.0/src/lib.rs","num":1,"id":{"name":"std","disambiguator":[7439535968655576646,17420488833649705410]}},{"file_name":"/Users/shelwitz/.cargo/registry/src/github.com-1ecc6299db9ec823/bio-0.39.0/src/stats/bayesian/bayes_factors.rs","num":2,"id":{"name":"core","disambiguator":[1949116827220114676,2065912148165510692]}},{"file_name":"/Users/shelwitz/.cargo/registry/src/github.com-1ecc6299db9ec823/bio-0.39.0/src/lib.rs","num":3,"id":{"name":"compiler_builtins","disambiguator":[6424123809251651324,10791243255933316672]}},{"file_name":"/Users/shelwitz/.cargo/registry/src/github.com-1ecc6299db9ec823/bio-0.39.0/src/lib.rs","num":4,"id":{"name":"rustc_std_workspace_core","disambiguator":[11089070161906179638,2253832597208660558]}},{"file_name":"/Users/shelwitz/.cargo/registry/src/github.com-1ecc6299db9ec823/bio-0.39.0/src/lib.rs","num":5,"id":{"name":"alloc","disambiguator":[3666879193032761931,4629784602926728112]}},{"file_name":"/Users/shelwitz/.cargo/registry/src/github.com-1ecc6299db9ec823/bio-0.39.0/src/lib.rs","num":6,"id":{"name":"libc","disambiguator":[17557414160303111626,7572947572632644954]}},{"file_name":"/Users/shelwitz/.cargo/registry/src/github.com-1ecc6299db9ec823/bio-0.39.0/src/lib.rs","num":7,"id":{"name":"unwind","disambiguator":[915848953387719454,11341216537588130533]}},{"file_name":"/Users/shelwitz/.cargo/registry/src/github.com-1ecc6299db9ec823/bio-0.39.0/src/lib.rs","num":8,"id":{"name":"cfg_if","disambiguator":[4285064400235759547,17176111531075018758]}},{"file_name":"/Users/shelwitz/.cargo/registry/src/github.com-1ecc6299db9ec823/bio-0.39.0/src/lib.rs","num":9,"id":{"name":"hashbrown","disambiguator":[6997063163517280748,14486342634155193831]}},{"file_name":"/Users/shelwitz/.cargo/registry/src/github.com-1ecc6299db9ec823/bio-0.39.0/src/lib.rs","num":10,"id":{"name":"rustc_std_workspace_alloc","disambiguator":[2053070849310045891,9457326657766539472]}},{"file_name":"/Users/shelwitz/.cargo/registry/src/github.com-1ecc6299db9ec823/bio-0.39.0/src/lib.rs","num":11,"id":{"name":"rustc_demangle","disambiguator":[16492367081693084488,12081229032515817188]}},{"file_name":"/Users/shelwitz/.cargo/registry/src/github.com-1ecc6299db9ec823/bio-0.39.0/src/lib.rs","num":12,"id":{"name":"std_detect","disambiguator":[14000704685499991975,15439018228330051001]}},{"file_name":"/Users/shelwitz/.cargo/registry/src/github.com-1ecc6299db9ec823/bio-0.39.0/src/lib.rs","num":13,"id":{"name":"addr2line","disambiguator":[16882152814081891816,2081400005890767566]}},{"file_name":"/Users/shelwitz/.cargo/registry/src/github.com-1ecc6299db9ec823/bio-0.39.0/src/lib.rs","num":14,"id":{"name":"gimli","disambiguator":[17412809486977561704,10774188040798205111]}},{"file_name":"/Users/shelwitz/.cargo/registry/src/github.com-1ecc6299db9ec823/bio-0.39.0/src/lib.rs","num":15,"id":{"name":"object","disambiguator":[10299009701328497764,8719717191227013711]}},{"file_name":"/Users/shelwitz/.cargo/registry/src/github.com-1ecc6299db9ec823/bio-0.39.0/src/lib.rs","num":16,"id":{"name":"panic_unwind","disambiguator":[13564088873543153286,4566579444635585591]}},{"file_name":"/Users/shelwitz/.cargo/registry/src/github.com-1ecc6299db9ec823/bio-0.39.0/src/lib.rs","num":17,"id":{"name":"approx","disambiguator":[10038386448313255672,10389916080637197734]}},{"file_name":"/Users/shelwitz/.cargo/registry/src/github.com-1ecc6299db9ec823/bio-0.39.0/src/data_structures/smallints.rs","num":18,"id":{"name":"num_traits","disambiguator":[8783356709851879031,2577628248416880039]}},{"file_name":"/Users/shelwitz/.cargo/registry/src/github.com-1ecc6299db9ec823/bio-0.39.0/src/lib.rs","num":19,"id":{"name":"custom_derive","disambiguator":[5589689951977691582,10161102984392034695]}},{"file_name":"/Users/shelwitz/.cargo/registry/src/github.com-1ecc6299db9ec823/bio-0.39.0/src/lib.rs","num":20,"id":{"name":"lazy_static","disambiguator":[13115968408465587564,1564445060253929076]}},{"file_name":"/Users/shelwitz/.cargo/registry/src/github.com-1ecc6299db9ec823/bio-0.39.0/src/lib.rs","num":21,"id":{"name":"newtype_derive","disambiguator":[5705877678033399939,2816303940852188445]}},{"file_name":"/Users/shelwitz/.cargo/registry/src/github.com-1ecc6299db9ec823/bio-0.39.0/src/lib.rs","num":22,"id":{"name":"serde_derive","disambiguator":[13661294435305497704,9223204836791206850]}},{"file_name":"/Users/shelwitz/.cargo/registry/src/github.com-1ecc6299db9ec823/bio-0.39.0/src/lib.rs","num":23,"id":{"name":"strum_macros","disambiguator":[14347509627975039158,8155604450962410859]}},{"file_name":"/Users/shelwitz/.cargo/registry/src/github.com-1ecc6299db9ec823/bio-0.39.0/src/lib.rs","num":24,"id":{"name":"getset","disambiguator":[6818585703471469510,7456218820193792915]}},{"file_name":"/Users/shelwitz/.cargo/registry/src/github.com-1ecc6299db9ec823/bio-0.39.0/src/alignment/poa.rs","num":25,"id":{"name":"petgraph","disambiguator":[7581244493380751366,15734773069068553889]}},{"file_name":"/Users/shelwitz/.cargo/registry/src/github.com-1ecc6299db9ec823/bio-0.39.0/src/alignment/poa.rs","num":26,"id":{"name":"fixedbitset","disambiguator":[4098615694891206191,610542788478748181]}},{"file_name":"/Users/shelwitz/.cargo/registry/src/github.com-1ecc6299db9ec823/bio-0.39.0/src/alignment/poa.rs","num":27,"id":{"name":"indexmap","disambiguator":[2592697041122877932,11733338036542608402]}},{"file_name":"/Users/shelwitz/.cargo/registry/src/github.com-1ecc6299db9ec823/bio-0.39.0/src/alignment/poa.rs","num":28,"id":{"name":"hashbrown","disambiguator":[4327421993113377496,1778109244464177866]}},{"file_name":"/Users/shelwitz/.cargo/registry/src/github.com-1ecc6299db9ec823/bio-0.39.0/src/alignment/sparse.rs","num":29,"id":{"name":"fxhash","disambiguator":[827137401220111227,5029422709926799310]}},{"file_name":"/Users/shelwitz/.cargo/registry/src/github.com-1ecc6299db9ec823/bio-0.39.0/src/alignment/sparse.rs","num":30,"id":{"name":"byteorder","disambiguator":[5173799694009680521,8157391968624637770]}},{"file_name":"/Users/shelwitz/.cargo/registry/src/github.com-1ecc6299db9ec823/bio-0.39.0/src/alignment/mod.rs","num":31,"id":{"name":"bio_types","disambiguator":[13053595225949776894,983069519633920072]}},{"file_name":"/Users/shelwitz/.cargo/registry/src/github.com-1ecc6299db9ec823/bio-0.39.0/src/alignment/mod.rs","num":32,"id":{"name":"derive_new","disambiguator":[2339439509595622149,4781805453221764257]}},{"file_name":"/Users/shelwitz/.cargo/registry/src/github.com-1ecc6299db9ec823/bio-0.39.0/src/io/gff.rs","num":33,"id":{"name":"regex","disambiguator":[4319699999861380911,6807300546832666027]}},{"file_name":"/Users/shelwitz/.cargo/registry/src/github.com-1ecc6299db9ec823/bio-0.39.0/src/alignment/mod.rs","num":34,"id":{"name":"regex_syntax","disambiguator":[1782991836199340974,9730587620914123596]}},{"file_name":"/Users/shelwitz/.cargo/registry/src/github.com-1ecc6299db9ec823/bio-0.39.0/src/alignment/mod.rs","num":35,"id":{"name":"aho_corasick","disambiguator":[5053155909841960607,4467147800689720224]}},{"file_name":"/Users/shelwitz/.cargo/registry/src/github.com-1ecc6299db9ec823/bio-0.39.0/src/alignment/mod.rs","num":36,"id":{"name":"memchr","disambiguator":[6450258989101172752,3100143422740614825]}},{"file_name":"/Users/shelwitz/.cargo/registry/src/github.com-1ecc6299db9ec823/bio-0.39.0/src/io/fastq.rs","num":37,"id":{"name":"thiserror","disambiguator":[12568673770948442722,4539332084257412806]}},{"file_name":"/Users/shelwitz/.cargo/registry/src/github.com-1ecc6299db9ec823/bio-0.39.0/src/alignment/mod.rs","num":38,"id":{"name":"thiserror_impl","disambiguator":[4931082786693191459,9477912837447768406]}},{"file_name":"/Users/shelwitz/.cargo/registry/src/github.com-1ecc6299db9ec823/bio-0.39.0/src/alignment/mod.rs","num":39,"id":{"name":"strum_macros","disambiguator":[9553853064879058038,7052286316051095327]}},{"file_name":"/Users/shelwitz/.cargo/registry/src/github.com-1ecc6299db9ec823/bio-0.39.0/src/alphabets/mod.rs","num":40,"id":{"name":"bit_set","disambiguator":[17772906091952016083,17468694733075375615]}},{"file_name":"/Users/shelwitz/.cargo/registry/src/github.com-1ecc6299db9ec823/bio-0.39.0/src/alphabets/mod.rs","num":41,"id":{"name":"bit_vec","disambiguator":[14502568264374162050,666775208061395355]}},{"file_name":"/Users/shelwitz/.cargo/registry/src/github.com-1ecc6299db9ec823/bio-0.39.0/src/alphabets/mod.rs","num":42,"id":{"name":"vec_map","disambiguator":[120831231830309513,5069488740464944995]}},{"file_name":"/Users/shelwitz/.cargo/registry/src/github.com-1ecc6299db9ec823/bio-0.39.0/src/alphabets/mod.rs","num":43,"id":{"name":"serde","disambiguator":[2883462727963636584,8962565559889747625]}},{"file_name":"/Users/shelwitz/.cargo/registry/src/github.com-1ecc6299db9ec823/bio-0.39.0/src/data_structures/rank_select.rs","num":44,"id":{"name":"bv","disambiguator":[5246912498619041939,7827881900899594848]}},{"file_name":"/Users/shelwitz/.cargo/registry/src/github.com-1ecc6299db9ec823/bio-0.39.0/src/data_structures/smallints.rs","num":45,"id":{"name":"num_integer","disambiguator":[12371876016196916399,9236532504497317635]}},{"file_name":"/Users/shelwitz/.cargo/registry/src/github.com-1ecc6299db9ec823/bio-0.39.0/src/io/bed.rs","num":46,"id":{"name":"anyhow","disambiguator":[12589354522455675563,1364217596551555281]}},{"file_name":"/Users/shelwitz/.cargo/registry/src/github.com-1ecc6299db9ec823/bio-0.39.0/src/io/gff.rs","num":47,"id":{"name":"itertools","disambiguator":[10221082732483167162,615513909627103624]}},{"file_name":"/Users/shelwitz/.cargo/registry/src/github.com-1ecc6299db9ec823/bio-0.39.0/src/io/gff.rs","num":48,"id":{"name":"either","disambiguator":[8659131901147262303,12750382275010261553]}},{"file_name":"/Users/shelwitz/.cargo/registry/src/github.com-1ecc6299db9ec823/bio-0.39.0/src/io/gff.rs","num":49,"id":{"name":"multimap","disambiguator":[10077049400050051716,12361370272249280481]}},{"file_name":"/Users/shelwitz/.cargo/registry/src/github.com-1ecc6299db9ec823/bio-0.39.0/src/pattern_matching/pssm/mod.rs","num":50,"id":{"name":"ndarray","disambiguator":[10166242756092320947,13216749515008697521]}},{"file_name":"/Users/shelwitz/.cargo/registry/src/github.com-1ecc6299db9ec823/bio-0.39.0/src/pattern_matching/pssm/mod.rs","num":51,"id":{"name":"rawpointer","disambiguator":[7604819886714752081,7087225577116684789]}},{"file_name":"/Users/shelwitz/.cargo/registry/src/github.com-1ecc6299db9ec823/bio-0.39.0/src/pattern_matching/pssm/mod.rs","num":52,"id":{"name":"num_complex","disambiguator":[4616095389086703733,11176285638763703461]}},{"file_name":"/Users/shelwitz/.cargo/registry/src/github.com-1ecc6299db9ec823/bio-0.39.0/src/pattern_matching/pssm/mod.rs","num":53,"id":{"name":"matrixmultiply","disambiguator":[12155709271953115430,8616316822944926334]}},{"file_name":"/Users/shelwitz/.cargo/registry/src/github.com-1ecc6299db9ec823/bio-0.39.0/src/stats/bayesian/model.rs","num":54,"id":{"name":"ordered_float","disambiguator":[18410880523711335075,5494812213962269614]}},{"file_name":"/Users/shelwitz/.cargo/registry/src/github.com-1ecc6299db9ec823/bio-0.39.0/src/stats/hmm/mod.rs","num":55,"id":{"name":"statrs","disambiguator":[5070416765807654435,497427928579122676]}},{"file_name":"/Users/shelwitz/.cargo/registry/src/github.com-1ecc6299db9ec823/bio-0.39.0/src/stats/hmm/mod.rs","num":56,"id":{"name":"rand","disambiguator":[716592686997360534,2773559757458477278]}},{"file_name":"/Users/shelwitz/.cargo/registry/src/github.com-1ecc6299db9ec823/bio-0.39.0/src/stats/hmm/mod.rs","num":57,"id":{"name":"rand_core","disambiguator":[4162297115833289677,12473059149669638782]}},{"file_name":"/Users/shelwitz/.cargo/registry/src/github.com-1ecc6299db9ec823/bio-0.39.0/src/stats/hmm/mod.rs","num":58,"id":{"name":"getrandom","disambiguator":[10919634952850068815,3050354953547574209]}},{"file_name":"/Users/shelwitz/.cargo/registry/src/github.com-1ecc6299db9ec823/bio-0.39.0/src/stats/hmm/mod.rs","num":59,"id":{"name":"cfg_if","disambiguator":[8420289586558118857,13192060884594697870]}},{"file_name":"/Users/shelwitz/.cargo/registry/src/github.com-1ecc6299db9ec823/bio-0.39.0/src/stats/hmm/mod.rs","num":60,"id":{"name":"libc","disambiguator":[639121213338967342,1221903839168188139]}},{"file_name":"/Users/shelwitz/.cargo/registry/src/github.com-1ecc6299db9ec823/bio-0.39.0/src/stats/hmm/mod.rs","num":61,"id":{"name":"rand_chacha","disambiguator":[667079656523171798,12654244818765765103]}},{"file_name":"/Users/shelwitz/.cargo/registry/src/github.com-1ecc6299db9ec823/bio-0.39.0/src/stats/hmm/mod.rs","num":62,"id":{"name":"ppv_lite86","disambiguator":[11577046086297042973,9607640307353924375]}},{"file_name":"/Users/shelwitz/.cargo/registry/src/github.com-1ecc6299db9ec823/bio-0.39.0/src/stats/hmm/mod.rs","num":63,"id":{"name":"nalgebra","disambiguator":[1105471313723463722,7457398794758492499]}},{"file_name":"/Users/shelwitz/.cargo/registry/src/github.com-1ecc6299db9ec823/bio-0.39.0/src/stats/hmm/mod.rs","num":64,"id":{"name":"simba","disambiguator":[1045090753115842806,17747924865339495938]}},{"file_name":"/Users/shelwitz/.cargo/registry/src/github.com-1ecc6299db9ec823/bio-0.39.0/src/stats/hmm/mod.rs","num":65,"id":{"name":"paste","disambiguator":[17327219699031936388,2103738894932757748]}},{"file_name":"/Users/shelwitz/.cargo/registry/src/github.com-1ecc6299db9ec823/bio-0.39.0/src/stats/hmm/mod.rs","num":66,"id":{"name":"typenum","disambiguator":[12688812456921066686,10250799465848656385]}},{"file_name":"/Users/shelwitz/.cargo/registry/src/github.com-1ecc6299db9ec823/bio-0.39.0/src/stats/hmm/mod.rs","num":67,"id":{"name":"num_rational","disambiguator":[4443760538793514969,1218955595098598455]}},{"file_name":"/Users/shelwitz/.cargo/registry/src/github.com-1ecc6299db9ec823/bio-0.39.0/src/stats/hmm/mod.rs","num":68,"id":{"name":"nalgebra_macros","disambiguator":[16196547955227833961,3575238988976657558]}},{"file_name":"/Users/shelwitz/.cargo/registry/src/github.com-1ecc6299db9ec823/bio-0.39.0/src/stats/hmm/mod.rs","num":69,"id":{"name":"rand_distr","disambiguator":[7663957337372769643,12295308919846969803]}},{"file_name":"/Users/shelwitz/.cargo/registry/src/github.com-1ecc6299db9ec823/bio-0.39.0/src/stats/pairhmm/homopolypairhmm.rs","num":70,"id":{"name":"enum_map","disambiguator":[13506062328163067738,4080225245168854886]}},{"file_name":"/Users/shelwitz/.cargo/registry/src/github.com-1ecc6299db9ec823/bio-0.39.0/src/stats/pairhmm/homopolypairhmm.rs","num":71,"id":{"name":"enum_map_derive","disambiguator":[6887165610203489740,8008055637577697986]}},{"file_name":"/Users/shelwitz/.cargo/registry/src/github.com-1ecc6299db9ec823/bio-0.39.0/src/stats/probs/mod.rs","num":72,"id":{"name":"itertools_num","disambiguator":[5656516972540839828,7502135557295179272]}},{"file_name":"/Users/shelwitz/.cargo/registry/src/github.com-1ecc6299db9ec823/bio-0.39.0/src/alignment/distance.rs","num":73,"id":{"name":"triple_accel","disambiguator":[1780377037907815315,13485657727171484963]}},{"file_name":"/Users/shelwitz/.cargo/registry/src/github.com-1ecc6299db9ec823/bio-0.39.0/src/data_structures/bwt.rs","num":74,"id":{"name":"bytecount","disambiguator":[7757569195618484266,3097570104405554204]}},{"file_name":"/Users/shelwitz/.cargo/registry/src/github.com-1ecc6299db9ec823/bio-0.39.0/src/io/bed.rs","num":75,"id":{"name":"csv","disambiguator":[15327355380414289025,17804087254023634129]}},{"file_name":"/Users/shelwitz/.cargo/registry/src/github.com-1ecc6299db9ec823/bio-0.39.0/src/io/bed.rs","num":76,"id":{"name":"bstr","disambiguator":[4037633298873632762,6942263666755943506]}},{"file_name":"/Users/shelwitz/.cargo/registry/src/github.com-1ecc6299db9ec823/bio-0.39.0/src/io/bed.rs","num":77,"id":{"name":"regex_automata","disambiguator":[16281316116469437869,10809861033861999902]}},{"file_name":"/Users/shelwitz/.cargo/registry/src/github.com-1ecc6299db9ec823/bio-0.39.0/src/io/bed.rs","num":78,"id":{"name":"csv_core","disambiguator":[12198102916463151492,15783108088149562090]}},{"file_name":"/Users/shelwitz/.cargo/registry/src/github.com-1ecc6299db9ec823/bio-0.39.0/src/io/bed.rs","num":79,"id":{"name":"itoa","disambiguator":[3374026486448111431,88416596050801589]}},{"file_name":"/Users/shelwitz/.cargo/registry/src/github.com-1ecc6299db9ec823/bio-0.39.0/src/io/bed.rs","num":80,"id":{"name":"ryu","disambiguator":[2256179967856321882,1189585327048602005]}},{"file_name":"/Users/shelwitz/.cargo/registry/src/github.com-1ecc6299db9ec823/bio-0.39.0/src/stats/bayesian/bayes_factors.rs","num":81,"id":{"name":"strum","disambiguator":[11081750872135034061,14337230961013623474]}}],"span":{"file_name":"/Users/shelwitz/.cargo/registry/src/github.com-1ecc6299db9ec823/bio-0.39.0/src/lib.rs","byte_start":206,"byte_end":10181,"line_start":6,"line_end":263,"column_start":1,"column_end":15}},"imports":[{"kind":"GlobUse","ref_id":null,"span":{"file_name":"/Users/shelwitz/.cargo/registry/src/github.com-1ecc6299db9ec823/bio-0.39.0/src/alignment/mod.rs","byte_start":10606,"byte_end":10607,"line_start":14,"line_end":14,"column_start":31,"column_end":32},"alias_span":null,"name":"*","value":"AlignmentOperation, AlignmentMode, Alignment","parent":{"krate":0,"index":10}},{"kind":"Use","ref_id":{"krate":0,"index":709},"span":{"file_name":"/Users/shelwitz/.cargo/registry/src/github.com-1ecc6299db9ec823/bio-0.39.0/src/data_structures/interval_tree/mod.rs","byte_start":310213,"byte_end":310236,"line_start":4,"line_end":4,"column_start":37,"column_end":60},"alias_span":null,"name":"ArrayBackedIntervalTree","value":"","parent":{"krate":0,"index":688}},{"kind":"Use","ref_id":{"krate":0,"index":3994},"span":{"file_name":"/Users/shelwitz/.cargo/registry/src/github.com-1ecc6299db9ec823/bio-0.39.0/src/data_structures/interval_tree/mod.rs","byte_start":310271,"byte_end":310276,"line_start":6,"line_end":6,"column_start":5,"column_end":10},"alias_span":null,"name":"Entry","value":"","parent":{"krate":0,"index":688}},{"kind":"Use","ref_id":{"krate":0,"index":4029},"span":{"file_name":"/Users/shelwitz/.cargo/registry/src/github.com-1ecc6299db9ec823/bio-0.39.0/src/data_structures/interval_tree/mod.rs","byte_start":310278,"byte_end":310286,"line_start":6,"line_end":6,"column_start":12,"column_end":20},"alias_span":null,"name":"EntryMut","value":"","parent":{"krate":0,"index":688}},{"kind":"Use","ref_id":{"krate":0,"index":3927},"span":{"file_name":"/Users/shelwitz/.cargo/registry/src/github.com-1ecc6299db9ec823/bio-0.39.0/src/data_structures/interval_tree/mod.rs","byte_start":310288,"byte_end":310300,"line_start":6,"line_end":6,"column_start":22,"column_end":34},"alias_span":null,"name":"IntervalTree","value":"","parent":{"krate":0,"index":688}},{"kind":"Use","ref_id":{"krate":0,"index":766},"span":{"file_name":"/Users/shelwitz/.cargo/registry/src/github.com-1ecc6299db9ec823/bio-0.39.0/src/data_structures/interval_tree/mod.rs","byte_start":310302,"byte_end":310322,"line_start":6,"line_end":6,"column_start":36,"column_end":56},"alias_span":null,"name":"IntervalTreeIterator","value":"","parent":{"krate":0,"index":688}},{"kind":"Use","ref_id":{"krate":0,"index":784},"span":{"file_name":"/Users/shelwitz/.cargo/registry/src/github.com-1ecc6299db9ec823/bio-0.39.0/src/data_structures/interval_tree/mod.rs","byte_start":310324,"byte_end":310347,"line_start":6,"line_end":6,"column_start":58,"column_end":81},"alias_span":null,"name":"IntervalTreeIteratorMut","value":"","parent":{"krate":0,"index":688}},{"kind":"Use","ref_id":{"krate":0,"index":5076},"span":{"file_name":"/Users/shelwitz/.cargo/registry/src/github.com-1ecc6299db9ec823/bio-0.39.0/src/pattern_matching/myers/mod.rs","byte_start":564623,"byte_end":564635,"line_start":242,"line_end":242,"column_start":24,"column_end":36},"alias_span":null,"name":"MyersBuilder","value":"","parent":{"krate":0,"index":1712}},{"kind":"GlobUse","ref_id":null,"span":{"file_name":"/Users/shelwitz/.cargo/registry/src/github.com-1ecc6299db9ec823/bio-0.39.0/src/pattern_matching/myers/mod.rs","byte_start":564660,"byte_end":564661,"line_start":243,"line_end":243,"column_start":24,"column_end":25},"alias_span":null,"name":"*","value":"update_aln, BitVec, ceil_div, word_size, DistType","parent":{"krate":0,"index":1712}},{"kind":"GlobUse","ref_id":null,"span":{"file_name":"/Users/shelwitz/.cargo/registry/src/github.com-1ecc6299db9ec823/bio-0.39.0/src/pattern_matching/myers/mod.rs","byte_start":564710,"byte_end":564711,"line_start":245,"line_end":245,"column_start":23,"column_end":24},"alias_span":null,"name":"*","value":"Myers","parent":{"krate":0,"index":1712}},{"kind":"Use","ref_id":{"krate":0,"index":5416},"span":{"file_name":"/Users/shelwitz/.cargo/registry/src/github.com-1ecc6299db9ec823/bio-0.39.0/src/pattern_matching/pssm/mod.rs","byte_start":634599,"byte_end":634607,"line_start":45,"line_end":45,"column_start":25,"column_end":33},"alias_span":null,"name":"DNAMotif","value":"","parent":{"krate":0,"index":2165}},{"kind":"Use","ref_id":{"krate":0,"index":5428},"span":{"file_name":"/Users/shelwitz/.cargo/registry/src/github.com-1ecc6299db9ec823/bio-0.39.0/src/pattern_matching/pssm/mod.rs","byte_start":634632,"byte_end":634637,"line_start":46,"line_end":46,"column_start":24,"column_end":29},"alias_span":null,"name":"Error","value":"","parent":{"krate":0,"index":2165}},{"kind":"Use","ref_id":{"krate":0,"index":2220},"span":{"file_name":"/Users/shelwitz/.cargo/registry/src/github.com-1ecc6299db9ec823/bio-0.39.0/src/pattern_matching/pssm/mod.rs","byte_start":634639,"byte_end":634645,"line_start":46,"line_end":46,"column_start":31,"column_end":37},"alias_span":null,"name":"Result","value":"","parent":{"krate":0,"index":2165}},{"kind":"Use","ref_id":{"krate":0,"index":5452},"span":{"file_name":"/Users/shelwitz/.cargo/registry/src/github.com-1ecc6299db9ec823/bio-0.39.0/src/pattern_matching/pssm/mod.rs","byte_start":634673,"byte_end":634682,"line_start":47,"line_end":47,"column_start":26,"column_end":35},"alias_span":null,"name":"ProtMotif","value":"","parent":{"krate":0,"index":2165}},{"kind":"Use","ref_id":{"krate":0,"index":2411},"span":{"file_name":"/Users/shelwitz/.cargo/registry/src/github.com-1ecc6299db9ec823/bio-0.39.0/src/scores/mod.rs","byte_start":670097,"byte_end":670105,"line_start":6,"line_end":6,"column_start":25,"column_end":33},"alias_span":null,"name":"blosum62","value":"","parent":{"krate":0,"index":2393}},{"kind":"Use","ref_id":{"krate":0,"index":2414},"span":{"file_name":"/Users/shelwitz/.cargo/registry/src/github.com-1ecc6299db9ec823/bio-0.39.0/src/scores/mod.rs","byte_start":670129,"byte_end":670135,"line_start":7,"line_end":7,"column_start":23,"column_end":29},"alias_span":null,"name":"pam120","value":"","parent":{"krate":0,"index":2393}},{"kind":"Use","ref_id":{"krate":0,"index":2417},"span":{"file_name":"/Users/shelwitz/.cargo/registry/src/github.com-1ecc6299db9ec823/bio-0.39.0/src/scores/mod.rs","byte_start":670159,"byte_end":670165,"line_start":8,"line_end":8,"column_start":23,"column_end":29},"alias_span":null,"name":"pam200","value":"","parent":{"krate":0,"index":2393}},{"kind":"Use","ref_id":{"krate":0,"index":2420},"span":{"file_name":"/Users/shelwitz/.cargo/registry/src/github.com-1ecc6299db9ec823/bio-0.39.0/src/scores/mod.rs","byte_start":670189,"byte_end":670195,"line_start":9,"line_end":9,"column_start":23,"column_end":29},"alias_span":null,"name":"pam250","value":"","parent":{"krate":0,"index":2393}},{"kind":"Use","ref_id":{"krate":0,"index":2423},"span":{"file_name":"/Users/shelwitz/.cargo/registry/src/github.com-1ecc6299db9ec823/bio-0.39.0/src/scores/mod.rs","byte_start":670218,"byte_end":670223,"line_start":10,"line_end":10,"column_start":22,"column_end":27},"alias_span":null,"name":"pam40","value":"","parent":{"krate":0,"index":2393}},{"kind":"Use","ref_id":{"krate":0,"index":5650},"span":{"file_name":"/Users/shelwitz/.cargo/registry/src/github.com-1ecc6299db9ec823/bio-0.39.0/src/stats/bayesian/mod.rs","byte_start":705247,"byte_end":705258,"line_start":10,"line_end":10,"column_start":30,"column_end":41},"alias_span":null,"name":"BayesFactor","value":"","parent":{"krate":0,"index":2485}},{"kind":"Use","ref_id":{"krate":0,"index":5651},"span":{"file_name":"/Users/shelwitz/.cargo/registry/src/github.com-1ecc6299db9ec823/bio-0.39.0/src/stats/bayesian/mod.rs","byte_start":705247,"byte_end":705258,"line_start":10,"line_end":10,"column_start":30,"column_end":41},"alias_span":null,"name":"BayesFactor","value":"","parent":{"krate":0,"index":2485}},{"kind":"Use","ref_id":{"krate":0,"index":5671},"span":{"file_name":"/Users/shelwitz/.cargo/registry/src/github.com-1ecc6299db9ec823/bio-0.39.0/src/stats/bayesian/mod.rs","byte_start":705281,"byte_end":705286,"line_start":11,"line_end":11,"column_start":22,"column_end":27},"alias_span":null,"name":"Model","value":"","parent":{"krate":0,"index":2485}},{"kind":"Use","ref_id":{"krate":0,"index":5708},"span":{"file_name":"/Users/shelwitz/.cargo/registry/src/github.com-1ecc6299db9ec823/bio-0.39.0/src/stats/hmm/mod.rs","byte_start":722116,"byte_end":722121,"line_start":90,"line_end":90,"column_start":24,"column_end":29},"alias_span":null,"name":"Error","value":"","parent":{"krate":0,"index":2606}},{"kind":"Use","ref_id":{"krate":0,"index":2611},"span":{"file_name":"/Users/shelwitz/.cargo/registry/src/github.com-1ecc6299db9ec823/bio-0.39.0/src/stats/hmm/mod.rs","byte_start":722123,"byte_end":722129,"line_start":90,"line_end":90,"column_start":31,"column_end":37},"alias_span":null,"name":"Result","value":"","parent":{"krate":0,"index":2606}},{"kind":"Use","ref_id":{"krate":0,"index":5837},"span":{"file_name":"/Users/shelwitz/.cargo/registry/src/github.com-1ecc6299db9ec823/bio-0.39.0/src/stats/pairhmm/mod.rs","byte_start":781141,"byte_end":781156,"line_start":100,"line_end":100,"column_start":27,"column_end":42},"alias_span":null,"name":"HomopolyPairHMM","value":"","parent":{"krate":0,"index":2816}},{"kind":"Use","ref_id":{"krate":0,"index":2903},"span":{"file_name":"/Users/shelwitz/.cargo/registry/src/github.com-1ecc6299db9ec823/bio-0.39.0/src/stats/pairhmm/mod.rs","byte_start":781158,"byte_end":781171,"line_start":100,"line_end":100,"column_start":44,"column_end":57},"alias_span":null,"name":"HopParameters","value":"","parent":{"krate":0,"index":2816}},{"kind":"Use","ref_id":{"krate":0,"index":5843},"span":{"file_name":"/Users/shelwitz/.cargo/registry/src/github.com-1ecc6299db9ec823/bio-0.39.0/src/stats/pairhmm/mod.rs","byte_start":781191,"byte_end":781198,"line_start":101,"line_end":101,"column_start":18,"column_end":25},"alias_span":null,"name":"PairHMM","value":"","parent":{"krate":0,"index":2816}},{"kind":"Use","ref_id":{"krate":0,"index":6004},"span":{"file_name":"/Users/shelwitz/.cargo/registry/src/github.com-1ecc6299db9ec823/bio-0.39.0/src/stats/probs/mod.rs","byte_start":844418,"byte_end":844423,"line_start":24,"line_end":24,"column_start":24,"column_end":29},"alias_span":null,"name":"Error","value":"","parent":{"krate":0,"index":3019}},{"kind":"Use","ref_id":{"krate":0,"index":3090},"span":{"file_name":"/Users/shelwitz/.cargo/registry/src/github.com-1ecc6299db9ec823/bio-0.39.0/src/stats/probs/mod.rs","byte_start":844425,"byte_end":844431,"line_start":24,"line_end":24,"column_start":31,"column_end":37},"alias_span":null,"name":"Result","value":"","parent":{"krate":0,"index":3019}},{"kind":"Use","ref_id":{"krate":0,"index":6135},"span":{"file_name":"/Users/shelwitz/.cargo/registry/src/github.com-1ecc6299db9ec823/bio-0.39.0/src/stats/mod.rs","byte_start":704911,"byte_end":704918,"line_start":14,"line_end":14,"column_start":31,"column_end":38},"alias_span":null,"name":"LogProb","value":"","parent":{"krate":0,"index":2484}},{"kind":"Use","ref_id":{"krate":0,"index":6136},"span":{"file_name":"/Users/shelwitz/.cargo/registry/src/github.com-1ecc6299db9ec823/bio-0.39.0/src/stats/mod.rs","byte_start":704911,"byte_end":704918,"line_start":14,"line_end":14,"column_start":31,"column_end":38},"alias_span":null,"name":"LogProb","value":"","parent":{"krate":0,"index":2484}},{"kind":"Use","ref_id":{"krate":0,"index":6211},"span":{"file_name":"/Users/shelwitz/.cargo/registry/src/github.com-1ecc6299db9ec823/bio-0.39.0/src/stats/mod.rs","byte_start":704920,"byte_end":704929,"line_start":14,"line_end":14,"column_start":40,"column_end":49},"alias_span":null,"name":"PHREDProb","value":"","parent":{"krate":0,"index":2484}},{"kind":"Use","ref_id":{"krate":0,"index":6212},"span":{"file_name":"/Users/shelwitz/.cargo/registry/src/github.com-1ecc6299db9ec823/bio-0.39.0/src/stats/mod.rs","byte_start":704920,"byte_end":704929,"line_start":14,"line_end":14,"column_start":40,"column_end":49},"alias_span":null,"name":"PHREDProb","value":"","parent":{"krate":0,"index":2484}},{"kind":"Use","ref_id":{"krate":0,"index":6029},"span":{"file_name":"/Users/shelwitz/.cargo/registry/src/github.com-1ecc6299db9ec823/bio-0.39.0/src/stats/mod.rs","byte_start":704931,"byte_end":704935,"line_start":14,"line_end":14,"column_start":51,"column_end":55},"alias_span":null,"name":"Prob","value":"","parent":{"krate":0,"index":2484}},{"kind":"Use","ref_id":{"krate":0,"index":6030},"span":{"file_name":"/Users/shelwitz/.cargo/registry/src/github.com-1ecc6299db9ec823/bio-0.39.0/src/stats/mod.rs","byte_start":704931,"byte_end":704935,"line_start":14,"line_end":14,"column_start":51,"column_end":55},"alias_span":null,"name":"Prob","value":"","parent":{"krate":0,"index":2484}},{"kind":"Use","ref_id":{"krate":0,"index":3254},"span":{"file_name":"/Users/shelwitz/.cargo/registry/src/github.com-1ecc6299db9ec823/bio-0.39.0/src/utils/mod.rs","byte_start":876010,"byte_end":876017,"line_start":9,"line_end":9,"column_start":24,"column_end":31},"alias_span":null,"name":"FastExp","value":"","parent":{"krate":0,"index":3234}},{"kind":"Use","ref_id":{"krate":0,"index":3266},"span":{"file_name":"/Users/shelwitz/.cargo/registry/src/github.com-1ecc6299db9ec823/bio-0.39.0/src/utils/mod.rs","byte_start":876051,"byte_end":876063,"line_start":12,"line_end":12,"column_start":22,"column_end":34},"alias_span":null,"name":"trim_newline","value":"","parent":{"krate":0,"index":3234}},{"kind":"Use","ref_id":{"krate":0,"index":3263},"span":{"file_name":"/Users/shelwitz/.cargo/registry/src/github.com-1ecc6299db9ec823/bio-0.39.0/src/utils/mod.rs","byte_start":876065,"byte_end":876069,"line_start":12,"line_end":12,"column_start":36,"column_end":40},"alias_span":null,"name":"Text","value":"","parent":{"krate":0,"index":3234}},{"kind":"Use","ref_id":{"krate":0,"index":3264},"span":{"file_name":"/Users/shelwitz/.cargo/registry/src/github.com-1ecc6299db9ec823/bio-0.39.0/src/utils/mod.rs","byte_start":876071,"byte_end":876080,"line_start":12,"line_end":12,"column_start":42,"column_end":51},"alias_span":null,"name":"TextSlice","value":"","parent":{"krate":0,"index":3234}},{"kind":"Use","ref_id":{"krate":0,"index":6287},"span":{"file_name":"/Users/shelwitz/.cargo/registry/src/github.com-1ecc6299db9ec823/bio-0.39.0/src/utils/mod.rs","byte_start":876122,"byte_end":876130,"line_start":15,"line_end":15,"column_start":25,"column_end":33},"alias_span":null,"name":"Interval","value":"","parent":{"krate":0,"index":3234}}],"defs":[{"kind":"Mod","id":{"krate":0,"index":0},"span":{"file_name":"/Users/shelwitz/.cargo/registry/src/github.com-1ecc6299db9ec823/bio-0.39.0/src/lib.rs","byte_start":206,"byte_end":10181,"line_start":6,"line_end":263,"column_start":1,"column_end":15},"name":"","qualname":"::","value":"/Users/shelwitz/.cargo/registry/src/github.com-1ecc6299db9ec823/bio-0.39.0/src/lib.rs","parent":null,"children":[{"krate":0,"index":1},{"krate":0,"index":2},{"krate":0,"index":3},{"krate":0,"index":4},{"krate":0,"index":5},{"krate":0,"index":6},{"krate":0,"index":7},{"krate":0,"index":8},{"krate":0,"index":9},{"krate":0,"index":10},{"krate":0,"index":347},{"krate":0,"index":448},{"krate":0,"index":1169},{"krate":0,"index":1580},{"krate":0,"index":2393},{"krate":0,"index":2424},{"krate":0,"index":2484},{"krate":0,"index":3234}],"decl_id":null,"docs":" # Rust-bio, a bioinformatics library for Rust.\n This library provides implementations of many algorithms and data structures\n that are useful for bioinformatics.\n All provided implementations are rigorously tested via continuous\n integration.","sig":null,"attributes":[{"value":"/ # Rust-bio, a bioinformatics library for Rust.","span":{"file_name":"/Users/shelwitz/.cargo/registry/src/github.com-1ecc6299db9ec823/bio-0.39.0/src/lib.rs","byte_start":420,"byte_end":470,"line_start":11,"line_end":11,"column_start":1,"column_end":51}},{"value":"/ This library provides implementations of many algorithms and data structures","span":{"file_name":"/Users/shelwitz/.cargo/registry/src/github.com-1ecc6299db9ec823/bio-0.39.0/src/lib.rs","byte_start":471,"byte_end":551,"line_start":12,"line_end":12,"column_start":1,"column_end":81}},{"value":"/ that are useful for bioinformatics.","span":{"file_name":"/Users/shelwitz/.cargo/registry/src/github.com-1ecc6299db9ec823/bio-0.39.0/src/lib.rs","byte_start":552,"byte_end":591,"line_start":13,"line_end":13,"column_start":1,"column_end":40}},{"value":"/ All provided implementations are rigorously tested via continuous","span":{"file_name":"/Users/shelwitz/.cargo/registry/src/github.com-1ecc6299db9ec823/bio-0.39.0/src/lib.rs","byte_start":592,"byte_end":661,"line_start":14,"line_end":14,"column_start":1,"column_end":70}},{"value":"/ integration.","span":{"file_name":"/Users/shelwitz/.cargo/registry/src/github.com-1ecc6299db9ec823/bio-0.39.0/src/lib.rs","byte_start":662,"byte_end":678,"line_start":15,"line_end":15,"column_start":1,"column_end":17}},{"value":"/","span":{"file_name":"/Users/shelwitz/.cargo/registry/src/github.com-1ecc6299db9ec823/bio-0.39.0/src/lib.rs","byte_start":679,"byte_end":682,"line_start":16,"line_end":16,"column_start":1,"column_end":4}},{"value":"/ For **getting started** with using `rust-bio`, see [the `Getting started` section below](#getting-started).","span":{"file_name":"/Users/shelwitz/.cargo/registry/src/github.com-1ecc6299db9ec823/bio-0.39.0/src/lib.rs","byte_start":683,"byte_end":794,"line_start":17,"line_end":17,"column_start":1,"column_end":112}},{"value":"/ For navigating the documentation of the available modules, see [the `Modules` section below](#modules).","span":{"file_name":"/Users/shelwitz/.cargo/registry/src/github.com-1ecc6299db9ec823/bio-0.39.0/src/lib.rs","byte_start":795,"byte_end":902,"line_start":18,"line_end":18,"column_start":1,"column_end":108}},{"value":"/ If you want to contribute to `rust-bio`, see [the `Contribute` section in the repo](https://github.com/rust-bio/rust-bio#contribute).","span":{"file_name":"/Users/shelwitz/.cargo/registry/src/github.com-1ecc6299db9ec823/bio-0.39.0/src/lib.rs","byte_start":903,"byte_end":1040,"line_start":19,"line_end":19,"column_start":1,"column_end":138}},{"value":"/","span":{"file_name":"/Users/shelwitz/.cargo/registry/src/github.com-1ecc6299db9ec823/bio-0.39.0/src/lib.rs","byte_start":1041,"byte_end":1044,"line_start":20,"line_end":20,"column_start":1,"column_end":4}},{"value":"/ Currently, rust-bio provides","span":{"file_name":"/Users/shelwitz/.cargo/registry/src/github.com-1ecc6299db9ec823/bio-0.39.0/src/lib.rs","byte_start":1045,"byte_end":1077,"line_start":21,"line_end":21,"column_start":1,"column_end":33}},{"value":"/","span":{"file_name":"/Users/shelwitz/.cargo/registry/src/github.com-1ecc6299db9ec823/bio-0.39.0/src/lib.rs","byte_start":1078,"byte_end":1081,"line_start":22,"line_end":22,"column_start":1,"column_end":4}},{"value":"/ * most major pattern matching algorithms,","span":{"file_name":"/Users/shelwitz/.cargo/registry/src/github.com-1ecc6299db9ec823/bio-0.39.0/src/lib.rs","byte_start":1082,"byte_end":1127,"line_start":23,"line_end":23,"column_start":1,"column_end":46}},{"value":"/ * a convenient alphabet implementation,","span":{"file_name":"/Users/shelwitz/.cargo/registry/src/github.com-1ecc6299db9ec823/bio-0.39.0/src/lib.rs","byte_start":1128,"byte_end":1171,"line_start":24,"line_end":24,"column_start":1,"column_end":44}},{"value":"/ * pairwise alignment,","span":{"file_name":"/Users/shelwitz/.cargo/registry/src/github.com-1ecc6299db9ec823/bio-0.39.0/src/lib.rs","byte_start":1172,"byte_end":1197,"line_start":25,"line_end":25,"column_start":1,"column_end":26}},{"value":"/ * suffix arrays,","span":{"file_name":"/Users/shelwitz/.cargo/registry/src/github.com-1ecc6299db9ec823/bio-0.39.0/src/lib.rs","byte_start":1198,"byte_end":1218,"line_start":26,"line_end":26,"column_start":1,"column_end":21}},{"value":"/ * the [Burrows-Wheeler-transform (BWT)]()","span":{"file_name":"/Users/shelwitz/.cargo/registry/src/github.com-1ecc6299db9ec823/bio-0.39.0/src/lib.rs","byte_start":1219,"byte_end":1264,"line_start":27,"line_end":27,"column_start":1,"column_end":46}},{"value":"/ * the [Full-text index in Minute space index (FM-index)](https://doi.org/10.1109/SFCS.2000.892127),","span":{"file_name":"/Users/shelwitz/.cargo/registry/src/github.com-1ecc6299db9ec823/bio-0.39.0/src/lib.rs","byte_start":1265,"byte_end":1368,"line_start":28,"line_end":28,"column_start":1,"column_end":104}},{"value":"/ * FMD-Index for finding supermaximal exact matches,","span":{"file_name":"/Users/shelwitz/.cargo/registry/src/github.com-1ecc6299db9ec823/bio-0.39.0/src/lib.rs","byte_start":1369,"byte_end":1424,"line_start":29,"line_end":29,"column_start":1,"column_end":56}},{"value":"/ * a q-gram index,","span":{"file_name":"/Users/shelwitz/.cargo/registry/src/github.com-1ecc6299db9ec823/bio-0.39.0/src/lib.rs","byte_start":1425,"byte_end":1446,"line_start":30,"line_end":30,"column_start":1,"column_end":22}},{"value":"/ * utilities to work with [PSSMs](https://en.wikipedia.org/wiki/Position_weight_matrix),","span":{"file_name":"/Users/shelwitz/.cargo/registry/src/github.com-1ecc6299db9ec823/bio-0.39.0/src/lib.rs","byte_start":1447,"byte_end":1538,"line_start":31,"line_end":31,"column_start":1,"column_end":92}},{"value":"/ * an open reading frame (ORF) search algorithm,","span":{"file_name":"/Users/shelwitz/.cargo/registry/src/github.com-1ecc6299db9ec823/bio-0.39.0/src/lib.rs","byte_start":1539,"byte_end":1590,"line_start":32,"line_end":32,"column_start":1,"column_end":52}},{"value":"/ * a rank/select data structure,","span":{"file_name":"/Users/shelwitz/.cargo/registry/src/github.com-1ecc6299db9ec823/bio-0.39.0/src/lib.rs","byte_start":1591,"byte_end":1626,"line_start":33,"line_end":33,"column_start":1,"column_end":36}},{"value":"/ * [serde](https://github.com/serde-rs/serde) support for all data structures when built with `nightly` feature,","span":{"file_name":"/Users/shelwitz/.cargo/registry/src/github.com-1ecc6299db9ec823/bio-0.39.0/src/lib.rs","byte_start":1627,"byte_end":1742,"line_start":34,"line_end":34,"column_start":1,"column_end":116}},{"value":"/ * readers and writers for FASTQ, FASTA and BED,","span":{"file_name":"/Users/shelwitz/.cargo/registry/src/github.com-1ecc6299db9ec823/bio-0.39.0/src/lib.rs","byte_start":1743,"byte_end":1794,"line_start":35,"line_end":35,"column_start":1,"column_end":52}},{"value":"/ * helper functions for combinatorics and dealing with log probabilities,","span":{"file_name":"/Users/shelwitz/.cargo/registry/src/github.com-1ecc6299db9ec823/bio-0.39.0/src/lib.rs","byte_start":1795,"byte_end":1871,"line_start":36,"line_end":36,"column_start":1,"column_end":77}},{"value":"/ * an implementation of the Hidden Markov Model and related algorithms.","span":{"file_name":"/Users/shelwitz/.cargo/registry/src/github.com-1ecc6299db9ec823/bio-0.39.0/src/lib.rs","byte_start":1872,"byte_end":1946,"line_start":37,"line_end":37,"column_start":1,"column_end":75}},{"value":"/","span":{"file_name":"/Users/shelwitz/.cargo/registry/src/github.com-1ecc6299db9ec823/bio-0.39.0/src/lib.rs","byte_start":1947,"byte_end":1950,"line_start":38,"line_end":38,"column_start":1,"column_end":4}},{"value":"/ For reading and writing SAM/BAM/CRAM, VCF/BCF files or tabix indexed files, have a look at [rust-htslib](https://docs.rs/rust-htslib).","span":{"file_name":"/Users/shelwitz/.cargo/registry/src/github.com-1ecc6299db9ec823/bio-0.39.0/src/lib.rs","byte_start":1951,"byte_end":2089,"line_start":39,"line_end":39,"column_start":1,"column_end":139}},{"value":"/","span":{"file_name":"/Users/shelwitz/.cargo/registry/src/github.com-1ecc6299db9ec823/bio-0.39.0/src/lib.rs","byte_start":2090,"byte_end":2093,"line_start":40,"line_end":40,"column_start":1,"column_end":4}},{"value":"/ # Getting started","span":{"file_name":"/Users/shelwitz/.cargo/registry/src/github.com-1ecc6299db9ec823/bio-0.39.0/src/lib.rs","byte_start":2094,"byte_end":2115,"line_start":41,"line_end":41,"column_start":1,"column_end":22}},{"value":"/","span":{"file_name":"/Users/shelwitz/.cargo/registry/src/github.com-1ecc6299db9ec823/bio-0.39.0/src/lib.rs","byte_start":2116,"byte_end":2119,"line_start":42,"line_end":42,"column_start":1,"column_end":4}},{"value":"/ We explain how to use Rust-Bio step-by-step.","span":{"file_name":"/Users/shelwitz/.cargo/registry/src/github.com-1ecc6299db9ec823/bio-0.39.0/src/lib.rs","byte_start":2120,"byte_end":2168,"line_start":43,"line_end":43,"column_start":1,"column_end":49}},{"value":"/ Users who already have experience with Rust can skip right to [Step 3: Use Rust-Bio in your project](https://docs.rs/bio/#step-3-use-rust-bio-in-your-project).","span":{"file_name":"/Users/shelwitz/.cargo/registry/src/github.com-1ecc6299db9ec823/bio-0.39.0/src/lib.rs","byte_start":2169,"byte_end":2332,"line_start":44,"line_end":44,"column_start":1,"column_end":164}},{"value":"/ Users who already know `rust-bio` might want to jump right into the [modules docs](https://docs.rs/bio/#modules)","span":{"file_name":"/Users/shelwitz/.cargo/registry/src/github.com-1ecc6299db9ec823/bio-0.39.0/src/lib.rs","byte_start":2333,"byte_end":2449,"line_start":45,"line_end":45,"column_start":1,"column_end":117}},{"value":"/","span":{"file_name":"/Users/shelwitz/.cargo/registry/src/github.com-1ecc6299db9ec823/bio-0.39.0/src/lib.rs","byte_start":2450,"byte_end":2453,"line_start":46,"line_end":46,"column_start":1,"column_end":4}},{"value":"/ ## Step 1: Setting up Rust","span":{"file_name":"/Users/shelwitz/.cargo/registry/src/github.com-1ecc6299db9ec823/bio-0.39.0/src/lib.rs","byte_start":2454,"byte_end":2484,"line_start":47,"line_end":47,"column_start":1,"column_end":31}},{"value":"/","span":{"file_name":"/Users/shelwitz/.cargo/registry/src/github.com-1ecc6299db9ec823/bio-0.39.0/src/lib.rs","byte_start":2485,"byte_end":2488,"line_start":48,"line_end":48,"column_start":1,"column_end":4}},{"value":"/ Rust can be installed following the instruction for [rustup](https://rustup.rs/).","span":{"file_name":"/Users/shelwitz/.cargo/registry/src/github.com-1ecc6299db9ec823/bio-0.39.0/src/lib.rs","byte_start":2489,"byte_end":2574,"line_start":49,"line_end":49,"column_start":1,"column_end":86}},{"value":"/","span":{"file_name":"/Users/shelwitz/.cargo/registry/src/github.com-1ecc6299db9ec823/bio-0.39.0/src/lib.rs","byte_start":2575,"byte_end":2578,"line_start":50,"line_end":50,"column_start":1,"column_end":4}},{"value":"/","span":{"file_name":"/Users/shelwitz/.cargo/registry/src/github.com-1ecc6299db9ec823/bio-0.39.0/src/lib.rs","byte_start":2579,"byte_end":2582,"line_start":51,"line_end":51,"column_start":1,"column_end":4}},{"value":"/ ## Step 2: Setting up a new Rust project","span":{"file_name":"/Users/shelwitz/.cargo/registry/src/github.com-1ecc6299db9ec823/bio-0.39.0/src/lib.rs","byte_start":2583,"byte_end":2627,"line_start":52,"line_end":52,"column_start":1,"column_end":45}},{"value":"/","span":{"file_name":"/Users/shelwitz/.cargo/registry/src/github.com-1ecc6299db9ec823/bio-0.39.0/src/lib.rs","byte_start":2628,"byte_end":2631,"line_start":53,"line_end":53,"column_start":1,"column_end":4}},{"value":"/ Since Rust-Bio is a library, you need to setup your own new Rust project to use Rust-Bio.","span":{"file_name":"/Users/shelwitz/.cargo/registry/src/github.com-1ecc6299db9ec823/bio-0.39.0/src/lib.rs","byte_start":2632,"byte_end":2725,"line_start":54,"line_end":54,"column_start":1,"column_end":94}},{"value":"/ With Rust, projects and their dependencies are managed with the builtin package manager [Cargo](https://doc.rust-lang.org/cargo/index.html).","span":{"file_name":"/Users/shelwitz/.cargo/registry/src/github.com-1ecc6299db9ec823/bio-0.39.0/src/lib.rs","byte_start":2726,"byte_end":2870,"line_start":55,"line_end":55,"column_start":1,"column_end":145}},{"value":"/ To create a new Rust project, issue","span":{"file_name":"/Users/shelwitz/.cargo/registry/src/github.com-1ecc6299db9ec823/bio-0.39.0/src/lib.rs","byte_start":2871,"byte_end":2910,"line_start":56,"line_end":56,"column_start":1,"column_end":40}},{"value":"/","span":{"file_name":"/Users/shelwitz/.cargo/registry/src/github.com-1ecc6299db9ec823/bio-0.39.0/src/lib.rs","byte_start":2911,"byte_end":2914,"line_start":57,"line_end":57,"column_start":1,"column_end":4}},{"value":"/ ```bash","span":{"file_name":"/Users/shelwitz/.cargo/registry/src/github.com-1ecc6299db9ec823/bio-0.39.0/src/lib.rs","byte_start":2915,"byte_end":2926,"line_start":58,"line_end":58,"column_start":1,"column_end":12}},{"value":"/ cargo new hello_world --bin","span":{"file_name":"/Users/shelwitz/.cargo/registry/src/github.com-1ecc6299db9ec823/bio-0.39.0/src/lib.rs","byte_start":2927,"byte_end":2958,"line_start":59,"line_end":59,"column_start":1,"column_end":32}},{"value":"/ cd hello_world","span":{"file_name":"/Users/shelwitz/.cargo/registry/src/github.com-1ecc6299db9ec823/bio-0.39.0/src/lib.rs","byte_start":2959,"byte_end":2977,"line_start":60,"line_end":60,"column_start":1,"column_end":19}},{"value":"/ ```","span":{"file_name":"/Users/shelwitz/.cargo/registry/src/github.com-1ecc6299db9ec823/bio-0.39.0/src/lib.rs","byte_start":2978,"byte_end":2985,"line_start":61,"line_end":61,"column_start":1,"column_end":8}},{"value":"/ in your terminal. The flag `--bin` tells Cargo to create an executable project instead of a library.","span":{"file_name":"/Users/shelwitz/.cargo/registry/src/github.com-1ecc6299db9ec823/bio-0.39.0/src/lib.rs","byte_start":2986,"byte_end":3090,"line_start":62,"line_end":62,"column_start":1,"column_end":105}},{"value":"/ In [this section](https://doc.rust-lang.org/nightly/book/hello-cargo.html#a-new-project) of the Rust docs, you find details about what Cargo just created for you.","span":{"file_name":"/Users/shelwitz/.cargo/registry/src/github.com-1ecc6299db9ec823/bio-0.39.0/src/lib.rs","byte_start":3091,"byte_end":3257,"line_start":63,"line_end":63,"column_start":1,"column_end":167}},{"value":"/","span":{"file_name":"/Users/shelwitz/.cargo/registry/src/github.com-1ecc6299db9ec823/bio-0.39.0/src/lib.rs","byte_start":3258,"byte_end":3261,"line_start":64,"line_end":64,"column_start":1,"column_end":4}},{"value":"/ Your new project can be compiled with","span":{"file_name":"/Users/shelwitz/.cargo/registry/src/github.com-1ecc6299db9ec823/bio-0.39.0/src/lib.rs","byte_start":3262,"byte_end":3303,"line_start":65,"line_end":65,"column_start":1,"column_end":42}},{"value":"/ ```bash","span":{"file_name":"/Users/shelwitz/.cargo/registry/src/github.com-1ecc6299db9ec823/bio-0.39.0/src/lib.rs","byte_start":3304,"byte_end":3315,"line_start":66,"line_end":66,"column_start":1,"column_end":12}},{"value":"/ cargo build","span":{"file_name":"/Users/shelwitz/.cargo/registry/src/github.com-1ecc6299db9ec823/bio-0.39.0/src/lib.rs","byte_start":3316,"byte_end":3331,"line_start":67,"line_end":67,"column_start":1,"column_end":16}},{"value":"/ ```","span":{"file_name":"/Users/shelwitz/.cargo/registry/src/github.com-1ecc6299db9ec823/bio-0.39.0/src/lib.rs","byte_start":3332,"byte_end":3339,"line_start":68,"line_end":68,"column_start":1,"column_end":8}},{"value":"/ If dependencies in your project are out of date, update with","span":{"file_name":"/Users/shelwitz/.cargo/registry/src/github.com-1ecc6299db9ec823/bio-0.39.0/src/lib.rs","byte_start":3340,"byte_end":3404,"line_start":69,"line_end":69,"column_start":1,"column_end":65}},{"value":"/ ```bash","span":{"file_name":"/Users/shelwitz/.cargo/registry/src/github.com-1ecc6299db9ec823/bio-0.39.0/src/lib.rs","byte_start":3405,"byte_end":3416,"line_start":70,"line_end":70,"column_start":1,"column_end":12}},{"value":"/ cargo update","span":{"file_name":"/Users/shelwitz/.cargo/registry/src/github.com-1ecc6299db9ec823/bio-0.39.0/src/lib.rs","byte_start":3417,"byte_end":3433,"line_start":71,"line_end":71,"column_start":1,"column_end":17}},{"value":"/ ```","span":{"file_name":"/Users/shelwitz/.cargo/registry/src/github.com-1ecc6299db9ec823/bio-0.39.0/src/lib.rs","byte_start":3434,"byte_end":3441,"line_start":72,"line_end":72,"column_start":1,"column_end":8}},{"value":"/ Execute the compiled code with","span":{"file_name":"/Users/shelwitz/.cargo/registry/src/github.com-1ecc6299db9ec823/bio-0.39.0/src/lib.rs","byte_start":3442,"byte_end":3476,"line_start":73,"line_end":73,"column_start":1,"column_end":35}},{"value":"/ ```bash","span":{"file_name":"/Users/shelwitz/.cargo/registry/src/github.com-1ecc6299db9ec823/bio-0.39.0/src/lib.rs","byte_start":3477,"byte_end":3488,"line_start":74,"line_end":74,"column_start":1,"column_end":12}},{"value":"/ cargo run","span":{"file_name":"/Users/shelwitz/.cargo/registry/src/github.com-1ecc6299db9ec823/bio-0.39.0/src/lib.rs","byte_start":3489,"byte_end":3502,"line_start":75,"line_end":75,"column_start":1,"column_end":14}},{"value":"/ ```","span":{"file_name":"/Users/shelwitz/.cargo/registry/src/github.com-1ecc6299db9ec823/bio-0.39.0/src/lib.rs","byte_start":3503,"byte_end":3510,"line_start":76,"line_end":76,"column_start":1,"column_end":8}},{"value":"/ If you are new to Rust, we suggest to proceed with [learning Rust](https://www.rust-lang.org/learn) via the Rust docs.","span":{"file_name":"/Users/shelwitz/.cargo/registry/src/github.com-1ecc6299db9ec823/bio-0.39.0/src/lib.rs","byte_start":3511,"byte_end":3633,"line_start":77,"line_end":77,"column_start":1,"column_end":123}},{"value":"/","span":{"file_name":"/Users/shelwitz/.cargo/registry/src/github.com-1ecc6299db9ec823/bio-0.39.0/src/lib.rs","byte_start":3634,"byte_end":3637,"line_start":78,"line_end":78,"column_start":1,"column_end":4}},{"value":"/ ## Step 3: Use Rust-Bio in your project","span":{"file_name":"/Users/shelwitz/.cargo/registry/src/github.com-1ecc6299db9ec823/bio-0.39.0/src/lib.rs","byte_start":3638,"byte_end":3681,"line_start":79,"line_end":79,"column_start":1,"column_end":44}},{"value":"/","span":{"file_name":"/Users/shelwitz/.cargo/registry/src/github.com-1ecc6299db9ec823/bio-0.39.0/src/lib.rs","byte_start":3682,"byte_end":3685,"line_start":80,"line_end":80,"column_start":1,"column_end":4}},{"value":"/ To use Rust-Bio in your Rust project, add the following to your `Cargo.toml`","span":{"file_name":"/Users/shelwitz/.cargo/registry/src/github.com-1ecc6299db9ec823/bio-0.39.0/src/lib.rs","byte_start":3686,"byte_end":3766,"line_start":81,"line_end":81,"column_start":1,"column_end":81}},{"value":"/","span":{"file_name":"/Users/shelwitz/.cargo/registry/src/github.com-1ecc6299db9ec823/bio-0.39.0/src/lib.rs","byte_start":3767,"byte_end":3770,"line_start":82,"line_end":82,"column_start":1,"column_end":4}},{"value":"/ ```toml","span":{"file_name":"/Users/shelwitz/.cargo/registry/src/github.com-1ecc6299db9ec823/bio-0.39.0/src/lib.rs","byte_start":3771,"byte_end":3782,"line_start":83,"line_end":83,"column_start":1,"column_end":12}},{"value":"/ [dependencies]","span":{"file_name":"/Users/shelwitz/.cargo/registry/src/github.com-1ecc6299db9ec823/bio-0.39.0/src/lib.rs","byte_start":3783,"byte_end":3801,"line_start":84,"line_end":84,"column_start":1,"column_end":19}},{"value":"/ bio = \"*\"","span":{"file_name":"/Users/shelwitz/.cargo/registry/src/github.com-1ecc6299db9ec823/bio-0.39.0/src/lib.rs","byte_start":3802,"byte_end":3815,"line_start":85,"line_end":85,"column_start":1,"column_end":14}},{"value":"/ ```","span":{"file_name":"/Users/shelwitz/.cargo/registry/src/github.com-1ecc6299db9ec823/bio-0.39.0/src/lib.rs","byte_start":3816,"byte_end":3823,"line_start":86,"line_end":86,"column_start":1,"column_end":8}},{"value":"/","span":{"file_name":"/Users/shelwitz/.cargo/registry/src/github.com-1ecc6299db9ec823/bio-0.39.0/src/lib.rs","byte_start":3824,"byte_end":3827,"line_start":87,"line_end":87,"column_start":1,"column_end":4}},{"value":"/ and import the crate from your source code:","span":{"file_name":"/Users/shelwitz/.cargo/registry/src/github.com-1ecc6299db9ec823/bio-0.39.0/src/lib.rs","byte_start":3828,"byte_end":3875,"line_start":88,"line_end":88,"column_start":1,"column_end":48}},{"value":"/","span":{"file_name":"/Users/shelwitz/.cargo/registry/src/github.com-1ecc6299db9ec823/bio-0.39.0/src/lib.rs","byte_start":3876,"byte_end":3879,"line_start":89,"line_end":89,"column_start":1,"column_end":4}},{"value":"/ ```rust","span":{"file_name":"/Users/shelwitz/.cargo/registry/src/github.com-1ecc6299db9ec823/bio-0.39.0/src/lib.rs","byte_start":3880,"byte_end":3891,"line_start":90,"line_end":90,"column_start":1,"column_end":12}},{"value":"/ extern crate bio;","span":{"file_name":"/Users/shelwitz/.cargo/registry/src/github.com-1ecc6299db9ec823/bio-0.39.0/src/lib.rs","byte_start":3892,"byte_end":3913,"line_start":91,"line_end":91,"column_start":1,"column_end":22}},{"value":"/ ```","span":{"file_name":"/Users/shelwitz/.cargo/registry/src/github.com-1ecc6299db9ec823/bio-0.39.0/src/lib.rs","byte_start":3914,"byte_end":3921,"line_start":92,"line_end":92,"column_start":1,"column_end":8}},{"value":"/","span":{"file_name":"/Users/shelwitz/.cargo/registry/src/github.com-1ecc6299db9ec823/bio-0.39.0/src/lib.rs","byte_start":3922,"byte_end":3925,"line_start":93,"line_end":93,"column_start":1,"column_end":4}},{"value":"/ ## Example: FM-index and FASTQ","span":{"file_name":"/Users/shelwitz/.cargo/registry/src/github.com-1ecc6299db9ec823/bio-0.39.0/src/lib.rs","byte_start":3926,"byte_end":3960,"line_start":94,"line_end":94,"column_start":1,"column_end":35}},{"value":"/","span":{"file_name":"/Users/shelwitz/.cargo/registry/src/github.com-1ecc6299db9ec823/bio-0.39.0/src/lib.rs","byte_start":3961,"byte_end":3964,"line_start":95,"line_end":95,"column_start":1,"column_end":4}},{"value":"/ An example of using `rust-bio`:","span":{"file_name":"/Users/shelwitz/.cargo/registry/src/github.com-1ecc6299db9ec823/bio-0.39.0/src/lib.rs","byte_start":3965,"byte_end":4000,"line_start":96,"line_end":96,"column_start":1,"column_end":36}},{"value":"/","span":{"file_name":"/Users/shelwitz/.cargo/registry/src/github.com-1ecc6299db9ec823/bio-0.39.0/src/lib.rs","byte_start":4001,"byte_end":4004,"line_start":97,"line_end":97,"column_start":1,"column_end":4}},{"value":"/ ```rust","span":{"file_name":"/Users/shelwitz/.cargo/registry/src/github.com-1ecc6299db9ec823/bio-0.39.0/src/lib.rs","byte_start":4005,"byte_end":4016,"line_start":98,"line_end":98,"column_start":1,"column_end":12}},{"value":"/ // Import some modules","span":{"file_name":"/Users/shelwitz/.cargo/registry/src/github.com-1ecc6299db9ec823/bio-0.39.0/src/lib.rs","byte_start":4017,"byte_end":4043,"line_start":99,"line_end":99,"column_start":1,"column_end":27}},{"value":"/ use bio::alphabets;","span":{"file_name":"/Users/shelwitz/.cargo/registry/src/github.com-1ecc6299db9ec823/bio-0.39.0/src/lib.rs","byte_start":4044,"byte_end":4067,"line_start":100,"line_end":100,"column_start":1,"column_end":24}},{"value":"/ use bio::data_structures::bwt::{bwt, less, Occ};","span":{"file_name":"/Users/shelwitz/.cargo/registry/src/github.com-1ecc6299db9ec823/bio-0.39.0/src/lib.rs","byte_start":4068,"byte_end":4120,"line_start":101,"line_end":101,"column_start":1,"column_end":53}},{"value":"/ use bio::data_structures::fmindex::{BackwardSearchResult, FMIndex, FMIndexable};","span":{"file_name":"/Users/shelwitz/.cargo/registry/src/github.com-1ecc6299db9ec823/bio-0.39.0/src/lib.rs","byte_start":4121,"byte_end":4205,"line_start":102,"line_end":102,"column_start":1,"column_end":85}},{"value":"/ use bio::data_structures::suffix_array::suffix_array;","span":{"file_name":"/Users/shelwitz/.cargo/registry/src/github.com-1ecc6299db9ec823/bio-0.39.0/src/lib.rs","byte_start":4206,"byte_end":4263,"line_start":103,"line_end":103,"column_start":1,"column_end":58}},{"value":"/ use bio::io::fastq;","span":{"file_name":"/Users/shelwitz/.cargo/registry/src/github.com-1ecc6299db9ec823/bio-0.39.0/src/lib.rs","byte_start":4264,"byte_end":4287,"line_start":104,"line_end":104,"column_start":1,"column_end":24}},{"value":"/ use bio::io::fastq::FastqRead;","span":{"file_name":"/Users/shelwitz/.cargo/registry/src/github.com-1ecc6299db9ec823/bio-0.39.0/src/lib.rs","byte_start":4288,"byte_end":4322,"line_start":105,"line_end":105,"column_start":1,"column_end":35}},{"value":"/ use std::io;","span":{"file_name":"/Users/shelwitz/.cargo/registry/src/github.com-1ecc6299db9ec823/bio-0.39.0/src/lib.rs","byte_start":4323,"byte_end":4339,"line_start":106,"line_end":106,"column_start":1,"column_end":17}},{"value":"/","span":{"file_name":"/Users/shelwitz/.cargo/registry/src/github.com-1ecc6299db9ec823/bio-0.39.0/src/lib.rs","byte_start":4340,"byte_end":4343,"line_start":107,"line_end":107,"column_start":1,"column_end":4}},{"value":"/ // a given text","span":{"file_name":"/Users/shelwitz/.cargo/registry/src/github.com-1ecc6299db9ec823/bio-0.39.0/src/lib.rs","byte_start":4344,"byte_end":4363,"line_start":108,"line_end":108,"column_start":1,"column_end":20}},{"value":"/ let text = b\"ACAGCTCGATCGGTA$\";","span":{"file_name":"/Users/shelwitz/.cargo/registry/src/github.com-1ecc6299db9ec823/bio-0.39.0/src/lib.rs","byte_start":4364,"byte_end":4399,"line_start":109,"line_end":109,"column_start":1,"column_end":36}},{"value":"/ let pattern = b\"ATCG\";","span":{"file_name":"/Users/shelwitz/.cargo/registry/src/github.com-1ecc6299db9ec823/bio-0.39.0/src/lib.rs","byte_start":4400,"byte_end":4426,"line_start":110,"line_end":110,"column_start":1,"column_end":27}},{"value":"/","span":{"file_name":"/Users/shelwitz/.cargo/registry/src/github.com-1ecc6299db9ec823/bio-0.39.0/src/lib.rs","byte_start":4427,"byte_end":4430,"line_start":111,"line_end":111,"column_start":1,"column_end":4}},{"value":"/ // Create an FM-Index for the given text.","span":{"file_name":"/Users/shelwitz/.cargo/registry/src/github.com-1ecc6299db9ec823/bio-0.39.0/src/lib.rs","byte_start":4431,"byte_end":4476,"line_start":112,"line_end":112,"column_start":1,"column_end":46}},{"value":"/","span":{"file_name":"/Users/shelwitz/.cargo/registry/src/github.com-1ecc6299db9ec823/bio-0.39.0/src/lib.rs","byte_start":4477,"byte_end":4480,"line_start":113,"line_end":113,"column_start":1,"column_end":4}},{"value":"/ // instantiate an alphabet","span":{"file_name":"/Users/shelwitz/.cargo/registry/src/github.com-1ecc6299db9ec823/bio-0.39.0/src/lib.rs","byte_start":4481,"byte_end":4511,"line_start":114,"line_end":114,"column_start":1,"column_end":31}},{"value":"/ let alphabet = alphabets::dna::iupac_alphabet();","span":{"file_name":"/Users/shelwitz/.cargo/registry/src/github.com-1ecc6299db9ec823/bio-0.39.0/src/lib.rs","byte_start":4512,"byte_end":4564,"line_start":115,"line_end":115,"column_start":1,"column_end":53}},{"value":"/ // calculate a suffix array","span":{"file_name":"/Users/shelwitz/.cargo/registry/src/github.com-1ecc6299db9ec823/bio-0.39.0/src/lib.rs","byte_start":4565,"byte_end":4596,"line_start":116,"line_end":116,"column_start":1,"column_end":32}},{"value":"/ let sa = suffix_array(text);","span":{"file_name":"/Users/shelwitz/.cargo/registry/src/github.com-1ecc6299db9ec823/bio-0.39.0/src/lib.rs","byte_start":4597,"byte_end":4629,"line_start":117,"line_end":117,"column_start":1,"column_end":33}},{"value":"/ // calculate the Burrows-Wheeler-transform","span":{"file_name":"/Users/shelwitz/.cargo/registry/src/github.com-1ecc6299db9ec823/bio-0.39.0/src/lib.rs","byte_start":4630,"byte_end":4676,"line_start":118,"line_end":118,"column_start":1,"column_end":47}},{"value":"/ let bwt = bwt(text, &sa);","span":{"file_name":"/Users/shelwitz/.cargo/registry/src/github.com-1ecc6299db9ec823/bio-0.39.0/src/lib.rs","byte_start":4677,"byte_end":4706,"line_start":119,"line_end":119,"column_start":1,"column_end":30}},{"value":"/ // calculate the vectors less and Occ (occurrences)","span":{"file_name":"/Users/shelwitz/.cargo/registry/src/github.com-1ecc6299db9ec823/bio-0.39.0/src/lib.rs","byte_start":4707,"byte_end":4762,"line_start":120,"line_end":120,"column_start":1,"column_end":56}},{"value":"/ let less = less(&bwt, &alphabet);","span":{"file_name":"/Users/shelwitz/.cargo/registry/src/github.com-1ecc6299db9ec823/bio-0.39.0/src/lib.rs","byte_start":4763,"byte_end":4800,"line_start":121,"line_end":121,"column_start":1,"column_end":38}},{"value":"/ let occ = Occ::new(&bwt, 3, &alphabet);","span":{"file_name":"/Users/shelwitz/.cargo/registry/src/github.com-1ecc6299db9ec823/bio-0.39.0/src/lib.rs","byte_start":4801,"byte_end":4844,"line_start":122,"line_end":122,"column_start":1,"column_end":44}},{"value":"/ // set up FMIndex","span":{"file_name":"/Users/shelwitz/.cargo/registry/src/github.com-1ecc6299db9ec823/bio-0.39.0/src/lib.rs","byte_start":4845,"byte_end":4866,"line_start":123,"line_end":123,"column_start":1,"column_end":22}},{"value":"/ let fmindex = FMIndex::new(&bwt, &less, &occ);","span":{"file_name":"/Users/shelwitz/.cargo/registry/src/github.com-1ecc6299db9ec823/bio-0.39.0/src/lib.rs","byte_start":4867,"byte_end":4917,"line_start":124,"line_end":124,"column_start":1,"column_end":51}},{"value":"/ // do a backwards search for the pattern","span":{"file_name":"/Users/shelwitz/.cargo/registry/src/github.com-1ecc6299db9ec823/bio-0.39.0/src/lib.rs","byte_start":4918,"byte_end":4962,"line_start":125,"line_end":125,"column_start":1,"column_end":45}},{"value":"/ let interval = fmindex.backward_search(pattern.iter());","span":{"file_name":"/Users/shelwitz/.cargo/registry/src/github.com-1ecc6299db9ec823/bio-0.39.0/src/lib.rs","byte_start":4963,"byte_end":5022,"line_start":126,"line_end":126,"column_start":1,"column_end":60}},{"value":"/ let mut partial_match_len = 0;","span":{"file_name":"/Users/shelwitz/.cargo/registry/src/github.com-1ecc6299db9ec823/bio-0.39.0/src/lib.rs","byte_start":5023,"byte_end":5057,"line_start":127,"line_end":127,"column_start":1,"column_end":35}},{"value":"/ // get the locations where the pattern matched (completely in this case).","span":{"file_name":"/Users/shelwitz/.cargo/registry/src/github.com-1ecc6299db9ec823/bio-0.39.0/src/lib.rs","byte_start":5058,"byte_end":5135,"line_start":128,"line_end":128,"column_start":1,"column_end":78}},{"value":"/ let positions = match interval {","span":{"file_name":"/Users/shelwitz/.cargo/registry/src/github.com-1ecc6299db9ec823/bio-0.39.0/src/lib.rs","byte_start":5136,"byte_end":5172,"line_start":129,"line_end":129,"column_start":1,"column_end":37}},{"value":"/     BackwardSearchResult::Complete(saint) => saint.occ(&sa),","span":{"file_name":"/Users/shelwitz/.cargo/registry/src/github.com-1ecc6299db9ec823/bio-0.39.0/src/lib.rs","byte_start":5173,"byte_end":5237,"line_start":130,"line_end":130,"column_start":1,"column_end":65}},{"value":"/     BackwardSearchResult::Partial(saint, l) => {","span":{"file_name":"/Users/shelwitz/.cargo/registry/src/github.com-1ecc6299db9ec823/bio-0.39.0/src/lib.rs","byte_start":5238,"byte_end":5290,"line_start":131,"line_end":131,"column_start":1,"column_end":53}},{"value":"/         partial_match_len = l;","span":{"file_name":"/Users/shelwitz/.cargo/registry/src/github.com-1ecc6299db9ec823/bio-0.39.0/src/lib.rs","byte_start":5291,"byte_end":5325,"line_start":132,"line_end":132,"column_start":1,"column_end":35}},{"value":"/         saint.occ(&sa)","span":{"file_name":"/Users/shelwitz/.cargo/registry/src/github.com-1ecc6299db9ec823/bio-0.39.0/src/lib.rs","byte_start":5326,"byte_end":5352,"line_start":133,"line_end":133,"column_start":1,"column_end":27}},{"value":"/     }","span":{"file_name":"/Users/shelwitz/.cargo/registry/src/github.com-1ecc6299db9ec823/bio-0.39.0/src/lib.rs","byte_start":5353,"byte_end":5362,"line_start":134,"line_end":134,"column_start":1,"column_end":10}},{"value":"/     BackwardSearchResult::Absent => Vec::new(),","span":{"file_name":"/Users/shelwitz/.cargo/registry/src/github.com-1ecc6299db9ec823/bio-0.39.0/src/lib.rs","byte_start":5363,"byte_end":5414,"line_start":135,"line_end":135,"column_start":1,"column_end":52}},{"value":"/ };","span":{"file_name":"/Users/shelwitz/.cargo/registry/src/github.com-1ecc6299db9ec823/bio-0.39.0/src/lib.rs","byte_start":5415,"byte_end":5421,"line_start":136,"line_end":136,"column_start":1,"column_end":7}},{"value":"/ // Iterate over a FASTQ file, use the alphabet to validate read","span":{"file_name":"/Users/shelwitz/.cargo/registry/src/github.com-1ecc6299db9ec823/bio-0.39.0/src/lib.rs","byte_start":5422,"byte_end":5489,"line_start":137,"line_end":137,"column_start":1,"column_end":68}},{"value":"/ // sequences and search for exact matches in the FM-Index.","span":{"file_name":"/Users/shelwitz/.cargo/registry/src/github.com-1ecc6299db9ec823/bio-0.39.0/src/lib.rs","byte_start":5490,"byte_end":5552,"line_start":138,"line_end":138,"column_start":1,"column_end":63}},{"value":"/","span":{"file_name":"/Users/shelwitz/.cargo/registry/src/github.com-1ecc6299db9ec823/bio-0.39.0/src/lib.rs","byte_start":5553,"byte_end":5556,"line_start":139,"line_end":139,"column_start":1,"column_end":4}},{"value":"/ // create FASTQ reader","span":{"file_name":"/Users/shelwitz/.cargo/registry/src/github.com-1ecc6299db9ec823/bio-0.39.0/src/lib.rs","byte_start":5557,"byte_end":5583,"line_start":140,"line_end":140,"column_start":1,"column_end":27}},{"value":"/ let mut reader = fastq::Reader::new(io::stdin());","span":{"file_name":"/Users/shelwitz/.cargo/registry/src/github.com-1ecc6299db9ec823/bio-0.39.0/src/lib.rs","byte_start":5584,"byte_end":5637,"line_start":141,"line_end":141,"column_start":1,"column_end":54}},{"value":"/ let mut record = fastq::Record::new();","span":{"file_name":"/Users/shelwitz/.cargo/registry/src/github.com-1ecc6299db9ec823/bio-0.39.0/src/lib.rs","byte_start":5638,"byte_end":5680,"line_start":142,"line_end":142,"column_start":1,"column_end":43}},{"value":"/ let mut partial_match_len = 0;","span":{"file_name":"/Users/shelwitz/.cargo/registry/src/github.com-1ecc6299db9ec823/bio-0.39.0/src/lib.rs","byte_start":5681,"byte_end":5715,"line_start":143,"line_end":143,"column_start":1,"column_end":35}},{"value":"/ reader.read(&mut record).expect(\"Failed to parse record\");","span":{"file_name":"/Users/shelwitz/.cargo/registry/src/github.com-1ecc6299db9ec823/bio-0.39.0/src/lib.rs","byte_start":5716,"byte_end":5778,"line_start":144,"line_end":144,"column_start":1,"column_end":63}},{"value":"/ while !record.is_empty() {","span":{"file_name":"/Users/shelwitz/.cargo/registry/src/github.com-1ecc6299db9ec823/bio-0.39.0/src/lib.rs","byte_start":5779,"byte_end":5809,"line_start":145,"line_end":145,"column_start":1,"column_end":31}},{"value":"/     let check = record.check();","span":{"file_name":"/Users/shelwitz/.cargo/registry/src/github.com-1ecc6299db9ec823/bio-0.39.0/src/lib.rs","byte_start":5810,"byte_end":5845,"line_start":146,"line_end":146,"column_start":1,"column_end":36}},{"value":"/     if check.is_err() {","span":{"file_name":"/Users/shelwitz/.cargo/registry/src/github.com-1ecc6299db9ec823/bio-0.39.0/src/lib.rs","byte_start":5846,"byte_end":5873,"line_start":147,"line_end":147,"column_start":1,"column_end":28}},{"value":"/         panic!(\"I got a rubbish record!\")","span":{"file_name":"/Users/shelwitz/.cargo/registry/src/github.com-1ecc6299db9ec823/bio-0.39.0/src/lib.rs","byte_start":5874,"byte_end":5919,"line_start":148,"line_end":148,"column_start":1,"column_end":46}},{"value":"/     }","span":{"file_name":"/Users/shelwitz/.cargo/registry/src/github.com-1ecc6299db9ec823/bio-0.39.0/src/lib.rs","byte_start":5920,"byte_end":5929,"line_start":149,"line_end":149,"column_start":1,"column_end":10}},{"value":"/     // obtain sequence","span":{"file_name":"/Users/shelwitz/.cargo/registry/src/github.com-1ecc6299db9ec823/bio-0.39.0/src/lib.rs","byte_start":5930,"byte_end":5956,"line_start":150,"line_end":150,"column_start":1,"column_end":27}},{"value":"/     let seq = record.seq();","span":{"file_name":"/Users/shelwitz/.cargo/registry/src/github.com-1ecc6299db9ec823/bio-0.39.0/src/lib.rs","byte_start":5957,"byte_end":5988,"line_start":151,"line_end":151,"column_start":1,"column_end":32}},{"value":"/     // check, whether seq is in the expected alphabet","span":{"file_name":"/Users/shelwitz/.cargo/registry/src/github.com-1ecc6299db9ec823/bio-0.39.0/src/lib.rs","byte_start":5989,"byte_end":6046,"line_start":152,"line_end":152,"column_start":1,"column_end":58}},{"value":"/     if alphabet.is_word(seq) {","span":{"file_name":"/Users/shelwitz/.cargo/registry/src/github.com-1ecc6299db9ec823/bio-0.39.0/src/lib.rs","byte_start":6047,"byte_end":6081,"line_start":153,"line_end":153,"column_start":1,"column_end":35}},{"value":"/         let interval = fmindex.backward_search(seq.iter());","span":{"file_name":"/Users/shelwitz/.cargo/registry/src/github.com-1ecc6299db9ec823/bio-0.39.0/src/lib.rs","byte_start":6082,"byte_end":6145,"line_start":154,"line_end":154,"column_start":1,"column_end":64}},{"value":"/         // get the positions where seq matched completely","span":{"file_name":"/Users/shelwitz/.cargo/registry/src/github.com-1ecc6299db9ec823/bio-0.39.0/src/lib.rs","byte_start":6146,"byte_end":6207,"line_start":155,"line_end":155,"column_start":1,"column_end":62}},{"value":"/         // or where the maximal matching suffix of seq occurred.","span":{"file_name":"/Users/shelwitz/.cargo/registry/src/github.com-1ecc6299db9ec823/bio-0.39.0/src/lib.rs","byte_start":6208,"byte_end":6276,"line_start":156,"line_end":156,"column_start":1,"column_end":69}},{"value":"/         let positions = match interval {","span":{"file_name":"/Users/shelwitz/.cargo/registry/src/github.com-1ecc6299db9ec823/bio-0.39.0/src/lib.rs","byte_start":6277,"byte_end":6321,"line_start":157,"line_end":157,"column_start":1,"column_end":45}},{"value":"/             BackwardSearchResult::Complete(saint) => saint.occ(&sa),","span":{"file_name":"/Users/shelwitz/.cargo/registry/src/github.com-1ecc6299db9ec823/bio-0.39.0/src/lib.rs","byte_start":6322,"byte_end":6394,"line_start":158,"line_end":158,"column_start":1,"column_end":73}},{"value":"/             BackwardSearchResult::Partial(saint, l) => {","span":{"file_name":"/Users/shelwitz/.cargo/registry/src/github.com-1ecc6299db9ec823/bio-0.39.0/src/lib.rs","byte_start":6395,"byte_end":6455,"line_start":159,"line_end":159,"column_start":1,"column_end":61}},{"value":"/                 partial_match_len = l;","span":{"file_name":"/Users/shelwitz/.cargo/registry/src/github.com-1ecc6299db9ec823/bio-0.39.0/src/lib.rs","byte_start":6456,"byte_end":6498,"line_start":160,"line_end":160,"column_start":1,"column_end":43}},{"value":"/                 saint.occ(&sa)","span":{"file_name":"/Users/shelwitz/.cargo/registry/src/github.com-1ecc6299db9ec823/bio-0.39.0/src/lib.rs","byte_start":6499,"byte_end":6533,"line_start":161,"line_end":161,"column_start":1,"column_end":35}},{"value":"/             }","span":{"file_name":"/Users/shelwitz/.cargo/registry/src/github.com-1ecc6299db9ec823/bio-0.39.0/src/lib.rs","byte_start":6534,"byte_end":6551,"line_start":162,"line_end":162,"column_start":1,"column_end":18}},{"value":"/             BackwardSearchResult::Absent => Vec::new(),","span":{"file_name":"/Users/shelwitz/.cargo/registry/src/github.com-1ecc6299db9ec823/bio-0.39.0/src/lib.rs","byte_start":6552,"byte_end":6611,"line_start":163,"line_end":163,"column_start":1,"column_end":60}},{"value":"/         };","span":{"file_name":"/Users/shelwitz/.cargo/registry/src/github.com-1ecc6299db9ec823/bio-0.39.0/src/lib.rs","byte_start":6612,"byte_end":6626,"line_start":164,"line_end":164,"column_start":1,"column_end":15}},{"value":"/     }","span":{"file_name":"/Users/shelwitz/.cargo/registry/src/github.com-1ecc6299db9ec823/bio-0.39.0/src/lib.rs","byte_start":6627,"byte_end":6636,"line_start":165,"line_end":165,"column_start":1,"column_end":10}},{"value":"/     reader.read(&mut record).expect(\"Failed to parse record\");","span":{"file_name":"/Users/shelwitz/.cargo/registry/src/github.com-1ecc6299db9ec823/bio-0.39.0/src/lib.rs","byte_start":6637,"byte_end":6703,"line_start":166,"line_end":166,"column_start":1,"column_end":67}},{"value":"/ }","span":{"file_name":"/Users/shelwitz/.cargo/registry/src/github.com-1ecc6299db9ec823/bio-0.39.0/src/lib.rs","byte_start":6704,"byte_end":6709,"line_start":167,"line_end":167,"column_start":1,"column_end":6}},{"value":"/ ```","span":{"file_name":"/Users/shelwitz/.cargo/registry/src/github.com-1ecc6299db9ec823/bio-0.39.0/src/lib.rs","byte_start":6710,"byte_end":6717,"line_start":168,"line_end":168,"column_start":1,"column_end":8}},{"value":"/","span":{"file_name":"/Users/shelwitz/.cargo/registry/src/github.com-1ecc6299db9ec823/bio-0.39.0/src/lib.rs","byte_start":6718,"byte_end":6721,"line_start":169,"line_end":169,"column_start":1,"column_end":4}},{"value":"/ Documentation and further examples for each module can be found in the module descriptions below.","span":{"file_name":"/Users/shelwitz/.cargo/registry/src/github.com-1ecc6299db9ec823/bio-0.39.0/src/lib.rs","byte_start":6722,"byte_end":6823,"line_start":170,"line_end":170,"column_start":1,"column_end":102}},{"value":"/","span":{"file_name":"/Users/shelwitz/.cargo/registry/src/github.com-1ecc6299db9ec823/bio-0.39.0/src/lib.rs","byte_start":6824,"byte_end":6827,"line_start":171,"line_end":171,"column_start":1,"column_end":4}},{"value":"/","span":{"file_name":"/Users/shelwitz/.cargo/registry/src/github.com-1ecc6299db9ec823/bio-0.39.0/src/lib.rs","byte_start":6828,"byte_end":6831,"line_start":172,"line_end":172,"column_start":1,"column_end":4}},{"value":"/ ## Example: Multithreaded","span":{"file_name":"/Users/shelwitz/.cargo/registry/src/github.com-1ecc6299db9ec823/bio-0.39.0/src/lib.rs","byte_start":6832,"byte_end":6861,"line_start":173,"line_end":173,"column_start":1,"column_end":30}},{"value":"/","span":{"file_name":"/Users/shelwitz/.cargo/registry/src/github.com-1ecc6299db9ec823/bio-0.39.0/src/lib.rs","byte_start":6862,"byte_end":6865,"line_start":174,"line_end":174,"column_start":1,"column_end":4}},{"value":"/ ```rust","span":{"file_name":"/Users/shelwitz/.cargo/registry/src/github.com-1ecc6299db9ec823/bio-0.39.0/src/lib.rs","byte_start":6866,"byte_end":6877,"line_start":175,"line_end":175,"column_start":1,"column_end":12}},{"value":"/ use bio::alphabets;","span":{"file_name":"/Users/shelwitz/.cargo/registry/src/github.com-1ecc6299db9ec823/bio-0.39.0/src/lib.rs","byte_start":6878,"byte_end":6901,"line_start":176,"line_end":176,"column_start":1,"column_end":24}},{"value":"/ use bio::data_structures::bwt::{bwt, less, Occ};","span":{"file_name":"/Users/shelwitz/.cargo/registry/src/github.com-1ecc6299db9ec823/bio-0.39.0/src/lib.rs","byte_start":6902,"byte_end":6954,"line_start":177,"line_end":177,"column_start":1,"column_end":53}},{"value":"/ use bio::data_structures::fmindex::{BackwardSearchResult,FMIndex, FMIndexable};","span":{"file_name":"/Users/shelwitz/.cargo/registry/src/github.com-1ecc6299db9ec823/bio-0.39.0/src/lib.rs","byte_start":6955,"byte_end":7038,"line_start":178,"line_end":178,"column_start":1,"column_end":84}},{"value":"/ use bio::data_structures::suffix_array::suffix_array;","span":{"file_name":"/Users/shelwitz/.cargo/registry/src/github.com-1ecc6299db9ec823/bio-0.39.0/src/lib.rs","byte_start":7039,"byte_end":7096,"line_start":179,"line_end":179,"column_start":1,"column_end":58}},{"value":"/ use std::sync::Arc;","span":{"file_name":"/Users/shelwitz/.cargo/registry/src/github.com-1ecc6299db9ec823/bio-0.39.0/src/lib.rs","byte_start":7097,"byte_end":7120,"line_start":180,"line_end":180,"column_start":1,"column_end":24}},{"value":"/ use std::thread;","span":{"file_name":"/Users/shelwitz/.cargo/registry/src/github.com-1ecc6299db9ec823/bio-0.39.0/src/lib.rs","byte_start":7121,"byte_end":7141,"line_start":181,"line_end":181,"column_start":1,"column_end":21}},{"value":"/","span":{"file_name":"/Users/shelwitz/.cargo/registry/src/github.com-1ecc6299db9ec823/bio-0.39.0/src/lib.rs","byte_start":7142,"byte_end":7145,"line_start":182,"line_end":182,"column_start":1,"column_end":4}},{"value":"/ let text = b\"ACGGATGCTGGATCGGATCGCGCTAGCTA$\";","span":{"file_name":"/Users/shelwitz/.cargo/registry/src/github.com-1ecc6299db9ec823/bio-0.39.0/src/lib.rs","byte_start":7146,"byte_end":7195,"line_start":183,"line_end":183,"column_start":1,"column_end":50}},{"value":"/ let patterns = vec![b\"ACCG\", b\"TGCT\"];","span":{"file_name":"/Users/shelwitz/.cargo/registry/src/github.com-1ecc6299db9ec823/bio-0.39.0/src/lib.rs","byte_start":7196,"byte_end":7238,"line_start":184,"line_end":184,"column_start":1,"column_end":43}},{"value":"/","span":{"file_name":"/Users/shelwitz/.cargo/registry/src/github.com-1ecc6299db9ec823/bio-0.39.0/src/lib.rs","byte_start":7239,"byte_end":7242,"line_start":185,"line_end":185,"column_start":1,"column_end":4}},{"value":"/ // Create an FM-Index for a given text.","span":{"file_name":"/Users/shelwitz/.cargo/registry/src/github.com-1ecc6299db9ec823/bio-0.39.0/src/lib.rs","byte_start":7243,"byte_end":7286,"line_start":186,"line_end":186,"column_start":1,"column_end":44}},{"value":"/ let alphabet = alphabets::dna::iupac_alphabet();","span":{"file_name":"/Users/shelwitz/.cargo/registry/src/github.com-1ecc6299db9ec823/bio-0.39.0/src/lib.rs","byte_start":7287,"byte_end":7339,"line_start":187,"line_end":187,"column_start":1,"column_end":53}},{"value":"/ let sa = suffix_array(text);","span":{"file_name":"/Users/shelwitz/.cargo/registry/src/github.com-1ecc6299db9ec823/bio-0.39.0/src/lib.rs","byte_start":7340,"byte_end":7372,"line_start":188,"line_end":188,"column_start":1,"column_end":33}},{"value":"/ let bwt = Arc::new(bwt(text, &sa));","span":{"file_name":"/Users/shelwitz/.cargo/registry/src/github.com-1ecc6299db9ec823/bio-0.39.0/src/lib.rs","byte_start":7373,"byte_end":7412,"line_start":189,"line_end":189,"column_start":1,"column_end":40}},{"value":"/ let less = Arc::new(less(bwt.as_ref(), &alphabet));","span":{"file_name":"/Users/shelwitz/.cargo/registry/src/github.com-1ecc6299db9ec823/bio-0.39.0/src/lib.rs","byte_start":7413,"byte_end":7468,"line_start":190,"line_end":190,"column_start":1,"column_end":56}},{"value":"/ let occ = Arc::new(Occ::new(bwt.as_ref(), 3, &alphabet));","span":{"file_name":"/Users/shelwitz/.cargo/registry/src/github.com-1ecc6299db9ec823/bio-0.39.0/src/lib.rs","byte_start":7469,"byte_end":7530,"line_start":191,"line_end":191,"column_start":1,"column_end":62}},{"value":"/ let fmindex = Arc::new(FMIndex::new(bwt, less, occ));","span":{"file_name":"/Users/shelwitz/.cargo/registry/src/github.com-1ecc6299db9ec823/bio-0.39.0/src/lib.rs","byte_start":7531,"byte_end":7588,"line_start":192,"line_end":192,"column_start":1,"column_end":58}},{"value":"/","span":{"file_name":"/Users/shelwitz/.cargo/registry/src/github.com-1ecc6299db9ec823/bio-0.39.0/src/lib.rs","byte_start":7589,"byte_end":7592,"line_start":193,"line_end":193,"column_start":1,"column_end":4}},{"value":"/ // Spawn threads to perform backward searches for each interval","span":{"file_name":"/Users/shelwitz/.cargo/registry/src/github.com-1ecc6299db9ec823/bio-0.39.0/src/lib.rs","byte_start":7593,"byte_end":7660,"line_start":194,"line_end":194,"column_start":1,"column_end":68}},{"value":"/ let interval_calculators = patterns","span":{"file_name":"/Users/shelwitz/.cargo/registry/src/github.com-1ecc6299db9ec823/bio-0.39.0/src/lib.rs","byte_start":7661,"byte_end":7700,"line_start":195,"line_end":195,"column_start":1,"column_end":40}},{"value":"/     .into_iter()","span":{"file_name":"/Users/shelwitz/.cargo/registry/src/github.com-1ecc6299db9ec823/bio-0.39.0/src/lib.rs","byte_start":7701,"byte_end":7721,"line_start":196,"line_end":196,"column_start":1,"column_end":21}},{"value":"/     .map(|pattern| {","span":{"file_name":"/Users/shelwitz/.cargo/registry/src/github.com-1ecc6299db9ec823/bio-0.39.0/src/lib.rs","byte_start":7722,"byte_end":7746,"line_start":197,"line_end":197,"column_start":1,"column_end":25}},{"value":"/         let fmindex = fmindex.clone();","span":{"file_name":"/Users/shelwitz/.cargo/registry/src/github.com-1ecc6299db9ec823/bio-0.39.0/src/lib.rs","byte_start":7747,"byte_end":7789,"line_start":198,"line_end":198,"column_start":1,"column_end":43}},{"value":"/         thread::spawn(move || fmindex.backward_search(pattern.iter()))","span":{"file_name":"/Users/shelwitz/.cargo/registry/src/github.com-1ecc6299db9ec823/bio-0.39.0/src/lib.rs","byte_start":7790,"byte_end":7864,"line_start":199,"line_end":199,"column_start":1,"column_end":75}},{"value":"/     })","span":{"file_name":"/Users/shelwitz/.cargo/registry/src/github.com-1ecc6299db9ec823/bio-0.39.0/src/lib.rs","byte_start":7865,"byte_end":7875,"line_start":200,"line_end":200,"column_start":1,"column_end":11}},{"value":"/     .collect::<Vec<_>>();","span":{"file_name":"/Users/shelwitz/.cargo/registry/src/github.com-1ecc6299db9ec823/bio-0.39.0/src/lib.rs","byte_start":7876,"byte_end":7905,"line_start":201,"line_end":201,"column_start":1,"column_end":30}},{"value":"/","span":{"file_name":"/Users/shelwitz/.cargo/registry/src/github.com-1ecc6299db9ec823/bio-0.39.0/src/lib.rs","byte_start":7906,"byte_end":7909,"line_start":202,"line_end":202,"column_start":1,"column_end":4}},{"value":"/ // Loop through the results, extracting the positions array for each pattern","span":{"file_name":"/Users/shelwitz/.cargo/registry/src/github.com-1ecc6299db9ec823/bio-0.39.0/src/lib.rs","byte_start":7910,"byte_end":7990,"line_start":203,"line_end":203,"column_start":1,"column_end":81}},{"value":"/ for interval_calculator in interval_calculators {","span":{"file_name":"/Users/shelwitz/.cargo/registry/src/github.com-1ecc6299db9ec823/bio-0.39.0/src/lib.rs","byte_start":7991,"byte_end":8044,"line_start":204,"line_end":204,"column_start":1,"column_end":54}},{"value":"/     let positions = match interval_calculator.join().unwrap() {","span":{"file_name":"/Users/shelwitz/.cargo/registry/src/github.com-1ecc6299db9ec823/bio-0.39.0/src/lib.rs","byte_start":8045,"byte_end":8112,"line_start":205,"line_end":205,"column_start":1,"column_end":68}},{"value":"/         BackwardSearchResult::Complete(saint) => saint.occ(&sa),","span":{"file_name":"/Users/shelwitz/.cargo/registry/src/github.com-1ecc6299db9ec823/bio-0.39.0/src/lib.rs","byte_start":8113,"byte_end":8181,"line_start":206,"line_end":206,"column_start":1,"column_end":69}},{"value":"/         _ => Vec::new()","span":{"file_name":"/Users/shelwitz/.cargo/registry/src/github.com-1ecc6299db9ec823/bio-0.39.0/src/lib.rs","byte_start":8182,"byte_end":8209,"line_start":207,"line_end":207,"column_start":1,"column_end":28}},{"value":"/     };","span":{"file_name":"/Users/shelwitz/.cargo/registry/src/github.com-1ecc6299db9ec823/bio-0.39.0/src/lib.rs","byte_start":8210,"byte_end":8220,"line_start":208,"line_end":208,"column_start":1,"column_end":11}},{"value":"/ }","span":{"file_name":"/Users/shelwitz/.cargo/registry/src/github.com-1ecc6299db9ec823/bio-0.39.0/src/lib.rs","byte_start":8221,"byte_end":8226,"line_start":209,"line_end":209,"column_start":1,"column_end":6}},{"value":"/ ```","span":{"file_name":"/Users/shelwitz/.cargo/registry/src/github.com-1ecc6299db9ec823/bio-0.39.0/src/lib.rs","byte_start":8227,"byte_end":8234,"line_start":210,"line_end":210,"column_start":1,"column_end":8}},{"value":"/","span":{"file_name":"/Users/shelwitz/.cargo/registry/src/github.com-1ecc6299db9ec823/bio-0.39.0/src/lib.rs","byte_start":8235,"byte_end":8238,"line_start":211,"line_end":211,"column_start":1,"column_end":4}},{"value":"/ Documentation and further examples for each module can be found in the module descriptions below.","span":{"file_name":"/Users/shelwitz/.cargo/registry/src/github.com-1ecc6299db9ec823/bio-0.39.0/src/lib.rs","byte_start":8239,"byte_end":8340,"line_start":212,"line_end":212,"column_start":1,"column_end":102}},{"value":"/","span":{"file_name":"/Users/shelwitz/.cargo/registry/src/github.com-1ecc6299db9ec823/bio-0.39.0/src/lib.rs","byte_start":8341,"byte_end":8344,"line_start":213,"line_end":213,"column_start":1,"column_end":4}},{"value":"/ # Benchmarks","span":{"file_name":"/Users/shelwitz/.cargo/registry/src/github.com-1ecc6299db9ec823/bio-0.39.0/src/lib.rs","byte_start":8345,"byte_end":8361,"line_start":214,"line_end":214,"column_start":1,"column_end":17}},{"value":"/","span":{"file_name":"/Users/shelwitz/.cargo/registry/src/github.com-1ecc6299db9ec823/bio-0.39.0/src/lib.rs","byte_start":8362,"byte_end":8365,"line_start":215,"line_end":215,"column_start":1,"column_end":4}},{"value":"/ Since Rust-Bio is based on a compiled language, similar performance to C/C++ based libraries can be expected. Indeed, we find the pattern matching algorithms of Rust-Bio to perform in the range of the C++ library Seqan:","span":{"file_name":"/Users/shelwitz/.cargo/registry/src/github.com-1ecc6299db9ec823/bio-0.39.0/src/lib.rs","byte_start":8366,"byte_end":8589,"line_start":216,"line_end":216,"column_start":1,"column_end":224}},{"value":"/","span":{"file_name":"/Users/shelwitz/.cargo/registry/src/github.com-1ecc6299db9ec823/bio-0.39.0/src/lib.rs","byte_start":8590,"byte_end":8593,"line_start":217,"line_end":217,"column_start":1,"column_end":4}},{"value":"/ | Algorithm | Rust-Bio | Seqan   |","span":{"file_name":"/Users/shelwitz/.cargo/registry/src/github.com-1ecc6299db9ec823/bio-0.39.0/src/lib.rs","byte_start":8594,"byte_end":8632,"line_start":218,"line_end":218,"column_start":1,"column_end":39}},{"value":"/ | --------- | -------: | ------: |","span":{"file_name":"/Users/shelwitz/.cargo/registry/src/github.com-1ecc6299db9ec823/bio-0.39.0/src/lib.rs","byte_start":8633,"byte_end":8671,"line_start":219,"line_end":219,"column_start":1,"column_end":39}},{"value":"/ | BNDM      | 77ms     | 80ms    |","span":{"file_name":"/Users/shelwitz/.cargo/registry/src/github.com-1ecc6299db9ec823/bio-0.39.0/src/lib.rs","byte_start":8672,"byte_end":8710,"line_start":220,"line_end":220,"column_start":1,"column_end":39}},{"value":"/ | Horspool  | 122ms    | 125ms   |","span":{"file_name":"/Users/shelwitz/.cargo/registry/src/github.com-1ecc6299db9ec823/bio-0.39.0/src/lib.rs","byte_start":8711,"byte_end":8749,"line_start":221,"line_end":221,"column_start":1,"column_end":39}},{"value":"/ | BOM       | 103ms    | 107ms   |","span":{"file_name":"/Users/shelwitz/.cargo/registry/src/github.com-1ecc6299db9ec823/bio-0.39.0/src/lib.rs","byte_start":8750,"byte_end":8788,"line_start":222,"line_end":222,"column_start":1,"column_end":39}},{"value":"/ | Shift-And | 241ms    | 545ms   |","span":{"file_name":"/Users/shelwitz/.cargo/registry/src/github.com-1ecc6299db9ec823/bio-0.39.0/src/lib.rs","byte_start":8789,"byte_end":8827,"line_start":223,"line_end":223,"column_start":1,"column_end":39}},{"value":"/","span":{"file_name":"/Users/shelwitz/.cargo/registry/src/github.com-1ecc6299db9ec823/bio-0.39.0/src/lib.rs","byte_start":8828,"byte_end":8831,"line_start":224,"line_end":224,"column_start":1,"column_end":4}},{"value":"/ We measured 10000 iterations of searching pattern `GCGCGTACACACCGCCCG` in the sequence of the hg38 MT chromosome.","span":{"file_name":"/Users/shelwitz/.cargo/registry/src/github.com-1ecc6299db9ec823/bio-0.39.0/src/lib.rs","byte_start":8832,"byte_end":8949,"line_start":225,"line_end":225,"column_start":1,"column_end":118}},{"value":"/ Initialization time of each algorithm for the given pattern was included in each iteration. Benchmarks were conducted with *Cargo bench* for Rust-Bio and *Python timeit* for Seqan on an Intel Core i5-3427U CPU.","span":{"file_name":"/Users/shelwitz/.cargo/registry/src/github.com-1ecc6299db9ec823/bio-0.39.0/src/lib.rs","byte_start":8950,"byte_end":9164,"line_start":226,"line_end":226,"column_start":1,"column_end":215}},{"value":"/ Benchmarking Seqan from *Python timeit* entails an overhead of 1.46ms for calling a C++ binary. This overhead was subtracted from above Seqan run times.","span":{"file_name":"/Users/shelwitz/.cargo/registry/src/github.com-1ecc6299db9ec823/bio-0.39.0/src/lib.rs","byte_start":9165,"byte_end":9321,"line_start":227,"line_end":227,"column_start":1,"column_end":157}},{"value":"/ Note that this benchmark only compares the two libraries to exemplify that Rust-Bio has comparable speed to C++ libraries: all used algorithms have their advantages for specific text and pattern structures and lengths (see [the pattern matching section in the documentation](https://docs.rs/bio/0.28.2/bio/pattern_matching/index.html))./!","span":{"file_name":"/Users/shelwitz/.cargo/registry/src/github.com-1ecc6299db9ec823/bio-0.39.0/src/lib.rs","byte_start":9322,"byte_end":9664,"line_start":228,"line_end":228,"column_start":1,"column_end":343}}]},{"kind":"Mod","id":{"krate":0,"index":10},"span":{"file_name":"/Users/shelwitz/.cargo/registry/src/github.com-1ecc6299db9ec823/bio-0.39.0/src/alignment/mod.rs","byte_start":0,"byte_end":0,"line_start":1,"line_end":1,"column_start":1,"column_end":1},"name":"alignment","qualname":"::alignment","value":"/Users/shelwitz/.cargo/registry/src/github.com-1ecc6299db9ec823/bio-0.39.0/src/alignment/mod.rs","parent":null,"children":[{"krate":0,"index":11},{"krate":0,"index":27},{"krate":0,"index":231},{"krate":0,"index":313},{"krate":0,"index":346}],"decl_id":null,"docs":" Various alignment and distance computing algorithms.\n","sig":null,"attributes":[{"value":"/ Various alignment and distance computing algorithms.","span":{"file_name":"/Users/shelwitz/.cargo/registry/src/github.com-1ecc6299db9ec823/bio-0.39.0/src/alignment/mod.rs","byte_start":10418,"byte_end":10474,"line_start":6,"line_end":6,"column_start":1,"column_end":57}}]},{"kind":"Mod","id":{"krate":0,"index":11},"span":{"file_name":"/Users/shelwitz/.cargo/registry/src/github.com-1ecc6299db9ec823/bio-0.39.0/src/alignment/distance.rs","byte_start":0,"byte_end":0,"line_start":1,"line_end":1,"column_start":1,"column_end":1},"name":"distance","qualname":"::alignment::distance","value":"/Users/shelwitz/.cargo/registry/src/github.com-1ecc6299db9ec823/bio-0.39.0/src/alignment/distance.rs","parent":null,"children":[{"krate":0,"index":12},{"krate":0,"index":15},{"krate":0,"index":18},{"krate":0,"index":19},{"krate":0,"index":20}],"decl_id":null,"docs":" Various subroutines for computing a distance between sequences. Features\n both scalar and efficient vectorized distance functions with SIMD.\n","sig":null,"attributes":[{"value":"/ Various subroutines for computing a distance between sequences. Features","span":{"file_name":"/Users/shelwitz/.cargo/registry/src/github.com-1ecc6299db9ec823/bio-0.39.0/src/alignment/distance.rs","byte_start":10831,"byte_end":10907,"line_start":6,"line_end":6,"column_start":1,"column_end":77}},{"value":"/ both scalar and efficient vectorized distance functions with SIMD.","span":{"file_name":"/Users/shelwitz/.cargo/registry/src/github.com-1ecc6299db9ec823/bio-0.39.0/src/alignment/distance.rs","byte_start":10908,"byte_end":10978,"line_start":7,"line_end":7,"column_start":1,"column_end":71}}]},{"kind":"Function","id":{"krate":0,"index":18},"span":{"file_name":"/Users/shelwitz/.cargo/registry/src/github.com-1ecc6299db9ec823/bio-0.39.0/src/alignment/distance.rs","byte_start":11335,"byte_end":11342,"line_start":27,"line_end":27,"column_start":8,"column_end":15},"name":"hamming","qualname":"::alignment::distance::hamming","value":"pub fn hamming(TextSlice, TextSlice) -> u64","parent":null,"children":[],"decl_id":null,"docs":" Compute the Hamming distance between two strings. Complexity: O(n).","sig":null,"attributes":[{"value":"/ Compute the Hamming distance between two strings. Complexity: O(n).","span":{"file_name":"/Users/shelwitz/.cargo/registry/src/github.com-1ecc6299db9ec823/bio-0.39.0/src/alignment/distance.rs","byte_start":11030,"byte_end":11101,"line_start":13,"line_end":13,"column_start":1,"column_end":72}},{"value":"/","span":{"file_name":"/Users/shelwitz/.cargo/registry/src/github.com-1ecc6299db9ec823/bio-0.39.0/src/alignment/distance.rs","byte_start":11102,"byte_end":11105,"line_start":14,"line_end":14,"column_start":1,"column_end":4}},{"value":"/ # Example","span":{"file_name":"/Users/shelwitz/.cargo/registry/src/github.com-1ecc6299db9ec823/bio-0.39.0/src/alignment/distance.rs","byte_start":11106,"byte_end":11119,"line_start":15,"line_end":15,"column_start":1,"column_end":14}},{"value":"/","span":{"file_name":"/Users/shelwitz/.cargo/registry/src/github.com-1ecc6299db9ec823/bio-0.39.0/src/alignment/distance.rs","byte_start":11120,"byte_end":11123,"line_start":16,"line_end":16,"column_start":1,"column_end":4}},{"value":"/ ```","span":{"file_name":"/Users/shelwitz/.cargo/registry/src/github.com-1ecc6299db9ec823/bio-0.39.0/src/alignment/distance.rs","byte_start":11124,"byte_end":11131,"line_start":17,"line_end":17,"column_start":1,"column_end":8}},{"value":"/ use bio::alignment::distance::*;","span":{"file_name":"/Users/shelwitz/.cargo/registry/src/github.com-1ecc6299db9ec823/bio-0.39.0/src/alignment/distance.rs","byte_start":11132,"byte_end":11168,"line_start":18,"line_end":18,"column_start":1,"column_end":37}},{"value":"/","span":{"file_name":"/Users/shelwitz/.cargo/registry/src/github.com-1ecc6299db9ec823/bio-0.39.0/src/alignment/distance.rs","byte_start":11169,"byte_end":11172,"line_start":19,"line_end":19,"column_start":1,"column_end":4}},{"value":"/ let x = b\"GTCTGCATGCG\";","span":{"file_name":"/Users/shelwitz/.cargo/registry/src/github.com-1ecc6299db9ec823/bio-0.39.0/src/alignment/distance.rs","byte_start":11173,"byte_end":11200,"line_start":20,"line_end":20,"column_start":1,"column_end":28}},{"value":"/ let y = b\"TTTAGCTAGCG\";","span":{"file_name":"/Users/shelwitz/.cargo/registry/src/github.com-1ecc6299db9ec823/bio-0.39.0/src/alignment/distance.rs","byte_start":11201,"byte_end":11228,"line_start":21,"line_end":21,"column_start":1,"column_end":28}},{"value":"/ // GTCTGCATGCG","span":{"file_name":"/Users/shelwitz/.cargo/registry/src/github.com-1ecc6299db9ec823/bio-0.39.0/src/alignment/distance.rs","byte_start":11229,"byte_end":11247,"line_start":22,"line_end":22,"column_start":1,"column_end":19}},{"value":"/ //  |  ||  |||","span":{"file_name":"/Users/shelwitz/.cargo/registry/src/github.com-1ecc6299db9ec823/bio-0.39.0/src/alignment/distance.rs","byte_start":11248,"byte_end":11266,"line_start":23,"line_end":23,"column_start":1,"column_end":19}},{"value":"/ // TTTAGCTAGCG","span":{"file_name":"/Users/shelwitz/.cargo/registry/src/github.com-1ecc6299db9ec823/bio-0.39.0/src/alignment/distance.rs","byte_start":11267,"byte_end":11285,"line_start":24,"line_end":24,"column_start":1,"column_end":19}},{"value":"/ assert_eq!(hamming(x, y), 5);","span":{"file_name":"/Users/shelwitz/.cargo/registry/src/github.com-1ecc6299db9ec823/bio-0.39.0/src/alignment/distance.rs","byte_start":11286,"byte_end":11319,"line_start":25,"line_end":25,"column_start":1,"column_end":34}},{"value":"/ ```","span":{"file_name":"/Users/shelwitz/.cargo/registry/src/github.com-1ecc6299db9ec823/bio-0.39.0/src/alignment/distance.rs","byte_start":11320,"byte_end":11327,"line_start":26,"line_end":26,"column_start":1,"column_end":8}}]},{"kind":"Function","id":{"krate":0,"index":19},"span":{"file_name":"/Users/shelwitz/.cargo/registry/src/github.com-1ecc6299db9ec823/bio-0.39.0/src/alignment/distance.rs","byte_start":12178,"byte_end":12189,"line_start":61,"line_end":61,"column_start":8,"column_end":19},"name":"levenshtein","qualname":"::alignment::distance::levenshtein","value":"pub fn levenshtein(TextSlice, TextSlice) -> u32","parent":null,"children":[],"decl_id":null,"docs":" Compute the Levenshtein (or Edit) distance between two strings. Complexity: O(n * m) with\n n and m being the length of the given texts.","sig":null,"attributes":[{"value":"/ Compute the Levenshtein (or Edit) distance between two strings. Complexity: O(n * m) with","span":{"file_name":"/Users/shelwitz/.cargo/registry/src/github.com-1ecc6299db9ec823/bio-0.39.0/src/alignment/distance.rs","byte_start":11723,"byte_end":11816,"line_start":44,"line_end":44,"column_start":1,"column_end":94}},{"value":"/ n and m being the length of the given texts.","span":{"file_name":"/Users/shelwitz/.cargo/registry/src/github.com-1ecc6299db9ec823/bio-0.39.0/src/alignment/distance.rs","byte_start":11817,"byte_end":11865,"line_start":45,"line_end":45,"column_start":1,"column_end":49}},{"value":"/","span":{"file_name":"/Users/shelwitz/.cargo/registry/src/github.com-1ecc6299db9ec823/bio-0.39.0/src/alignment/distance.rs","byte_start":11866,"byte_end":11869,"line_start":46,"line_end":46,"column_start":1,"column_end":4}},{"value":"/ # Example","span":{"file_name":"/Users/shelwitz/.cargo/registry/src/github.com-1ecc6299db9ec823/bio-0.39.0/src/alignment/distance.rs","byte_start":11870,"byte_end":11883,"line_start":47,"line_end":47,"column_start":1,"column_end":14}},{"value":"/","span":{"file_name":"/Users/shelwitz/.cargo/registry/src/github.com-1ecc6299db9ec823/bio-0.39.0/src/alignment/distance.rs","byte_start":11884,"byte_end":11887,"line_start":48,"line_end":48,"column_start":1,"column_end":4}},{"value":"/ ```","span":{"file_name":"/Users/shelwitz/.cargo/registry/src/github.com-1ecc6299db9ec823/bio-0.39.0/src/alignment/distance.rs","byte_start":11888,"byte_end":11895,"line_start":49,"line_end":49,"column_start":1,"column_end":8}},{"value":"/ use bio::alignment::distance::*;","span":{"file_name":"/Users/shelwitz/.cargo/registry/src/github.com-1ecc6299db9ec823/bio-0.39.0/src/alignment/distance.rs","byte_start":11896,"byte_end":11932,"line_start":50,"line_end":50,"column_start":1,"column_end":37}},{"value":"/","span":{"file_name":"/Users/shelwitz/.cargo/registry/src/github.com-1ecc6299db9ec823/bio-0.39.0/src/alignment/distance.rs","byte_start":11933,"byte_end":11936,"line_start":51,"line_end":51,"column_start":1,"column_end":4}},{"value":"/ let x = b\"ACCGTGGAT\";","span":{"file_name":"/Users/shelwitz/.cargo/registry/src/github.com-1ecc6299db9ec823/bio-0.39.0/src/alignment/distance.rs","byte_start":11937,"byte_end":11962,"line_start":52,"line_end":52,"column_start":1,"column_end":26}},{"value":"/ let y = b\"AAAAACCGTTGAT\";","span":{"file_name":"/Users/shelwitz/.cargo/registry/src/github.com-1ecc6299db9ec823/bio-0.39.0/src/alignment/distance.rs","byte_start":11963,"byte_end":11992,"line_start":53,"line_end":53,"column_start":1,"column_end":30}},{"value":"/ // ----ACCGTGGAT","span":{"file_name":"/Users/shelwitz/.cargo/registry/src/github.com-1ecc6299db9ec823/bio-0.39.0/src/alignment/distance.rs","byte_start":11993,"byte_end":12013,"line_start":54,"line_end":54,"column_start":1,"column_end":21}},{"value":"/ //     ||||| |||","span":{"file_name":"/Users/shelwitz/.cargo/registry/src/github.com-1ecc6299db9ec823/bio-0.39.0/src/alignment/distance.rs","byte_start":12014,"byte_end":12034,"line_start":55,"line_end":55,"column_start":1,"column_end":21}},{"value":"/ // AAAAACCGTTGAT","span":{"file_name":"/Users/shelwitz/.cargo/registry/src/github.com-1ecc6299db9ec823/bio-0.39.0/src/alignment/distance.rs","byte_start":12035,"byte_end":12055,"line_start":56,"line_end":56,"column_start":1,"column_end":21}},{"value":"/ let ldist = levenshtein(x, y); // Distance is 5","span":{"file_name":"/Users/shelwitz/.cargo/registry/src/github.com-1ecc6299db9ec823/bio-0.39.0/src/alignment/distance.rs","byte_start":12056,"byte_end":12107,"line_start":57,"line_end":57,"column_start":1,"column_end":52}},{"value":"/ assert_eq!(ldist, 5);","span":{"file_name":"/Users/shelwitz/.cargo/registry/src/github.com-1ecc6299db9ec823/bio-0.39.0/src/alignment/distance.rs","byte_start":12108,"byte_end":12133,"line_start":58,"line_end":58,"column_start":1,"column_end":26}},{"value":"/ ```","span":{"file_name":"/Users/shelwitz/.cargo/registry/src/github.com-1ecc6299db9ec823/bio-0.39.0/src/alignment/distance.rs","byte_start":12134,"byte_end":12141,"line_start":59,"line_end":59,"column_start":1,"column_end":8}},{"value":"allow(unused_assignments)","span":{"file_name":"/Users/shelwitz/.cargo/registry/src/github.com-1ecc6299db9ec823/bio-0.39.0/src/alignment/distance.rs","byte_start":12142,"byte_end":12170,"line_start":60,"line_end":60,"column_start":1,"column_end":29}}]},{"kind":"Mod","id":{"krate":0,"index":20},"span":{"file_name":"/Users/shelwitz/.cargo/registry/src/github.com-1ecc6299db9ec823/bio-0.39.0/src/alignment/distance.rs","byte_start":12927,"byte_end":12931,"line_start":88,"line_end":88,"column_start":9,"column_end":13},"name":"simd","qualname":"::alignment::distance::simd","value":"/Users/shelwitz/.cargo/registry/src/github.com-1ecc6299db9ec823/bio-0.39.0/src/alignment/distance.rs","parent":null,"children":[{"krate":0,"index":21},{"krate":0,"index":24},{"krate":0,"index":25},{"krate":0,"index":26}],"decl_id":null,"docs":" String distance routines accelerated with Single Instruction Multiple Data (SIMD)\n intrinsics.","sig":null,"attributes":[{"value":"/ String distance routines accelerated with Single Instruction Multiple Data (SIMD)","span":{"file_name":"/Users/shelwitz/.cargo/registry/src/github.com-1ecc6299db9ec823/bio-0.39.0/src/alignment/distance.rs","byte_start":12938,"byte_end":13023,"line_start":89,"line_end":89,"column_start":5,"column_end":90}},{"value":"/ intrinsics.","span":{"file_name":"/Users/shelwitz/.cargo/registry/src/github.com-1ecc6299db9ec823/bio-0.39.0/src/alignment/distance.rs","byte_start":13028,"byte_end":13043,"line_start":90,"line_end":90,"column_start":5,"column_end":20}},{"value":"/","span":{"file_name":"/Users/shelwitz/.cargo/registry/src/github.com-1ecc6299db9ec823/bio-0.39.0/src/alignment/distance.rs","byte_start":13048,"byte_end":13051,"line_start":91,"line_end":91,"column_start":5,"column_end":8}},{"value":"/ These routines will automatically fallback to scalar versions if AVX2 or SSE4.1 is","span":{"file_name":"/Users/shelwitz/.cargo/registry/src/github.com-1ecc6299db9ec823/bio-0.39.0/src/alignment/distance.rs","byte_start":13056,"byte_end":13142,"line_start":92,"line_end":92,"column_start":5,"column_end":91}},{"value":"/ not supported by the CPU.","span":{"file_name":"/Users/shelwitz/.cargo/registry/src/github.com-1ecc6299db9ec823/bio-0.39.0/src/alignment/distance.rs","byte_start":13147,"byte_end":13176,"line_start":93,"line_end":93,"column_start":5,"column_end":34}},{"value":"/","span":{"file_name":"/Users/shelwitz/.cargo/registry/src/github.com-1ecc6299db9ec823/bio-0.39.0/src/alignment/distance.rs","byte_start":13181,"byte_end":13184,"line_start":94,"line_end":94,"column_start":5,"column_end":8}},{"value":"/ With AVX2, SIMD-accelerated Hamming distance can reach up to 40 times faster than","span":{"file_name":"/Users/shelwitz/.cargo/registry/src/github.com-1ecc6299db9ec823/bio-0.39.0/src/alignment/distance.rs","byte_start":13189,"byte_end":13274,"line_start":95,"line_end":95,"column_start":5,"column_end":90}},{"value":"/ the scalar version on strings that are long enough.","span":{"file_name":"/Users/shelwitz/.cargo/registry/src/github.com-1ecc6299db9ec823/bio-0.39.0/src/alignment/distance.rs","byte_start":13279,"byte_end":13334,"line_start":96,"line_end":96,"column_start":5,"column_end":60}},{"value":"/","span":{"file_name":"/Users/shelwitz/.cargo/registry/src/github.com-1ecc6299db9ec823/bio-0.39.0/src/alignment/distance.rs","byte_start":13339,"byte_end":13342,"line_start":97,"line_end":97,"column_start":5,"column_end":8}},{"value":"/ The performance of SIMD-accelerated Levenshtein distance depends on the number of","span":{"file_name":"/Users/shelwitz/.cargo/registry/src/github.com-1ecc6299db9ec823/bio-0.39.0/src/alignment/distance.rs","byte_start":13347,"byte_end":13432,"line_start":98,"line_end":98,"column_start":5,"column_end":90}},{"value":"/ edits between two strings, so it can perform anywhere from 2 times to nearly 1000","span":{"file_name":"/Users/shelwitz/.cargo/registry/src/github.com-1ecc6299db9ec823/bio-0.39.0/src/alignment/distance.rs","byte_start":13437,"byte_end":13522,"line_start":99,"line_end":99,"column_start":5,"column_end":90}},{"value":"/ times faster than the scalar version. When the two strings are completely different,","span":{"file_name":"/Users/shelwitz/.cargo/registry/src/github.com-1ecc6299db9ec823/bio-0.39.0/src/alignment/distance.rs","byte_start":13527,"byte_end":13615,"line_start":100,"line_end":100,"column_start":5,"column_end":93}},{"value":"/ there could be no speedup at all. It is important to note that the algorithms work","span":{"file_name":"/Users/shelwitz/.cargo/registry/src/github.com-1ecc6299db9ec823/bio-0.39.0/src/alignment/distance.rs","byte_start":13620,"byte_end":13706,"line_start":101,"line_end":101,"column_start":5,"column_end":91}},{"value":"/ best when the number of edits is known to be small compared to the length of the","span":{"file_name":"/Users/shelwitz/.cargo/registry/src/github.com-1ecc6299db9ec823/bio-0.39.0/src/alignment/distance.rs","byte_start":13711,"byte_end":13795,"line_start":102,"line_end":102,"column_start":5,"column_end":89}},{"value":"/ strings (for example, 10% difference). This should be applicable in many situations.","span":{"file_name":"/Users/shelwitz/.cargo/registry/src/github.com-1ecc6299db9ec823/bio-0.39.0/src/alignment/distance.rs","byte_start":13800,"byte_end":13888,"line_start":103,"line_end":103,"column_start":5,"column_end":93}},{"value":"/","span":{"file_name":"/Users/shelwitz/.cargo/registry/src/github.com-1ecc6299db9ec823/bio-0.39.0/src/alignment/distance.rs","byte_start":13893,"byte_end":13896,"line_start":104,"line_end":104,"column_start":5,"column_end":8}},{"value":"/ If AVX2 support is not available, there is a speed penalty for using SSE4.1 with","span":{"file_name":"/Users/shelwitz/.cargo/registry/src/github.com-1ecc6299db9ec823/bio-0.39.0/src/alignment/distance.rs","byte_start":13901,"byte_end":13985,"line_start":105,"line_end":105,"column_start":5,"column_end":89}},{"value":"/ smaller vectors.","span":{"file_name":"/Users/shelwitz/.cargo/registry/src/github.com-1ecc6299db9ec823/bio-0.39.0/src/alignment/distance.rs","byte_start":13990,"byte_end":14010,"line_start":106,"line_end":106,"column_start":5,"column_end":25}}]},{"kind":"Function","id":{"krate":0,"index":24},"span":{"file_name":"/Users/shelwitz/.cargo/registry/src/github.com-1ecc6299db9ec823/bio-0.39.0/src/alignment/distance.rs","byte_start":14491,"byte_end":14498,"line_start":125,"line_end":125,"column_start":12,"column_end":19},"name":"hamming","qualname":"::alignment::distance::simd::hamming","value":"pub fn hamming(TextSlice, TextSlice) -> u64","parent":null,"children":[],"decl_id":null,"docs":" SIMD-accelerated Hamming distance between two strings. Complexity: O(n / w), for\n SIMD vectors of length w (usually w = 16 or w = 32).","sig":null,"attributes":[{"value":"/ SIMD-accelerated Hamming distance between two strings. Complexity: O(n / w), for","span":{"file_name":"/Users/shelwitz/.cargo/registry/src/github.com-1ecc6299db9ec823/bio-0.39.0/src/alignment/distance.rs","byte_start":14050,"byte_end":14134,"line_start":110,"line_end":110,"column_start":5,"column_end":89}},{"value":"/ SIMD vectors of length w (usually w = 16 or w = 32).","span":{"file_name":"/Users/shelwitz/.cargo/registry/src/github.com-1ecc6299db9ec823/bio-0.39.0/src/alignment/distance.rs","byte_start":14139,"byte_end":14195,"line_start":111,"line_end":111,"column_start":5,"column_end":61}},{"value":"/","span":{"file_name":"/Users/shelwitz/.cargo/registry/src/github.com-1ecc6299db9ec823/bio-0.39.0/src/alignment/distance.rs","byte_start":14200,"byte_end":14203,"line_start":112,"line_end":112,"column_start":5,"column_end":8}},{"value":"/ # Example","span":{"file_name":"/Users/shelwitz/.cargo/registry/src/github.com-1ecc6299db9ec823/bio-0.39.0/src/alignment/distance.rs","byte_start":14208,"byte_end":14221,"line_start":113,"line_end":113,"column_start":5,"column_end":18}},{"value":"/","span":{"file_name":"/Users/shelwitz/.cargo/registry/src/github.com-1ecc6299db9ec823/bio-0.39.0/src/alignment/distance.rs","byte_start":14226,"byte_end":14229,"line_start":114,"line_end":114,"column_start":5,"column_end":8}},{"value":"/ ```","span":{"file_name":"/Users/shelwitz/.cargo/registry/src/github.com-1ecc6299db9ec823/bio-0.39.0/src/alignment/distance.rs","byte_start":14234,"byte_end":14241,"line_start":115,"line_end":115,"column_start":5,"column_end":12}},{"value":"/ use bio::alignment::distance::simd::*;","span":{"file_name":"/Users/shelwitz/.cargo/registry/src/github.com-1ecc6299db9ec823/bio-0.39.0/src/alignment/distance.rs","byte_start":14246,"byte_end":14288,"line_start":116,"line_end":116,"column_start":5,"column_end":47}},{"value":"/","span":{"file_name":"/Users/shelwitz/.cargo/registry/src/github.com-1ecc6299db9ec823/bio-0.39.0/src/alignment/distance.rs","byte_start":14293,"byte_end":14296,"line_start":117,"line_end":117,"column_start":5,"column_end":8}},{"value":"/ let x = b\"GTCTGCATGCG\";","span":{"file_name":"/Users/shelwitz/.cargo/registry/src/github.com-1ecc6299db9ec823/bio-0.39.0/src/alignment/distance.rs","byte_start":14301,"byte_end":14328,"line_start":118,"line_end":118,"column_start":5,"column_end":32}},{"value":"/ let y = b\"TTTAGCTAGCG\";","span":{"file_name":"/Users/shelwitz/.cargo/registry/src/github.com-1ecc6299db9ec823/bio-0.39.0/src/alignment/distance.rs","byte_start":14333,"byte_end":14360,"line_start":119,"line_end":119,"column_start":5,"column_end":32}},{"value":"/ // GTCTGCATGCG","span":{"file_name":"/Users/shelwitz/.cargo/registry/src/github.com-1ecc6299db9ec823/bio-0.39.0/src/alignment/distance.rs","byte_start":14365,"byte_end":14383,"line_start":120,"line_end":120,"column_start":5,"column_end":23}},{"value":"/ //  |  ||  |||","span":{"file_name":"/Users/shelwitz/.cargo/registry/src/github.com-1ecc6299db9ec823/bio-0.39.0/src/alignment/distance.rs","byte_start":14388,"byte_end":14406,"line_start":121,"line_end":121,"column_start":5,"column_end":23}},{"value":"/ // TTTAGCTAGCG","span":{"file_name":"/Users/shelwitz/.cargo/registry/src/github.com-1ecc6299db9ec823/bio-0.39.0/src/alignment/distance.rs","byte_start":14411,"byte_end":14429,"line_start":122,"line_end":122,"column_start":5,"column_end":23}},{"value":"/ assert_eq!(hamming(x, y), 5);","span":{"file_name":"/Users/shelwitz/.cargo/registry/src/github.com-1ecc6299db9ec823/bio-0.39.0/src/alignment/distance.rs","byte_start":14434,"byte_end":14467,"line_start":123,"line_end":123,"column_start":5,"column_end":38}},{"value":"/ ```","span":{"file_name":"/Users/shelwitz/.cargo/registry/src/github.com-1ecc6299db9ec823/bio-0.39.0/src/alignment/distance.rs","byte_start":14472,"byte_end":14479,"line_start":124,"line_end":124,"column_start":5,"column_end":12}}]},{"kind":"Function","id":{"krate":0,"index":25},"span":{"file_name":"/Users/shelwitz/.cargo/registry/src/github.com-1ecc6299db9ec823/bio-0.39.0/src/alignment/distance.rs","byte_start":15846,"byte_end":15857,"line_start":160,"line_end":160,"column_start":12,"column_end":23},"name":"levenshtein","qualname":"::alignment::distance::simd::levenshtein","value":"pub fn levenshtein(TextSlice, TextSlice) -> u32","parent":null,"children":[],"decl_id":null,"docs":" SIMD-accelerated Levenshtein (or Edit) distance between two strings. Complexity:\n O(k / w * (n + m)), with n and m being the length of the given texts, k being the\n number of edits, and w being the length of the SIMD vectors (usually w = 16 or\n w = 32).","sig":null,"attributes":[{"value":"/ SIMD-accelerated Levenshtein (or Edit) distance between two strings. Complexity:","span":{"file_name":"/Users/shelwitz/.cargo/registry/src/github.com-1ecc6299db9ec823/bio-0.39.0/src/alignment/distance.rs","byte_start":14892,"byte_end":14976,"line_start":137,"line_end":137,"column_start":5,"column_end":89}},{"value":"/ O(k / w * (n + m)), with n and m being the length of the given texts, k being the","span":{"file_name":"/Users/shelwitz/.cargo/registry/src/github.com-1ecc6299db9ec823/bio-0.39.0/src/alignment/distance.rs","byte_start":14981,"byte_end":15066,"line_start":138,"line_end":138,"column_start":5,"column_end":90}},{"value":"/ number of edits, and w being the length of the SIMD vectors (usually w = 16 or","span":{"file_name":"/Users/shelwitz/.cargo/registry/src/github.com-1ecc6299db9ec823/bio-0.39.0/src/alignment/distance.rs","byte_start":15071,"byte_end":15153,"line_start":139,"line_end":139,"column_start":5,"column_end":87}},{"value":"/ w = 32).","span":{"file_name":"/Users/shelwitz/.cargo/registry/src/github.com-1ecc6299db9ec823/bio-0.39.0/src/alignment/distance.rs","byte_start":15158,"byte_end":15170,"line_start":140,"line_end":140,"column_start":5,"column_end":17}},{"value":"/","span":{"file_name":"/Users/shelwitz/.cargo/registry/src/github.com-1ecc6299db9ec823/bio-0.39.0/src/alignment/distance.rs","byte_start":15175,"byte_end":15178,"line_start":141,"line_end":141,"column_start":5,"column_end":8}},{"value":"/ Uses exponential search, which is approximately two times slower than the usual","span":{"file_name":"/Users/shelwitz/.cargo/registry/src/github.com-1ecc6299db9ec823/bio-0.39.0/src/alignment/distance.rs","byte_start":15183,"byte_end":15266,"line_start":142,"line_end":142,"column_start":5,"column_end":88}},{"value":"/ O(n * m) implementation if the number of edits between the two strings is very large,","span":{"file_name":"/Users/shelwitz/.cargo/registry/src/github.com-1ecc6299db9ec823/bio-0.39.0/src/alignment/distance.rs","byte_start":15271,"byte_end":15360,"line_start":143,"line_end":143,"column_start":5,"column_end":94}},{"value":"/ but much faster for cases where the edit distance is low (when less than half of the","span":{"file_name":"/Users/shelwitz/.cargo/registry/src/github.com-1ecc6299db9ec823/bio-0.39.0/src/alignment/distance.rs","byte_start":15365,"byte_end":15453,"line_start":144,"line_end":144,"column_start":5,"column_end":93}},{"value":"/ characters in the strings differ).","span":{"file_name":"/Users/shelwitz/.cargo/registry/src/github.com-1ecc6299db9ec823/bio-0.39.0/src/alignment/distance.rs","byte_start":15458,"byte_end":15496,"line_start":145,"line_end":145,"column_start":5,"column_end":43}},{"value":"/","span":{"file_name":"/Users/shelwitz/.cargo/registry/src/github.com-1ecc6299db9ec823/bio-0.39.0/src/alignment/distance.rs","byte_start":15501,"byte_end":15504,"line_start":146,"line_end":146,"column_start":5,"column_end":8}},{"value":"/ # Example","span":{"file_name":"/Users/shelwitz/.cargo/registry/src/github.com-1ecc6299db9ec823/bio-0.39.0/src/alignment/distance.rs","byte_start":15509,"byte_end":15522,"line_start":147,"line_end":147,"column_start":5,"column_end":18}},{"value":"/","span":{"file_name":"/Users/shelwitz/.cargo/registry/src/github.com-1ecc6299db9ec823/bio-0.39.0/src/alignment/distance.rs","byte_start":15527,"byte_end":15530,"line_start":148,"line_end":148,"column_start":5,"column_end":8}},{"value":"/ ```","span":{"file_name":"/Users/shelwitz/.cargo/registry/src/github.com-1ecc6299db9ec823/bio-0.39.0/src/alignment/distance.rs","byte_start":15535,"byte_end":15542,"line_start":149,"line_end":149,"column_start":5,"column_end":12}},{"value":"/ use bio::alignment::distance::simd::*;","span":{"file_name":"/Users/shelwitz/.cargo/registry/src/github.com-1ecc6299db9ec823/bio-0.39.0/src/alignment/distance.rs","byte_start":15547,"byte_end":15589,"line_start":150,"line_end":150,"column_start":5,"column_end":47}},{"value":"/","span":{"file_name":"/Users/shelwitz/.cargo/registry/src/github.com-1ecc6299db9ec823/bio-0.39.0/src/alignment/distance.rs","byte_start":15594,"byte_end":15597,"line_start":151,"line_end":151,"column_start":5,"column_end":8}},{"value":"/ let x = b\"ACCGTGGAT\";","span":{"file_name":"/Users/shelwitz/.cargo/registry/src/github.com-1ecc6299db9ec823/bio-0.39.0/src/alignment/distance.rs","byte_start":15602,"byte_end":15627,"line_start":152,"line_end":152,"column_start":5,"column_end":30}},{"value":"/ let y = b\"AAAAACCGTTGAT\";","span":{"file_name":"/Users/shelwitz/.cargo/registry/src/github.com-1ecc6299db9ec823/bio-0.39.0/src/alignment/distance.rs","byte_start":15632,"byte_end":15661,"line_start":153,"line_end":153,"column_start":5,"column_end":34}},{"value":"/ // ----ACCGTGGAT","span":{"file_name":"/Users/shelwitz/.cargo/registry/src/github.com-1ecc6299db9ec823/bio-0.39.0/src/alignment/distance.rs","byte_start":15666,"byte_end":15686,"line_start":154,"line_end":154,"column_start":5,"column_end":25}},{"value":"/ //     ||||| |||","span":{"file_name":"/Users/shelwitz/.cargo/registry/src/github.com-1ecc6299db9ec823/bio-0.39.0/src/alignment/distance.rs","byte_start":15691,"byte_end":15711,"line_start":155,"line_end":155,"column_start":5,"column_end":25}},{"value":"/ // AAAAACCGTTGAT","span":{"file_name":"/Users/shelwitz/.cargo/registry/src/github.com-1ecc6299db9ec823/bio-0.39.0/src/alignment/distance.rs","byte_start":15716,"byte_end":15736,"line_start":156,"line_end":156,"column_start":5,"column_end":25}},{"value":"/ let ldist = levenshtein(x, y); // Distance is 5","span":{"file_name":"/Users/shelwitz/.cargo/registry/src/github.com-1ecc6299db9ec823/bio-0.39.0/src/alignment/distance.rs","byte_start":15741,"byte_end":15792,"line_start":157,"line_end":157,"column_start":5,"column_end":56}},{"value":"/ assert_eq!(ldist, 5);","span":{"file_name":"/Users/shelwitz/.cargo/registry/src/github.com-1ecc6299db9ec823/bio-0.39.0/src/alignment/distance.rs","byte_start":15797,"byte_end":15822,"line_start":158,"line_end":158,"column_start":5,"column_end":30}},{"value":"/ ```","span":{"file_name":"/Users/shelwitz/.cargo/registry/src/github.com-1ecc6299db9ec823/bio-0.39.0/src/alignment/distance.rs","byte_start":15827,"byte_end":15834,"line_start":159,"line_end":159,"column_start":5,"column_end":12}}]},{"kind":"Function","id":{"krate":0,"index":26},"span":{"file_name":"/Users/shelwitz/.cargo/registry/src/github.com-1ecc6299db9ec823/bio-0.39.0/src/alignment/distance.rs","byte_start":16969,"byte_end":16988,"line_start":189,"line_end":189,"column_start":12,"column_end":31},"name":"bounded_levenshtein","qualname":"::alignment::distance::simd::bounded_levenshtein","value":"pub fn bounded_levenshtein(TextSlice, TextSlice, u32) -> Option<u32>","parent":null,"children":[],"decl_id":null,"docs":" SIMD-accelerated bounded Levenshtein (or Edit) distance between two strings.\n Complexity: O(k / w * (n + m)), with n and m being the length of the given texts,\n k being the threshold on the number of edits, and w being the length of the SIMD vectors\n (usually w = 16 or w = 32).","sig":null,"attributes":[{"value":"/ SIMD-accelerated bounded Levenshtein (or Edit) distance between two strings.","span":{"file_name":"/Users/shelwitz/.cargo/registry/src/github.com-1ecc6299db9ec823/bio-0.39.0/src/alignment/distance.rs","byte_start":15972,"byte_end":16052,"line_start":164,"line_end":164,"column_start":5,"column_end":85}},{"value":"/ Complexity: O(k / w * (n + m)), with n and m being the length of the given texts,","span":{"file_name":"/Users/shelwitz/.cargo/registry/src/github.com-1ecc6299db9ec823/bio-0.39.0/src/alignment/distance.rs","byte_start":16057,"byte_end":16142,"line_start":165,"line_end":165,"column_start":5,"column_end":90}},{"value":"/ k being the threshold on the number of edits, and w being the length of the SIMD vectors","span":{"file_name":"/Users/shelwitz/.cargo/registry/src/github.com-1ecc6299db9ec823/bio-0.39.0/src/alignment/distance.rs","byte_start":16147,"byte_end":16239,"line_start":166,"line_end":166,"column_start":5,"column_end":97}},{"value":"/ (usually w = 16 or w = 32).","span":{"file_name":"/Users/shelwitz/.cargo/registry/src/github.com-1ecc6299db9ec823/bio-0.39.0/src/alignment/distance.rs","byte_start":16244,"byte_end":16275,"line_start":167,"line_end":167,"column_start":5,"column_end":36}},{"value":"/","span":{"file_name":"/Users/shelwitz/.cargo/registry/src/github.com-1ecc6299db9ec823/bio-0.39.0/src/alignment/distance.rs","byte_start":16280,"byte_end":16283,"line_start":168,"line_end":168,"column_start":5,"column_end":8}},{"value":"/ If the Levenshtein distance between two strings is greater than the threshold k, then","span":{"file_name":"/Users/shelwitz/.cargo/registry/src/github.com-1ecc6299db9ec823/bio-0.39.0/src/alignment/distance.rs","byte_start":16288,"byte_end":16377,"line_start":169,"line_end":169,"column_start":5,"column_end":94}},{"value":"/ `None` is returned. This is useful for efficiently calculating whether two strings","span":{"file_name":"/Users/shelwitz/.cargo/registry/src/github.com-1ecc6299db9ec823/bio-0.39.0/src/alignment/distance.rs","byte_start":16382,"byte_end":16468,"line_start":170,"line_end":170,"column_start":5,"column_end":91}},{"value":"/ are similar.","span":{"file_name":"/Users/shelwitz/.cargo/registry/src/github.com-1ecc6299db9ec823/bio-0.39.0/src/alignment/distance.rs","byte_start":16473,"byte_end":16489,"line_start":171,"line_end":171,"column_start":5,"column_end":21}},{"value":"/","span":{"file_name":"/Users/shelwitz/.cargo/registry/src/github.com-1ecc6299db9ec823/bio-0.39.0/src/alignment/distance.rs","byte_start":16494,"byte_end":16497,"line_start":172,"line_end":172,"column_start":5,"column_end":8}},{"value":"/ # Example","span":{"file_name":"/Users/shelwitz/.cargo/registry/src/github.com-1ecc6299db9ec823/bio-0.39.0/src/alignment/distance.rs","byte_start":16502,"byte_end":16515,"line_start":173,"line_end":173,"column_start":5,"column_end":18}},{"value":"/","span":{"file_name":"/Users/shelwitz/.cargo/registry/src/github.com-1ecc6299db9ec823/bio-0.39.0/src/alignment/distance.rs","byte_start":16520,"byte_end":16523,"line_start":174,"line_end":174,"column_start":5,"column_end":8}},{"value":"/ ```","span":{"file_name":"/Users/shelwitz/.cargo/registry/src/github.com-1ecc6299db9ec823/bio-0.39.0/src/alignment/distance.rs","byte_start":16528,"byte_end":16535,"line_start":175,"line_end":175,"column_start":5,"column_end":12}},{"value":"/ use bio::alignment::distance::simd::*;","span":{"file_name":"/Users/shelwitz/.cargo/registry/src/github.com-1ecc6299db9ec823/bio-0.39.0/src/alignment/distance.rs","byte_start":16540,"byte_end":16582,"line_start":176,"line_end":176,"column_start":5,"column_end":47}},{"value":"/","span":{"file_name":"/Users/shelwitz/.cargo/registry/src/github.com-1ecc6299db9ec823/bio-0.39.0/src/alignment/distance.rs","byte_start":16587,"byte_end":16590,"line_start":177,"line_end":177,"column_start":5,"column_end":8}},{"value":"/ let x = b\"ACCGTGGAT\";","span":{"file_name":"/Users/shelwitz/.cargo/registry/src/github.com-1ecc6299db9ec823/bio-0.39.0/src/alignment/distance.rs","byte_start":16595,"byte_end":16620,"line_start":178,"line_end":178,"column_start":5,"column_end":30}},{"value":"/ let y = b\"AAAAACCGTTGAT\";","span":{"file_name":"/Users/shelwitz/.cargo/registry/src/github.com-1ecc6299db9ec823/bio-0.39.0/src/alignment/distance.rs","byte_start":16625,"byte_end":16654,"line_start":179,"line_end":179,"column_start":5,"column_end":34}},{"value":"/ // ----ACCGTGGAT","span":{"file_name":"/Users/shelwitz/.cargo/registry/src/github.com-1ecc6299db9ec823/bio-0.39.0/src/alignment/distance.rs","byte_start":16659,"byte_end":16679,"line_start":180,"line_end":180,"column_start":5,"column_end":25}},{"value":"/ //     ||||| |||","span":{"file_name":"/Users/shelwitz/.cargo/registry/src/github.com-1ecc6299db9ec823/bio-0.39.0/src/alignment/distance.rs","byte_start":16684,"byte_end":16704,"line_start":181,"line_end":181,"column_start":5,"column_end":25}},{"value":"/ // AAAAACCGTTGAT","span":{"file_name":"/Users/shelwitz/.cargo/registry/src/github.com-1ecc6299db9ec823/bio-0.39.0/src/alignment/distance.rs","byte_start":16709,"byte_end":16729,"line_start":182,"line_end":182,"column_start":5,"column_end":25}},{"value":"/ let ldist = bounded_levenshtein(x, y, 5); // Distance is 5","span":{"file_name":"/Users/shelwitz/.cargo/registry/src/github.com-1ecc6299db9ec823/bio-0.39.0/src/alignment/distance.rs","byte_start":16734,"byte_end":16796,"line_start":183,"line_end":183,"column_start":5,"column_end":67}},{"value":"/ assert_eq!(ldist, Some(5));","span":{"file_name":"/Users/shelwitz/.cargo/registry/src/github.com-1ecc6299db9ec823/bio-0.39.0/src/alignment/distance.rs","byte_start":16801,"byte_end":16832,"line_start":184,"line_end":184,"column_start":5,"column_end":36}},{"value":"/","span":{"file_name":"/Users/shelwitz/.cargo/registry/src/github.com-1ecc6299db9ec823/bio-0.39.0/src/alignment/distance.rs","byte_start":16837,"byte_end":16840,"line_start":185,"line_end":185,"column_start":5,"column_end":8}},{"value":"/ let ldist = bounded_levenshtein(x, y, 4); // Threshold too low!","span":{"file_name":"/Users/shelwitz/.cargo/registry/src/github.com-1ecc6299db9ec823/bio-0.39.0/src/alignment/distance.rs","byte_start":16845,"byte_end":16912,"line_start":186,"line_end":186,"column_start":5,"column_end":72}},{"value":"/ assert_eq!(ldist, None);","span":{"file_name":"/Users/shelwitz/.cargo/registry/src/github.com-1ecc6299db9ec823/bio-0.39.0/src/alignment/distance.rs","byte_start":16917,"byte_end":16945,"line_start":187,"line_end":187,"column_start":5,"column_end":33}},{"value":"/ ```","span":{"file_name":"/Users/shelwitz/.cargo/registry/src/github.com-1ecc6299db9ec823/bio-0.39.0/src/alignment/distance.rs","byte_start":16950,"byte_end":16957,"line_start":188,"line_end":188,"column_start":5,"column_end":12}}]},{"kind":"Mod","id":{"krate":0,"index":27},"span":{"file_name":"/Users/shelwitz/.cargo/registry/src/github.com-1ecc6299db9ec823/bio-0.39.0/src/alignment/pairwise/mod.rs","byte_start":0,"byte_end":0,"line_start":1,"line_end":1,"column_start":1,"column_end":1},"name":"pairwise","qualname":"::alignment::pairwise","value":"/Users/shelwitz/.cargo/registry/src/github.com-1ecc6299db9ec823/bio-0.39.0/src/alignment/pairwise/mod.rs","parent":null,"children":[{"krate":0,"index":28},{"krate":0,"index":31},{"krate":0,"index":34},{"krate":0,"index":37},{"krate":0,"index":38},{"krate":0,"index":41},{"krate":0,"index":44},{"krate":0,"index":47},{"krate":0,"index":50},{"krate":0,"index":149},{"krate":0,"index":150},{"krate":0,"index":3330},{"krate":0,"index":3333},{"krate":0,"index":3335},{"krate":0,"index":152},{"krate":0,"index":154},{"krate":0,"index":156},{"krate":0,"index":3337},{"krate":0,"index":3347},{"krate":0,"index":3350},{"krate":0,"index":159},{"krate":0,"index":161},{"krate":0,"index":170},{"krate":0,"index":183},{"krate":0,"index":184},{"krate":0,"index":3353},{"krate":0,"index":3355},{"krate":0,"index":3356},{"krate":0,"index":194},{"krate":0,"index":196},{"krate":0,"index":197},{"krate":0,"index":198},{"krate":0,"index":199},{"krate":0,"index":200},{"krate":0,"index":201},{"krate":0,"index":202},{"krate":0,"index":203},{"krate":0,"index":204},{"krate":0,"index":205},{"krate":0,"index":206},{"krate":0,"index":207},{"krate":0,"index":208},{"krate":0,"index":209},{"krate":0,"index":220},{"krate":0,"index":224}],"decl_id":null,"docs":" Calculate alignments with a generalized variant of the Smith Waterman algorithm.\n Complexity: O(n * m) for strings of length m and n.","sig":null,"attributes":[{"value":"/ Calculate alignments with a generalized variant of the Smith Waterman algorithm.","span":{"file_name":"/Users/shelwitz/.cargo/registry/src/github.com-1ecc6299db9ec823/bio-0.39.0/src/alignment/pairwise/mod.rs","byte_start":19910,"byte_end":19994,"line_start":6,"line_end":6,"column_start":1,"column_end":85}},{"value":"/ Complexity: O(n * m) for strings of length m and n.","span":{"file_name":"/Users/shelwitz/.cargo/registry/src/github.com-1ecc6299db9ec823/bio-0.39.0/src/alignment/pairwise/mod.rs","byte_start":19995,"byte_end":20050,"line_start":7,"line_end":7,"column_start":1,"column_end":56}},{"value":"/","span":{"file_name":"/Users/shelwitz/.cargo/registry/src/github.com-1ecc6299db9ec823/bio-0.39.0/src/alignment/pairwise/mod.rs","byte_start":20051,"byte_end":20054,"line_start":8,"line_end":8,"column_start":1,"column_end":4}},{"value":"/ For quick computation of alignments and alignment scores there are 6 simple functions.","span":{"file_name":"/Users/shelwitz/.cargo/registry/src/github.com-1ecc6299db9ec823/bio-0.39.0/src/alignment/pairwise/mod.rs","byte_start":20055,"byte_end":20145,"line_start":9,"line_end":9,"column_start":1,"column_end":91}},{"value":"/","span":{"file_name":"/Users/shelwitz/.cargo/registry/src/github.com-1ecc6299db9ec823/bio-0.39.0/src/alignment/pairwise/mod.rs","byte_start":20146,"byte_end":20149,"line_start":10,"line_end":10,"column_start":1,"column_end":4}},{"value":"/ # Example","span":{"file_name":"/Users/shelwitz/.cargo/registry/src/github.com-1ecc6299db9ec823/bio-0.39.0/src/alignment/pairwise/mod.rs","byte_start":20150,"byte_end":20163,"line_start":11,"line_end":11,"column_start":1,"column_end":14}},{"value":"/","span":{"file_name":"/Users/shelwitz/.cargo/registry/src/github.com-1ecc6299db9ec823/bio-0.39.0/src/alignment/pairwise/mod.rs","byte_start":20164,"byte_end":20167,"line_start":12,"line_end":12,"column_start":1,"column_end":4}},{"value":"/ ```","span":{"file_name":"/Users/shelwitz/.cargo/registry/src/github.com-1ecc6299db9ec823/bio-0.39.0/src/alignment/pairwise/mod.rs","byte_start":20168,"byte_end":20175,"line_start":13,"line_end":13,"column_start":1,"column_end":8}},{"value":"/ use bio::alignment::pairwise::*;","span":{"file_name":"/Users/shelwitz/.cargo/registry/src/github.com-1ecc6299db9ec823/bio-0.39.0/src/alignment/pairwise/mod.rs","byte_start":20176,"byte_end":20212,"line_start":14,"line_end":14,"column_start":1,"column_end":37}},{"value":"/ use bio::alignment::AlignmentOperation::*;","span":{"file_name":"/Users/shelwitz/.cargo/registry/src/github.com-1ecc6299db9ec823/bio-0.39.0/src/alignment/pairwise/mod.rs","byte_start":20213,"byte_end":20259,"line_start":15,"line_end":15,"column_start":1,"column_end":47}},{"value":"/ use bio::scores::blosum62;","span":{"file_name":"/Users/shelwitz/.cargo/registry/src/github.com-1ecc6299db9ec823/bio-0.39.0/src/alignment/pairwise/mod.rs","byte_start":20260,"byte_end":20290,"line_start":16,"line_end":16,"column_start":1,"column_end":31}},{"value":"/","span":{"file_name":"/Users/shelwitz/.cargo/registry/src/github.com-1ecc6299db9ec823/bio-0.39.0/src/alignment/pairwise/mod.rs","byte_start":20291,"byte_end":20294,"line_start":17,"line_end":17,"column_start":1,"column_end":4}},{"value":"/ let x = b\"ACCGTGGAT\";","span":{"file_name":"/Users/shelwitz/.cargo/registry/src/github.com-1ecc6299db9ec823/bio-0.39.0/src/alignment/pairwise/mod.rs","byte_start":20295,"byte_end":20320,"line_start":18,"line_end":18,"column_start":1,"column_end":26}},{"value":"/ let y = b\"AAAAACCGTTGAT\";","span":{"file_name":"/Users/shelwitz/.cargo/registry/src/github.com-1ecc6299db9ec823/bio-0.39.0/src/alignment/pairwise/mod.rs","byte_start":20321,"byte_end":20350,"line_start":19,"line_end":19,"column_start":1,"column_end":30}},{"value":"/ let score = |a: u8, b: u8| if a == b { 1i32 } else { -1i32 };","span":{"file_name":"/Users/shelwitz/.cargo/registry/src/github.com-1ecc6299db9ec823/bio-0.39.0/src/alignment/pairwise/mod.rs","byte_start":20351,"byte_end":20416,"line_start":20,"line_end":20,"column_start":1,"column_end":66}},{"value":"/ // gap open score: -5, gap extension score: -1","span":{"file_name":"/Users/shelwitz/.cargo/registry/src/github.com-1ecc6299db9ec823/bio-0.39.0/src/alignment/pairwise/mod.rs","byte_start":20417,"byte_end":20467,"line_start":21,"line_end":21,"column_start":1,"column_end":51}},{"value":"/ let mut aligner = Aligner::with_capacity(x.len(), y.len(), -5, -1, &score);","span":{"file_name":"/Users/shelwitz/.cargo/registry/src/github.com-1ecc6299db9ec823/bio-0.39.0/src/alignment/pairwise/mod.rs","byte_start":20468,"byte_end":20547,"line_start":22,"line_end":22,"column_start":1,"column_end":80}},{"value":"/ let alignment = aligner.semiglobal(x, y);","span":{"file_name":"/Users/shelwitz/.cargo/registry/src/github.com-1ecc6299db9ec823/bio-0.39.0/src/alignment/pairwise/mod.rs","byte_start":20548,"byte_end":20593,"line_start":23,"line_end":23,"column_start":1,"column_end":46}},{"value":"/ // x is global (target sequence) and y is local (reference sequence)","span":{"file_name":"/Users/shelwitz/.cargo/registry/src/github.com-1ecc6299db9ec823/bio-0.39.0/src/alignment/pairwise/mod.rs","byte_start":20594,"byte_end":20666,"line_start":24,"line_end":24,"column_start":1,"column_end":73}},{"value":"/ assert_eq!(alignment.ystart, 4);","span":{"file_name":"/Users/shelwitz/.cargo/registry/src/github.com-1ecc6299db9ec823/bio-0.39.0/src/alignment/pairwise/mod.rs","byte_start":20667,"byte_end":20703,"line_start":25,"line_end":25,"column_start":1,"column_end":37}},{"value":"/ assert_eq!(alignment.xstart, 0);","span":{"file_name":"/Users/shelwitz/.cargo/registry/src/github.com-1ecc6299db9ec823/bio-0.39.0/src/alignment/pairwise/mod.rs","byte_start":20704,"byte_end":20740,"line_start":26,"line_end":26,"column_start":1,"column_end":37}},{"value":"/ assert_eq!(","span":{"file_name":"/Users/shelwitz/.cargo/registry/src/github.com-1ecc6299db9ec823/bio-0.39.0/src/alignment/pairwise/mod.rs","byte_start":20741,"byte_end":20756,"line_start":27,"line_end":27,"column_start":1,"column_end":16}},{"value":"/     alignment.operations,","span":{"file_name":"/Users/shelwitz/.cargo/registry/src/github.com-1ecc6299db9ec823/bio-0.39.0/src/alignment/pairwise/mod.rs","byte_start":20757,"byte_end":20786,"line_start":28,"line_end":28,"column_start":1,"column_end":30}},{"value":"/     [Match, Match, Match, Match, Match, Subst, Match, Match, Match]","span":{"file_name":"/Users/shelwitz/.cargo/registry/src/github.com-1ecc6299db9ec823/bio-0.39.0/src/alignment/pairwise/mod.rs","byte_start":20787,"byte_end":20858,"line_start":29,"line_end":29,"column_start":1,"column_end":72}},{"value":"/ );","span":{"file_name":"/Users/shelwitz/.cargo/registry/src/github.com-1ecc6299db9ec823/bio-0.39.0/src/alignment/pairwise/mod.rs","byte_start":20859,"byte_end":20865,"line_start":30,"line_end":30,"column_start":1,"column_end":7}},{"value":"/","span":{"file_name":"/Users/shelwitz/.cargo/registry/src/github.com-1ecc6299db9ec823/bio-0.39.0/src/alignment/pairwise/mod.rs","byte_start":20866,"byte_end":20869,"line_start":31,"line_end":31,"column_start":1,"column_end":4}},{"value":"/ // You can use predefined scoring matrices such as BLOSUM62","span":{"file_name":"/Users/shelwitz/.cargo/registry/src/github.com-1ecc6299db9ec823/bio-0.39.0/src/alignment/pairwise/mod.rs","byte_start":20870,"byte_end":20933,"line_start":32,"line_end":32,"column_start":1,"column_end":64}},{"value":"/ let x = b\"LSPADKTNVKAA\";","span":{"file_name":"/Users/shelwitz/.cargo/registry/src/github.com-1ecc6299db9ec823/bio-0.39.0/src/alignment/pairwise/mod.rs","byte_start":20934,"byte_end":20962,"line_start":33,"line_end":33,"column_start":1,"column_end":29}},{"value":"/ let y = b\"PEEKSAV\";","span":{"file_name":"/Users/shelwitz/.cargo/registry/src/github.com-1ecc6299db9ec823/bio-0.39.0/src/alignment/pairwise/mod.rs","byte_start":20963,"byte_end":20986,"line_start":34,"line_end":34,"column_start":1,"column_end":24}},{"value":"/ // gap open score: -10, gap extension score: -1","span":{"file_name":"/Users/shelwitz/.cargo/registry/src/github.com-1ecc6299db9ec823/bio-0.39.0/src/alignment/pairwise/mod.rs","byte_start":20987,"byte_end":21038,"line_start":35,"line_end":35,"column_start":1,"column_end":52}},{"value":"/ let mut aligner = Aligner::with_capacity(x.len(), y.len(), -10, -1, &blosum62);","span":{"file_name":"/Users/shelwitz/.cargo/registry/src/github.com-1ecc6299db9ec823/bio-0.39.0/src/alignment/pairwise/mod.rs","byte_start":21039,"byte_end":21122,"line_start":36,"line_end":36,"column_start":1,"column_end":84}},{"value":"/ let alignment = aligner.local(x, y);","span":{"file_name":"/Users/shelwitz/.cargo/registry/src/github.com-1ecc6299db9ec823/bio-0.39.0/src/alignment/pairwise/mod.rs","byte_start":21123,"byte_end":21163,"line_start":37,"line_end":37,"column_start":1,"column_end":41}},{"value":"/ assert_eq!(alignment.xstart, 2);","span":{"file_name":"/Users/shelwitz/.cargo/registry/src/github.com-1ecc6299db9ec823/bio-0.39.0/src/alignment/pairwise/mod.rs","byte_start":21164,"byte_end":21200,"line_start":38,"line_end":38,"column_start":1,"column_end":37}},{"value":"/ assert_eq!(alignment.xend, 9);","span":{"file_name":"/Users/shelwitz/.cargo/registry/src/github.com-1ecc6299db9ec823/bio-0.39.0/src/alignment/pairwise/mod.rs","byte_start":21201,"byte_end":21235,"line_start":39,"line_end":39,"column_start":1,"column_end":35}},{"value":"/ assert_eq!(alignment.ystart, 0);","span":{"file_name":"/Users/shelwitz/.cargo/registry/src/github.com-1ecc6299db9ec823/bio-0.39.0/src/alignment/pairwise/mod.rs","byte_start":21236,"byte_end":21272,"line_start":40,"line_end":40,"column_start":1,"column_end":37}},{"value":"/ assert_eq!(alignment.yend, 7);","span":{"file_name":"/Users/shelwitz/.cargo/registry/src/github.com-1ecc6299db9ec823/bio-0.39.0/src/alignment/pairwise/mod.rs","byte_start":21273,"byte_end":21307,"line_start":41,"line_end":41,"column_start":1,"column_end":35}},{"value":"/ assert_eq!(","span":{"file_name":"/Users/shelwitz/.cargo/registry/src/github.com-1ecc6299db9ec823/bio-0.39.0/src/alignment/pairwise/mod.rs","byte_start":21308,"byte_end":21323,"line_start":42,"line_end":42,"column_start":1,"column_end":16}},{"value":"/     alignment.operations,","span":{"file_name":"/Users/shelwitz/.cargo/registry/src/github.com-1ecc6299db9ec823/bio-0.39.0/src/alignment/pairwise/mod.rs","byte_start":21324,"byte_end":21353,"line_start":43,"line_end":43,"column_start":1,"column_end":30}},{"value":"/     [Match, Subst, Subst, Match, Subst, Subst, Match]","span":{"file_name":"/Users/shelwitz/.cargo/registry/src/github.com-1ecc6299db9ec823/bio-0.39.0/src/alignment/pairwise/mod.rs","byte_start":21354,"byte_end":21411,"line_start":44,"line_end":44,"column_start":1,"column_end":58}},{"value":"/ );","span":{"file_name":"/Users/shelwitz/.cargo/registry/src/github.com-1ecc6299db9ec823/bio-0.39.0/src/alignment/pairwise/mod.rs","byte_start":21412,"byte_end":21418,"line_start":45,"line_end":45,"column_start":1,"column_end":7}},{"value":"/ assert_eq!(alignment.score, 16);","span":{"file_name":"/Users/shelwitz/.cargo/registry/src/github.com-1ecc6299db9ec823/bio-0.39.0/src/alignment/pairwise/mod.rs","byte_start":21419,"byte_end":21455,"line_start":46,"line_end":46,"column_start":1,"column_end":37}},{"value":"/","span":{"file_name":"/Users/shelwitz/.cargo/registry/src/github.com-1ecc6299db9ec823/bio-0.39.0/src/alignment/pairwise/mod.rs","byte_start":21456,"byte_end":21459,"line_start":47,"line_end":47,"column_start":1,"column_end":4}},{"value":"/ // If you don't know sizes of future sequences, you could","span":{"file_name":"/Users/shelwitz/.cargo/registry/src/github.com-1ecc6299db9ec823/bio-0.39.0/src/alignment/pairwise/mod.rs","byte_start":21460,"byte_end":21521,"line_start":48,"line_end":48,"column_start":1,"column_end":62}},{"value":"/ // use Aligner::new().","span":{"file_name":"/Users/shelwitz/.cargo/registry/src/github.com-1ecc6299db9ec823/bio-0.39.0/src/alignment/pairwise/mod.rs","byte_start":21522,"byte_end":21548,"line_start":49,"line_end":49,"column_start":1,"column_end":27}},{"value":"/ // Global alignment:","span":{"file_name":"/Users/shelwitz/.cargo/registry/src/github.com-1ecc6299db9ec823/bio-0.39.0/src/alignment/pairwise/mod.rs","byte_start":21549,"byte_end":21573,"line_start":50,"line_end":50,"column_start":1,"column_end":25}},{"value":"/ let mut aligner = Aligner::new(-5, -1, &score);","span":{"file_name":"/Users/shelwitz/.cargo/registry/src/github.com-1ecc6299db9ec823/bio-0.39.0/src/alignment/pairwise/mod.rs","byte_start":21574,"byte_end":21625,"line_start":51,"line_end":51,"column_start":1,"column_end":52}},{"value":"/ let x = b\"ACCGTGGAT\";","span":{"file_name":"/Users/shelwitz/.cargo/registry/src/github.com-1ecc6299db9ec823/bio-0.39.0/src/alignment/pairwise/mod.rs","byte_start":21626,"byte_end":21651,"line_start":52,"line_end":52,"column_start":1,"column_end":26}},{"value":"/ let y = b\"AAAAACCGTTGAT\";","span":{"file_name":"/Users/shelwitz/.cargo/registry/src/github.com-1ecc6299db9ec823/bio-0.39.0/src/alignment/pairwise/mod.rs","byte_start":21652,"byte_end":21681,"line_start":53,"line_end":53,"column_start":1,"column_end":30}},{"value":"/ let alignment = aligner.global(x, y);","span":{"file_name":"/Users/shelwitz/.cargo/registry/src/github.com-1ecc6299db9ec823/bio-0.39.0/src/alignment/pairwise/mod.rs","byte_start":21682,"byte_end":21723,"line_start":54,"line_end":54,"column_start":1,"column_end":42}},{"value":"/ assert_eq!(alignment.ystart, 0);","span":{"file_name":"/Users/shelwitz/.cargo/registry/src/github.com-1ecc6299db9ec823/bio-0.39.0/src/alignment/pairwise/mod.rs","byte_start":21724,"byte_end":21760,"line_start":55,"line_end":55,"column_start":1,"column_end":37}},{"value":"/ assert_eq!(alignment.xstart, 0);","span":{"file_name":"/Users/shelwitz/.cargo/registry/src/github.com-1ecc6299db9ec823/bio-0.39.0/src/alignment/pairwise/mod.rs","byte_start":21761,"byte_end":21797,"line_start":56,"line_end":56,"column_start":1,"column_end":37}},{"value":"/ assert_eq!(aligner.local(x, y).score, 7);","span":{"file_name":"/Users/shelwitz/.cargo/registry/src/github.com-1ecc6299db9ec823/bio-0.39.0/src/alignment/pairwise/mod.rs","byte_start":21798,"byte_end":21843,"line_start":57,"line_end":57,"column_start":1,"column_end":46}},{"value":"/","span":{"file_name":"/Users/shelwitz/.cargo/registry/src/github.com-1ecc6299db9ec823/bio-0.39.0/src/alignment/pairwise/mod.rs","byte_start":21844,"byte_end":21847,"line_start":58,"line_end":58,"column_start":1,"column_end":4}},{"value":"/ // In addition to the standard modes (Global, Semiglobal and Local), a custom alignment","span":{"file_name":"/Users/shelwitz/.cargo/registry/src/github.com-1ecc6299db9ec823/bio-0.39.0/src/alignment/pairwise/mod.rs","byte_start":21848,"byte_end":21939,"line_start":59,"line_end":59,"column_start":1,"column_end":92}},{"value":"/ // mode is supported which supports a user-specified clipping penalty. Clipping is a","span":{"file_name":"/Users/shelwitz/.cargo/registry/src/github.com-1ecc6299db9ec823/bio-0.39.0/src/alignment/pairwise/mod.rs","byte_start":21940,"byte_end":22028,"line_start":60,"line_end":60,"column_start":1,"column_end":89}},{"value":"/ // special boundary condition where you are allowed to clip off the beginning/end of","span":{"file_name":"/Users/shelwitz/.cargo/registry/src/github.com-1ecc6299db9ec823/bio-0.39.0/src/alignment/pairwise/mod.rs","byte_start":22029,"byte_end":22117,"line_start":61,"line_end":61,"column_start":1,"column_end":89}},{"value":"/ // the sequence for a fixed penalty. As a starting example, we can use the custom mode","span":{"file_name":"/Users/shelwitz/.cargo/registry/src/github.com-1ecc6299db9ec823/bio-0.39.0/src/alignment/pairwise/mod.rs","byte_start":22118,"byte_end":22208,"line_start":62,"line_end":62,"column_start":1,"column_end":91}},{"value":"/ // for achieving the three standard modes as follows.","span":{"file_name":"/Users/shelwitz/.cargo/registry/src/github.com-1ecc6299db9ec823/bio-0.39.0/src/alignment/pairwise/mod.rs","byte_start":22209,"byte_end":22266,"line_start":63,"line_end":63,"column_start":1,"column_end":58}},{"value":"/","span":{"file_name":"/Users/shelwitz/.cargo/registry/src/github.com-1ecc6299db9ec823/bio-0.39.0/src/alignment/pairwise/mod.rs","byte_start":22267,"byte_end":22270,"line_start":64,"line_end":64,"column_start":1,"column_end":4}},{"value":"/ // scoring for semiglobal mode","span":{"file_name":"/Users/shelwitz/.cargo/registry/src/github.com-1ecc6299db9ec823/bio-0.39.0/src/alignment/pairwise/mod.rs","byte_start":22271,"byte_end":22305,"line_start":65,"line_end":65,"column_start":1,"column_end":35}},{"value":"/ let scoring = Scoring::new(-5, -1, &score) // Gap open, gap extend and match score function","span":{"file_name":"/Users/shelwitz/.cargo/registry/src/github.com-1ecc6299db9ec823/bio-0.39.0/src/alignment/pairwise/mod.rs","byte_start":22306,"byte_end":22401,"line_start":66,"line_end":66,"column_start":1,"column_end":96}},{"value":"/     .xclip(MIN_SCORE) // Clipping penalty for x set to 'negative infinity', hence global in x","span":{"file_name":"/Users/shelwitz/.cargo/registry/src/github.com-1ecc6299db9ec823/bio-0.39.0/src/alignment/pairwise/mod.rs","byte_start":22402,"byte_end":22499,"line_start":67,"line_end":67,"column_start":1,"column_end":98}},{"value":"/     .yclip(0); // Clipping penalty for y set to 0, hence local in y","span":{"file_name":"/Users/shelwitz/.cargo/registry/src/github.com-1ecc6299db9ec823/bio-0.39.0/src/alignment/pairwise/mod.rs","byte_start":22500,"byte_end":22571,"line_start":68,"line_end":68,"column_start":1,"column_end":72}},{"value":"/ let mut aligner = Aligner::with_scoring(scoring);","span":{"file_name":"/Users/shelwitz/.cargo/registry/src/github.com-1ecc6299db9ec823/bio-0.39.0/src/alignment/pairwise/mod.rs","byte_start":22572,"byte_end":22625,"line_start":69,"line_end":69,"column_start":1,"column_end":54}},{"value":"/ let alignment = aligner.custom(x, y); // The custom aligner invocation","span":{"file_name":"/Users/shelwitz/.cargo/registry/src/github.com-1ecc6299db9ec823/bio-0.39.0/src/alignment/pairwise/mod.rs","byte_start":22626,"byte_end":22700,"line_start":70,"line_end":70,"column_start":1,"column_end":75}},{"value":"/ assert_eq!(alignment.ystart, 4);","span":{"file_name":"/Users/shelwitz/.cargo/registry/src/github.com-1ecc6299db9ec823/bio-0.39.0/src/alignment/pairwise/mod.rs","byte_start":22701,"byte_end":22737,"line_start":71,"line_end":71,"column_start":1,"column_end":37}},{"value":"/ assert_eq!(alignment.xstart, 0);","span":{"file_name":"/Users/shelwitz/.cargo/registry/src/github.com-1ecc6299db9ec823/bio-0.39.0/src/alignment/pairwise/mod.rs","byte_start":22738,"byte_end":22774,"line_start":72,"line_end":72,"column_start":1,"column_end":37}},{"value":"/ // Note that in the custom mode, the clips are explicitly mentioned in the operations","span":{"file_name":"/Users/shelwitz/.cargo/registry/src/github.com-1ecc6299db9ec823/bio-0.39.0/src/alignment/pairwise/mod.rs","byte_start":22775,"byte_end":22864,"line_start":73,"line_end":73,"column_start":1,"column_end":90}},{"value":"/ assert_eq!(","span":{"file_name":"/Users/shelwitz/.cargo/registry/src/github.com-1ecc6299db9ec823/bio-0.39.0/src/alignment/pairwise/mod.rs","byte_start":22865,"byte_end":22880,"line_start":74,"line_end":74,"column_start":1,"column_end":16}},{"value":"/     alignment.operations,","span":{"file_name":"/Users/shelwitz/.cargo/registry/src/github.com-1ecc6299db9ec823/bio-0.39.0/src/alignment/pairwise/mod.rs","byte_start":22881,"byte_end":22910,"line_start":75,"line_end":75,"column_start":1,"column_end":30}},{"value":"/     [","span":{"file_name":"/Users/shelwitz/.cargo/registry/src/github.com-1ecc6299db9ec823/bio-0.39.0/src/alignment/pairwise/mod.rs","byte_start":22911,"byte_end":22920,"line_start":76,"line_end":76,"column_start":1,"column_end":10}},{"value":"/         Yclip(4),","span":{"file_name":"/Users/shelwitz/.cargo/registry/src/github.com-1ecc6299db9ec823/bio-0.39.0/src/alignment/pairwise/mod.rs","byte_start":22921,"byte_end":22942,"line_start":77,"line_end":77,"column_start":1,"column_end":22}},{"value":"/         Match,","span":{"file_name":"/Users/shelwitz/.cargo/registry/src/github.com-1ecc6299db9ec823/bio-0.39.0/src/alignment/pairwise/mod.rs","byte_start":22943,"byte_end":22961,"line_start":78,"line_end":78,"column_start":1,"column_end":19}},{"value":"/         Match,","span":{"file_name":"/Users/shelwitz/.cargo/registry/src/github.com-1ecc6299db9ec823/bio-0.39.0/src/alignment/pairwise/mod.rs","byte_start":22962,"byte_end":22980,"line_start":79,"line_end":79,"column_start":1,"column_end":19}},{"value":"/         Match,","span":{"file_name":"/Users/shelwitz/.cargo/registry/src/github.com-1ecc6299db9ec823/bio-0.39.0/src/alignment/pairwise/mod.rs","byte_start":22981,"byte_end":22999,"line_start":80,"line_end":80,"column_start":1,"column_end":19}},{"value":"/         Match,","span":{"file_name":"/Users/shelwitz/.cargo/registry/src/github.com-1ecc6299db9ec823/bio-0.39.0/src/alignment/pairwise/mod.rs","byte_start":23000,"byte_end":23018,"line_start":81,"line_end":81,"column_start":1,"column_end":19}},{"value":"/         Match,","span":{"file_name":"/Users/shelwitz/.cargo/registry/src/github.com-1ecc6299db9ec823/bio-0.39.0/src/alignment/pairwise/mod.rs","byte_start":23019,"byte_end":23037,"line_start":82,"line_end":82,"column_start":1,"column_end":19}},{"value":"/         Subst,","span":{"file_name":"/Users/shelwitz/.cargo/registry/src/github.com-1ecc6299db9ec823/bio-0.39.0/src/alignment/pairwise/mod.rs","byte_start":23038,"byte_end":23056,"line_start":83,"line_end":83,"column_start":1,"column_end":19}},{"value":"/         Match,","span":{"file_name":"/Users/shelwitz/.cargo/registry/src/github.com-1ecc6299db9ec823/bio-0.39.0/src/alignment/pairwise/mod.rs","byte_start":23057,"byte_end":23075,"line_start":84,"line_end":84,"column_start":1,"column_end":19}},{"value":"/         Match,","span":{"file_name":"/Users/shelwitz/.cargo/registry/src/github.com-1ecc6299db9ec823/bio-0.39.0/src/alignment/pairwise/mod.rs","byte_start":23076,"byte_end":23094,"line_start":85,"line_end":85,"column_start":1,"column_end":19}},{"value":"/         Match","span":{"file_name":"/Users/shelwitz/.cargo/registry/src/github.com-1ecc6299db9ec823/bio-0.39.0/src/alignment/pairwise/mod.rs","byte_start":23095,"byte_end":23112,"line_start":86,"line_end":86,"column_start":1,"column_end":18}},{"value":"/     ]","span":{"file_name":"/Users/shelwitz/.cargo/registry/src/github.com-1ecc6299db9ec823/bio-0.39.0/src/alignment/pairwise/mod.rs","byte_start":23113,"byte_end":23122,"line_start":87,"line_end":87,"column_start":1,"column_end":10}},{"value":"/ );","span":{"file_name":"/Users/shelwitz/.cargo/registry/src/github.com-1ecc6299db9ec823/bio-0.39.0/src/alignment/pairwise/mod.rs","byte_start":23123,"byte_end":23129,"line_start":88,"line_end":88,"column_start":1,"column_end":7}},{"value":"/","span":{"file_name":"/Users/shelwitz/.cargo/registry/src/github.com-1ecc6299db9ec823/bio-0.39.0/src/alignment/pairwise/mod.rs","byte_start":23130,"byte_end":23133,"line_start":89,"line_end":89,"column_start":1,"column_end":4}},{"value":"/ // scoring for global mode","span":{"file_name":"/Users/shelwitz/.cargo/registry/src/github.com-1ecc6299db9ec823/bio-0.39.0/src/alignment/pairwise/mod.rs","byte_start":23134,"byte_end":23164,"line_start":90,"line_end":90,"column_start":1,"column_end":31}},{"value":"/ // scoring can also be created using from_scores if the match and mismatch scores are constants","span":{"file_name":"/Users/shelwitz/.cargo/registry/src/github.com-1ecc6299db9ec823/bio-0.39.0/src/alignment/pairwise/mod.rs","byte_start":23165,"byte_end":23264,"line_start":91,"line_end":91,"column_start":1,"column_end":100}},{"value":"/ let scoring = Scoring::from_scores(-5, -1, 1, -1) // Gap open, extend, match, mismatch score","span":{"file_name":"/Users/shelwitz/.cargo/registry/src/github.com-1ecc6299db9ec823/bio-0.39.0/src/alignment/pairwise/mod.rs","byte_start":23265,"byte_end":23361,"line_start":92,"line_end":92,"column_start":1,"column_end":97}},{"value":"/     .xclip(MIN_SCORE) // Clipping penalty for x set to 'negative infinity', hence global in x","span":{"file_name":"/Users/shelwitz/.cargo/registry/src/github.com-1ecc6299db9ec823/bio-0.39.0/src/alignment/pairwise/mod.rs","byte_start":23362,"byte_end":23459,"line_start":93,"line_end":93,"column_start":1,"column_end":98}},{"value":"/     .yclip(MIN_SCORE); // Clipping penalty for y set to 'negative infinity', hence global in y","span":{"file_name":"/Users/shelwitz/.cargo/registry/src/github.com-1ecc6299db9ec823/bio-0.39.0/src/alignment/pairwise/mod.rs","byte_start":23460,"byte_end":23558,"line_start":94,"line_end":94,"column_start":1,"column_end":99}},{"value":"/ let mut aligner = Aligner::with_scoring(scoring);","span":{"file_name":"/Users/shelwitz/.cargo/registry/src/github.com-1ecc6299db9ec823/bio-0.39.0/src/alignment/pairwise/mod.rs","byte_start":23559,"byte_end":23612,"line_start":95,"line_end":95,"column_start":1,"column_end":54}},{"value":"/ let alignment = aligner.custom(x, y); // The custom aligner invocation","span":{"file_name":"/Users/shelwitz/.cargo/registry/src/github.com-1ecc6299db9ec823/bio-0.39.0/src/alignment/pairwise/mod.rs","byte_start":23613,"byte_end":23687,"line_start":96,"line_end":96,"column_start":1,"column_end":75}},{"value":"/ assert_eq!(alignment.ystart, 0);","span":{"file_name":"/Users/shelwitz/.cargo/registry/src/github.com-1ecc6299db9ec823/bio-0.39.0/src/alignment/pairwise/mod.rs","byte_start":23688,"byte_end":23724,"line_start":97,"line_end":97,"column_start":1,"column_end":37}},{"value":"/ assert_eq!(alignment.xstart, 0);","span":{"file_name":"/Users/shelwitz/.cargo/registry/src/github.com-1ecc6299db9ec823/bio-0.39.0/src/alignment/pairwise/mod.rs","byte_start":23725,"byte_end":23761,"line_start":98,"line_end":98,"column_start":1,"column_end":37}},{"value":"/ // Note that in the custom mode, the clips are explicitly mentioned in the operations","span":{"file_name":"/Users/shelwitz/.cargo/registry/src/github.com-1ecc6299db9ec823/bio-0.39.0/src/alignment/pairwise/mod.rs","byte_start":23762,"byte_end":23851,"line_start":99,"line_end":99,"column_start":1,"column_end":90}},{"value":"/ assert_eq!(","span":{"file_name":"/Users/shelwitz/.cargo/registry/src/github.com-1ecc6299db9ec823/bio-0.39.0/src/alignment/pairwise/mod.rs","byte_start":23852,"byte_end":23867,"line_start":100,"line_end":100,"column_start":1,"column_end":16}},{"value":"/     alignment.operations,","span":{"file_name":"/Users/shelwitz/.cargo/registry/src/github.com-1ecc6299db9ec823/bio-0.39.0/src/alignment/pairwise/mod.rs","byte_start":23868,"byte_end":23897,"line_start":101,"line_end":101,"column_start":1,"column_end":30}},{"value":"/     [Del, Del, Del, Del, Match, Match, Match, Match, Match, Subst, Match, Match, Match]","span":{"file_name":"/Users/shelwitz/.cargo/registry/src/github.com-1ecc6299db9ec823/bio-0.39.0/src/alignment/pairwise/mod.rs","byte_start":23898,"byte_end":23989,"line_start":102,"line_end":102,"column_start":1,"column_end":92}},{"value":"/ );","span":{"file_name":"/Users/shelwitz/.cargo/registry/src/github.com-1ecc6299db9ec823/bio-0.39.0/src/alignment/pairwise/mod.rs","byte_start":23990,"byte_end":23996,"line_start":103,"line_end":103,"column_start":1,"column_end":7}},{"value":"/","span":{"file_name":"/Users/shelwitz/.cargo/registry/src/github.com-1ecc6299db9ec823/bio-0.39.0/src/alignment/pairwise/mod.rs","byte_start":23997,"byte_end":24000,"line_start":104,"line_end":104,"column_start":1,"column_end":4}},{"value":"/ // Similarly if the clip penalties are both set to 0, we have local alignment mode. The scoring","span":{"file_name":"/Users/shelwitz/.cargo/registry/src/github.com-1ecc6299db9ec823/bio-0.39.0/src/alignment/pairwise/mod.rs","byte_start":24001,"byte_end":24100,"line_start":105,"line_end":105,"column_start":1,"column_end":100}},{"value":"/ // struct also lets users set different penalties for prefix/suffix clipping, thereby letting","span":{"file_name":"/Users/shelwitz/.cargo/registry/src/github.com-1ecc6299db9ec823/bio-0.39.0/src/alignment/pairwise/mod.rs","byte_start":24101,"byte_end":24198,"line_start":106,"line_end":106,"column_start":1,"column_end":98}},{"value":"/ // users have the flexibility to create a wide variety of boundary conditions. The xclip() and","span":{"file_name":"/Users/shelwitz/.cargo/registry/src/github.com-1ecc6299db9ec823/bio-0.39.0/src/alignment/pairwise/mod.rs","byte_start":24199,"byte_end":24297,"line_start":107,"line_end":107,"column_start":1,"column_end":99}},{"value":"/ // yclip() methods sets the prefix and suffix penalties to be equal. The scoring struct can be","span":{"file_name":"/Users/shelwitz/.cargo/registry/src/github.com-1ecc6299db9ec823/bio-0.39.0/src/alignment/pairwise/mod.rs","byte_start":24298,"byte_end":24396,"line_start":108,"line_end":108,"column_start":1,"column_end":99}},{"value":"/ // explicitly constructed for full flexibility.","span":{"file_name":"/Users/shelwitz/.cargo/registry/src/github.com-1ecc6299db9ec823/bio-0.39.0/src/alignment/pairwise/mod.rs","byte_start":24397,"byte_end":24448,"line_start":109,"line_end":109,"column_start":1,"column_end":52}},{"value":"/","span":{"file_name":"/Users/shelwitz/.cargo/registry/src/github.com-1ecc6299db9ec823/bio-0.39.0/src/alignment/pairwise/mod.rs","byte_start":24449,"byte_end":24452,"line_start":110,"line_end":110,"column_start":1,"column_end":4}},{"value":"/ // The following example considers a modification of the semiglobal mode where you are allowed","span":{"file_name":"/Users/shelwitz/.cargo/registry/src/github.com-1ecc6299db9ec823/bio-0.39.0/src/alignment/pairwise/mod.rs","byte_start":24453,"byte_end":24551,"line_start":111,"line_end":111,"column_start":1,"column_end":99}},{"value":"/ // to skip a prefix of the target sequence x, for a penalty of -10, but you have to consume","span":{"file_name":"/Users/shelwitz/.cargo/registry/src/github.com-1ecc6299db9ec823/bio-0.39.0/src/alignment/pairwise/mod.rs","byte_start":24552,"byte_end":24647,"line_start":112,"line_end":112,"column_start":1,"column_end":96}},{"value":"/ // the rest of the string in the alignment","span":{"file_name":"/Users/shelwitz/.cargo/registry/src/github.com-1ecc6299db9ec823/bio-0.39.0/src/alignment/pairwise/mod.rs","byte_start":24648,"byte_end":24694,"line_start":113,"line_end":113,"column_start":1,"column_end":47}},{"value":"/","span":{"file_name":"/Users/shelwitz/.cargo/registry/src/github.com-1ecc6299db9ec823/bio-0.39.0/src/alignment/pairwise/mod.rs","byte_start":24695,"byte_end":24698,"line_start":114,"line_end":114,"column_start":1,"column_end":4}},{"value":"/ let scoring = Scoring {","span":{"file_name":"/Users/shelwitz/.cargo/registry/src/github.com-1ecc6299db9ec823/bio-0.39.0/src/alignment/pairwise/mod.rs","byte_start":24699,"byte_end":24726,"line_start":115,"line_end":115,"column_start":1,"column_end":28}},{"value":"/     gap_open: -5,","span":{"file_name":"/Users/shelwitz/.cargo/registry/src/github.com-1ecc6299db9ec823/bio-0.39.0/src/alignment/pairwise/mod.rs","byte_start":24727,"byte_end":24748,"line_start":116,"line_end":116,"column_start":1,"column_end":22}},{"value":"/     gap_extend: -1,","span":{"file_name":"/Users/shelwitz/.cargo/registry/src/github.com-1ecc6299db9ec823/bio-0.39.0/src/alignment/pairwise/mod.rs","byte_start":24749,"byte_end":24772,"line_start":117,"line_end":117,"column_start":1,"column_end":24}},{"value":"/     match_fn: |a: u8, b: u8| if a == b { 1i32 } else { -3i32 },","span":{"file_name":"/Users/shelwitz/.cargo/registry/src/github.com-1ecc6299db9ec823/bio-0.39.0/src/alignment/pairwise/mod.rs","byte_start":24773,"byte_end":24840,"line_start":118,"line_end":118,"column_start":1,"column_end":68}},{"value":"/     match_scores: Some((1, -3)),","span":{"file_name":"/Users/shelwitz/.cargo/registry/src/github.com-1ecc6299db9ec823/bio-0.39.0/src/alignment/pairwise/mod.rs","byte_start":24841,"byte_end":24877,"line_start":119,"line_end":119,"column_start":1,"column_end":37}},{"value":"/     xclip_prefix: -10,","span":{"file_name":"/Users/shelwitz/.cargo/registry/src/github.com-1ecc6299db9ec823/bio-0.39.0/src/alignment/pairwise/mod.rs","byte_start":24878,"byte_end":24904,"line_start":120,"line_end":120,"column_start":1,"column_end":27}},{"value":"/     xclip_suffix: MIN_SCORE,","span":{"file_name":"/Users/shelwitz/.cargo/registry/src/github.com-1ecc6299db9ec823/bio-0.39.0/src/alignment/pairwise/mod.rs","byte_start":24905,"byte_end":24937,"line_start":121,"line_end":121,"column_start":1,"column_end":33}},{"value":"/     yclip_prefix: 0,","span":{"file_name":"/Users/shelwitz/.cargo/registry/src/github.com-1ecc6299db9ec823/bio-0.39.0/src/alignment/pairwise/mod.rs","byte_start":24938,"byte_end":24962,"line_start":122,"line_end":122,"column_start":1,"column_end":25}},{"value":"/     yclip_suffix: 0,","span":{"file_name":"/Users/shelwitz/.cargo/registry/src/github.com-1ecc6299db9ec823/bio-0.39.0/src/alignment/pairwise/mod.rs","byte_start":24963,"byte_end":24987,"line_start":123,"line_end":123,"column_start":1,"column_end":25}},{"value":"/ };","span":{"file_name":"/Users/shelwitz/.cargo/registry/src/github.com-1ecc6299db9ec823/bio-0.39.0/src/alignment/pairwise/mod.rs","byte_start":24988,"byte_end":24994,"line_start":124,"line_end":124,"column_start":1,"column_end":7}},{"value":"/ let x = b\"GGGGGGACGTACGTACGT\";","span":{"file_name":"/Users/shelwitz/.cargo/registry/src/github.com-1ecc6299db9ec823/bio-0.39.0/src/alignment/pairwise/mod.rs","byte_start":24995,"byte_end":25029,"line_start":125,"line_end":125,"column_start":1,"column_end":35}},{"value":"/ let y = b\"AAAAACGTACGTACGTAAAA\";","span":{"file_name":"/Users/shelwitz/.cargo/registry/src/github.com-1ecc6299db9ec823/bio-0.39.0/src/alignment/pairwise/mod.rs","byte_start":25030,"byte_end":25066,"line_start":126,"line_end":126,"column_start":1,"column_end":37}},{"value":"/ let mut aligner = Aligner::with_capacity_and_scoring(x.len(), y.len(), scoring);","span":{"file_name":"/Users/shelwitz/.cargo/registry/src/github.com-1ecc6299db9ec823/bio-0.39.0/src/alignment/pairwise/mod.rs","byte_start":25067,"byte_end":25151,"line_start":127,"line_end":127,"column_start":1,"column_end":85}},{"value":"/ let alignment = aligner.custom(x, y);","span":{"file_name":"/Users/shelwitz/.cargo/registry/src/github.com-1ecc6299db9ec823/bio-0.39.0/src/alignment/pairwise/mod.rs","byte_start":25152,"byte_end":25193,"line_start":128,"line_end":128,"column_start":1,"column_end":42}},{"value":"/ println!(\"{}\", alignment.pretty(x, y));","span":{"file_name":"/Users/shelwitz/.cargo/registry/src/github.com-1ecc6299db9ec823/bio-0.39.0/src/alignment/pairwise/mod.rs","byte_start":25194,"byte_end":25237,"line_start":129,"line_end":129,"column_start":1,"column_end":44}},{"value":"/ assert_eq!(alignment.score, 2);","span":{"file_name":"/Users/shelwitz/.cargo/registry/src/github.com-1ecc6299db9ec823/bio-0.39.0/src/alignment/pairwise/mod.rs","byte_start":25238,"byte_end":25273,"line_start":130,"line_end":130,"column_start":1,"column_end":36}},{"value":"/ assert_eq!(","span":{"file_name":"/Users/shelwitz/.cargo/registry/src/github.com-1ecc6299db9ec823/bio-0.39.0/src/alignment/pairwise/mod.rs","byte_start":25274,"byte_end":25289,"line_start":131,"line_end":131,"column_start":1,"column_end":16}},{"value":"/     alignment.operations,","span":{"file_name":"/Users/shelwitz/.cargo/registry/src/github.com-1ecc6299db9ec823/bio-0.39.0/src/alignment/pairwise/mod.rs","byte_start":25290,"byte_end":25319,"line_start":132,"line_end":132,"column_start":1,"column_end":30}},{"value":"/     [","span":{"file_name":"/Users/shelwitz/.cargo/registry/src/github.com-1ecc6299db9ec823/bio-0.39.0/src/alignment/pairwise/mod.rs","byte_start":25320,"byte_end":25329,"line_start":133,"line_end":133,"column_start":1,"column_end":10}},{"value":"/         Yclip(4),","span":{"file_name":"/Users/shelwitz/.cargo/registry/src/github.com-1ecc6299db9ec823/bio-0.39.0/src/alignment/pairwise/mod.rs","byte_start":25330,"byte_end":25351,"line_start":134,"line_end":134,"column_start":1,"column_end":22}},{"value":"/         Xclip(6),","span":{"file_name":"/Users/shelwitz/.cargo/registry/src/github.com-1ecc6299db9ec823/bio-0.39.0/src/alignment/pairwise/mod.rs","byte_start":25352,"byte_end":25373,"line_start":135,"line_end":135,"column_start":1,"column_end":22}},{"value":"/         Match,","span":{"file_name":"/Users/shelwitz/.cargo/registry/src/github.com-1ecc6299db9ec823/bio-0.39.0/src/alignment/pairwise/mod.rs","byte_start":25374,"byte_end":25392,"line_start":136,"line_end":136,"column_start":1,"column_end":19}},{"value":"/         Match,","span":{"file_name":"/Users/shelwitz/.cargo/registry/src/github.com-1ecc6299db9ec823/bio-0.39.0/src/alignment/pairwise/mod.rs","byte_start":25393,"byte_end":25411,"line_start":137,"line_end":137,"column_start":1,"column_end":19}},{"value":"/         Match,","span":{"file_name":"/Users/shelwitz/.cargo/registry/src/github.com-1ecc6299db9ec823/bio-0.39.0/src/alignment/pairwise/mod.rs","byte_start":25412,"byte_end":25430,"line_start":138,"line_end":138,"column_start":1,"column_end":19}},{"value":"/         Match,","span":{"file_name":"/Users/shelwitz/.cargo/registry/src/github.com-1ecc6299db9ec823/bio-0.39.0/src/alignment/pairwise/mod.rs","byte_start":25431,"byte_end":25449,"line_start":139,"line_end":139,"column_start":1,"column_end":19}},{"value":"/         Match,","span":{"file_name":"/Users/shelwitz/.cargo/registry/src/github.com-1ecc6299db9ec823/bio-0.39.0/src/alignment/pairwise/mod.rs","byte_start":25450,"byte_end":25468,"line_start":140,"line_end":140,"column_start":1,"column_end":19}},{"value":"/         Match,","span":{"file_name":"/Users/shelwitz/.cargo/registry/src/github.com-1ecc6299db9ec823/bio-0.39.0/src/alignment/pairwise/mod.rs","byte_start":25469,"byte_end":25487,"line_start":141,"line_end":141,"column_start":1,"column_end":19}},{"value":"/         Match,","span":{"file_name":"/Users/shelwitz/.cargo/registry/src/github.com-1ecc6299db9ec823/bio-0.39.0/src/alignment/pairwise/mod.rs","byte_start":25488,"byte_end":25506,"line_start":142,"line_end":142,"column_start":1,"column_end":19}},{"value":"/         Match,","span":{"file_name":"/Users/shelwitz/.cargo/registry/src/github.com-1ecc6299db9ec823/bio-0.39.0/src/alignment/pairwise/mod.rs","byte_start":25507,"byte_end":25525,"line_start":143,"line_end":143,"column_start":1,"column_end":19}},{"value":"/         Match,","span":{"file_name":"/Users/shelwitz/.cargo/registry/src/github.com-1ecc6299db9ec823/bio-0.39.0/src/alignment/pairwise/mod.rs","byte_start":25526,"byte_end":25544,"line_start":144,"line_end":144,"column_start":1,"column_end":19}},{"value":"/         Match,","span":{"file_name":"/Users/shelwitz/.cargo/registry/src/github.com-1ecc6299db9ec823/bio-0.39.0/src/alignment/pairwise/mod.rs","byte_start":25545,"byte_end":25563,"line_start":145,"line_end":145,"column_start":1,"column_end":19}},{"value":"/         Match,","span":{"file_name":"/Users/shelwitz/.cargo/registry/src/github.com-1ecc6299db9ec823/bio-0.39.0/src/alignment/pairwise/mod.rs","byte_start":25564,"byte_end":25582,"line_start":146,"line_end":146,"column_start":1,"column_end":19}},{"value":"/         Match,","span":{"file_name":"/Users/shelwitz/.cargo/registry/src/github.com-1ecc6299db9ec823/bio-0.39.0/src/alignment/pairwise/mod.rs","byte_start":25583,"byte_end":25601,"line_start":147,"line_end":147,"column_start":1,"column_end":19}},{"value":"/         Yclip(4)","span":{"file_name":"/Users/shelwitz/.cargo/registry/src/github.com-1ecc6299db9ec823/bio-0.39.0/src/alignment/pairwise/mod.rs","byte_start":25602,"byte_end":25622,"line_start":148,"line_end":148,"column_start":1,"column_end":21}},{"value":"/     ]","span":{"file_name":"/Users/shelwitz/.cargo/registry/src/github.com-1ecc6299db9ec823/bio-0.39.0/src/alignment/pairwise/mod.rs","byte_start":25623,"byte_end":25632,"line_start":149,"line_end":149,"column_start":1,"column_end":10}},{"value":"/ );","span":{"file_name":"/Users/shelwitz/.cargo/registry/src/github.com-1ecc6299db9ec823/bio-0.39.0/src/alignment/pairwise/mod.rs","byte_start":25633,"byte_end":25639,"line_start":150,"line_end":150,"column_start":1,"column_end":7}},{"value":"/ ```","span":{"file_name":"/Users/shelwitz/.cargo/registry/src/github.com-1ecc6299db9ec823/bio-0.39.0/src/alignment/pairwise/mod.rs","byte_start":25640,"byte_end":25647,"line_start":151,"line_end":151,"column_start":1,"column_end":8}}]},{"kind":"Mod","id":{"krate":0,"index":50},"span":{"file_name":"/Users/shelwitz/.cargo/registry/src/github.com-1ecc6299db9ec823/bio-0.39.0/src/alignment/pairwise/banded.rs","byte_start":0,"byte_end":0,"line_start":1,"line_end":1,"column_start":1,"column_end":1},"name":"banded","qualname":"::alignment::pairwise::banded","value":"/Users/shelwitz/.cargo/registry/src/github.com-1ecc6299db9ec823/bio-0.39.0/src/alignment/pairwise/banded.rs","parent":null,"children":[{"krate":0,"index":51},{"krate":0,"index":52},{"krate":0,"index":55},{"krate":0,"index":58},{"krate":0,"index":61},{"krate":0,"index":62},{"krate":0,"index":65},{"krate":0,"index":68},{"krate":0,"index":71},{"krate":0,"index":74},{"krate":0,"index":77},{"krate":0,"index":78},{"krate":0,"index":81},{"krate":0,"index":84},{"krate":0,"index":87},{"krate":0,"index":88},{"krate":0,"index":89},{"krate":0,"index":105},{"krate":0,"index":106},{"krate":0,"index":125},{"krate":0,"index":127},{"krate":0,"index":3322},{"krate":0,"index":3326},{"krate":0,"index":3328},{"krate":0,"index":129}],"decl_id":null,"docs":" Banded Smith-Waterman alignment for fast comparison of long strings.\n Use sparse dynamic programming to find a 'backbone' alignment from exact\n k-mer matches, then compute the SW alignment in a 'band' surrounding the\n backbone, with a configurable width w. This method is not guaranteed\n to recover the Smith-Waterman alignment, but will usually find the same\n alignment if a) there is a reasonable density of exact k-mer matches\n between the sequences, and b) the width parameter w is larger than the\n excursion of the alignment path from diagonal between successive kmer\n matches.  This technique is employed in long-read aligners (e.g. BLASR and BWA)\n to drastically reduce runtime compared to Smith Waterman.\n Complexity roughly O(min(m,n) * w)","sig":null,"attributes":[{"value":"/ Banded Smith-Waterman alignment for fast comparison of long strings.","span":{"file_name":"/Users/shelwitz/.cargo/registry/src/github.com-1ecc6299db9ec823/bio-0.39.0/src/alignment/pairwise/banded.rs","byte_start":79483,"byte_end":79555,"line_start":6,"line_end":6,"column_start":1,"column_end":73}},{"value":"/ Use sparse dynamic programming to find a 'backbone' alignment from exact","span":{"file_name":"/Users/shelwitz/.cargo/registry/src/github.com-1ecc6299db9ec823/bio-0.39.0/src/alignment/pairwise/banded.rs","byte_start":79556,"byte_end":79632,"line_start":7,"line_end":7,"column_start":1,"column_end":77}},{"value":"/ k-mer matches, then compute the SW alignment in a 'band' surrounding the","span":{"file_name":"/Users/shelwitz/.cargo/registry/src/github.com-1ecc6299db9ec823/bio-0.39.0/src/alignment/pairwise/banded.rs","byte_start":79633,"byte_end":79709,"line_start":8,"line_end":8,"column_start":1,"column_end":77}},{"value":"/ backbone, with a configurable width w. This method is not guaranteed","span":{"file_name":"/Users/shelwitz/.cargo/registry/src/github.com-1ecc6299db9ec823/bio-0.39.0/src/alignment/pairwise/banded.rs","byte_start":79710,"byte_end":79782,"line_start":9,"line_end":9,"column_start":1,"column_end":73}},{"value":"/ to recover the Smith-Waterman alignment, but will usually find the same","span":{"file_name":"/Users/shelwitz/.cargo/registry/src/github.com-1ecc6299db9ec823/bio-0.39.0/src/alignment/pairwise/banded.rs","byte_start":79783,"byte_end":79858,"line_start":10,"line_end":10,"column_start":1,"column_end":76}},{"value":"/ alignment if a) there is a reasonable density of exact k-mer matches","span":{"file_name":"/Users/shelwitz/.cargo/registry/src/github.com-1ecc6299db9ec823/bio-0.39.0/src/alignment/pairwise/banded.rs","byte_start":79859,"byte_end":79931,"line_start":11,"line_end":11,"column_start":1,"column_end":73}},{"value":"/ between the sequences, and b) the width parameter w is larger than the","span":{"file_name":"/Users/shelwitz/.cargo/registry/src/github.com-1ecc6299db9ec823/bio-0.39.0/src/alignment/pairwise/banded.rs","byte_start":79932,"byte_end":80006,"line_start":12,"line_end":12,"column_start":1,"column_end":75}},{"value":"/ excursion of the alignment path from diagonal between successive kmer","span":{"file_name":"/Users/shelwitz/.cargo/registry/src/github.com-1ecc6299db9ec823/bio-0.39.0/src/alignment/pairwise/banded.rs","byte_start":80007,"byte_end":80080,"line_start":13,"line_end":13,"column_start":1,"column_end":74}},{"value":"/ matches.  This technique is employed in long-read aligners (e.g. BLASR and BWA)","span":{"file_name":"/Users/shelwitz/.cargo/registry/src/github.com-1ecc6299db9ec823/bio-0.39.0/src/alignment/pairwise/banded.rs","byte_start":80081,"byte_end":80164,"line_start":14,"line_end":14,"column_start":1,"column_end":84}},{"value":"/ to drastically reduce runtime compared to Smith Waterman.","span":{"file_name":"/Users/shelwitz/.cargo/registry/src/github.com-1ecc6299db9ec823/bio-0.39.0/src/alignment/pairwise/banded.rs","byte_start":80165,"byte_end":80226,"line_start":15,"line_end":15,"column_start":1,"column_end":62}},{"value":"/ Complexity roughly O(min(m,n) * w)","span":{"file_name":"/Users/shelwitz/.cargo/registry/src/github.com-1ecc6299db9ec823/bio-0.39.0/src/alignment/pairwise/banded.rs","byte_start":80227,"byte_end":80265,"line_start":16,"line_end":16,"column_start":1,"column_end":39}},{"value":"/","span":{"file_name":"/Users/shelwitz/.cargo/registry/src/github.com-1ecc6299db9ec823/bio-0.39.0/src/alignment/pairwise/banded.rs","byte_start":80266,"byte_end":80269,"line_start":17,"line_end":17,"column_start":1,"column_end":4}},{"value":"/ # Example","span":{"file_name":"/Users/shelwitz/.cargo/registry/src/github.com-1ecc6299db9ec823/bio-0.39.0/src/alignment/pairwise/banded.rs","byte_start":80270,"byte_end":80283,"line_start":18,"line_end":18,"column_start":1,"column_end":14}},{"value":"/","span":{"file_name":"/Users/shelwitz/.cargo/registry/src/github.com-1ecc6299db9ec823/bio-0.39.0/src/alignment/pairwise/banded.rs","byte_start":80284,"byte_end":80287,"line_start":19,"line_end":19,"column_start":1,"column_end":4}},{"value":"/ ```","span":{"file_name":"/Users/shelwitz/.cargo/registry/src/github.com-1ecc6299db9ec823/bio-0.39.0/src/alignment/pairwise/banded.rs","byte_start":80288,"byte_end":80295,"line_start":20,"line_end":20,"column_start":1,"column_end":8}},{"value":"/ use bio::alignment::pairwise::banded::*;","span":{"file_name":"/Users/shelwitz/.cargo/registry/src/github.com-1ecc6299db9ec823/bio-0.39.0/src/alignment/pairwise/banded.rs","byte_start":80296,"byte_end":80340,"line_start":21,"line_end":21,"column_start":1,"column_end":45}},{"value":"/ use bio::alignment::pairwise::{Scoring, MIN_SCORE};","span":{"file_name":"/Users/shelwitz/.cargo/registry/src/github.com-1ecc6299db9ec823/bio-0.39.0/src/alignment/pairwise/banded.rs","byte_start":80341,"byte_end":80396,"line_start":22,"line_end":22,"column_start":1,"column_end":56}},{"value":"/ use bio::alignment::sparse::hash_kmers;","span":{"file_name":"/Users/shelwitz/.cargo/registry/src/github.com-1ecc6299db9ec823/bio-0.39.0/src/alignment/pairwise/banded.rs","byte_start":80397,"byte_end":80440,"line_start":23,"line_end":23,"column_start":1,"column_end":44}},{"value":"/ use bio::alignment::AlignmentOperation::*;","span":{"file_name":"/Users/shelwitz/.cargo/registry/src/github.com-1ecc6299db9ec823/bio-0.39.0/src/alignment/pairwise/banded.rs","byte_start":80441,"byte_end":80487,"line_start":24,"line_end":24,"column_start":1,"column_end":47}},{"value":"/ use std::iter::repeat;","span":{"file_name":"/Users/shelwitz/.cargo/registry/src/github.com-1ecc6299db9ec823/bio-0.39.0/src/alignment/pairwise/banded.rs","byte_start":80488,"byte_end":80514,"line_start":25,"line_end":25,"column_start":1,"column_end":27}},{"value":"/","span":{"file_name":"/Users/shelwitz/.cargo/registry/src/github.com-1ecc6299db9ec823/bio-0.39.0/src/alignment/pairwise/banded.rs","byte_start":80515,"byte_end":80518,"line_start":26,"line_end":26,"column_start":1,"column_end":4}},{"value":"/ let x = b\"AGCACACGTGTGCGCTATACAGTAAGTAGTAGTACACGTGTCACAGTTGTACTAGCATGAC\";","span":{"file_name":"/Users/shelwitz/.cargo/registry/src/github.com-1ecc6299db9ec823/bio-0.39.0/src/alignment/pairwise/banded.rs","byte_start":80519,"byte_end":80596,"line_start":27,"line_end":27,"column_start":1,"column_end":78}},{"value":"/ let y = b\"AGCACACGTGTGCGCTATACAGTACACGTGTCACAGTTGTACTAGCATGAC\";","span":{"file_name":"/Users/shelwitz/.cargo/registry/src/github.com-1ecc6299db9ec823/bio-0.39.0/src/alignment/pairwise/banded.rs","byte_start":80597,"byte_end":80664,"line_start":28,"line_end":28,"column_start":1,"column_end":68}},{"value":"/ let score = |a: u8, b: u8| if a == b { 1i32 } else { -1i32 };","span":{"file_name":"/Users/shelwitz/.cargo/registry/src/github.com-1ecc6299db9ec823/bio-0.39.0/src/alignment/pairwise/banded.rs","byte_start":80665,"byte_end":80730,"line_start":29,"line_end":29,"column_start":1,"column_end":66}},{"value":"/ let k = 8; // kmer match length","span":{"file_name":"/Users/shelwitz/.cargo/registry/src/github.com-1ecc6299db9ec823/bio-0.39.0/src/alignment/pairwise/banded.rs","byte_start":80731,"byte_end":80766,"line_start":30,"line_end":30,"column_start":1,"column_end":36}},{"value":"/ let w = 6; // Window size for creating the band","span":{"file_name":"/Users/shelwitz/.cargo/registry/src/github.com-1ecc6299db9ec823/bio-0.39.0/src/alignment/pairwise/banded.rs","byte_start":80767,"byte_end":80818,"line_start":31,"line_end":31,"column_start":1,"column_end":52}},{"value":"/ let mut aligner = Aligner::new(-5, -1, score, k, w);","span":{"file_name":"/Users/shelwitz/.cargo/registry/src/github.com-1ecc6299db9ec823/bio-0.39.0/src/alignment/pairwise/banded.rs","byte_start":80819,"byte_end":80875,"line_start":32,"line_end":32,"column_start":1,"column_end":57}},{"value":"/ let alignment = aligner.local(x, y);","span":{"file_name":"/Users/shelwitz/.cargo/registry/src/github.com-1ecc6299db9ec823/bio-0.39.0/src/alignment/pairwise/banded.rs","byte_start":80876,"byte_end":80916,"line_start":33,"line_end":33,"column_start":1,"column_end":41}},{"value":"/ // aligner.global(x, y), aligner.semiglobal(x, y) are also supported","span":{"file_name":"/Users/shelwitz/.cargo/registry/src/github.com-1ecc6299db9ec823/bio-0.39.0/src/alignment/pairwise/banded.rs","byte_start":80917,"byte_end":80989,"line_start":34,"line_end":34,"column_start":1,"column_end":73}},{"value":"/ assert_eq!(alignment.ystart, 0);","span":{"file_name":"/Users/shelwitz/.cargo/registry/src/github.com-1ecc6299db9ec823/bio-0.39.0/src/alignment/pairwise/banded.rs","byte_start":80990,"byte_end":81026,"line_start":35,"line_end":35,"column_start":1,"column_end":37}},{"value":"/ assert_eq!(alignment.xstart, 0);","span":{"file_name":"/Users/shelwitz/.cargo/registry/src/github.com-1ecc6299db9ec823/bio-0.39.0/src/alignment/pairwise/banded.rs","byte_start":81027,"byte_end":81063,"line_start":36,"line_end":36,"column_start":1,"column_end":37}},{"value":"/","span":{"file_name":"/Users/shelwitz/.cargo/registry/src/github.com-1ecc6299db9ec823/bio-0.39.0/src/alignment/pairwise/banded.rs","byte_start":81064,"byte_end":81067,"line_start":37,"line_end":37,"column_start":1,"column_end":4}},{"value":"/ // For cases where the reference is reused multiple times, we can invoke the","span":{"file_name":"/Users/shelwitz/.cargo/registry/src/github.com-1ecc6299db9ec823/bio-0.39.0/src/alignment/pairwise/banded.rs","byte_start":81068,"byte_end":81148,"line_start":38,"line_end":38,"column_start":1,"column_end":81}},{"value":"/ // pre-hashed version of the solver","span":{"file_name":"/Users/shelwitz/.cargo/registry/src/github.com-1ecc6299db9ec823/bio-0.39.0/src/alignment/pairwise/banded.rs","byte_start":81149,"byte_end":81188,"line_start":39,"line_end":39,"column_start":1,"column_end":40}},{"value":"/ let x = b\"AGCACAAGTGTGCGCTATACAGGAAGTAGGAGTACACGTGTCA\";","span":{"file_name":"/Users/shelwitz/.cargo/registry/src/github.com-1ecc6299db9ec823/bio-0.39.0/src/alignment/pairwise/banded.rs","byte_start":81189,"byte_end":81248,"line_start":40,"line_end":40,"column_start":1,"column_end":60}},{"value":"/ let y = b\"CAGTTGTACTAGCATGACCAGTTGTACTAGCATGACAGCACACGTGTGCGCTATACAGTAAGTAGTAGTACACGTGTCA\\","span":{"file_name":"/Users/shelwitz/.cargo/registry/src/github.com-1ecc6299db9ec823/bio-0.39.0/src/alignment/pairwise/banded.rs","byte_start":81249,"byte_end":81343,"line_start":41,"line_end":41,"column_start":1,"column_end":95}},{"value":"/     CAGTTGTACTAGCATGACCAGTTGTACTAGCATGAC\";","span":{"file_name":"/Users/shelwitz/.cargo/registry/src/github.com-1ecc6299db9ec823/bio-0.39.0/src/alignment/pairwise/banded.rs","byte_start":81344,"byte_end":81390,"line_start":42,"line_end":42,"column_start":1,"column_end":47}},{"value":"/ let y_kmers_hash = hash_kmers(y, k);","span":{"file_name":"/Users/shelwitz/.cargo/registry/src/github.com-1ecc6299db9ec823/bio-0.39.0/src/alignment/pairwise/banded.rs","byte_start":81391,"byte_end":81431,"line_start":43,"line_end":43,"column_start":1,"column_end":41}},{"value":"/ let alignment = aligner.semiglobal_with_prehash(x, y, &y_kmers_hash);","span":{"file_name":"/Users/shelwitz/.cargo/registry/src/github.com-1ecc6299db9ec823/bio-0.39.0/src/alignment/pairwise/banded.rs","byte_start":81432,"byte_end":81505,"line_start":44,"line_end":44,"column_start":1,"column_end":74}},{"value":"/ assert_eq!(alignment.score, 37);","span":{"file_name":"/Users/shelwitz/.cargo/registry/src/github.com-1ecc6299db9ec823/bio-0.39.0/src/alignment/pairwise/banded.rs","byte_start":81506,"byte_end":81542,"line_start":45,"line_end":45,"column_start":1,"column_end":37}},{"value":"/","span":{"file_name":"/Users/shelwitz/.cargo/registry/src/github.com-1ecc6299db9ec823/bio-0.39.0/src/alignment/pairwise/banded.rs","byte_start":81543,"byte_end":81546,"line_start":46,"line_end":46,"column_start":1,"column_end":4}},{"value":"/ // In addition to the standard modes (Global, Semiglobal and Local), a custom alignment","span":{"file_name":"/Users/shelwitz/.cargo/registry/src/github.com-1ecc6299db9ec823/bio-0.39.0/src/alignment/pairwise/banded.rs","byte_start":81547,"byte_end":81638,"line_start":47,"line_end":47,"column_start":1,"column_end":92}},{"value":"/ // mode is supported which supports a user-specified clipping penalty. Clipping is a","span":{"file_name":"/Users/shelwitz/.cargo/registry/src/github.com-1ecc6299db9ec823/bio-0.39.0/src/alignment/pairwise/banded.rs","byte_start":81639,"byte_end":81727,"line_start":48,"line_end":48,"column_start":1,"column_end":89}},{"value":"/ // special boundary condition where you are allowed to clip off the beginning/end of","span":{"file_name":"/Users/shelwitz/.cargo/registry/src/github.com-1ecc6299db9ec823/bio-0.39.0/src/alignment/pairwise/banded.rs","byte_start":81728,"byte_end":81816,"line_start":49,"line_end":49,"column_start":1,"column_end":89}},{"value":"/ // the sequence for a fixed penalty. See bio::alignment::pairwise for a more detailed","span":{"file_name":"/Users/shelwitz/.cargo/registry/src/github.com-1ecc6299db9ec823/bio-0.39.0/src/alignment/pairwise/banded.rs","byte_start":81817,"byte_end":81906,"line_start":50,"line_end":50,"column_start":1,"column_end":90}},{"value":"/ // explanation","span":{"file_name":"/Users/shelwitz/.cargo/registry/src/github.com-1ecc6299db9ec823/bio-0.39.0/src/alignment/pairwise/banded.rs","byte_start":81907,"byte_end":81925,"line_start":51,"line_end":51,"column_start":1,"column_end":19}},{"value":"/","span":{"file_name":"/Users/shelwitz/.cargo/registry/src/github.com-1ecc6299db9ec823/bio-0.39.0/src/alignment/pairwise/banded.rs","byte_start":81926,"byte_end":81929,"line_start":52,"line_end":52,"column_start":1,"column_end":4}},{"value":"/ // The following example considers a modification of the semiglobal mode where you are allowed","span":{"file_name":"/Users/shelwitz/.cargo/registry/src/github.com-1ecc6299db9ec823/bio-0.39.0/src/alignment/pairwise/banded.rs","byte_start":81930,"byte_end":82028,"line_start":53,"line_end":53,"column_start":1,"column_end":99}},{"value":"/ // to skip a prefix of the target sequence x, for a penalty of -10, but you have to consume","span":{"file_name":"/Users/shelwitz/.cargo/registry/src/github.com-1ecc6299db9ec823/bio-0.39.0/src/alignment/pairwise/banded.rs","byte_start":82029,"byte_end":82124,"line_start":54,"line_end":54,"column_start":1,"column_end":96}},{"value":"/ // the rest of the string in the alignment","span":{"file_name":"/Users/shelwitz/.cargo/registry/src/github.com-1ecc6299db9ec823/bio-0.39.0/src/alignment/pairwise/banded.rs","byte_start":82125,"byte_end":82171,"line_start":55,"line_end":55,"column_start":1,"column_end":47}},{"value":"/","span":{"file_name":"/Users/shelwitz/.cargo/registry/src/github.com-1ecc6299db9ec823/bio-0.39.0/src/alignment/pairwise/banded.rs","byte_start":82172,"byte_end":82175,"line_start":56,"line_end":56,"column_start":1,"column_end":4}},{"value":"/ let scoring = Scoring {","span":{"file_name":"/Users/shelwitz/.cargo/registry/src/github.com-1ecc6299db9ec823/bio-0.39.0/src/alignment/pairwise/banded.rs","byte_start":82176,"byte_end":82203,"line_start":57,"line_end":57,"column_start":1,"column_end":28}},{"value":"/     gap_open: -5,","span":{"file_name":"/Users/shelwitz/.cargo/registry/src/github.com-1ecc6299db9ec823/bio-0.39.0/src/alignment/pairwise/banded.rs","byte_start":82204,"byte_end":82225,"line_start":58,"line_end":58,"column_start":1,"column_end":22}},{"value":"/     gap_extend: -1,","span":{"file_name":"/Users/shelwitz/.cargo/registry/src/github.com-1ecc6299db9ec823/bio-0.39.0/src/alignment/pairwise/banded.rs","byte_start":82226,"byte_end":82249,"line_start":59,"line_end":59,"column_start":1,"column_end":24}},{"value":"/     match_fn: |a: u8, b: u8| if a == b { 1i32 } else { -3i32 },","span":{"file_name":"/Users/shelwitz/.cargo/registry/src/github.com-1ecc6299db9ec823/bio-0.39.0/src/alignment/pairwise/banded.rs","byte_start":82250,"byte_end":82317,"line_start":60,"line_end":60,"column_start":1,"column_end":68}},{"value":"/     match_scores: Some((1, -3)),","span":{"file_name":"/Users/shelwitz/.cargo/registry/src/github.com-1ecc6299db9ec823/bio-0.39.0/src/alignment/pairwise/banded.rs","byte_start":82318,"byte_end":82354,"line_start":61,"line_end":61,"column_start":1,"column_end":37}},{"value":"/     xclip_prefix: -10,","span":{"file_name":"/Users/shelwitz/.cargo/registry/src/github.com-1ecc6299db9ec823/bio-0.39.0/src/alignment/pairwise/banded.rs","byte_start":82355,"byte_end":82381,"line_start":62,"line_end":62,"column_start":1,"column_end":27}},{"value":"/     xclip_suffix: MIN_SCORE,","span":{"file_name":"/Users/shelwitz/.cargo/registry/src/github.com-1ecc6299db9ec823/bio-0.39.0/src/alignment/pairwise/banded.rs","byte_start":82382,"byte_end":82414,"line_start":63,"line_end":63,"column_start":1,"column_end":33}},{"value":"/     yclip_prefix: 0,","span":{"file_name":"/Users/shelwitz/.cargo/registry/src/github.com-1ecc6299db9ec823/bio-0.39.0/src/alignment/pairwise/banded.rs","byte_start":82415,"byte_end":82439,"line_start":64,"line_end":64,"column_start":1,"column_end":25}},{"value":"/     yclip_suffix: 0,","span":{"file_name":"/Users/shelwitz/.cargo/registry/src/github.com-1ecc6299db9ec823/bio-0.39.0/src/alignment/pairwise/banded.rs","byte_start":82440,"byte_end":82464,"line_start":65,"line_end":65,"column_start":1,"column_end":25}},{"value":"/ };","span":{"file_name":"/Users/shelwitz/.cargo/registry/src/github.com-1ecc6299db9ec823/bio-0.39.0/src/alignment/pairwise/banded.rs","byte_start":82465,"byte_end":82471,"line_start":66,"line_end":66,"column_start":1,"column_end":7}},{"value":"/ let x = b\"GGGGGGACGTACGTACGTGTGCATCATCATGTGCGTATCATAGATAGATGTAGATGATCCACAGT\";","span":{"file_name":"/Users/shelwitz/.cargo/registry/src/github.com-1ecc6299db9ec823/bio-0.39.0/src/alignment/pairwise/banded.rs","byte_start":82472,"byte_end":82553,"line_start":67,"line_end":67,"column_start":1,"column_end":82}},{"value":"/ let y = b\"AAAAACGTACGTACGTGTGCATCATCATGTGCGTATCATAGATAGATGTAGATGATCCACAGTAAAA\";","span":{"file_name":"/Users/shelwitz/.cargo/registry/src/github.com-1ecc6299db9ec823/bio-0.39.0/src/alignment/pairwise/banded.rs","byte_start":82554,"byte_end":82637,"line_start":68,"line_end":68,"column_start":1,"column_end":84}},{"value":"/ let mut aligner = Aligner::with_capacity_and_scoring(x.len(), y.len(), scoring, k, w);","span":{"file_name":"/Users/shelwitz/.cargo/registry/src/github.com-1ecc6299db9ec823/bio-0.39.0/src/alignment/pairwise/banded.rs","byte_start":82638,"byte_end":82728,"line_start":69,"line_end":69,"column_start":1,"column_end":91}},{"value":"/ let alignment = aligner.custom(x, y);","span":{"file_name":"/Users/shelwitz/.cargo/registry/src/github.com-1ecc6299db9ec823/bio-0.39.0/src/alignment/pairwise/banded.rs","byte_start":82729,"byte_end":82770,"line_start":70,"line_end":70,"column_start":1,"column_end":42}},{"value":"/ println!(\"{}\", alignment.pretty(x, y));","span":{"file_name":"/Users/shelwitz/.cargo/registry/src/github.com-1ecc6299db9ec823/bio-0.39.0/src/alignment/pairwise/banded.rs","byte_start":82771,"byte_end":82814,"line_start":71,"line_end":71,"column_start":1,"column_end":44}},{"value":"/ assert_eq!(alignment.score, 49);","span":{"file_name":"/Users/shelwitz/.cargo/registry/src/github.com-1ecc6299db9ec823/bio-0.39.0/src/alignment/pairwise/banded.rs","byte_start":82815,"byte_end":82851,"line_start":72,"line_end":72,"column_start":1,"column_end":37}},{"value":"/ let mut correct_ops = Vec::new();","span":{"file_name":"/Users/shelwitz/.cargo/registry/src/github.com-1ecc6299db9ec823/bio-0.39.0/src/alignment/pairwise/banded.rs","byte_start":82852,"byte_end":82889,"line_start":73,"line_end":73,"column_start":1,"column_end":38}},{"value":"/ correct_ops.push(Yclip(4));","span":{"file_name":"/Users/shelwitz/.cargo/registry/src/github.com-1ecc6299db9ec823/bio-0.39.0/src/alignment/pairwise/banded.rs","byte_start":82890,"byte_end":82921,"line_start":74,"line_end":74,"column_start":1,"column_end":32}},{"value":"/ correct_ops.push(Xclip(6));","span":{"file_name":"/Users/shelwitz/.cargo/registry/src/github.com-1ecc6299db9ec823/bio-0.39.0/src/alignment/pairwise/banded.rs","byte_start":82922,"byte_end":82953,"line_start":75,"line_end":75,"column_start":1,"column_end":32}},{"value":"/ correct_ops.extend(repeat(Match).take(59));","span":{"file_name":"/Users/shelwitz/.cargo/registry/src/github.com-1ecc6299db9ec823/bio-0.39.0/src/alignment/pairwise/banded.rs","byte_start":82954,"byte_end":83001,"line_start":76,"line_end":76,"column_start":1,"column_end":48}},{"value":"/ correct_ops.push(Yclip(4));","span":{"file_name":"/Users/shelwitz/.cargo/registry/src/github.com-1ecc6299db9ec823/bio-0.39.0/src/alignment/pairwise/banded.rs","byte_start":83002,"byte_end":83033,"line_start":77,"line_end":77,"column_start":1,"column_end":32}},{"value":"/ assert_eq!(alignment.operations, correct_ops);","span":{"file_name":"/Users/shelwitz/.cargo/registry/src/github.com-1ecc6299db9ec823/bio-0.39.0/src/alignment/pairwise/banded.rs","byte_start":83034,"byte_end":83084,"line_start":78,"line_end":78,"column_start":1,"column_end":51}},{"value":"/","span":{"file_name":"/Users/shelwitz/.cargo/registry/src/github.com-1ecc6299db9ec823/bio-0.39.0/src/alignment/pairwise/banded.rs","byte_start":83085,"byte_end":83088,"line_start":79,"line_end":79,"column_start":1,"column_end":4}},{"value":"/ // aligner.custom_with_prehash(x, y, &y_kmers_hash) is also supported","span":{"file_name":"/Users/shelwitz/.cargo/registry/src/github.com-1ecc6299db9ec823/bio-0.39.0/src/alignment/pairwise/banded.rs","byte_start":83089,"byte_end":83162,"line_start":80,"line_end":80,"column_start":1,"column_end":74}},{"value":"/ ```","span":{"file_name":"/Users/shelwitz/.cargo/registry/src/github.com-1ecc6299db9ec823/bio-0.39.0/src/alignment/pairwise/banded.rs","byte_start":83163,"byte_end":83170,"line_start":81,"line_end":81,"column_start":1,"column_end":8}}]},{"kind":"Struct","id":{"krate":0,"index":89},"span":{"file_name":"/Users/shelwitz/.cargo/registry/src/github.com-1ecc6299db9ec823/bio-0.39.0/src/alignment/pairwise/banded.rs","byte_start":84450,"byte_end":84457,"line_start":111,"line_end":111,"column_start":12,"column_end":19},"name":"Aligner","qualname":"::alignment::pairwise::banded::Aligner","value":"Aligner {  }","parent":null,"children":[{"krate":0,"index":91},{"krate":0,"index":93},{"krate":0,"index":95},{"krate":0,"index":97},{"krate":0,"index":98},{"krate":0,"index":99},{"krate":0,"index":100},{"krate":0,"index":101},{"krate":0,"index":102},{"krate":0,"index":103},{"krate":0,"index":104}],"decl_id":null,"docs":" A banded implementation of Smith-Waterman aligner (SWA).\n Unlike the full SWA, this implementation computes the alignment between a pair of sequences\n only inside a 'band' withing the dynamic programming matrix. The band is constructed using the\n Sparse DP routine (see sparse::sdpkpp), which uses kmer matches to build the best common\n subsequence (including gap penalties) between the two strings. The band is constructed around\n this subsequence (using the window length 'w'), filling in the gaps.","sig":null,"attributes":[{"value":"/ A banded implementation of Smith-Waterman aligner (SWA).","span":{"file_name":"/Users/shelwitz/.cargo/registry/src/github.com-1ecc6299db9ec823/bio-0.39.0/src/alignment/pairwise/banded.rs","byte_start":83528,"byte_end":83588,"line_start":97,"line_end":97,"column_start":1,"column_end":61}},{"value":"/ Unlike the full SWA, this implementation computes the alignment between a pair of sequences","span":{"file_name":"/Users/shelwitz/.cargo/registry/src/github.com-1ecc6299db9ec823/bio-0.39.0/src/alignment/pairwise/banded.rs","byte_start":83589,"byte_end":83684,"line_start":98,"line_end":98,"column_start":1,"column_end":96}},{"value":"/ only inside a 'band' withing the dynamic programming matrix. The band is constructed using the","span":{"file_name":"/Users/shelwitz/.cargo/registry/src/github.com-1ecc6299db9ec823/bio-0.39.0/src/alignment/pairwise/banded.rs","byte_start":83685,"byte_end":83783,"line_start":99,"line_end":99,"column_start":1,"column_end":99}},{"value":"/ Sparse DP routine (see sparse::sdpkpp), which uses kmer matches to build the best common","span":{"file_name":"/Users/shelwitz/.cargo/registry/src/github.com-1ecc6299db9ec823/bio-0.39.0/src/alignment/pairwise/banded.rs","byte_start":83784,"byte_end":83876,"line_start":100,"line_end":100,"column_start":1,"column_end":93}},{"value":"/ subsequence (including gap penalties) between the two strings. The band is constructed around","span":{"file_name":"/Users/shelwitz/.cargo/registry/src/github.com-1ecc6299db9ec823/bio-0.39.0/src/alignment/pairwise/banded.rs","byte_start":83877,"byte_end":83974,"line_start":101,"line_end":101,"column_start":1,"column_end":98}},{"value":"/ this subsequence (using the window length 'w'), filling in the gaps.","span":{"file_name":"/Users/shelwitz/.cargo/registry/src/github.com-1ecc6299db9ec823/bio-0.39.0/src/alignment/pairwise/banded.rs","byte_start":83975,"byte_end":84047,"line_start":102,"line_end":102,"column_start":1,"column_end":73}},{"value":"/","span":{"file_name":"/Users/shelwitz/.cargo/registry/src/github.com-1ecc6299db9ec823/bio-0.39.0/src/alignment/pairwise/banded.rs","byte_start":84048,"byte_end":84051,"line_start":103,"line_end":103,"column_start":1,"column_end":4}},{"value":"/ In the case where there are no k-mer matches, the  aligner will fall back to a full alignment,","span":{"file_name":"/Users/shelwitz/.cargo/registry/src/github.com-1ecc6299db9ec823/bio-0.39.0/src/alignment/pairwise/banded.rs","byte_start":84052,"byte_end":84150,"line_start":104,"line_end":104,"column_start":1,"column_end":99}},{"value":"/ by setting the band to contain the full matrix.","span":{"file_name":"/Users/shelwitz/.cargo/registry/src/github.com-1ecc6299db9ec823/bio-0.39.0/src/alignment/pairwise/banded.rs","byte_start":84151,"byte_end":84202,"line_start":105,"line_end":105,"column_start":1,"column_end":52}},{"value":"/","span":{"file_name":"/Users/shelwitz/.cargo/registry/src/github.com-1ecc6299db9ec823/bio-0.39.0/src/alignment/pairwise/banded.rs","byte_start":84203,"byte_end":84206,"line_start":106,"line_end":106,"column_start":1,"column_end":4}},{"value":"/ Banded aligner will proceed to compute the alignment only when the total number of cells","span":{"file_name":"/Users/shelwitz/.cargo/registry/src/github.com-1ecc6299db9ec823/bio-0.39.0/src/alignment/pairwise/banded.rs","byte_start":84207,"byte_end":84299,"line_start":107,"line_end":107,"column_start":1,"column_end":93}},{"value":"/ in the band is less than MAX_CELLS (currently set to 10 million), otherwise it returns an","span":{"file_name":"/Users/shelwitz/.cargo/registry/src/github.com-1ecc6299db9ec823/bio-0.39.0/src/alignment/pairwise/banded.rs","byte_start":84300,"byte_end":84393,"line_start":108,"line_end":108,"column_start":1,"column_end":94}},{"value":"/ empty alignment","span":{"file_name":"/Users/shelwitz/.cargo/registry/src/github.com-1ecc6299db9ec823/bio-0.39.0/src/alignment/pairwise/banded.rs","byte_start":84394,"byte_end":84413,"line_start":109,"line_end":109,"column_start":1,"column_end":20}},{"value":"allow(non_snake_case)","span":{"file_name":"/Users/shelwitz/.cargo/registry/src/github.com-1ecc6299db9ec823/bio-0.39.0/src/alignment/pairwise/banded.rs","byte_start":84414,"byte_end":84438,"line_start":110,"line_end":110,"column_start":1,"column_end":25}}]},{"kind":"Method","id":{"krate":0,"index":108},"span":{"file_name":"/Users/shelwitz/.cargo/registry/src/github.com-1ecc6299db9ec823/bio-0.39.0/src/alignment/pairwise/banded.rs","byte_start":85271,"byte_end":85274,"line_start":139,"line_end":139,"column_start":12,"column_end":15},"name":"new","qualname":"<Aligner<F>>::new","value":"pub fn new(i32, i32, F, usize, usize) -> Self","parent":null,"children":[],"decl_id":null,"docs":" Create new aligner instance with given gap open and gap extend penalties\n and the score function.","sig":null,"attributes":[{"value":"/ Create new aligner instance with given gap open and gap extend penalties","span":{"file_name":"/Users/shelwitz/.cargo/registry/src/github.com-1ecc6299db9ec823/bio-0.39.0/src/alignment/pairwise/banded.rs","byte_start":84779,"byte_end":84855,"line_start":129,"line_end":129,"column_start":5,"column_end":81}},{"value":"/ and the score function.","span":{"file_name":"/Users/shelwitz/.cargo/registry/src/github.com-1ecc6299db9ec823/bio-0.39.0/src/alignment/pairwise/banded.rs","byte_start":84860,"byte_end":84887,"line_start":130,"line_end":130,"column_start":5,"column_end":32}},{"value":"/","span":{"file_name":"/Users/shelwitz/.cargo/registry/src/github.com-1ecc6299db9ec823/bio-0.39.0/src/alignment/pairwise/banded.rs","byte_start":84892,"byte_end":84895,"line_start":131,"line_end":131,"column_start":5,"column_end":8}},{"value":"/ # Arguments","span":{"file_name":"/Users/shelwitz/.cargo/registry/src/github.com-1ecc6299db9ec823/bio-0.39.0/src/alignment/pairwise/banded.rs","byte_start":84900,"byte_end":84915,"line_start":132,"line_end":132,"column_start":5,"column_end":20}},{"value":"/","span":{"file_name":"/Users/shelwitz/.cargo/registry/src/github.com-1ecc6299db9ec823/bio-0.39.0/src/alignment/pairwise/banded.rs","byte_start":84920,"byte_end":84923,"line_start":133,"line_end":133,"column_start":5,"column_end":8}},{"value":"/ * `gap_open` - the score for opening a gap (should be negative)","span":{"file_name":"/Users/shelwitz/.cargo/registry/src/github.com-1ecc6299db9ec823/bio-0.39.0/src/alignment/pairwise/banded.rs","byte_start":84928,"byte_end":84995,"line_start":134,"line_end":134,"column_start":5,"column_end":72}},{"value":"/ * `gap_extend` - the score for extending a gap (should be negative)","span":{"file_name":"/Users/shelwitz/.cargo/registry/src/github.com-1ecc6299db9ec823/bio-0.39.0/src/alignment/pairwise/banded.rs","byte_start":85000,"byte_end":85071,"line_start":135,"line_end":135,"column_start":5,"column_end":76}},{"value":"/ * `match_fn` - function that returns the score for substitutions (also see bio::scores)","span":{"file_name":"/Users/shelwitz/.cargo/registry/src/github.com-1ecc6299db9ec823/bio-0.39.0/src/alignment/pairwise/banded.rs","byte_start":85076,"byte_end":85167,"line_start":136,"line_end":136,"column_start":5,"column_end":96}},{"value":"/ * `k` - kmer length used in constructing the band","span":{"file_name":"/Users/shelwitz/.cargo/registry/src/github.com-1ecc6299db9ec823/bio-0.39.0/src/alignment/pairwise/banded.rs","byte_start":85172,"byte_end":85225,"line_start":137,"line_end":137,"column_start":5,"column_end":58}},{"value":"/ * `w` - width of the band","span":{"file_name":"/Users/shelwitz/.cargo/registry/src/github.com-1ecc6299db9ec823/bio-0.39.0/src/alignment/pairwise/banded.rs","byte_start":85230,"byte_end":85259,"line_start":138,"line_end":138,"column_start":5,"column_end":34}}]},{"kind":"Method","id":{"krate":0,"index":109},"span":{"file_name":"/Users/shelwitz/.cargo/registry/src/github.com-1ecc6299db9ec823/bio-0.39.0/src/alignment/pairwise/banded.rs","byte_start":86140,"byte_end":86153,"line_start":163,"line_end":163,"column_start":12,"column_end":25},"name":"with_capacity","qualname":"<Aligner<F>>::with_capacity","value":"pub fn with_capacity(usize, usize, i32, i32, F, usize, usize) -> Self","parent":null,"children":[],"decl_id":null,"docs":" Create new aligner instance. The size hints help to\n avoid unnecessary memory allocations.","sig":null,"attributes":[{"value":"/ Create new aligner instance. The size hints help to","span":{"file_name":"/Users/shelwitz/.cargo/registry/src/github.com-1ecc6299db9ec823/bio-0.39.0/src/alignment/pairwise/banded.rs","byte_start":85577,"byte_end":85632,"line_start":151,"line_end":151,"column_start":5,"column_end":60}},{"value":"/ avoid unnecessary memory allocations.","span":{"file_name":"/Users/shelwitz/.cargo/registry/src/github.com-1ecc6299db9ec823/bio-0.39.0/src/alignment/pairwise/banded.rs","byte_start":85637,"byte_end":85678,"line_start":152,"line_end":152,"column_start":5,"column_end":46}},{"value":"/","span":{"file_name":"/Users/shelwitz/.cargo/registry/src/github.com-1ecc6299db9ec823/bio-0.39.0/src/alignment/pairwise/banded.rs","byte_start":85683,"byte_end":85686,"line_start":153,"line_end":153,"column_start":5,"column_end":8}},{"value":"/ # Arguments","span":{"file_name":"/Users/shelwitz/.cargo/registry/src/github.com-1ecc6299db9ec823/bio-0.39.0/src/alignment/pairwise/banded.rs","byte_start":85691,"byte_end":85706,"line_start":154,"line_end":154,"column_start":5,"column_end":20}},{"value":"/","span":{"file_name":"/Users/shelwitz/.cargo/registry/src/github.com-1ecc6299db9ec823/bio-0.39.0/src/alignment/pairwise/banded.rs","byte_start":85711,"byte_end":85714,"line_start":155,"line_end":155,"column_start":5,"column_end":8}},{"value":"/ * `m` - the expected size of x","span":{"file_name":"/Users/shelwitz/.cargo/registry/src/github.com-1ecc6299db9ec823/bio-0.39.0/src/alignment/pairwise/banded.rs","byte_start":85719,"byte_end":85753,"line_start":156,"line_end":156,"column_start":5,"column_end":39}},{"value":"/ * `n` - the expected size of y","span":{"file_name":"/Users/shelwitz/.cargo/registry/src/github.com-1ecc6299db9ec823/bio-0.39.0/src/alignment/pairwise/banded.rs","byte_start":85758,"byte_end":85792,"line_start":157,"line_end":157,"column_start":5,"column_end":39}},{"value":"/ * `gap_open` - the score for opening a gap (should be negative)","span":{"file_name":"/Users/shelwitz/.cargo/registry/src/github.com-1ecc6299db9ec823/bio-0.39.0/src/alignment/pairwise/banded.rs","byte_start":85797,"byte_end":85864,"line_start":158,"line_end":158,"column_start":5,"column_end":72}},{"value":"/ * `gap_extend` - the score for extending a gap (should be negative)","span":{"file_name":"/Users/shelwitz/.cargo/registry/src/github.com-1ecc6299db9ec823/bio-0.39.0/src/alignment/pairwise/banded.rs","byte_start":85869,"byte_end":85940,"line_start":159,"line_end":159,"column_start":5,"column_end":76}},{"value":"/ * `match_fn` - function that returns the score for substitutions (also see bio::scores)","span":{"file_name":"/Users/shelwitz/.cargo/registry/src/github.com-1ecc6299db9ec823/bio-0.39.0/src/alignment/pairwise/banded.rs","byte_start":85945,"byte_end":86036,"line_start":160,"line_end":160,"column_start":5,"column_end":96}},{"value":"/ * `k` - kmer length used in constructing the band","span":{"file_name":"/Users/shelwitz/.cargo/registry/src/github.com-1ecc6299db9ec823/bio-0.39.0/src/alignment/pairwise/banded.rs","byte_start":86041,"byte_end":86094,"line_start":161,"line_end":161,"column_start":5,"column_end":58}},{"value":"/ * `w` - width of the band","span":{"file_name":"/Users/shelwitz/.cargo/registry/src/github.com-1ecc6299db9ec823/bio-0.39.0/src/alignment/pairwise/banded.rs","byte_start":86099,"byte_end":86128,"line_start":162,"line_end":162,"column_start":5,"column_end":34}}]},{"kind":"Method","id":{"krate":0,"index":110},"span":{"file_name":"/Users/shelwitz/.cargo/registry/src/github.com-1ecc6299db9ec823/bio-0.39.0/src/alignment/pairwise/banded.rs","byte_start":87267,"byte_end":87292,"line_start":197,"line_end":197,"column_start":12,"column_end":37},"name":"with_capacity_and_scoring","qualname":"<Aligner<F>>::with_capacity_and_scoring","value":"pub fn with_capacity_and_scoring(usize, usize, Scoring<F>, usize, usize)\n-> Self","parent":null,"children":[],"decl_id":null,"docs":" Create new aligner instance with scoring and size hint. The size hints help to\n avoid unnecessary memory allocations.","sig":null,"attributes":[{"value":"/ Create new aligner instance with scoring and size hint. The size hints help to","span":{"file_name":"/Users/shelwitz/.cargo/registry/src/github.com-1ecc6299db9ec823/bio-0.39.0/src/alignment/pairwise/banded.rs","byte_start":86880,"byte_end":86962,"line_start":187,"line_end":187,"column_start":5,"column_end":87}},{"value":"/ avoid unnecessary memory allocations.","span":{"file_name":"/Users/shelwitz/.cargo/registry/src/github.com-1ecc6299db9ec823/bio-0.39.0/src/alignment/pairwise/banded.rs","byte_start":86967,"byte_end":87008,"line_start":188,"line_end":188,"column_start":5,"column_end":46}},{"value":"/","span":{"file_name":"/Users/shelwitz/.cargo/registry/src/github.com-1ecc6299db9ec823/bio-0.39.0/src/alignment/pairwise/banded.rs","byte_start":87013,"byte_end":87016,"line_start":189,"line_end":189,"column_start":5,"column_end":8}},{"value":"/ # Arguments","span":{"file_name":"/Users/shelwitz/.cargo/registry/src/github.com-1ecc6299db9ec823/bio-0.39.0/src/alignment/pairwise/banded.rs","byte_start":87021,"byte_end":87036,"line_start":190,"line_end":190,"column_start":5,"column_end":20}},{"value":"/","span":{"file_name":"/Users/shelwitz/.cargo/registry/src/github.com-1ecc6299db9ec823/bio-0.39.0/src/alignment/pairwise/banded.rs","byte_start":87041,"byte_end":87044,"line_start":191,"line_end":191,"column_start":5,"column_end":8}},{"value":"/ * `m` - the expected size of x","span":{"file_name":"/Users/shelwitz/.cargo/registry/src/github.com-1ecc6299db9ec823/bio-0.39.0/src/alignment/pairwise/banded.rs","byte_start":87049,"byte_end":87083,"line_start":192,"line_end":192,"column_start":5,"column_end":39}},{"value":"/ * `n` - the expected size of y","span":{"file_name":"/Users/shelwitz/.cargo/registry/src/github.com-1ecc6299db9ec823/bio-0.39.0/src/alignment/pairwise/banded.rs","byte_start":87088,"byte_end":87122,"line_start":193,"line_end":193,"column_start":5,"column_end":39}},{"value":"/ * `scoring` - the scoring struct","span":{"file_name":"/Users/shelwitz/.cargo/registry/src/github.com-1ecc6299db9ec823/bio-0.39.0/src/alignment/pairwise/banded.rs","byte_start":87127,"byte_end":87163,"line_start":194,"line_end":194,"column_start":5,"column_end":41}},{"value":"/ * `k` - kmer length used in constructing the band","span":{"file_name":"/Users/shelwitz/.cargo/registry/src/github.com-1ecc6299db9ec823/bio-0.39.0/src/alignment/pairwise/banded.rs","byte_start":87168,"byte_end":87221,"line_start":195,"line_end":195,"column_start":5,"column_end":58}},{"value":"/ * `w` - width of the band","span":{"file_name":"/Users/shelwitz/.cargo/registry/src/github.com-1ecc6299db9ec823/bio-0.39.0/src/alignment/pairwise/banded.rs","byte_start":87226,"byte_end":87255,"line_start":196,"line_end":196,"column_start":5,"column_end":34}}]},{"kind":"Method","id":{"krate":0,"index":111},"span":{"file_name":"/Users/shelwitz/.cargo/registry/src/github.com-1ecc6299db9ec823/bio-0.39.0/src/alignment/pairwise/banded.rs","byte_start":88973,"byte_end":88985,"line_start":248,"line_end":248,"column_start":12,"column_end":24},"name":"with_scoring","qualname":"<Aligner<F>>::with_scoring","value":"pub fn with_scoring(Scoring<F>, usize, usize) -> Self","parent":null,"children":[],"decl_id":null,"docs":" Create new aligner instance with scoring and size hint. The size hints help to\n avoid unnecessary memory allocations.","sig":null,"attributes":[{"value":"/ Create new aligner instance with scoring and size hint. The size hints help to","span":{"file_name":"/Users/shelwitz/.cargo/registry/src/github.com-1ecc6299db9ec823/bio-0.39.0/src/alignment/pairwise/banded.rs","byte_start":88586,"byte_end":88668,"line_start":238,"line_end":238,"column_start":5,"column_end":87}},{"value":"/ avoid unnecessary memory allocations.","span":{"file_name":"/Users/shelwitz/.cargo/registry/src/github.com-1ecc6299db9ec823/bio-0.39.0/src/alignment/pairwise/banded.rs","byte_start":88673,"byte_end":88714,"line_start":239,"line_end":239,"column_start":5,"column_end":46}},{"value":"/","span":{"file_name":"/Users/shelwitz/.cargo/registry/src/github.com-1ecc6299db9ec823/bio-0.39.0/src/alignment/pairwise/banded.rs","byte_start":88719,"byte_end":88722,"line_start":240,"line_end":240,"column_start":5,"column_end":8}},{"value":"/ # Arguments","span":{"file_name":"/Users/shelwitz/.cargo/registry/src/github.com-1ecc6299db9ec823/bio-0.39.0/src/alignment/pairwise/banded.rs","byte_start":88727,"byte_end":88742,"line_start":241,"line_end":241,"column_start":5,"column_end":20}},{"value":"/","span":{"file_name":"/Users/shelwitz/.cargo/registry/src/github.com-1ecc6299db9ec823/bio-0.39.0/src/alignment/pairwise/banded.rs","byte_start":88747,"byte_end":88750,"line_start":242,"line_end":242,"column_start":5,"column_end":8}},{"value":"/ * `m` - the expected size of x","span":{"file_name":"/Users/shelwitz/.cargo/registry/src/github.com-1ecc6299db9ec823/bio-0.39.0/src/alignment/pairwise/banded.rs","byte_start":88755,"byte_end":88789,"line_start":243,"line_end":243,"column_start":5,"column_end":39}},{"value":"/ * `n` - the expected size of y","span":{"file_name":"/Users/shelwitz/.cargo/registry/src/github.com-1ecc6299db9ec823/bio-0.39.0/src/alignment/pairwise/banded.rs","byte_start":88794,"byte_end":88828,"line_start":244,"line_end":244,"column_start":5,"column_end":39}},{"value":"/ * `scoring` - the scoring struct","span":{"file_name":"/Users/shelwitz/.cargo/registry/src/github.com-1ecc6299db9ec823/bio-0.39.0/src/alignment/pairwise/banded.rs","byte_start":88833,"byte_end":88869,"line_start":245,"line_end":245,"column_start":5,"column_end":41}},{"value":"/ * `k` - kmer length used in constructing the band","span":{"file_name":"/Users/shelwitz/.cargo/registry/src/github.com-1ecc6299db9ec823/bio-0.39.0/src/alignment/pairwise/banded.rs","byte_start":88874,"byte_end":88927,"line_start":246,"line_end":246,"column_start":5,"column_end":58}},{"value":"/ * `w` - width of the band","span":{"file_name":"/Users/shelwitz/.cargo/registry/src/github.com-1ecc6299db9ec823/bio-0.39.0/src/alignment/pairwise/banded.rs","byte_start":88932,"byte_end":88961,"line_start":247,"line_end":247,"column_start":5,"column_end":34}}]},{"kind":"Method","id":{"krate":0,"index":112},"span":{"file_name":"/Users/shelwitz/.cargo/registry/src/github.com-1ecc6299db9ec823/bio-0.39.0/src/alignment/pairwise/banded.rs","byte_start":89410,"byte_end":89425,"line_start":261,"line_end":261,"column_start":12,"column_end":27},"name":"get_mut_scoring","qualname":"<Aligner<F>>::get_mut_scoring","value":"pub fn get_mut_scoring(&mut Self) -> &mut Scoring<F>","parent":null,"children":[],"decl_id":null,"docs":" Return a mutable reference to scoring. Useful if you want to have a\n single aligner object but want to modify the scores within it for\n different cases\n","sig":null,"attributes":[{"value":"/ Return a mutable reference to scoring. Useful if you want to have a","span":{"file_name":"/Users/shelwitz/.cargo/registry/src/github.com-1ecc6299db9ec823/bio-0.39.0/src/alignment/pairwise/banded.rs","byte_start":89229,"byte_end":89300,"line_start":258,"line_end":258,"column_start":5,"column_end":76}},{"value":"/ single aligner object but want to modify the scores within it for","span":{"file_name":"/Users/shelwitz/.cargo/registry/src/github.com-1ecc6299db9ec823/bio-0.39.0/src/alignment/pairwise/banded.rs","byte_start":89305,"byte_end":89374,"line_start":259,"line_end":259,"column_start":5,"column_end":74}},{"value":"/ different cases","span":{"file_name":"/Users/shelwitz/.cargo/registry/src/github.com-1ecc6299db9ec823/bio-0.39.0/src/alignment/pairwise/banded.rs","byte_start":89379,"byte_end":89398,"line_start":260,"line_end":260,"column_start":5,"column_end":24}}]},{"kind":"Method","id":{"krate":0,"index":113},"span":{"file_name":"/Users/shelwitz/.cargo/registry/src/github.com-1ecc6299db9ec823/bio-0.39.0/src/alignment/pairwise/banded.rs","byte_start":89647,"byte_end":89653,"line_start":271,"line_end":271,"column_start":12,"column_end":18},"name":"custom","qualname":"<Aligner<F>>::custom","value":"pub fn custom(&mut Self, TextSlice, TextSlice) -> Alignment","parent":null,"children":[],"decl_id":null,"docs":" Compute the alignment with custom clip penalties","sig":null,"attributes":[{"value":"/ Compute the alignment with custom clip penalties","span":{"file_name":"/Users/shelwitz/.cargo/registry/src/github.com-1ecc6299db9ec823/bio-0.39.0/src/alignment/pairwise/banded.rs","byte_start":89495,"byte_end":89547,"line_start":265,"line_end":265,"column_start":5,"column_end":57}},{"value":"/","span":{"file_name":"/Users/shelwitz/.cargo/registry/src/github.com-1ecc6299db9ec823/bio-0.39.0/src/alignment/pairwise/banded.rs","byte_start":89552,"byte_end":89555,"line_start":266,"line_end":266,"column_start":5,"column_end":8}},{"value":"/ # Arguments","span":{"file_name":"/Users/shelwitz/.cargo/registry/src/github.com-1ecc6299db9ec823/bio-0.39.0/src/alignment/pairwise/banded.rs","byte_start":89560,"byte_end":89575,"line_start":267,"line_end":267,"column_start":5,"column_end":20}},{"value":"/","span":{"file_name":"/Users/shelwitz/.cargo/registry/src/github.com-1ecc6299db9ec823/bio-0.39.0/src/alignment/pairwise/banded.rs","byte_start":89580,"byte_end":89583,"line_start":268,"line_end":268,"column_start":5,"column_end":8}},{"value":"/ * `x` - Textslice","span":{"file_name":"/Users/shelwitz/.cargo/registry/src/github.com-1ecc6299db9ec823/bio-0.39.0/src/alignment/pairwise/banded.rs","byte_start":89588,"byte_end":89609,"line_start":269,"line_end":269,"column_start":5,"column_end":26}},{"value":"/ * `y` - Textslice","span":{"file_name":"/Users/shelwitz/.cargo/registry/src/github.com-1ecc6299db9ec823/bio-0.39.0/src/alignment/pairwise/banded.rs","byte_start":89614,"byte_end":89635,"line_start":270,"line_end":270,"column_start":5,"column_end":26}}]},{"kind":"Method","id":{"krate":0,"index":114},"span":{"file_name":"/Users/shelwitz/.cargo/registry/src/github.com-1ecc6299db9ec823/bio-0.39.0/src/alignment/pairwise/banded.rs","byte_start":90046,"byte_end":90065,"line_start":283,"line_end":283,"column_start":12,"column_end":31},"name":"custom_with_prehash","qualname":"<Aligner<F>>::custom_with_prehash","value":"pub fn custom_with_prehash(&mut Self, TextSlice, TextSlice,\n                           &HashMapFx<&[u8], Vec<u32>>) -> Alignment","parent":null,"children":[],"decl_id":null,"docs":" Compute the alignment with custom clip penalties with 'y' being pre-hashed\n (see sparse::hash_kmers)","sig":null,"attributes":[{"value":"/ Compute the alignment with custom clip penalties with 'y' being pre-hashed","span":{"file_name":"/Users/shelwitz/.cargo/registry/src/github.com-1ecc6299db9ec823/bio-0.39.0/src/alignment/pairwise/banded.rs","byte_start":89835,"byte_end":89913,"line_start":276,"line_end":276,"column_start":5,"column_end":83}},{"value":"/ (see sparse::hash_kmers)","span":{"file_name":"/Users/shelwitz/.cargo/registry/src/github.com-1ecc6299db9ec823/bio-0.39.0/src/alignment/pairwise/banded.rs","byte_start":89918,"byte_end":89946,"line_start":277,"line_end":277,"column_start":5,"column_end":33}},{"value":"/","span":{"file_name":"/Users/shelwitz/.cargo/registry/src/github.com-1ecc6299db9ec823/bio-0.39.0/src/alignment/pairwise/banded.rs","byte_start":89951,"byte_end":89954,"line_start":278,"line_end":278,"column_start":5,"column_end":8}},{"value":"/ # Arguments","span":{"file_name":"/Users/shelwitz/.cargo/registry/src/github.com-1ecc6299db9ec823/bio-0.39.0/src/alignment/pairwise/banded.rs","byte_start":89959,"byte_end":89974,"line_start":279,"line_end":279,"column_start":5,"column_end":20}},{"value":"/","span":{"file_name":"/Users/shelwitz/.cargo/registry/src/github.com-1ecc6299db9ec823/bio-0.39.0/src/alignment/pairwise/banded.rs","byte_start":89979,"byte_end":89982,"line_start":280,"line_end":280,"column_start":5,"column_end":8}},{"value":"/ * `x` - Textslice","span":{"file_name":"/Users/shelwitz/.cargo/registry/src/github.com-1ecc6299db9ec823/bio-0.39.0/src/alignment/pairwise/banded.rs","byte_start":89987,"byte_end":90008,"line_start":281,"line_end":281,"column_start":5,"column_end":26}},{"value":"/ * `y` - Textslice","span":{"file_name":"/Users/shelwitz/.cargo/registry/src/github.com-1ecc6299db9ec823/bio-0.39.0/src/alignment/pairwise/banded.rs","byte_start":90013,"byte_end":90034,"line_start":282,"line_end":282,"column_start":5,"column_end":26}}]},{"kind":"Method","id":{"krate":0,"index":115},"span":{"file_name":"/Users/shelwitz/.cargo/registry/src/github.com-1ecc6299db9ec823/bio-0.39.0/src/alignment/pairwise/banded.rs","byte_start":90690,"byte_end":90709,"line_start":302,"line_end":302,"column_start":12,"column_end":31},"name":"custom_with_matches","qualname":"<Aligner<F>>::custom_with_matches","value":"pub fn custom_with_matches(&mut Self, TextSlice, TextSlice, &[(u32, u32)])\n-> Alignment","parent":null,"children":[],"decl_id":null,"docs":" Compute the alignment with custom clip penalties with the kmer matches\n between x and y being pre-computed as a Vector of pairs (xpos, ypos)\n and sorted.","sig":null,"attributes":[{"value":"/ Compute the alignment with custom clip penalties with the kmer matches","span":{"file_name":"/Users/shelwitz/.cargo/registry/src/github.com-1ecc6299db9ec823/bio-0.39.0/src/alignment/pairwise/banded.rs","byte_start":90354,"byte_end":90428,"line_start":293,"line_end":293,"column_start":5,"column_end":79}},{"value":"/ between x and y being pre-computed as a Vector of pairs (xpos, ypos)","span":{"file_name":"/Users/shelwitz/.cargo/registry/src/github.com-1ecc6299db9ec823/bio-0.39.0/src/alignment/pairwise/banded.rs","byte_start":90433,"byte_end":90505,"line_start":294,"line_end":294,"column_start":5,"column_end":77}},{"value":"/ and sorted.","span":{"file_name":"/Users/shelwitz/.cargo/registry/src/github.com-1ecc6299db9ec823/bio-0.39.0/src/alignment/pairwise/banded.rs","byte_start":90510,"byte_end":90525,"line_start":295,"line_end":295,"column_start":5,"column_end":20}},{"value":"/","span":{"file_name":"/Users/shelwitz/.cargo/registry/src/github.com-1ecc6299db9ec823/bio-0.39.0/src/alignment/pairwise/banded.rs","byte_start":90530,"byte_end":90533,"line_start":296,"line_end":296,"column_start":5,"column_end":8}},{"value":"/ # Arguments","span":{"file_name":"/Users/shelwitz/.cargo/registry/src/github.com-1ecc6299db9ec823/bio-0.39.0/src/alignment/pairwise/banded.rs","byte_start":90538,"byte_end":90553,"line_start":297,"line_end":297,"column_start":5,"column_end":20}},{"value":"/","span":{"file_name":"/Users/shelwitz/.cargo/registry/src/github.com-1ecc6299db9ec823/bio-0.39.0/src/alignment/pairwise/banded.rs","byte_start":90558,"byte_end":90561,"line_start":298,"line_end":298,"column_start":5,"column_end":8}},{"value":"/ * `x` - Textslice","span":{"file_name":"/Users/shelwitz/.cargo/registry/src/github.com-1ecc6299db9ec823/bio-0.39.0/src/alignment/pairwise/banded.rs","byte_start":90566,"byte_end":90587,"line_start":299,"line_end":299,"column_start":5,"column_end":26}},{"value":"/ * `y` - Textslice","span":{"file_name":"/Users/shelwitz/.cargo/registry/src/github.com-1ecc6299db9ec823/bio-0.39.0/src/alignment/pairwise/banded.rs","byte_start":90592,"byte_end":90613,"line_start":300,"line_end":300,"column_start":5,"column_end":26}},{"value":"/ * `matches` - Vector of kmer matching pairs (xpos, ypos)","span":{"file_name":"/Users/shelwitz/.cargo/registry/src/github.com-1ecc6299db9ec823/bio-0.39.0/src/alignment/pairwise/banded.rs","byte_start":90618,"byte_end":90678,"line_start":301,"line_end":301,"column_start":5,"column_end":65}}]},{"kind":"Method","id":{"krate":0,"index":116},"span":{"file_name":"/Users/shelwitz/.cargo/registry/src/github.com-1ecc6299db9ec823/bio-0.39.0/src/alignment/pairwise/banded.rs","byte_start":91771,"byte_end":91799,"line_start":327,"line_end":327,"column_start":12,"column_end":40},"name":"custom_with_expanded_matches","qualname":"<Aligner<F>>::custom_with_expanded_matches","value":"pub fn custom_with_expanded_matches(&mut Self, TextSlice, TextSlice,\n                                    Vec<(u32, u32)>, Option<usize>, bool)\n-> Alignment","parent":null,"children":[],"decl_id":null,"docs":" Compute the alignment with custom clip penalties with the kmer matches\n between x and y being pre-computed as a Vector of pairs (xpos, ypos)\n and sorted. The matches are expanded diagonally in both directions\n allowing upto a user specified number of mismatches. This is useful\n in constructing the band correctly, particularly when a higher frequency\n of mismatches are expected.","sig":null,"attributes":[{"value":"/ Compute the alignment with custom clip penalties with the kmer matches","span":{"file_name":"/Users/shelwitz/.cargo/registry/src/github.com-1ecc6299db9ec823/bio-0.39.0/src/alignment/pairwise/banded.rs","byte_start":90976,"byte_end":91050,"line_start":312,"line_end":312,"column_start":5,"column_end":79}},{"value":"/ between x and y being pre-computed as a Vector of pairs (xpos, ypos)","span":{"file_name":"/Users/shelwitz/.cargo/registry/src/github.com-1ecc6299db9ec823/bio-0.39.0/src/alignment/pairwise/banded.rs","byte_start":91055,"byte_end":91127,"line_start":313,"line_end":313,"column_start":5,"column_end":77}},{"value":"/ and sorted. The matches are expanded diagonally in both directions","span":{"file_name":"/Users/shelwitz/.cargo/registry/src/github.com-1ecc6299db9ec823/bio-0.39.0/src/alignment/pairwise/banded.rs","byte_start":91132,"byte_end":91202,"line_start":314,"line_end":314,"column_start":5,"column_end":75}},{"value":"/ allowing upto a user specified number of mismatches. This is useful","span":{"file_name":"/Users/shelwitz/.cargo/registry/src/github.com-1ecc6299db9ec823/bio-0.39.0/src/alignment/pairwise/banded.rs","byte_start":91207,"byte_end":91278,"line_start":315,"line_end":315,"column_start":5,"column_end":76}},{"value":"/ in constructing the band correctly, particularly when a higher frequency","span":{"file_name":"/Users/shelwitz/.cargo/registry/src/github.com-1ecc6299db9ec823/bio-0.39.0/src/alignment/pairwise/banded.rs","byte_start":91283,"byte_end":91359,"line_start":316,"line_end":316,"column_start":5,"column_end":81}},{"value":"/ of mismatches are expected.","span":{"file_name":"/Users/shelwitz/.cargo/registry/src/github.com-1ecc6299db9ec823/bio-0.39.0/src/alignment/pairwise/banded.rs","byte_start":91364,"byte_end":91395,"line_start":317,"line_end":317,"column_start":5,"column_end":36}},{"value":"/","span":{"file_name":"/Users/shelwitz/.cargo/registry/src/github.com-1ecc6299db9ec823/bio-0.39.0/src/alignment/pairwise/banded.rs","byte_start":91400,"byte_end":91403,"line_start":318,"line_end":318,"column_start":5,"column_end":8}},{"value":"/ # Arguments","span":{"file_name":"/Users/shelwitz/.cargo/registry/src/github.com-1ecc6299db9ec823/bio-0.39.0/src/alignment/pairwise/banded.rs","byte_start":91408,"byte_end":91423,"line_start":319,"line_end":319,"column_start":5,"column_end":20}},{"value":"/","span":{"file_name":"/Users/shelwitz/.cargo/registry/src/github.com-1ecc6299db9ec823/bio-0.39.0/src/alignment/pairwise/banded.rs","byte_start":91428,"byte_end":91431,"line_start":320,"line_end":320,"column_start":5,"column_end":8}},{"value":"/ * `x` - Textslice","span":{"file_name":"/Users/shelwitz/.cargo/registry/src/github.com-1ecc6299db9ec823/bio-0.39.0/src/alignment/pairwise/banded.rs","byte_start":91436,"byte_end":91457,"line_start":321,"line_end":321,"column_start":5,"column_end":26}},{"value":"/ * `y` - Textslice","span":{"file_name":"/Users/shelwitz/.cargo/registry/src/github.com-1ecc6299db9ec823/bio-0.39.0/src/alignment/pairwise/banded.rs","byte_start":91462,"byte_end":91483,"line_start":322,"line_end":322,"column_start":5,"column_end":26}},{"value":"/ * `matches` - Vector of kmer matching pairs (xpos, ypos)","span":{"file_name":"/Users/shelwitz/.cargo/registry/src/github.com-1ecc6299db9ec823/bio-0.39.0/src/alignment/pairwise/banded.rs","byte_start":91488,"byte_end":91548,"line_start":323,"line_end":323,"column_start":5,"column_end":65}},{"value":"/ * `allowed_mismatches` - Extend the matches diagonally allowing upto","span":{"file_name":"/Users/shelwitz/.cargo/registry/src/github.com-1ecc6299db9ec823/bio-0.39.0/src/alignment/pairwise/banded.rs","byte_start":91553,"byte_end":91625,"line_start":324,"line_end":324,"column_start":5,"column_end":77}},{"value":"/ the specified number of mismatches (Option<usize>)","span":{"file_name":"/Users/shelwitz/.cargo/registry/src/github.com-1ecc6299db9ec823/bio-0.39.0/src/alignment/pairwise/banded.rs","byte_start":91630,"byte_end":91684,"line_start":325,"line_end":325,"column_start":5,"column_end":59}},{"value":"/ * `use_lcskpp_union` - Extend the results from sdpkpp using lcskpp","span":{"file_name":"/Users/shelwitz/.cargo/registry/src/github.com-1ecc6299db9ec823/bio-0.39.0/src/alignment/pairwise/banded.rs","byte_start":91689,"byte_end":91759,"line_start":326,"line_end":326,"column_start":5,"column_end":75}}]},{"kind":"Method","id":{"krate":0,"index":117},"span":{"file_name":"/Users/shelwitz/.cargo/registry/src/github.com-1ecc6299db9ec823/bio-0.39.0/src/alignment/pairwise/banded.rs","byte_start":93591,"byte_end":93613,"line_start":380,"line_end":380,"column_start":12,"column_end":34},"name":"custom_with_match_path","qualname":"<Aligner<F>>::custom_with_match_path","value":"pub fn custom_with_match_path(&mut Self, TextSlice, TextSlice, &[(u32, u32)],\n                              &[usize]) -> Alignment","parent":null,"children":[],"decl_id":null,"docs":" Compute the alignment with custom clip penalties by constructing\n a band along the `matches` as defined by `path`. This is only\n for advanced uses, where one would want to control the kmer\n backbone that is used for creating the band.","sig":null,"attributes":[{"value":"/ Compute the alignment with custom clip penalties by constructing","span":{"file_name":"/Users/shelwitz/.cargo/registry/src/github.com-1ecc6299db9ec823/bio-0.39.0/src/alignment/pairwise/banded.rs","byte_start":93030,"byte_end":93098,"line_start":368,"line_end":368,"column_start":5,"column_end":73}},{"value":"/ a band along the `matches` as defined by `path`. This is only","span":{"file_name":"/Users/shelwitz/.cargo/registry/src/github.com-1ecc6299db9ec823/bio-0.39.0/src/alignment/pairwise/banded.rs","byte_start":93103,"byte_end":93168,"line_start":369,"line_end":369,"column_start":5,"column_end":70}},{"value":"/ for advanced uses, where one would want to control the kmer","span":{"file_name":"/Users/shelwitz/.cargo/registry/src/github.com-1ecc6299db9ec823/bio-0.39.0/src/alignment/pairwise/banded.rs","byte_start":93173,"byte_end":93236,"line_start":370,"line_end":370,"column_start":5,"column_end":68}},{"value":"/ backbone that is used for creating the band.","span":{"file_name":"/Users/shelwitz/.cargo/registry/src/github.com-1ecc6299db9ec823/bio-0.39.0/src/alignment/pairwise/banded.rs","byte_start":93241,"byte_end":93289,"line_start":371,"line_end":371,"column_start":5,"column_end":53}},{"value":"/","span":{"file_name":"/Users/shelwitz/.cargo/registry/src/github.com-1ecc6299db9ec823/bio-0.39.0/src/alignment/pairwise/banded.rs","byte_start":93294,"byte_end":93297,"line_start":372,"line_end":372,"column_start":5,"column_end":8}},{"value":"/ # Arguments","span":{"file_name":"/Users/shelwitz/.cargo/registry/src/github.com-1ecc6299db9ec823/bio-0.39.0/src/alignment/pairwise/banded.rs","byte_start":93302,"byte_end":93317,"line_start":373,"line_end":373,"column_start":5,"column_end":20}},{"value":"/","span":{"file_name":"/Users/shelwitz/.cargo/registry/src/github.com-1ecc6299db9ec823/bio-0.39.0/src/alignment/pairwise/banded.rs","byte_start":93322,"byte_end":93325,"line_start":374,"line_end":374,"column_start":5,"column_end":8}},{"value":"/ * `x` - Textslice","span":{"file_name":"/Users/shelwitz/.cargo/registry/src/github.com-1ecc6299db9ec823/bio-0.39.0/src/alignment/pairwise/banded.rs","byte_start":93330,"byte_end":93351,"line_start":375,"line_end":375,"column_start":5,"column_end":26}},{"value":"/ * `y` - Textslice","span":{"file_name":"/Users/shelwitz/.cargo/registry/src/github.com-1ecc6299db9ec823/bio-0.39.0/src/alignment/pairwise/banded.rs","byte_start":93356,"byte_end":93377,"line_start":376,"line_end":376,"column_start":5,"column_end":26}},{"value":"/ * `matches` - Vector of kmer matching pairs (xpos, ypos)","span":{"file_name":"/Users/shelwitz/.cargo/registry/src/github.com-1ecc6299db9ec823/bio-0.39.0/src/alignment/pairwise/banded.rs","byte_start":93382,"byte_end":93442,"line_start":377,"line_end":377,"column_start":5,"column_end":65}},{"value":"/ * `path` - Vector of indices pointing to `matches` vector","span":{"file_name":"/Users/shelwitz/.cargo/registry/src/github.com-1ecc6299db9ec823/bio-0.39.0/src/alignment/pairwise/banded.rs","byte_start":93447,"byte_end":93508,"line_start":378,"line_end":378,"column_start":5,"column_end":66}},{"value":"/ which defines a path. The validity of the path is not checked.","span":{"file_name":"/Users/shelwitz/.cargo/registry/src/github.com-1ecc6299db9ec823/bio-0.39.0/src/alignment/pairwise/banded.rs","byte_start":93513,"byte_end":93579,"line_start":379,"line_end":379,"column_start":5,"column_end":71}}]},{"kind":"Method","id":{"krate":0,"index":119},"span":{"file_name":"/Users/shelwitz/.cargo/registry/src/github.com-1ecc6299db9ec823/bio-0.39.0/src/alignment/pairwise/banded.rs","byte_start":112897,"byte_end":112903,"line_start":864,"line_end":864,"column_start":12,"column_end":18},"name":"global","qualname":"<Aligner<F>>::global","value":"pub fn global(&mut Self, TextSlice, TextSlice) -> Alignment","parent":null,"children":[],"decl_id":null,"docs":" Calculate global alignment of x against y.\n","sig":null,"attributes":[{"value":"/ Calculate global alignment of x against y.","span":{"file_name":"/Users/shelwitz/.cargo/registry/src/github.com-1ecc6299db9ec823/bio-0.39.0/src/alignment/pairwise/banded.rs","byte_start":112839,"byte_end":112885,"line_start":863,"line_end":863,"column_start":5,"column_end":51}}]},{"kind":"Method","id":{"krate":0,"index":120},"span":{"file_name":"/Users/shelwitz/.cargo/registry/src/github.com-1ecc6299db9ec823/bio-0.39.0/src/alignment/pairwise/banded.rs","byte_start":113975,"byte_end":113985,"line_start":893,"line_end":893,"column_start":12,"column_end":22},"name":"semiglobal","qualname":"<Aligner<F>>::semiglobal","value":"pub fn semiglobal(&mut Self, TextSlice, TextSlice) -> Alignment","parent":null,"children":[],"decl_id":null,"docs":" Calculate semiglobal alignment of x against y (x is global, y is local).\n","sig":null,"attributes":[{"value":"/ Calculate semiglobal alignment of x against y (x is global, y is local).","span":{"file_name":"/Users/shelwitz/.cargo/registry/src/github.com-1ecc6299db9ec823/bio-0.39.0/src/alignment/pairwise/banded.rs","byte_start":113887,"byte_end":113963,"line_start":892,"line_end":892,"column_start":5,"column_end":81}}]},{"kind":"Method","id":{"krate":0,"index":121},"span":{"file_name":"/Users/shelwitz/.cargo/registry/src/github.com-1ecc6299db9ec823/bio-0.39.0/src/alignment/pairwise/banded.rs","byte_start":115492,"byte_end":115515,"line_start":930,"line_end":930,"column_start":12,"column_end":35},"name":"semiglobal_with_prehash","qualname":"<Aligner<F>>::semiglobal_with_prehash","value":"pub fn semiglobal_with_prehash(&mut Self, TextSlice, TextSlice,\n                               &HashMapFx<&[u8], Vec<u32>>) -> Alignment","parent":null,"children":[],"decl_id":null,"docs":" Calculate semiglobal alignment of x against y (x is global, y is local).\n This function accepts the hash map of the kmers of y. This is useful\n in cases where we are interested in repeated alignment of different\n queries against the same reference. The user can precompute the HashMap\n using sparse::hash_kmers and invoke this function to speed up the\n alignment computation.\n","sig":null,"attributes":[{"value":"/ Calculate semiglobal alignment of x against y (x is global, y is local).","span":{"file_name":"/Users/shelwitz/.cargo/registry/src/github.com-1ecc6299db9ec823/bio-0.39.0/src/alignment/pairwise/banded.rs","byte_start":115066,"byte_end":115142,"line_start":924,"line_end":924,"column_start":5,"column_end":81}},{"value":"/ This function accepts the hash map of the kmers of y. This is useful","span":{"file_name":"/Users/shelwitz/.cargo/registry/src/github.com-1ecc6299db9ec823/bio-0.39.0/src/alignment/pairwise/banded.rs","byte_start":115147,"byte_end":115219,"line_start":925,"line_end":925,"column_start":5,"column_end":77}},{"value":"/ in cases where we are interested in repeated alignment of different","span":{"file_name":"/Users/shelwitz/.cargo/registry/src/github.com-1ecc6299db9ec823/bio-0.39.0/src/alignment/pairwise/banded.rs","byte_start":115224,"byte_end":115295,"line_start":926,"line_end":926,"column_start":5,"column_end":76}},{"value":"/ queries against the same reference. The user can precompute the HashMap","span":{"file_name":"/Users/shelwitz/.cargo/registry/src/github.com-1ecc6299db9ec823/bio-0.39.0/src/alignment/pairwise/banded.rs","byte_start":115300,"byte_end":115375,"line_start":927,"line_end":927,"column_start":5,"column_end":80}},{"value":"/ using sparse::hash_kmers and invoke this function to speed up the","span":{"file_name":"/Users/shelwitz/.cargo/registry/src/github.com-1ecc6299db9ec823/bio-0.39.0/src/alignment/pairwise/banded.rs","byte_start":115380,"byte_end":115449,"line_start":928,"line_end":928,"column_start":5,"column_end":74}},{"value":"/ alignment computation.","span":{"file_name":"/Users/shelwitz/.cargo/registry/src/github.com-1ecc6299db9ec823/bio-0.39.0/src/alignment/pairwise/banded.rs","byte_start":115454,"byte_end":115480,"line_start":929,"line_end":929,"column_start":5,"column_end":31}}]},{"kind":"Method","id":{"krate":0,"index":122},"span":{"file_name":"/Users/shelwitz/.cargo/registry/src/github.com-1ecc6299db9ec823/bio-0.39.0/src/alignment/pairwise/banded.rs","byte_start":116760,"byte_end":116765,"line_start":967,"line_end":967,"column_start":12,"column_end":17},"name":"local","qualname":"<Aligner<F>>::local","value":"pub fn local(&mut Self, TextSlice, TextSlice) -> Alignment","parent":null,"children":[],"decl_id":null,"docs":" Calculate local alignment of x against y.\n","sig":null,"attributes":[{"value":"/ Calculate local alignment of x against y.","span":{"file_name":"/Users/shelwitz/.cargo/registry/src/github.com-1ecc6299db9ec823/bio-0.39.0/src/alignment/pairwise/banded.rs","byte_start":116703,"byte_end":116748,"line_start":966,"line_end":966,"column_start":5,"column_end":50}}]},{"kind":"Method","id":{"krate":0,"index":123},"span":{"file_name":"/Users/shelwitz/.cargo/registry/src/github.com-1ecc6299db9ec823/bio-0.39.0/src/alignment/pairwise/banded.rs","byte_start":117856,"byte_end":117865,"line_start":999,"line_end":999,"column_start":12,"column_end":21},"name":"visualize","qualname":"<Aligner<F>>::visualize","value":"pub fn visualize(&Self, &Alignment)","parent":null,"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[{"value":"allow(dead_code)","span":{"file_name":"/Users/shelwitz/.cargo/registry/src/github.com-1ecc6299db9ec823/bio-0.39.0/src/alignment/pairwise/banded.rs","byte_start":117825,"byte_end":117844,"line_start":998,"line_end":998,"column_start":5,"column_end":24}}]},{"kind":"Const","id":{"krate":0,"index":149},"span":{"file_name":"/Users/shelwitz/.cargo/registry/src/github.com-1ecc6299db9ec823/bio-0.39.0/src/alignment/pairwise/mod.rs","byte_start":26049,"byte_end":26058,"line_start":165,"line_end":165,"column_start":11,"column_end":20},"name":"MIN_SCORE","qualname":"::alignment::pairwise::MIN_SCORE","value":"i32","parent":null,"children":[],"decl_id":null,"docs":" Value to use as a 'negative infinity' score. Should be close to `i32::MIN`,\n but avoid underflow when used with reasonable scoring parameters or even\n adding two negative infinities. Use ~ `0.4 * i32::MIN`\n","sig":null,"attributes":[{"value":"/ Value to use as a 'negative infinity' score. Should be close to `i32::MIN`,","span":{"file_name":"/Users/shelwitz/.cargo/registry/src/github.com-1ecc6299db9ec823/bio-0.39.0/src/alignment/pairwise/mod.rs","byte_start":25823,"byte_end":25902,"line_start":162,"line_end":162,"column_start":1,"column_end":80}},{"value":"/ but avoid underflow when used with reasonable scoring parameters or even","span":{"file_name":"/Users/shelwitz/.cargo/registry/src/github.com-1ecc6299db9ec823/bio-0.39.0/src/alignment/pairwise/mod.rs","byte_start":25903,"byte_end":25979,"line_start":163,"line_end":163,"column_start":1,"column_end":77}},{"value":"/ adding two negative infinities. Use ~ `0.4 * i32::MIN`","span":{"file_name":"/Users/shelwitz/.cargo/registry/src/github.com-1ecc6299db9ec823/bio-0.39.0/src/alignment/pairwise/mod.rs","byte_start":25980,"byte_end":26038,"line_start":164,"line_end":164,"column_start":1,"column_end":59}}]},{"kind":"Trait","id":{"krate":0,"index":150},"span":{"file_name":"/Users/shelwitz/.cargo/registry/src/github.com-1ecc6299db9ec823/bio-0.39.0/src/alignment/pairwise/mod.rs","byte_start":26144,"byte_end":26153,"line_start":168,"line_end":168,"column_start":11,"column_end":20},"name":"MatchFunc","qualname":"::alignment::pairwise::MatchFunc","value":"MatchFunc","parent":null,"children":[{"krate":0,"index":151}],"decl_id":null,"docs":" Trait required to instantiate a Scoring instance\n","sig":null,"attributes":[{"value":"/ Trait required to instantiate a Scoring instance","span":{"file_name":"/Users/shelwitz/.cargo/registry/src/github.com-1ecc6299db9ec823/bio-0.39.0/src/alignment/pairwise/mod.rs","byte_start":26081,"byte_end":26133,"line_start":167,"line_end":167,"column_start":1,"column_end":53}}]},{"kind":"Method","id":{"krate":0,"index":151},"span":{"file_name":"/Users/shelwitz/.cargo/registry/src/github.com-1ecc6299db9ec823/bio-0.39.0/src/alignment/pairwise/mod.rs","byte_start":26163,"byte_end":26168,"line_start":169,"line_end":169,"column_start":8,"column_end":13},"name":"score","qualname":"::alignment::pairwise::MatchFunc::score","value":"pub fn score(&Self, u8, u8) -> i32","parent":{"krate":0,"index":150},"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Struct","id":{"krate":0,"index":3330},"span":{"file_name":"/Users/shelwitz/.cargo/registry/src/github.com-1ecc6299db9ec823/bio-0.39.0/src/alignment/pairwise/mod.rs","byte_start":26343,"byte_end":26354,"line_start":175,"line_end":175,"column_start":12,"column_end":23},"name":"MatchParams","qualname":"::alignment::pairwise::MatchParams","value":"MatchParams { match_score, mismatch_score }","parent":null,"children":[{"krate":0,"index":3331},{"krate":0,"index":3332}],"decl_id":null,"docs":" A concrete data structure which implements trait MatchFunc with constant\n match and mismatch scores\n","sig":null,"attributes":[{"value":"/ A concrete data structure which implements trait MatchFunc with constant","span":{"file_name":"/Users/shelwitz/.cargo/registry/src/github.com-1ecc6299db9ec823/bio-0.39.0/src/alignment/pairwise/mod.rs","byte_start":26201,"byte_end":26277,"line_start":172,"line_end":172,"column_start":1,"column_end":77}},{"value":"/ match and mismatch scores","span":{"file_name":"/Users/shelwitz/.cargo/registry/src/github.com-1ecc6299db9ec823/bio-0.39.0/src/alignment/pairwise/mod.rs","byte_start":26278,"byte_end":26307,"line_start":173,"line_end":173,"column_start":1,"column_end":30}}]},{"kind":"Field","id":{"krate":0,"index":3331},"span":{"file_name":"/Users/shelwitz/.cargo/registry/src/github.com-1ecc6299db9ec823/bio-0.39.0/src/alignment/pairwise/mod.rs","byte_start":26365,"byte_end":26376,"line_start":176,"line_end":176,"column_start":9,"column_end":20},"name":"match_score","qualname":"::alignment::pairwise::MatchParams::match_score","value":"i32","parent":{"krate":0,"index":3330},"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Field","id":{"krate":0,"index":3332},"span":{"file_name":"/Users/shelwitz/.cargo/registry/src/github.com-1ecc6299db9ec823/bio-0.39.0/src/alignment/pairwise/mod.rs","byte_start":26391,"byte_end":26405,"line_start":177,"line_end":177,"column_start":9,"column_end":23},"name":"mismatch_score","qualname":"::alignment::pairwise::MatchParams::mismatch_score","value":"i32","parent":{"krate":0,"index":3330},"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":153},"span":{"file_name":"/Users/shelwitz/.cargo/registry/src/github.com-1ecc6299db9ec823/bio-0.39.0/src/alignment/pairwise/mod.rs","byte_start":26710,"byte_end":26713,"line_start":187,"line_end":187,"column_start":12,"column_end":15},"name":"new","qualname":"<MatchParams>::new","value":"pub fn new(i32, i32) -> Self","parent":null,"children":[],"decl_id":null,"docs":" Create new MatchParams instance with given match and mismatch scores","sig":null,"attributes":[{"value":"/ Create new MatchParams instance with given match and mismatch scores","span":{"file_name":"/Users/shelwitz/.cargo/registry/src/github.com-1ecc6299db9ec823/bio-0.39.0/src/alignment/pairwise/mod.rs","byte_start":26438,"byte_end":26510,"line_start":181,"line_end":181,"column_start":5,"column_end":77}},{"value":"/","span":{"file_name":"/Users/shelwitz/.cargo/registry/src/github.com-1ecc6299db9ec823/bio-0.39.0/src/alignment/pairwise/mod.rs","byte_start":26515,"byte_end":26518,"line_start":182,"line_end":182,"column_start":5,"column_end":8}},{"value":"/ # Arguments","span":{"file_name":"/Users/shelwitz/.cargo/registry/src/github.com-1ecc6299db9ec823/bio-0.39.0/src/alignment/pairwise/mod.rs","byte_start":26523,"byte_end":26538,"line_start":183,"line_end":183,"column_start":5,"column_end":20}},{"value":"/","span":{"file_name":"/Users/shelwitz/.cargo/registry/src/github.com-1ecc6299db9ec823/bio-0.39.0/src/alignment/pairwise/mod.rs","byte_start":26543,"byte_end":26546,"line_start":184,"line_end":184,"column_start":5,"column_end":8}},{"value":"/ * `match_score` - the score for a match (should not be negative)","span":{"file_name":"/Users/shelwitz/.cargo/registry/src/github.com-1ecc6299db9ec823/bio-0.39.0/src/alignment/pairwise/mod.rs","byte_start":26551,"byte_end":26619,"line_start":185,"line_end":185,"column_start":5,"column_end":73}},{"value":"/ * `mismatch_score` - the score for a mismatch (should not be positive)","span":{"file_name":"/Users/shelwitz/.cargo/registry/src/github.com-1ecc6299db9ec823/bio-0.39.0/src/alignment/pairwise/mod.rs","byte_start":26624,"byte_end":26698,"line_start":186,"line_end":186,"column_start":5,"column_end":79}}]},{"kind":"Struct","id":{"krate":0,"index":3337},"span":{"file_name":"/Users/shelwitz/.cargo/registry/src/github.com-1ecc6299db9ec823/bio-0.39.0/src/alignment/pairwise/mod.rs","byte_start":27773,"byte_end":27780,"line_start":225,"line_end":225,"column_start":12,"column_end":19},"name":"Scoring","qualname":"::alignment::pairwise::Scoring","value":"Scoring { gap_open, gap_extend, match_fn, match_scores, xclip_prefix, xclip_suffix, yclip_prefix, yclip_suffix }","parent":null,"children":[{"krate":0,"index":3339},{"krate":0,"index":3340},{"krate":0,"index":3341},{"krate":0,"index":3342},{"krate":0,"index":3343},{"krate":0,"index":3344},{"krate":0,"index":3345},{"krate":0,"index":3346}],"decl_id":null,"docs":" Details of scoring are encapsulated in this structure.","sig":null,"attributes":[{"value":"/ Details of scoring are encapsulated in this structure.","span":{"file_name":"/Users/shelwitz/.cargo/registry/src/github.com-1ecc6299db9ec823/bio-0.39.0/src/alignment/pairwise/mod.rs","byte_start":27492,"byte_end":27550,"line_start":219,"line_end":219,"column_start":1,"column_end":59}},{"value":"/","span":{"file_name":"/Users/shelwitz/.cargo/registry/src/github.com-1ecc6299db9ec823/bio-0.39.0/src/alignment/pairwise/mod.rs","byte_start":27551,"byte_end":27554,"line_start":220,"line_end":220,"column_start":1,"column_end":4}},{"value":"/ An [affine gap score model](https://en.wikipedia.org/wiki/Gap_penalty#Affine)","span":{"file_name":"/Users/shelwitz/.cargo/registry/src/github.com-1ecc6299db9ec823/bio-0.39.0/src/alignment/pairwise/mod.rs","byte_start":27555,"byte_end":27636,"line_start":221,"line_end":221,"column_start":1,"column_end":82}},{"value":"/ is used so that the gap score for a length `k` is:","span":{"file_name":"/Users/shelwitz/.cargo/registry/src/github.com-1ecc6299db9ec823/bio-0.39.0/src/alignment/pairwise/mod.rs","byte_start":27637,"byte_end":27691,"line_start":222,"line_end":222,"column_start":1,"column_end":55}},{"value":"/ `GapScore(k) = gap_open + gap_extend * k`","span":{"file_name":"/Users/shelwitz/.cargo/registry/src/github.com-1ecc6299db9ec823/bio-0.39.0/src/alignment/pairwise/mod.rs","byte_start":27692,"byte_end":27737,"line_start":223,"line_end":223,"column_start":1,"column_end":46}}]},{"kind":"Field","id":{"krate":0,"index":3339},"span":{"file_name":"/Users/shelwitz/.cargo/registry/src/github.com-1ecc6299db9ec823/bio-0.39.0/src/alignment/pairwise/mod.rs","byte_start":27805,"byte_end":27813,"line_start":226,"line_end":226,"column_start":9,"column_end":17},"name":"gap_open","qualname":"::alignment::pairwise::Scoring::gap_open","value":"i32","parent":{"krate":0,"index":3337},"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Field","id":{"krate":0,"index":3340},"span":{"file_name":"/Users/shelwitz/.cargo/registry/src/github.com-1ecc6299db9ec823/bio-0.39.0/src/alignment/pairwise/mod.rs","byte_start":27828,"byte_end":27838,"line_start":227,"line_end":227,"column_start":9,"column_end":19},"name":"gap_extend","qualname":"::alignment::pairwise::Scoring::gap_extend","value":"i32","parent":{"krate":0,"index":3337},"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Field","id":{"krate":0,"index":3341},"span":{"file_name":"/Users/shelwitz/.cargo/registry/src/github.com-1ecc6299db9ec823/bio-0.39.0/src/alignment/pairwise/mod.rs","byte_start":27853,"byte_end":27861,"line_start":228,"line_end":228,"column_start":9,"column_end":17},"name":"match_fn","qualname":"::alignment::pairwise::Scoring::match_fn","value":"F","parent":{"krate":0,"index":3337},"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Field","id":{"krate":0,"index":3342},"span":{"file_name":"/Users/shelwitz/.cargo/registry/src/github.com-1ecc6299db9ec823/bio-0.39.0/src/alignment/pairwise/mod.rs","byte_start":27874,"byte_end":27886,"line_start":229,"line_end":229,"column_start":9,"column_end":21},"name":"match_scores","qualname":"::alignment::pairwise::Scoring::match_scores","value":"std::option::Option<(i32, i32)>","parent":{"krate":0,"index":3337},"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Field","id":{"krate":0,"index":3343},"span":{"file_name":"/Users/shelwitz/.cargo/registry/src/github.com-1ecc6299db9ec823/bio-0.39.0/src/alignment/pairwise/mod.rs","byte_start":27916,"byte_end":27928,"line_start":230,"line_end":230,"column_start":9,"column_end":21},"name":"xclip_prefix","qualname":"::alignment::pairwise::Scoring::xclip_prefix","value":"i32","parent":{"krate":0,"index":3337},"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Field","id":{"krate":0,"index":3344},"span":{"file_name":"/Users/shelwitz/.cargo/registry/src/github.com-1ecc6299db9ec823/bio-0.39.0/src/alignment/pairwise/mod.rs","byte_start":27943,"byte_end":27955,"line_start":231,"line_end":231,"column_start":9,"column_end":21},"name":"xclip_suffix","qualname":"::alignment::pairwise::Scoring::xclip_suffix","value":"i32","parent":{"krate":0,"index":3337},"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Field","id":{"krate":0,"index":3345},"span":{"file_name":"/Users/shelwitz/.cargo/registry/src/github.com-1ecc6299db9ec823/bio-0.39.0/src/alignment/pairwise/mod.rs","byte_start":27970,"byte_end":27982,"line_start":232,"line_end":232,"column_start":9,"column_end":21},"name":"yclip_prefix","qualname":"::alignment::pairwise::Scoring::yclip_prefix","value":"i32","parent":{"krate":0,"index":3337},"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Field","id":{"krate":0,"index":3346},"span":{"file_name":"/Users/shelwitz/.cargo/registry/src/github.com-1ecc6299db9ec823/bio-0.39.0/src/alignment/pairwise/mod.rs","byte_start":27997,"byte_end":28009,"line_start":233,"line_end":233,"column_start":9,"column_end":21},"name":"yclip_suffix","qualname":"::alignment::pairwise::Scoring::yclip_suffix","value":"i32","parent":{"krate":0,"index":3337},"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":160},"span":{"file_name":"/Users/shelwitz/.cargo/registry/src/github.com-1ecc6299db9ec823/bio-0.39.0/src/alignment/pairwise/mod.rs","byte_start":28518,"byte_end":28529,"line_start":246,"line_end":246,"column_start":12,"column_end":23},"name":"from_scores","qualname":"<Scoring<MatchParams>>::from_scores","value":"pub fn from_scores(i32, i32, i32, i32) -> Self","parent":null,"children":[],"decl_id":null,"docs":" Create new Scoring instance with given gap open, gap extend penalties\n match and mismatch scores. The clip penalties are set to `MIN_SCORE` by default","sig":null,"attributes":[{"value":"/ Create new Scoring instance with given gap open, gap extend penalties","span":{"file_name":"/Users/shelwitz/.cargo/registry/src/github.com-1ecc6299db9ec823/bio-0.39.0/src/alignment/pairwise/mod.rs","byte_start":28051,"byte_end":28124,"line_start":237,"line_end":237,"column_start":5,"column_end":78}},{"value":"/ match and mismatch scores. The clip penalties are set to `MIN_SCORE` by default","span":{"file_name":"/Users/shelwitz/.cargo/registry/src/github.com-1ecc6299db9ec823/bio-0.39.0/src/alignment/pairwise/mod.rs","byte_start":28129,"byte_end":28212,"line_start":238,"line_end":238,"column_start":5,"column_end":88}},{"value":"/","span":{"file_name":"/Users/shelwitz/.cargo/registry/src/github.com-1ecc6299db9ec823/bio-0.39.0/src/alignment/pairwise/mod.rs","byte_start":28217,"byte_end":28220,"line_start":239,"line_end":239,"column_start":5,"column_end":8}},{"value":"/ # Arguments","span":{"file_name":"/Users/shelwitz/.cargo/registry/src/github.com-1ecc6299db9ec823/bio-0.39.0/src/alignment/pairwise/mod.rs","byte_start":28225,"byte_end":28240,"line_start":240,"line_end":240,"column_start":5,"column_end":20}},{"value":"/","span":{"file_name":"/Users/shelwitz/.cargo/registry/src/github.com-1ecc6299db9ec823/bio-0.39.0/src/alignment/pairwise/mod.rs","byte_start":28245,"byte_end":28248,"line_start":241,"line_end":241,"column_start":5,"column_end":8}},{"value":"/ * `gap_open` - the score for opening a gap (should not be positive)","span":{"file_name":"/Users/shelwitz/.cargo/registry/src/github.com-1ecc6299db9ec823/bio-0.39.0/src/alignment/pairwise/mod.rs","byte_start":28253,"byte_end":28324,"line_start":242,"line_end":242,"column_start":5,"column_end":76}},{"value":"/ * `gap_extend` - the score for extending a gap (should not be positive)","span":{"file_name":"/Users/shelwitz/.cargo/registry/src/github.com-1ecc6299db9ec823/bio-0.39.0/src/alignment/pairwise/mod.rs","byte_start":28329,"byte_end":28404,"line_start":243,"line_end":243,"column_start":5,"column_end":80}},{"value":"/ * `match_score` - the score for a match","span":{"file_name":"/Users/shelwitz/.cargo/registry/src/github.com-1ecc6299db9ec823/bio-0.39.0/src/alignment/pairwise/mod.rs","byte_start":28409,"byte_end":28452,"line_start":244,"line_end":244,"column_start":5,"column_end":48}},{"value":"/ * `mismatch_score` - the score for a mismatch","span":{"file_name":"/Users/shelwitz/.cargo/registry/src/github.com-1ecc6299db9ec823/bio-0.39.0/src/alignment/pairwise/mod.rs","byte_start":28457,"byte_end":28506,"line_start":245,"line_end":245,"column_start":5,"column_end":54}}]},{"kind":"Method","id":{"krate":0,"index":163},"span":{"file_name":"/Users/shelwitz/.cargo/registry/src/github.com-1ecc6299db9ec823/bio-0.39.0/src/alignment/pairwise/mod.rs","byte_start":29721,"byte_end":29724,"line_start":278,"line_end":278,"column_start":12,"column_end":15},"name":"new","qualname":"<Scoring<F>>::new","value":"pub fn new(i32, i32, F) -> Self","parent":null,"children":[],"decl_id":null,"docs":" Create new Scoring instance with given gap open, gap extend penalties\n and the score function. The clip penalties are set to [`MIN_SCORE`](constant.MIN_SCORE.html) by default","sig":null,"attributes":[{"value":"/ Create new Scoring instance with given gap open, gap extend penalties","span":{"file_name":"/Users/shelwitz/.cargo/registry/src/github.com-1ecc6299db9ec823/bio-0.39.0/src/alignment/pairwise/mod.rs","byte_start":29178,"byte_end":29251,"line_start":269,"line_end":269,"column_start":5,"column_end":78}},{"value":"/ and the score function. The clip penalties are set to [`MIN_SCORE`](constant.MIN_SCORE.html) by default","span":{"file_name":"/Users/shelwitz/.cargo/registry/src/github.com-1ecc6299db9ec823/bio-0.39.0/src/alignment/pairwise/mod.rs","byte_start":29256,"byte_end":29363,"line_start":270,"line_end":270,"column_start":5,"column_end":112}},{"value":"/","span":{"file_name":"/Users/shelwitz/.cargo/registry/src/github.com-1ecc6299db9ec823/bio-0.39.0/src/alignment/pairwise/mod.rs","byte_start":29368,"byte_end":29371,"line_start":271,"line_end":271,"column_start":5,"column_end":8}},{"value":"/ # Arguments","span":{"file_name":"/Users/shelwitz/.cargo/registry/src/github.com-1ecc6299db9ec823/bio-0.39.0/src/alignment/pairwise/mod.rs","byte_start":29376,"byte_end":29391,"line_start":272,"line_end":272,"column_start":5,"column_end":20}},{"value":"/","span":{"file_name":"/Users/shelwitz/.cargo/registry/src/github.com-1ecc6299db9ec823/bio-0.39.0/src/alignment/pairwise/mod.rs","byte_start":29396,"byte_end":29399,"line_start":273,"line_end":273,"column_start":5,"column_end":8}},{"value":"/ * `gap_open` - the score for opening a gap (should not be positive)","span":{"file_name":"/Users/shelwitz/.cargo/registry/src/github.com-1ecc6299db9ec823/bio-0.39.0/src/alignment/pairwise/mod.rs","byte_start":29404,"byte_end":29475,"line_start":274,"line_end":274,"column_start":5,"column_end":76}},{"value":"/ * `gap_extend` - the score for extending a gap (should not be positive)","span":{"file_name":"/Users/shelwitz/.cargo/registry/src/github.com-1ecc6299db9ec823/bio-0.39.0/src/alignment/pairwise/mod.rs","byte_start":29480,"byte_end":29555,"line_start":275,"line_end":275,"column_start":5,"column_end":80}},{"value":"/ * `match_fn` - function that returns the score for substitutions","span":{"file_name":"/Users/shelwitz/.cargo/registry/src/github.com-1ecc6299db9ec823/bio-0.39.0/src/alignment/pairwise/mod.rs","byte_start":29560,"byte_end":29628,"line_start":276,"line_end":276,"column_start":5,"column_end":73}},{"value":"/    (see also [`bio::alignment::pairwise::Scoring`](struct.Scoring.html))","span":{"file_name":"/Users/shelwitz/.cargo/registry/src/github.com-1ecc6299db9ec823/bio-0.39.0/src/alignment/pairwise/mod.rs","byte_start":29633,"byte_end":29709,"line_start":277,"line_end":277,"column_start":5,"column_end":81}}]},{"kind":"Method","id":{"krate":0,"index":164},"span":{"file_name":"/Users/shelwitz/.cargo/registry/src/github.com-1ecc6299db9ec823/bio-0.39.0/src/alignment/pairwise/mod.rs","byte_start":30770,"byte_end":30775,"line_start":308,"line_end":308,"column_start":12,"column_end":17},"name":"xclip","qualname":"<Scoring<F>>::xclip","value":"pub fn xclip(Self, i32) -> Self","parent":null,"children":[],"decl_id":null,"docs":" Sets the prefix and suffix clipping penalties for x to the input value","sig":null,"attributes":[{"value":"/ Sets the prefix and suffix clipping penalties for x to the input value","span":{"file_name":"/Users/shelwitz/.cargo/registry/src/github.com-1ecc6299db9ec823/bio-0.39.0/src/alignment/pairwise/mod.rs","byte_start":30196,"byte_end":30270,"line_start":294,"line_end":294,"column_start":5,"column_end":79}},{"value":"/","span":{"file_name":"/Users/shelwitz/.cargo/registry/src/github.com-1ecc6299db9ec823/bio-0.39.0/src/alignment/pairwise/mod.rs","byte_start":30275,"byte_end":30278,"line_start":295,"line_end":295,"column_start":5,"column_end":8}},{"value":"/ # Arguments","span":{"file_name":"/Users/shelwitz/.cargo/registry/src/github.com-1ecc6299db9ec823/bio-0.39.0/src/alignment/pairwise/mod.rs","byte_start":30283,"byte_end":30298,"line_start":296,"line_end":296,"column_start":5,"column_end":20}},{"value":"/","span":{"file_name":"/Users/shelwitz/.cargo/registry/src/github.com-1ecc6299db9ec823/bio-0.39.0/src/alignment/pairwise/mod.rs","byte_start":30303,"byte_end":30306,"line_start":297,"line_end":297,"column_start":5,"column_end":8}},{"value":"/ * `penalty` - Clipping penalty for x (both prefix and suffix, should not be positive)","span":{"file_name":"/Users/shelwitz/.cargo/registry/src/github.com-1ecc6299db9ec823/bio-0.39.0/src/alignment/pairwise/mod.rs","byte_start":30311,"byte_end":30400,"line_start":298,"line_end":298,"column_start":5,"column_end":94}},{"value":"/","span":{"file_name":"/Users/shelwitz/.cargo/registry/src/github.com-1ecc6299db9ec823/bio-0.39.0/src/alignment/pairwise/mod.rs","byte_start":30405,"byte_end":30408,"line_start":299,"line_end":299,"column_start":5,"column_end":8}},{"value":"/ ```rust","span":{"file_name":"/Users/shelwitz/.cargo/registry/src/github.com-1ecc6299db9ec823/bio-0.39.0/src/alignment/pairwise/mod.rs","byte_start":30413,"byte_end":30424,"line_start":300,"line_end":300,"column_start":5,"column_end":16}},{"value":"/ use bio::alignment::pairwise::{Scoring, MIN_SCORE};","span":{"file_name":"/Users/shelwitz/.cargo/registry/src/github.com-1ecc6299db9ec823/bio-0.39.0/src/alignment/pairwise/mod.rs","byte_start":30429,"byte_end":30484,"line_start":301,"line_end":301,"column_start":5,"column_end":60}},{"value":"/ let scoring = Scoring::from_scores(0, -2, 1, -2).xclip(-5);","span":{"file_name":"/Users/shelwitz/.cargo/registry/src/github.com-1ecc6299db9ec823/bio-0.39.0/src/alignment/pairwise/mod.rs","byte_start":30489,"byte_end":30552,"line_start":302,"line_end":302,"column_start":5,"column_end":68}},{"value":"/ assert!(scoring.xclip_prefix == -5);","span":{"file_name":"/Users/shelwitz/.cargo/registry/src/github.com-1ecc6299db9ec823/bio-0.39.0/src/alignment/pairwise/mod.rs","byte_start":30557,"byte_end":30597,"line_start":303,"line_end":303,"column_start":5,"column_end":45}},{"value":"/ assert!(scoring.yclip_prefix == MIN_SCORE);","span":{"file_name":"/Users/shelwitz/.cargo/registry/src/github.com-1ecc6299db9ec823/bio-0.39.0/src/alignment/pairwise/mod.rs","byte_start":30602,"byte_end":30649,"line_start":304,"line_end":304,"column_start":5,"column_end":52}},{"value":"/ assert!(scoring.xclip_suffix == -5);","span":{"file_name":"/Users/shelwitz/.cargo/registry/src/github.com-1ecc6299db9ec823/bio-0.39.0/src/alignment/pairwise/mod.rs","byte_start":30654,"byte_end":30694,"line_start":305,"line_end":305,"column_start":5,"column_end":45}},{"value":"/ assert!(scoring.yclip_suffix == MIN_SCORE);","span":{"file_name":"/Users/shelwitz/.cargo/registry/src/github.com-1ecc6299db9ec823/bio-0.39.0/src/alignment/pairwise/mod.rs","byte_start":30699,"byte_end":30746,"line_start":306,"line_end":306,"column_start":5,"column_end":52}},{"value":"/ ```","span":{"file_name":"/Users/shelwitz/.cargo/registry/src/github.com-1ecc6299db9ec823/bio-0.39.0/src/alignment/pairwise/mod.rs","byte_start":30751,"byte_end":30758,"line_start":307,"line_end":307,"column_start":5,"column_end":12}}]},{"kind":"Method","id":{"krate":0,"index":165},"span":{"file_name":"/Users/shelwitz/.cargo/registry/src/github.com-1ecc6299db9ec823/bio-0.39.0/src/alignment/pairwise/mod.rs","byte_start":31553,"byte_end":31565,"line_start":330,"line_end":330,"column_start":12,"column_end":24},"name":"xclip_prefix","qualname":"<Scoring<F>>::xclip_prefix","value":"pub fn xclip_prefix(Self, i32) -> Self","parent":null,"children":[],"decl_id":null,"docs":" Sets the prefix clipping penalty for x to the input value","sig":null,"attributes":[{"value":"/ Sets the prefix clipping penalty for x to the input value","span":{"file_name":"/Users/shelwitz/.cargo/registry/src/github.com-1ecc6299db9ec823/bio-0.39.0/src/alignment/pairwise/mod.rs","byte_start":30977,"byte_end":31038,"line_start":315,"line_end":315,"column_start":5,"column_end":66}},{"value":"/","span":{"file_name":"/Users/shelwitz/.cargo/registry/src/github.com-1ecc6299db9ec823/bio-0.39.0/src/alignment/pairwise/mod.rs","byte_start":31043,"byte_end":31046,"line_start":316,"line_end":316,"column_start":5,"column_end":8}},{"value":"/ # Arguments","span":{"file_name":"/Users/shelwitz/.cargo/registry/src/github.com-1ecc6299db9ec823/bio-0.39.0/src/alignment/pairwise/mod.rs","byte_start":31051,"byte_end":31066,"line_start":317,"line_end":317,"column_start":5,"column_end":20}},{"value":"/","span":{"file_name":"/Users/shelwitz/.cargo/registry/src/github.com-1ecc6299db9ec823/bio-0.39.0/src/alignment/pairwise/mod.rs","byte_start":31071,"byte_end":31074,"line_start":318,"line_end":318,"column_start":5,"column_end":8}},{"value":"/ * `penalty` - Prefix clipping penalty for x (should not be positive)","span":{"file_name":"/Users/shelwitz/.cargo/registry/src/github.com-1ecc6299db9ec823/bio-0.39.0/src/alignment/pairwise/mod.rs","byte_start":31079,"byte_end":31151,"line_start":319,"line_end":319,"column_start":5,"column_end":77}},{"value":"/","span":{"file_name":"/Users/shelwitz/.cargo/registry/src/github.com-1ecc6299db9ec823/bio-0.39.0/src/alignment/pairwise/mod.rs","byte_start":31156,"byte_end":31159,"line_start":320,"line_end":320,"column_start":5,"column_end":8}},{"value":"/ # Example","span":{"file_name":"/Users/shelwitz/.cargo/registry/src/github.com-1ecc6299db9ec823/bio-0.39.0/src/alignment/pairwise/mod.rs","byte_start":31164,"byte_end":31177,"line_start":321,"line_end":321,"column_start":5,"column_end":18}},{"value":"/ ```rust","span":{"file_name":"/Users/shelwitz/.cargo/registry/src/github.com-1ecc6299db9ec823/bio-0.39.0/src/alignment/pairwise/mod.rs","byte_start":31182,"byte_end":31193,"line_start":322,"line_end":322,"column_start":5,"column_end":16}},{"value":"/ use bio::alignment::pairwise::{Scoring, MIN_SCORE};","span":{"file_name":"/Users/shelwitz/.cargo/registry/src/github.com-1ecc6299db9ec823/bio-0.39.0/src/alignment/pairwise/mod.rs","byte_start":31198,"byte_end":31253,"line_start":323,"line_end":323,"column_start":5,"column_end":60}},{"value":"/ let scoring = Scoring::from_scores(0, -2, 1, -2).xclip_prefix(-5);","span":{"file_name":"/Users/shelwitz/.cargo/registry/src/github.com-1ecc6299db9ec823/bio-0.39.0/src/alignment/pairwise/mod.rs","byte_start":31258,"byte_end":31328,"line_start":324,"line_end":324,"column_start":5,"column_end":75}},{"value":"/ assert!(scoring.xclip_prefix == -5);","span":{"file_name":"/Users/shelwitz/.cargo/registry/src/github.com-1ecc6299db9ec823/bio-0.39.0/src/alignment/pairwise/mod.rs","byte_start":31333,"byte_end":31373,"line_start":325,"line_end":325,"column_start":5,"column_end":45}},{"value":"/ assert!(scoring.yclip_prefix == MIN_SCORE);","span":{"file_name":"/Users/shelwitz/.cargo/registry/src/github.com-1ecc6299db9ec823/bio-0.39.0/src/alignment/pairwise/mod.rs","byte_start":31378,"byte_end":31425,"line_start":326,"line_end":326,"column_start":5,"column_end":52}},{"value":"/ assert!(scoring.xclip_suffix == MIN_SCORE);","span":{"file_name":"/Users/shelwitz/.cargo/registry/src/github.com-1ecc6299db9ec823/bio-0.39.0/src/alignment/pairwise/mod.rs","byte_start":31430,"byte_end":31477,"line_start":327,"line_end":327,"column_start":5,"column_end":52}},{"value":"/ assert!(scoring.yclip_suffix == MIN_SCORE);","span":{"file_name":"/Users/shelwitz/.cargo/registry/src/github.com-1ecc6299db9ec823/bio-0.39.0/src/alignment/pairwise/mod.rs","byte_start":31482,"byte_end":31529,"line_start":328,"line_end":328,"column_start":5,"column_end":52}},{"value":"/ ```","span":{"file_name":"/Users/shelwitz/.cargo/registry/src/github.com-1ecc6299db9ec823/bio-0.39.0/src/alignment/pairwise/mod.rs","byte_start":31534,"byte_end":31541,"line_start":329,"line_end":329,"column_start":5,"column_end":12}}]},{"kind":"Method","id":{"krate":0,"index":166},"span":{"file_name":"/Users/shelwitz/.cargo/registry/src/github.com-1ecc6299db9ec823/bio-0.39.0/src/alignment/pairwise/mod.rs","byte_start":32288,"byte_end":32300,"line_start":350,"line_end":350,"column_start":12,"column_end":24},"name":"xclip_suffix","qualname":"<Scoring<F>>::xclip_suffix","value":"pub fn xclip_suffix(Self, i32) -> Self","parent":null,"children":[],"decl_id":null,"docs":" Sets the suffix clipping penalty for x to the input value","sig":null,"attributes":[{"value":"/ Sets the suffix clipping penalty for x to the input value","span":{"file_name":"/Users/shelwitz/.cargo/registry/src/github.com-1ecc6299db9ec823/bio-0.39.0/src/alignment/pairwise/mod.rs","byte_start":31730,"byte_end":31791,"line_start":336,"line_end":336,"column_start":5,"column_end":66}},{"value":"/","span":{"file_name":"/Users/shelwitz/.cargo/registry/src/github.com-1ecc6299db9ec823/bio-0.39.0/src/alignment/pairwise/mod.rs","byte_start":31796,"byte_end":31799,"line_start":337,"line_end":337,"column_start":5,"column_end":8}},{"value":"/ # Arguments","span":{"file_name":"/Users/shelwitz/.cargo/registry/src/github.com-1ecc6299db9ec823/bio-0.39.0/src/alignment/pairwise/mod.rs","byte_start":31804,"byte_end":31819,"line_start":338,"line_end":338,"column_start":5,"column_end":20}},{"value":"/","span":{"file_name":"/Users/shelwitz/.cargo/registry/src/github.com-1ecc6299db9ec823/bio-0.39.0/src/alignment/pairwise/mod.rs","byte_start":31824,"byte_end":31827,"line_start":339,"line_end":339,"column_start":5,"column_end":8}},{"value":"/ * `penalty` - Suffix clipping penalty for x (should not be positive)","span":{"file_name":"/Users/shelwitz/.cargo/registry/src/github.com-1ecc6299db9ec823/bio-0.39.0/src/alignment/pairwise/mod.rs","byte_start":31832,"byte_end":31904,"line_start":340,"line_end":340,"column_start":5,"column_end":77}},{"value":"/","span":{"file_name":"/Users/shelwitz/.cargo/registry/src/github.com-1ecc6299db9ec823/bio-0.39.0/src/alignment/pairwise/mod.rs","byte_start":31909,"byte_end":31912,"line_start":341,"line_end":341,"column_start":5,"column_end":8}},{"value":"/ ```rust","span":{"file_name":"/Users/shelwitz/.cargo/registry/src/github.com-1ecc6299db9ec823/bio-0.39.0/src/alignment/pairwise/mod.rs","byte_start":31917,"byte_end":31928,"line_start":342,"line_end":342,"column_start":5,"column_end":16}},{"value":"/ use bio::alignment::pairwise::{Scoring, MIN_SCORE};","span":{"file_name":"/Users/shelwitz/.cargo/registry/src/github.com-1ecc6299db9ec823/bio-0.39.0/src/alignment/pairwise/mod.rs","byte_start":31933,"byte_end":31988,"line_start":343,"line_end":343,"column_start":5,"column_end":60}},{"value":"/ let scoring = Scoring::from_scores(0, -2, 1, -2).xclip_suffix(-5);","span":{"file_name":"/Users/shelwitz/.cargo/registry/src/github.com-1ecc6299db9ec823/bio-0.39.0/src/alignment/pairwise/mod.rs","byte_start":31993,"byte_end":32063,"line_start":344,"line_end":344,"column_start":5,"column_end":75}},{"value":"/ assert!(scoring.xclip_prefix == MIN_SCORE);","span":{"file_name":"/Users/shelwitz/.cargo/registry/src/github.com-1ecc6299db9ec823/bio-0.39.0/src/alignment/pairwise/mod.rs","byte_start":32068,"byte_end":32115,"line_start":345,"line_end":345,"column_start":5,"column_end":52}},{"value":"/ assert!(scoring.yclip_prefix == MIN_SCORE);","span":{"file_name":"/Users/shelwitz/.cargo/registry/src/github.com-1ecc6299db9ec823/bio-0.39.0/src/alignment/pairwise/mod.rs","byte_start":32120,"byte_end":32167,"line_start":346,"line_end":346,"column_start":5,"column_end":52}},{"value":"/ assert!(scoring.xclip_suffix == -5);","span":{"file_name":"/Users/shelwitz/.cargo/registry/src/github.com-1ecc6299db9ec823/bio-0.39.0/src/alignment/pairwise/mod.rs","byte_start":32172,"byte_end":32212,"line_start":347,"line_end":347,"column_start":5,"column_end":45}},{"value":"/ assert!(scoring.yclip_suffix == MIN_SCORE);","span":{"file_name":"/Users/shelwitz/.cargo/registry/src/github.com-1ecc6299db9ec823/bio-0.39.0/src/alignment/pairwise/mod.rs","byte_start":32217,"byte_end":32264,"line_start":348,"line_end":348,"column_start":5,"column_end":52}},{"value":"/ ```","span":{"file_name":"/Users/shelwitz/.cargo/registry/src/github.com-1ecc6299db9ec823/bio-0.39.0/src/alignment/pairwise/mod.rs","byte_start":32269,"byte_end":32276,"line_start":349,"line_end":349,"column_start":5,"column_end":12}}]},{"kind":"Method","id":{"krate":0,"index":167},"span":{"file_name":"/Users/shelwitz/.cargo/registry/src/github.com-1ecc6299db9ec823/bio-0.39.0/src/alignment/pairwise/mod.rs","byte_start":33039,"byte_end":33044,"line_start":370,"line_end":370,"column_start":12,"column_end":17},"name":"yclip","qualname":"<Scoring<F>>::yclip","value":"pub fn yclip(Self, i32) -> Self","parent":null,"children":[],"decl_id":null,"docs":" Sets the prefix and suffix clipping penalties for y to the input value","sig":null,"attributes":[{"value":"/ Sets the prefix and suffix clipping penalties for y to the input value","span":{"file_name":"/Users/shelwitz/.cargo/registry/src/github.com-1ecc6299db9ec823/bio-0.39.0/src/alignment/pairwise/mod.rs","byte_start":32465,"byte_end":32539,"line_start":356,"line_end":356,"column_start":5,"column_end":79}},{"value":"/","span":{"file_name":"/Users/shelwitz/.cargo/registry/src/github.com-1ecc6299db9ec823/bio-0.39.0/src/alignment/pairwise/mod.rs","byte_start":32544,"byte_end":32547,"line_start":357,"line_end":357,"column_start":5,"column_end":8}},{"value":"/ # Arguments","span":{"file_name":"/Users/shelwitz/.cargo/registry/src/github.com-1ecc6299db9ec823/bio-0.39.0/src/alignment/pairwise/mod.rs","byte_start":32552,"byte_end":32567,"line_start":358,"line_end":358,"column_start":5,"column_end":20}},{"value":"/","span":{"file_name":"/Users/shelwitz/.cargo/registry/src/github.com-1ecc6299db9ec823/bio-0.39.0/src/alignment/pairwise/mod.rs","byte_start":32572,"byte_end":32575,"line_start":359,"line_end":359,"column_start":5,"column_end":8}},{"value":"/ * `penalty` - Clipping penalty for y (both prefix and suffix, should not be positive)","span":{"file_name":"/Users/shelwitz/.cargo/registry/src/github.com-1ecc6299db9ec823/bio-0.39.0/src/alignment/pairwise/mod.rs","byte_start":32580,"byte_end":32669,"line_start":360,"line_end":360,"column_start":5,"column_end":94}},{"value":"/","span":{"file_name":"/Users/shelwitz/.cargo/registry/src/github.com-1ecc6299db9ec823/bio-0.39.0/src/alignment/pairwise/mod.rs","byte_start":32674,"byte_end":32677,"line_start":361,"line_end":361,"column_start":5,"column_end":8}},{"value":"/ ```rust","span":{"file_name":"/Users/shelwitz/.cargo/registry/src/github.com-1ecc6299db9ec823/bio-0.39.0/src/alignment/pairwise/mod.rs","byte_start":32682,"byte_end":32693,"line_start":362,"line_end":362,"column_start":5,"column_end":16}},{"value":"/ use bio::alignment::pairwise::{Scoring, MIN_SCORE};","span":{"file_name":"/Users/shelwitz/.cargo/registry/src/github.com-1ecc6299db9ec823/bio-0.39.0/src/alignment/pairwise/mod.rs","byte_start":32698,"byte_end":32753,"line_start":363,"line_end":363,"column_start":5,"column_end":60}},{"value":"/ let scoring = Scoring::from_scores(0, -2, 1, -2).yclip(-5);","span":{"file_name":"/Users/shelwitz/.cargo/registry/src/github.com-1ecc6299db9ec823/bio-0.39.0/src/alignment/pairwise/mod.rs","byte_start":32758,"byte_end":32821,"line_start":364,"line_end":364,"column_start":5,"column_end":68}},{"value":"/ assert!(scoring.xclip_prefix == MIN_SCORE);","span":{"file_name":"/Users/shelwitz/.cargo/registry/src/github.com-1ecc6299db9ec823/bio-0.39.0/src/alignment/pairwise/mod.rs","byte_start":32826,"byte_end":32873,"line_start":365,"line_end":365,"column_start":5,"column_end":52}},{"value":"/ assert!(scoring.yclip_prefix == -5);","span":{"file_name":"/Users/shelwitz/.cargo/registry/src/github.com-1ecc6299db9ec823/bio-0.39.0/src/alignment/pairwise/mod.rs","byte_start":32878,"byte_end":32918,"line_start":366,"line_end":366,"column_start":5,"column_end":45}},{"value":"/ assert!(scoring.xclip_suffix == MIN_SCORE);","span":{"file_name":"/Users/shelwitz/.cargo/registry/src/github.com-1ecc6299db9ec823/bio-0.39.0/src/alignment/pairwise/mod.rs","byte_start":32923,"byte_end":32970,"line_start":367,"line_end":367,"column_start":5,"column_end":52}},{"value":"/ assert!(scoring.yclip_suffix == -5);","span":{"file_name":"/Users/shelwitz/.cargo/registry/src/github.com-1ecc6299db9ec823/bio-0.39.0/src/alignment/pairwise/mod.rs","byte_start":32975,"byte_end":33015,"line_start":368,"line_end":368,"column_start":5,"column_end":45}},{"value":"/ ```","span":{"file_name":"/Users/shelwitz/.cargo/registry/src/github.com-1ecc6299db9ec823/bio-0.39.0/src/alignment/pairwise/mod.rs","byte_start":33020,"byte_end":33027,"line_start":369,"line_end":369,"column_start":5,"column_end":12}}]},{"kind":"Method","id":{"krate":0,"index":168},"span":{"file_name":"/Users/shelwitz/.cargo/registry/src/github.com-1ecc6299db9ec823/bio-0.39.0/src/alignment/pairwise/mod.rs","byte_start":33804,"byte_end":33816,"line_start":391,"line_end":391,"column_start":12,"column_end":24},"name":"yclip_prefix","qualname":"<Scoring<F>>::yclip_prefix","value":"pub fn yclip_prefix(Self, i32) -> Self","parent":null,"children":[],"decl_id":null,"docs":" Sets the prefix clipping penalty for y to the input value","sig":null,"attributes":[{"value":"/ Sets the prefix clipping penalty for y to the input value","span":{"file_name":"/Users/shelwitz/.cargo/registry/src/github.com-1ecc6299db9ec823/bio-0.39.0/src/alignment/pairwise/mod.rs","byte_start":33246,"byte_end":33307,"line_start":377,"line_end":377,"column_start":5,"column_end":66}},{"value":"/","span":{"file_name":"/Users/shelwitz/.cargo/registry/src/github.com-1ecc6299db9ec823/bio-0.39.0/src/alignment/pairwise/mod.rs","byte_start":33312,"byte_end":33315,"line_start":378,"line_end":378,"column_start":5,"column_end":8}},{"value":"/ # Arguments","span":{"file_name":"/Users/shelwitz/.cargo/registry/src/github.com-1ecc6299db9ec823/bio-0.39.0/src/alignment/pairwise/mod.rs","byte_start":33320,"byte_end":33335,"line_start":379,"line_end":379,"column_start":5,"column_end":20}},{"value":"/","span":{"file_name":"/Users/shelwitz/.cargo/registry/src/github.com-1ecc6299db9ec823/bio-0.39.0/src/alignment/pairwise/mod.rs","byte_start":33340,"byte_end":33343,"line_start":380,"line_end":380,"column_start":5,"column_end":8}},{"value":"/ * `penalty` - Prefix clipping penalty for y (should not be positive)","span":{"file_name":"/Users/shelwitz/.cargo/registry/src/github.com-1ecc6299db9ec823/bio-0.39.0/src/alignment/pairwise/mod.rs","byte_start":33348,"byte_end":33420,"line_start":381,"line_end":381,"column_start":5,"column_end":77}},{"value":"/","span":{"file_name":"/Users/shelwitz/.cargo/registry/src/github.com-1ecc6299db9ec823/bio-0.39.0/src/alignment/pairwise/mod.rs","byte_start":33425,"byte_end":33428,"line_start":382,"line_end":382,"column_start":5,"column_end":8}},{"value":"/ ```rust","span":{"file_name":"/Users/shelwitz/.cargo/registry/src/github.com-1ecc6299db9ec823/bio-0.39.0/src/alignment/pairwise/mod.rs","byte_start":33433,"byte_end":33444,"line_start":383,"line_end":383,"column_start":5,"column_end":16}},{"value":"/ use bio::alignment::pairwise::{Scoring, MIN_SCORE};","span":{"file_name":"/Users/shelwitz/.cargo/registry/src/github.com-1ecc6299db9ec823/bio-0.39.0/src/alignment/pairwise/mod.rs","byte_start":33449,"byte_end":33504,"line_start":384,"line_end":384,"column_start":5,"column_end":60}},{"value":"/ let scoring = Scoring::from_scores(0, -2, 1, -2).yclip_prefix(-5);","span":{"file_name":"/Users/shelwitz/.cargo/registry/src/github.com-1ecc6299db9ec823/bio-0.39.0/src/alignment/pairwise/mod.rs","byte_start":33509,"byte_end":33579,"line_start":385,"line_end":385,"column_start":5,"column_end":75}},{"value":"/ assert!(scoring.xclip_prefix == MIN_SCORE);","span":{"file_name":"/Users/shelwitz/.cargo/registry/src/github.com-1ecc6299db9ec823/bio-0.39.0/src/alignment/pairwise/mod.rs","byte_start":33584,"byte_end":33631,"line_start":386,"line_end":386,"column_start":5,"column_end":52}},{"value":"/ assert!(scoring.yclip_prefix == -5);","span":{"file_name":"/Users/shelwitz/.cargo/registry/src/github.com-1ecc6299db9ec823/bio-0.39.0/src/alignment/pairwise/mod.rs","byte_start":33636,"byte_end":33676,"line_start":387,"line_end":387,"column_start":5,"column_end":45}},{"value":"/ assert!(scoring.xclip_suffix == MIN_SCORE);","span":{"file_name":"/Users/shelwitz/.cargo/registry/src/github.com-1ecc6299db9ec823/bio-0.39.0/src/alignment/pairwise/mod.rs","byte_start":33681,"byte_end":33728,"line_start":388,"line_end":388,"column_start":5,"column_end":52}},{"value":"/ assert!(scoring.yclip_suffix == MIN_SCORE);","span":{"file_name":"/Users/shelwitz/.cargo/registry/src/github.com-1ecc6299db9ec823/bio-0.39.0/src/alignment/pairwise/mod.rs","byte_start":33733,"byte_end":33780,"line_start":389,"line_end":389,"column_start":5,"column_end":52}},{"value":"/ ```","span":{"file_name":"/Users/shelwitz/.cargo/registry/src/github.com-1ecc6299db9ec823/bio-0.39.0/src/alignment/pairwise/mod.rs","byte_start":33785,"byte_end":33792,"line_start":390,"line_end":390,"column_start":5,"column_end":12}}]},{"kind":"Method","id":{"krate":0,"index":169},"span":{"file_name":"/Users/shelwitz/.cargo/registry/src/github.com-1ecc6299db9ec823/bio-0.39.0/src/alignment/pairwise/mod.rs","byte_start":34539,"byte_end":34551,"line_start":411,"line_end":411,"column_start":12,"column_end":24},"name":"yclip_suffix","qualname":"<Scoring<F>>::yclip_suffix","value":"pub fn yclip_suffix(Self, i32) -> Self","parent":null,"children":[],"decl_id":null,"docs":" Sets the suffix clipping penalty for y to the input value","sig":null,"attributes":[{"value":"/ Sets the suffix clipping penalty for y to the input value","span":{"file_name":"/Users/shelwitz/.cargo/registry/src/github.com-1ecc6299db9ec823/bio-0.39.0/src/alignment/pairwise/mod.rs","byte_start":33981,"byte_end":34042,"line_start":397,"line_end":397,"column_start":5,"column_end":66}},{"value":"/","span":{"file_name":"/Users/shelwitz/.cargo/registry/src/github.com-1ecc6299db9ec823/bio-0.39.0/src/alignment/pairwise/mod.rs","byte_start":34047,"byte_end":34050,"line_start":398,"line_end":398,"column_start":5,"column_end":8}},{"value":"/ # Arguments","span":{"file_name":"/Users/shelwitz/.cargo/registry/src/github.com-1ecc6299db9ec823/bio-0.39.0/src/alignment/pairwise/mod.rs","byte_start":34055,"byte_end":34070,"line_start":399,"line_end":399,"column_start":5,"column_end":20}},{"value":"/","span":{"file_name":"/Users/shelwitz/.cargo/registry/src/github.com-1ecc6299db9ec823/bio-0.39.0/src/alignment/pairwise/mod.rs","byte_start":34075,"byte_end":34078,"line_start":400,"line_end":400,"column_start":5,"column_end":8}},{"value":"/ * `penalty` - Suffix clipping penalty for y (should not be positive)","span":{"file_name":"/Users/shelwitz/.cargo/registry/src/github.com-1ecc6299db9ec823/bio-0.39.0/src/alignment/pairwise/mod.rs","byte_start":34083,"byte_end":34155,"line_start":401,"line_end":401,"column_start":5,"column_end":77}},{"value":"/","span":{"file_name":"/Users/shelwitz/.cargo/registry/src/github.com-1ecc6299db9ec823/bio-0.39.0/src/alignment/pairwise/mod.rs","byte_start":34160,"byte_end":34163,"line_start":402,"line_end":402,"column_start":5,"column_end":8}},{"value":"/ ```rust","span":{"file_name":"/Users/shelwitz/.cargo/registry/src/github.com-1ecc6299db9ec823/bio-0.39.0/src/alignment/pairwise/mod.rs","byte_start":34168,"byte_end":34179,"line_start":403,"line_end":403,"column_start":5,"column_end":16}},{"value":"/ use bio::alignment::pairwise::{Scoring, MIN_SCORE};","span":{"file_name":"/Users/shelwitz/.cargo/registry/src/github.com-1ecc6299db9ec823/bio-0.39.0/src/alignment/pairwise/mod.rs","byte_start":34184,"byte_end":34239,"line_start":404,"line_end":404,"column_start":5,"column_end":60}},{"value":"/ let scoring = Scoring::from_scores(0, -2, 1, -2).yclip_suffix(-5);","span":{"file_name":"/Users/shelwitz/.cargo/registry/src/github.com-1ecc6299db9ec823/bio-0.39.0/src/alignment/pairwise/mod.rs","byte_start":34244,"byte_end":34314,"line_start":405,"line_end":405,"column_start":5,"column_end":75}},{"value":"/ assert!(scoring.xclip_prefix == MIN_SCORE);","span":{"file_name":"/Users/shelwitz/.cargo/registry/src/github.com-1ecc6299db9ec823/bio-0.39.0/src/alignment/pairwise/mod.rs","byte_start":34319,"byte_end":34366,"line_start":406,"line_end":406,"column_start":5,"column_end":52}},{"value":"/ assert!(scoring.yclip_prefix == MIN_SCORE);","span":{"file_name":"/Users/shelwitz/.cargo/registry/src/github.com-1ecc6299db9ec823/bio-0.39.0/src/alignment/pairwise/mod.rs","byte_start":34371,"byte_end":34418,"line_start":407,"line_end":407,"column_start":5,"column_end":52}},{"value":"/ assert!(scoring.xclip_suffix == MIN_SCORE);","span":{"file_name":"/Users/shelwitz/.cargo/registry/src/github.com-1ecc6299db9ec823/bio-0.39.0/src/alignment/pairwise/mod.rs","byte_start":34423,"byte_end":34470,"line_start":408,"line_end":408,"column_start":5,"column_end":52}},{"value":"/ assert!(scoring.yclip_suffix == -5);","span":{"file_name":"/Users/shelwitz/.cargo/registry/src/github.com-1ecc6299db9ec823/bio-0.39.0/src/alignment/pairwise/mod.rs","byte_start":34475,"byte_end":34515,"line_start":409,"line_end":409,"column_start":5,"column_end":45}},{"value":"/ ```","span":{"file_name":"/Users/shelwitz/.cargo/registry/src/github.com-1ecc6299db9ec823/bio-0.39.0/src/alignment/pairwise/mod.rs","byte_start":34520,"byte_end":34527,"line_start":410,"line_end":410,"column_start":5,"column_end":12}}]},{"kind":"Struct","id":{"krate":0,"index":170},"span":{"file_name":"/Users/shelwitz/.cargo/registry/src/github.com-1ecc6299db9ec823/bio-0.39.0/src/alignment/pairwise/mod.rs","byte_start":36152,"byte_end":36159,"line_start":458,"line_end":458,"column_start":12,"column_end":19},"name":"Aligner","qualname":"::alignment::pairwise::Aligner","value":"Aligner {  }","parent":null,"children":[{"krate":0,"index":172},{"krate":0,"index":174},{"krate":0,"index":176},{"krate":0,"index":178},{"krate":0,"index":179},{"krate":0,"index":180},{"krate":0,"index":181},{"krate":0,"index":182}],"decl_id":null,"docs":" A generalized Smith-Waterman aligner.","sig":null,"attributes":[{"value":"/ A generalized Smith-Waterman aligner.","span":{"file_name":"/Users/shelwitz/.cargo/registry/src/github.com-1ecc6299db9ec823/bio-0.39.0/src/alignment/pairwise/mod.rs","byte_start":34714,"byte_end":34755,"line_start":418,"line_end":418,"column_start":1,"column_end":42}},{"value":"/","span":{"file_name":"/Users/shelwitz/.cargo/registry/src/github.com-1ecc6299db9ec823/bio-0.39.0/src/alignment/pairwise/mod.rs","byte_start":34756,"byte_end":34759,"line_start":419,"line_end":419,"column_start":1,"column_end":4}},{"value":"/ `M(i,j)` is the best score such that `x[i]` and `y[j]` ends in a match (or substitution)","span":{"file_name":"/Users/shelwitz/.cargo/registry/src/github.com-1ecc6299db9ec823/bio-0.39.0/src/alignment/pairwise/mod.rs","byte_start":34760,"byte_end":34852,"line_start":420,"line_end":420,"column_start":1,"column_end":93}},{"value":"/ ```ignore","span":{"file_name":"/Users/shelwitz/.cargo/registry/src/github.com-1ecc6299db9ec823/bio-0.39.0/src/alignment/pairwise/mod.rs","byte_start":34853,"byte_end":34866,"line_start":421,"line_end":421,"column_start":1,"column_end":14}},{"value":"/              .... A   G  x_i","span":{"file_name":"/Users/shelwitz/.cargo/registry/src/github.com-1ecc6299db9ec823/bio-0.39.0/src/alignment/pairwise/mod.rs","byte_start":34867,"byte_end":34899,"line_start":422,"line_end":422,"column_start":1,"column_end":33}},{"value":"/              .... C   G  y_j","span":{"file_name":"/Users/shelwitz/.cargo/registry/src/github.com-1ecc6299db9ec823/bio-0.39.0/src/alignment/pairwise/mod.rs","byte_start":34900,"byte_end":34932,"line_start":423,"line_end":423,"column_start":1,"column_end":33}},{"value":"/ ```","span":{"file_name":"/Users/shelwitz/.cargo/registry/src/github.com-1ecc6299db9ec823/bio-0.39.0/src/alignment/pairwise/mod.rs","byte_start":34933,"byte_end":34940,"line_start":424,"line_end":424,"column_start":1,"column_end":8}},{"value":"/ `I(i,j)` is the best score such that `x[i]` is aligned with a gap","span":{"file_name":"/Users/shelwitz/.cargo/registry/src/github.com-1ecc6299db9ec823/bio-0.39.0/src/alignment/pairwise/mod.rs","byte_start":34941,"byte_end":35010,"line_start":425,"line_end":425,"column_start":1,"column_end":70}},{"value":"/ ```ignore","span":{"file_name":"/Users/shelwitz/.cargo/registry/src/github.com-1ecc6299db9ec823/bio-0.39.0/src/alignment/pairwise/mod.rs","byte_start":35011,"byte_end":35024,"line_start":426,"line_end":426,"column_start":1,"column_end":14}},{"value":"/              .... A   G  x_i","span":{"file_name":"/Users/shelwitz/.cargo/registry/src/github.com-1ecc6299db9ec823/bio-0.39.0/src/alignment/pairwise/mod.rs","byte_start":35025,"byte_end":35057,"line_start":427,"line_end":427,"column_start":1,"column_end":33}},{"value":"/              .... G  y_j  -","span":{"file_name":"/Users/shelwitz/.cargo/registry/src/github.com-1ecc6299db9ec823/bio-0.39.0/src/alignment/pairwise/mod.rs","byte_start":35058,"byte_end":35089,"line_start":428,"line_end":428,"column_start":1,"column_end":32}},{"value":"/ ```","span":{"file_name":"/Users/shelwitz/.cargo/registry/src/github.com-1ecc6299db9ec823/bio-0.39.0/src/alignment/pairwise/mod.rs","byte_start":35090,"byte_end":35097,"line_start":429,"line_end":429,"column_start":1,"column_end":8}},{"value":"/ This is interpreted as an insertion into `x` w.r.t reference `y`","span":{"file_name":"/Users/shelwitz/.cargo/registry/src/github.com-1ecc6299db9ec823/bio-0.39.0/src/alignment/pairwise/mod.rs","byte_start":35098,"byte_end":35166,"line_start":430,"line_end":430,"column_start":1,"column_end":69}},{"value":"/","span":{"file_name":"/Users/shelwitz/.cargo/registry/src/github.com-1ecc6299db9ec823/bio-0.39.0/src/alignment/pairwise/mod.rs","byte_start":35167,"byte_end":35170,"line_start":431,"line_end":431,"column_start":1,"column_end":4}},{"value":"/ `D(i,j)` is the best score such that `y[j]` is aligned with a gap","span":{"file_name":"/Users/shelwitz/.cargo/registry/src/github.com-1ecc6299db9ec823/bio-0.39.0/src/alignment/pairwise/mod.rs","byte_start":35171,"byte_end":35240,"line_start":432,"line_end":432,"column_start":1,"column_end":70}},{"value":"/ ```ignore","span":{"file_name":"/Users/shelwitz/.cargo/registry/src/github.com-1ecc6299db9ec823/bio-0.39.0/src/alignment/pairwise/mod.rs","byte_start":35241,"byte_end":35254,"line_start":433,"line_end":433,"column_start":1,"column_end":14}},{"value":"/              .... A  x_i  -","span":{"file_name":"/Users/shelwitz/.cargo/registry/src/github.com-1ecc6299db9ec823/bio-0.39.0/src/alignment/pairwise/mod.rs","byte_start":35255,"byte_end":35286,"line_start":434,"line_end":434,"column_start":1,"column_end":32}},{"value":"/              .... G   G  y_j","span":{"file_name":"/Users/shelwitz/.cargo/registry/src/github.com-1ecc6299db9ec823/bio-0.39.0/src/alignment/pairwise/mod.rs","byte_start":35287,"byte_end":35319,"line_start":435,"line_end":435,"column_start":1,"column_end":33}},{"value":"/ ```","span":{"file_name":"/Users/shelwitz/.cargo/registry/src/github.com-1ecc6299db9ec823/bio-0.39.0/src/alignment/pairwise/mod.rs","byte_start":35320,"byte_end":35327,"line_start":436,"line_end":436,"column_start":1,"column_end":8}},{"value":"/ This is interpreted as a deletion from `x` w.r.t reference `y`","span":{"file_name":"/Users/shelwitz/.cargo/registry/src/github.com-1ecc6299db9ec823/bio-0.39.0/src/alignment/pairwise/mod.rs","byte_start":35328,"byte_end":35394,"line_start":437,"line_end":437,"column_start":1,"column_end":67}},{"value":"/","span":{"file_name":"/Users/shelwitz/.cargo/registry/src/github.com-1ecc6299db9ec823/bio-0.39.0/src/alignment/pairwise/mod.rs","byte_start":35395,"byte_end":35398,"line_start":438,"line_end":438,"column_start":1,"column_end":4}},{"value":"/ `S(i,j)` is the best score for prefixes `x[0..i]`, `y[0..j]`","span":{"file_name":"/Users/shelwitz/.cargo/registry/src/github.com-1ecc6299db9ec823/bio-0.39.0/src/alignment/pairwise/mod.rs","byte_start":35399,"byte_end":35463,"line_start":439,"line_end":439,"column_start":1,"column_end":65}},{"value":"/","span":{"file_name":"/Users/shelwitz/.cargo/registry/src/github.com-1ecc6299db9ec823/bio-0.39.0/src/alignment/pairwise/mod.rs","byte_start":35464,"byte_end":35467,"line_start":440,"line_end":440,"column_start":1,"column_end":4}},{"value":"/ To save space, only two columns of these matrices are stored at","span":{"file_name":"/Users/shelwitz/.cargo/registry/src/github.com-1ecc6299db9ec823/bio-0.39.0/src/alignment/pairwise/mod.rs","byte_start":35468,"byte_end":35535,"line_start":441,"line_end":441,"column_start":1,"column_end":68}},{"value":"/ any point - the current column and the previous one. Moreover","span":{"file_name":"/Users/shelwitz/.cargo/registry/src/github.com-1ecc6299db9ec823/bio-0.39.0/src/alignment/pairwise/mod.rs","byte_start":35536,"byte_end":35601,"line_start":442,"line_end":442,"column_start":1,"column_end":66}},{"value":"/ `M(i,j)` is not explicitly stored","span":{"file_name":"/Users/shelwitz/.cargo/registry/src/github.com-1ecc6299db9ec823/bio-0.39.0/src/alignment/pairwise/mod.rs","byte_start":35602,"byte_end":35639,"line_start":443,"line_end":443,"column_start":1,"column_end":38}},{"value":"/","span":{"file_name":"/Users/shelwitz/.cargo/registry/src/github.com-1ecc6299db9ec823/bio-0.39.0/src/alignment/pairwise/mod.rs","byte_start":35640,"byte_end":35643,"line_start":444,"line_end":444,"column_start":1,"column_end":4}},{"value":"/ `Lx` is the optimal x suffix clipping lengths from each position of the","span":{"file_name":"/Users/shelwitz/.cargo/registry/src/github.com-1ecc6299db9ec823/bio-0.39.0/src/alignment/pairwise/mod.rs","byte_start":35644,"byte_end":35719,"line_start":445,"line_end":445,"column_start":1,"column_end":76}},{"value":"/ sequence y","span":{"file_name":"/Users/shelwitz/.cargo/registry/src/github.com-1ecc6299db9ec823/bio-0.39.0/src/alignment/pairwise/mod.rs","byte_start":35720,"byte_end":35734,"line_start":446,"line_end":446,"column_start":1,"column_end":15}},{"value":"/","span":{"file_name":"/Users/shelwitz/.cargo/registry/src/github.com-1ecc6299db9ec823/bio-0.39.0/src/alignment/pairwise/mod.rs","byte_start":35735,"byte_end":35738,"line_start":447,"line_end":447,"column_start":1,"column_end":4}},{"value":"/ `Ly` is the optimal y suffix clipping lengths from each position of the","span":{"file_name":"/Users/shelwitz/.cargo/registry/src/github.com-1ecc6299db9ec823/bio-0.39.0/src/alignment/pairwise/mod.rs","byte_start":35739,"byte_end":35814,"line_start":448,"line_end":448,"column_start":1,"column_end":76}},{"value":"/ sequence x","span":{"file_name":"/Users/shelwitz/.cargo/registry/src/github.com-1ecc6299db9ec823/bio-0.39.0/src/alignment/pairwise/mod.rs","byte_start":35815,"byte_end":35829,"line_start":449,"line_end":449,"column_start":1,"column_end":15}},{"value":"/","span":{"file_name":"/Users/shelwitz/.cargo/registry/src/github.com-1ecc6299db9ec823/bio-0.39.0/src/alignment/pairwise/mod.rs","byte_start":35830,"byte_end":35833,"line_start":450,"line_end":450,"column_start":1,"column_end":4}},{"value":"/ `Sn` is the last column of the matrix. This is needed to keep track of","span":{"file_name":"/Users/shelwitz/.cargo/registry/src/github.com-1ecc6299db9ec823/bio-0.39.0/src/alignment/pairwise/mod.rs","byte_start":35834,"byte_end":35908,"line_start":451,"line_end":451,"column_start":1,"column_end":75}},{"value":"/ suffix clipping scores","span":{"file_name":"/Users/shelwitz/.cargo/registry/src/github.com-1ecc6299db9ec823/bio-0.39.0/src/alignment/pairwise/mod.rs","byte_start":35909,"byte_end":35935,"line_start":452,"line_end":452,"column_start":1,"column_end":27}},{"value":"/","span":{"file_name":"/Users/shelwitz/.cargo/registry/src/github.com-1ecc6299db9ec823/bio-0.39.0/src/alignment/pairwise/mod.rs","byte_start":35936,"byte_end":35939,"line_start":453,"line_end":453,"column_start":1,"column_end":4}},{"value":"/ `traceback` - see [`bio::alignment::pairwise::TracebackCell`](struct.TracebackCell.html)","span":{"file_name":"/Users/shelwitz/.cargo/registry/src/github.com-1ecc6299db9ec823/bio-0.39.0/src/alignment/pairwise/mod.rs","byte_start":35940,"byte_end":36032,"line_start":454,"line_end":454,"column_start":1,"column_end":93}},{"value":"/","span":{"file_name":"/Users/shelwitz/.cargo/registry/src/github.com-1ecc6299db9ec823/bio-0.39.0/src/alignment/pairwise/mod.rs","byte_start":36033,"byte_end":36036,"line_start":455,"line_end":455,"column_start":1,"column_end":4}},{"value":"/ `scoring` - see [`bio::alignment::pairwise::Scoring`](struct.Scoring.html)","span":{"file_name":"/Users/shelwitz/.cargo/registry/src/github.com-1ecc6299db9ec823/bio-0.39.0/src/alignment/pairwise/mod.rs","byte_start":36037,"byte_end":36115,"line_start":456,"line_end":456,"column_start":1,"column_end":79}},{"value":"allow(non_snake_case)","span":{"file_name":"/Users/shelwitz/.cargo/registry/src/github.com-1ecc6299db9ec823/bio-0.39.0/src/alignment/pairwise/mod.rs","byte_start":36116,"byte_end":36140,"line_start":457,"line_end":457,"column_start":1,"column_end":25}}]},{"kind":"Method","id":{"krate":0,"index":186},"span":{"file_name":"/Users/shelwitz/.cargo/registry/src/github.com-1ecc6299db9ec823/bio-0.39.0/src/alignment/pairwise/mod.rs","byte_start":36894,"byte_end":36897,"line_start":481,"line_end":481,"column_start":12,"column_end":15},"name":"new","qualname":"<Aligner<F>>::new","value":"pub fn new(i32, i32, F) -> Self","parent":null,"children":[],"decl_id":null,"docs":" Create new aligner instance with given gap open and gap extend penalties\n and the score function.","sig":null,"attributes":[{"value":"/ Create new aligner instance with given gap open and gap extend penalties","span":{"file_name":"/Users/shelwitz/.cargo/registry/src/github.com-1ecc6299db9ec823/bio-0.39.0/src/alignment/pairwise/mod.rs","byte_start":36436,"byte_end":36512,"line_start":472,"line_end":472,"column_start":5,"column_end":81}},{"value":"/ and the score function.","span":{"file_name":"/Users/shelwitz/.cargo/registry/src/github.com-1ecc6299db9ec823/bio-0.39.0/src/alignment/pairwise/mod.rs","byte_start":36517,"byte_end":36544,"line_start":473,"line_end":473,"column_start":5,"column_end":32}},{"value":"/","span":{"file_name":"/Users/shelwitz/.cargo/registry/src/github.com-1ecc6299db9ec823/bio-0.39.0/src/alignment/pairwise/mod.rs","byte_start":36549,"byte_end":36552,"line_start":474,"line_end":474,"column_start":5,"column_end":8}},{"value":"/ # Arguments","span":{"file_name":"/Users/shelwitz/.cargo/registry/src/github.com-1ecc6299db9ec823/bio-0.39.0/src/alignment/pairwise/mod.rs","byte_start":36557,"byte_end":36572,"line_start":475,"line_end":475,"column_start":5,"column_end":20}},{"value":"/","span":{"file_name":"/Users/shelwitz/.cargo/registry/src/github.com-1ecc6299db9ec823/bio-0.39.0/src/alignment/pairwise/mod.rs","byte_start":36577,"byte_end":36580,"line_start":476,"line_end":476,"column_start":5,"column_end":8}},{"value":"/ * `gap_open` - the score for opening a gap (should be negative)","span":{"file_name":"/Users/shelwitz/.cargo/registry/src/github.com-1ecc6299db9ec823/bio-0.39.0/src/alignment/pairwise/mod.rs","byte_start":36585,"byte_end":36652,"line_start":477,"line_end":477,"column_start":5,"column_end":72}},{"value":"/ * `gap_extend` - the score for extending a gap (should be negative)","span":{"file_name":"/Users/shelwitz/.cargo/registry/src/github.com-1ecc6299db9ec823/bio-0.39.0/src/alignment/pairwise/mod.rs","byte_start":36657,"byte_end":36728,"line_start":478,"line_end":478,"column_start":5,"column_end":76}},{"value":"/ * `match_fn` - function that returns the score for substitutions","span":{"file_name":"/Users/shelwitz/.cargo/registry/src/github.com-1ecc6299db9ec823/bio-0.39.0/src/alignment/pairwise/mod.rs","byte_start":36733,"byte_end":36801,"line_start":479,"line_end":479,"column_start":5,"column_end":73}},{"value":"/    (see also [`bio::alignment::pairwise::Scoring`](struct.Scoring.html))","span":{"file_name":"/Users/shelwitz/.cargo/registry/src/github.com-1ecc6299db9ec823/bio-0.39.0/src/alignment/pairwise/mod.rs","byte_start":36806,"byte_end":36882,"line_start":480,"line_end":480,"column_start":5,"column_end":81}}]},{"kind":"Method","id":{"krate":0,"index":187},"span":{"file_name":"/Users/shelwitz/.cargo/registry/src/github.com-1ecc6299db9ec823/bio-0.39.0/src/alignment/pairwise/mod.rs","byte_start":37679,"byte_end":37692,"line_start":502,"line_end":502,"column_start":12,"column_end":25},"name":"with_capacity","qualname":"<Aligner<F>>::with_capacity","value":"pub fn with_capacity(usize, usize, i32, i32, F) -> Self","parent":null,"children":[],"decl_id":null,"docs":" Create new aligner instance. The size hints help to\n avoid unnecessary memory allocations.","sig":null,"attributes":[{"value":"/ Create new aligner instance. The size hints help to","span":{"file_name":"/Users/shelwitz/.cargo/registry/src/github.com-1ecc6299db9ec823/bio-0.39.0/src/alignment/pairwise/mod.rs","byte_start":37150,"byte_end":37205,"line_start":491,"line_end":491,"column_start":5,"column_end":60}},{"value":"/ avoid unnecessary memory allocations.","span":{"file_name":"/Users/shelwitz/.cargo/registry/src/github.com-1ecc6299db9ec823/bio-0.39.0/src/alignment/pairwise/mod.rs","byte_start":37210,"byte_end":37251,"line_start":492,"line_end":492,"column_start":5,"column_end":46}},{"value":"/","span":{"file_name":"/Users/shelwitz/.cargo/registry/src/github.com-1ecc6299db9ec823/bio-0.39.0/src/alignment/pairwise/mod.rs","byte_start":37256,"byte_end":37259,"line_start":493,"line_end":493,"column_start":5,"column_end":8}},{"value":"/ # Arguments","span":{"file_name":"/Users/shelwitz/.cargo/registry/src/github.com-1ecc6299db9ec823/bio-0.39.0/src/alignment/pairwise/mod.rs","byte_start":37264,"byte_end":37279,"line_start":494,"line_end":494,"column_start":5,"column_end":20}},{"value":"/","span":{"file_name":"/Users/shelwitz/.cargo/registry/src/github.com-1ecc6299db9ec823/bio-0.39.0/src/alignment/pairwise/mod.rs","byte_start":37284,"byte_end":37287,"line_start":495,"line_end":495,"column_start":5,"column_end":8}},{"value":"/ * `m` - the expected size of x","span":{"file_name":"/Users/shelwitz/.cargo/registry/src/github.com-1ecc6299db9ec823/bio-0.39.0/src/alignment/pairwise/mod.rs","byte_start":37292,"byte_end":37326,"line_start":496,"line_end":496,"column_start":5,"column_end":39}},{"value":"/ * `n` - the expected size of y","span":{"file_name":"/Users/shelwitz/.cargo/registry/src/github.com-1ecc6299db9ec823/bio-0.39.0/src/alignment/pairwise/mod.rs","byte_start":37331,"byte_end":37365,"line_start":497,"line_end":497,"column_start":5,"column_end":39}},{"value":"/ * `gap_open` - the score for opening a gap (should be negative)","span":{"file_name":"/Users/shelwitz/.cargo/registry/src/github.com-1ecc6299db9ec823/bio-0.39.0/src/alignment/pairwise/mod.rs","byte_start":37370,"byte_end":37437,"line_start":498,"line_end":498,"column_start":5,"column_end":72}},{"value":"/ * `gap_extend` - the score for extending a gap (should be negative)","span":{"file_name":"/Users/shelwitz/.cargo/registry/src/github.com-1ecc6299db9ec823/bio-0.39.0/src/alignment/pairwise/mod.rs","byte_start":37442,"byte_end":37513,"line_start":499,"line_end":499,"column_start":5,"column_end":76}},{"value":"/ * `match_fn` - function that returns the score for substitutions","span":{"file_name":"/Users/shelwitz/.cargo/registry/src/github.com-1ecc6299db9ec823/bio-0.39.0/src/alignment/pairwise/mod.rs","byte_start":37518,"byte_end":37586,"line_start":500,"line_end":500,"column_start":5,"column_end":73}},{"value":"/    (see also [`bio::alignment::pairwise::Scoring`](struct.Scoring.html))","span":{"file_name":"/Users/shelwitz/.cargo/registry/src/github.com-1ecc6299db9ec823/bio-0.39.0/src/alignment/pairwise/mod.rs","byte_start":37591,"byte_end":37667,"line_start":501,"line_end":501,"column_start":5,"column_end":81}}]},{"kind":"Method","id":{"krate":0,"index":188},"span":{"file_name":"/Users/shelwitz/.cargo/registry/src/github.com-1ecc6299db9ec823/bio-0.39.0/src/alignment/pairwise/mod.rs","byte_start":38590,"byte_end":38602,"line_start":523,"line_end":523,"column_start":12,"column_end":24},"name":"with_scoring","qualname":"<Aligner<F>>::with_scoring","value":"pub fn with_scoring(Scoring<F>) -> Self","parent":null,"children":[],"decl_id":null,"docs":" Create new aligner instance with given the scoring struct","sig":null,"attributes":[{"value":"/ Create new aligner instance with given the scoring struct","span":{"file_name":"/Users/shelwitz/.cargo/registry/src/github.com-1ecc6299db9ec823/bio-0.39.0/src/alignment/pairwise/mod.rs","byte_start":38400,"byte_end":38461,"line_start":518,"line_end":518,"column_start":5,"column_end":66}},{"value":"/","span":{"file_name":"/Users/shelwitz/.cargo/registry/src/github.com-1ecc6299db9ec823/bio-0.39.0/src/alignment/pairwise/mod.rs","byte_start":38466,"byte_end":38469,"line_start":519,"line_end":519,"column_start":5,"column_end":8}},{"value":"/ # Arguments","span":{"file_name":"/Users/shelwitz/.cargo/registry/src/github.com-1ecc6299db9ec823/bio-0.39.0/src/alignment/pairwise/mod.rs","byte_start":38474,"byte_end":38489,"line_start":520,"line_end":520,"column_start":5,"column_end":20}},{"value":"/","span":{"file_name":"/Users/shelwitz/.cargo/registry/src/github.com-1ecc6299db9ec823/bio-0.39.0/src/alignment/pairwise/mod.rs","byte_start":38494,"byte_end":38497,"line_start":521,"line_end":521,"column_start":5,"column_end":8}},{"value":"/ * `scoring` - the scoring struct (see bio::alignment::pairwise::Scoring)","span":{"file_name":"/Users/shelwitz/.cargo/registry/src/github.com-1ecc6299db9ec823/bio-0.39.0/src/alignment/pairwise/mod.rs","byte_start":38502,"byte_end":38578,"line_start":522,"line_end":522,"column_start":5,"column_end":81}}]},{"kind":"Method","id":{"krate":0,"index":189},"span":{"file_name":"/Users/shelwitz/.cargo/registry/src/github.com-1ecc6299db9ec823/bio-0.39.0/src/alignment/pairwise/mod.rs","byte_start":39091,"byte_end":39116,"line_start":539,"line_end":539,"column_start":12,"column_end":37},"name":"with_capacity_and_scoring","qualname":"<Aligner<F>>::with_capacity_and_scoring","value":"pub fn with_capacity_and_scoring(usize, usize, Scoring<F>) -> Self","parent":null,"children":[],"decl_id":null,"docs":" Create new aligner instance with scoring and size hint. The size hints help to\n avoid unnecessary memory allocations.","sig":null,"attributes":[{"value":"/ Create new aligner instance with scoring and size hint. The size hints help to","span":{"file_name":"/Users/shelwitz/.cargo/registry/src/github.com-1ecc6299db9ec823/bio-0.39.0/src/alignment/pairwise/mod.rs","byte_start":38796,"byte_end":38878,"line_start":531,"line_end":531,"column_start":5,"column_end":87}},{"value":"/ avoid unnecessary memory allocations.","span":{"file_name":"/Users/shelwitz/.cargo/registry/src/github.com-1ecc6299db9ec823/bio-0.39.0/src/alignment/pairwise/mod.rs","byte_start":38883,"byte_end":38924,"line_start":532,"line_end":532,"column_start":5,"column_end":46}},{"value":"/","span":{"file_name":"/Users/shelwitz/.cargo/registry/src/github.com-1ecc6299db9ec823/bio-0.39.0/src/alignment/pairwise/mod.rs","byte_start":38929,"byte_end":38932,"line_start":533,"line_end":533,"column_start":5,"column_end":8}},{"value":"/ # Arguments","span":{"file_name":"/Users/shelwitz/.cargo/registry/src/github.com-1ecc6299db9ec823/bio-0.39.0/src/alignment/pairwise/mod.rs","byte_start":38937,"byte_end":38952,"line_start":534,"line_end":534,"column_start":5,"column_end":20}},{"value":"/","span":{"file_name":"/Users/shelwitz/.cargo/registry/src/github.com-1ecc6299db9ec823/bio-0.39.0/src/alignment/pairwise/mod.rs","byte_start":38957,"byte_end":38960,"line_start":535,"line_end":535,"column_start":5,"column_end":8}},{"value":"/ * `m` - the expected size of x","span":{"file_name":"/Users/shelwitz/.cargo/registry/src/github.com-1ecc6299db9ec823/bio-0.39.0/src/alignment/pairwise/mod.rs","byte_start":38965,"byte_end":38999,"line_start":536,"line_end":536,"column_start":5,"column_end":39}},{"value":"/ * `n` - the expected size of y","span":{"file_name":"/Users/shelwitz/.cargo/registry/src/github.com-1ecc6299db9ec823/bio-0.39.0/src/alignment/pairwise/mod.rs","byte_start":39004,"byte_end":39038,"line_start":537,"line_end":537,"column_start":5,"column_end":39}},{"value":"/ * `scoring` - the scoring struct","span":{"file_name":"/Users/shelwitz/.cargo/registry/src/github.com-1ecc6299db9ec823/bio-0.39.0/src/alignment/pairwise/mod.rs","byte_start":39043,"byte_end":39079,"line_start":538,"line_end":538,"column_start":5,"column_end":41}}]},{"kind":"Method","id":{"krate":0,"index":190},"span":{"file_name":"/Users/shelwitz/.cargo/registry/src/github.com-1ecc6299db9ec823/bio-0.39.0/src/alignment/pairwise/mod.rs","byte_start":40424,"byte_end":40430,"line_start":577,"line_end":577,"column_start":12,"column_end":18},"name":"custom","qualname":"<Aligner<F>>::custom","value":"pub fn custom(&mut Self, TextSlice, TextSlice) -> Alignment","parent":null,"children":[],"decl_id":null,"docs":" The core function to compute the alignment","sig":null,"attributes":[{"value":"/ The core function to compute the alignment","span":{"file_name":"/Users/shelwitz/.cargo/registry/src/github.com-1ecc6299db9ec823/bio-0.39.0/src/alignment/pairwise/mod.rs","byte_start":40278,"byte_end":40324,"line_start":571,"line_end":571,"column_start":5,"column_end":51}},{"value":"/","span":{"file_name":"/Users/shelwitz/.cargo/registry/src/github.com-1ecc6299db9ec823/bio-0.39.0/src/alignment/pairwise/mod.rs","byte_start":40329,"byte_end":40332,"line_start":572,"line_end":572,"column_start":5,"column_end":8}},{"value":"/ # Arguments","span":{"file_name":"/Users/shelwitz/.cargo/registry/src/github.com-1ecc6299db9ec823/bio-0.39.0/src/alignment/pairwise/mod.rs","byte_start":40337,"byte_end":40352,"line_start":573,"line_end":573,"column_start":5,"column_end":20}},{"value":"/","span":{"file_name":"/Users/shelwitz/.cargo/registry/src/github.com-1ecc6299db9ec823/bio-0.39.0/src/alignment/pairwise/mod.rs","byte_start":40357,"byte_end":40360,"line_start":574,"line_end":574,"column_start":5,"column_end":8}},{"value":"/ * `x` - Textslice","span":{"file_name":"/Users/shelwitz/.cargo/registry/src/github.com-1ecc6299db9ec823/bio-0.39.0/src/alignment/pairwise/mod.rs","byte_start":40365,"byte_end":40386,"line_start":575,"line_end":575,"column_start":5,"column_end":26}},{"value":"/ * `y` - Textslice","span":{"file_name":"/Users/shelwitz/.cargo/registry/src/github.com-1ecc6299db9ec823/bio-0.39.0/src/alignment/pairwise/mod.rs","byte_start":40391,"byte_end":40412,"line_start":576,"line_end":576,"column_start":5,"column_end":26}}]},{"kind":"Method","id":{"krate":0,"index":191},"span":{"file_name":"/Users/shelwitz/.cargo/registry/src/github.com-1ecc6299db9ec823/bio-0.39.0/src/alignment/pairwise/mod.rs","byte_start":53514,"byte_end":53520,"line_start":913,"line_end":913,"column_start":12,"column_end":18},"name":"global","qualname":"<Aligner<F>>::global","value":"pub fn global(&mut Self, TextSlice, TextSlice) -> Alignment","parent":null,"children":[],"decl_id":null,"docs":" Calculate global alignment of x against y.\n","sig":null,"attributes":[{"value":"/ Calculate global alignment of x against y.","span":{"file_name":"/Users/shelwitz/.cargo/registry/src/github.com-1ecc6299db9ec823/bio-0.39.0/src/alignment/pairwise/mod.rs","byte_start":53456,"byte_end":53502,"line_start":912,"line_end":912,"column_start":5,"column_end":51}}]},{"kind":"Method","id":{"krate":0,"index":192},"span":{"file_name":"/Users/shelwitz/.cargo/registry/src/github.com-1ecc6299db9ec823/bio-0.39.0/src/alignment/pairwise/mod.rs","byte_start":54592,"byte_end":54602,"line_start":942,"line_end":942,"column_start":12,"column_end":22},"name":"semiglobal","qualname":"<Aligner<F>>::semiglobal","value":"pub fn semiglobal(&mut Self, TextSlice, TextSlice) -> Alignment","parent":null,"children":[],"decl_id":null,"docs":" Calculate semiglobal alignment of x against y (x is global, y is local).\n","sig":null,"attributes":[{"value":"/ Calculate semiglobal alignment of x against y (x is global, y is local).","span":{"file_name":"/Users/shelwitz/.cargo/registry/src/github.com-1ecc6299db9ec823/bio-0.39.0/src/alignment/pairwise/mod.rs","byte_start":54504,"byte_end":54580,"line_start":941,"line_end":941,"column_start":5,"column_end":81}}]},{"kind":"Method","id":{"krate":0,"index":193},"span":{"file_name":"/Users/shelwitz/.cargo/registry/src/github.com-1ecc6299db9ec823/bio-0.39.0/src/alignment/pairwise/mod.rs","byte_start":55740,"byte_end":55745,"line_start":974,"line_end":974,"column_start":12,"column_end":17},"name":"local","qualname":"<Aligner<F>>::local","value":"pub fn local(&mut Self, TextSlice, TextSlice) -> Alignment","parent":null,"children":[],"decl_id":null,"docs":" Calculate local alignment of x against y.\n","sig":null,"attributes":[{"value":"/ Calculate local alignment of x against y.","span":{"file_name":"/Users/shelwitz/.cargo/registry/src/github.com-1ecc6299db9ec823/bio-0.39.0/src/alignment/pairwise/mod.rs","byte_start":55683,"byte_end":55728,"line_start":973,"line_end":973,"column_start":5,"column_end":50}}]},{"kind":"Struct","id":{"krate":0,"index":3353},"span":{"file_name":"/Users/shelwitz/.cargo/registry/src/github.com-1ecc6299db9ec823/bio-0.39.0/src/alignment/pairwise/mod.rs","byte_start":57181,"byte_end":57194,"line_start":1012,"line_end":1012,"column_start":12,"column_end":25},"name":"TracebackCell","qualname":"::alignment::pairwise::TracebackCell","value":"TracebackCell {  }","parent":null,"children":[{"krate":0,"index":3354}],"decl_id":null,"docs":" Packed representation of one cell of a Smith-Waterman traceback matrix.\n Stores the I, D and S traceback matrix values in two bytes.\n Possible traceback moves include : start, insert, delete, match, substitute,\n prefix clip and suffix clip for x & y. So we need 4 bits each for matrices I, D, S\n to keep track of these 9 moves.\n","sig":null,"attributes":[{"value":"/ Packed representation of one cell of a Smith-Waterman traceback matrix.","span":{"file_name":"/Users/shelwitz/.cargo/registry/src/github.com-1ecc6299db9ec823/bio-0.39.0/src/alignment/pairwise/mod.rs","byte_start":56803,"byte_end":56878,"line_start":1006,"line_end":1006,"column_start":1,"column_end":76}},{"value":"/ Stores the I, D and S traceback matrix values in two bytes.","span":{"file_name":"/Users/shelwitz/.cargo/registry/src/github.com-1ecc6299db9ec823/bio-0.39.0/src/alignment/pairwise/mod.rs","byte_start":56879,"byte_end":56942,"line_start":1007,"line_end":1007,"column_start":1,"column_end":64}},{"value":"/ Possible traceback moves include : start, insert, delete, match, substitute,","span":{"file_name":"/Users/shelwitz/.cargo/registry/src/github.com-1ecc6299db9ec823/bio-0.39.0/src/alignment/pairwise/mod.rs","byte_start":56943,"byte_end":57023,"line_start":1008,"line_end":1008,"column_start":1,"column_end":81}},{"value":"/ prefix clip and suffix clip for x & y. So we need 4 bits each for matrices I, D, S","span":{"file_name":"/Users/shelwitz/.cargo/registry/src/github.com-1ecc6299db9ec823/bio-0.39.0/src/alignment/pairwise/mod.rs","byte_start":57024,"byte_end":57110,"line_start":1009,"line_end":1009,"column_start":1,"column_end":87}},{"value":"/ to keep track of these 9 moves.","span":{"file_name":"/Users/shelwitz/.cargo/registry/src/github.com-1ecc6299db9ec823/bio-0.39.0/src/alignment/pairwise/mod.rs","byte_start":57111,"byte_end":57146,"line_start":1010,"line_end":1010,"column_start":1,"column_end":36}}]},{"kind":"Method","id":{"krate":0,"index":210},"span":{"file_name":"/Users/shelwitz/.cargo/registry/src/github.com-1ecc6299db9ec823/bio-0.39.0/src/alignment/pairwise/mod.rs","byte_start":58073,"byte_end":58076,"line_start":1045,"line_end":1045,"column_start":12,"column_end":15},"name":"new","qualname":"<TracebackCell>::new","value":"pub fn new() -> TracebackCell","parent":null,"children":[],"decl_id":null,"docs":" Initialize a blank traceback cell\n","sig":null,"attributes":[{"value":"/ Initialize a blank traceback cell","span":{"file_name":"/Users/shelwitz/.cargo/registry/src/github.com-1ecc6299db9ec823/bio-0.39.0/src/alignment/pairwise/mod.rs","byte_start":58002,"byte_end":58039,"line_start":1043,"line_end":1043,"column_start":5,"column_end":42}},{"value":"inline(always)","span":{"file_name":"/Users/shelwitz/.cargo/registry/src/github.com-1ecc6299db9ec823/bio-0.39.0/src/alignment/pairwise/mod.rs","byte_start":58044,"byte_end":58061,"line_start":1044,"line_end":1044,"column_start":5,"column_end":22}}]},{"kind":"Method","id":{"krate":0,"index":212},"span":{"file_name":"/Users/shelwitz/.cargo/registry/src/github.com-1ecc6299db9ec823/bio-0.39.0/src/alignment/pairwise/mod.rs","byte_start":58577,"byte_end":58587,"line_start":1062,"line_end":1062,"column_start":12,"column_end":22},"name":"set_i_bits","qualname":"<TracebackCell>::set_i_bits","value":"pub fn set_i_bits(&mut Self, u16)","parent":null,"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[{"value":"inline(always)","span":{"file_name":"/Users/shelwitz/.cargo/registry/src/github.com-1ecc6299db9ec823/bio-0.39.0/src/alignment/pairwise/mod.rs","byte_start":58548,"byte_end":58565,"line_start":1061,"line_end":1061,"column_start":5,"column_end":22}}]},{"kind":"Method","id":{"krate":0,"index":213},"span":{"file_name":"/Users/shelwitz/.cargo/registry/src/github.com-1ecc6299db9ec823/bio-0.39.0/src/alignment/pairwise/mod.rs","byte_start":58737,"byte_end":58747,"line_start":1068,"line_end":1068,"column_start":12,"column_end":22},"name":"set_d_bits","qualname":"<TracebackCell>::set_d_bits","value":"pub fn set_d_bits(&mut Self, u16)","parent":null,"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[{"value":"inline(always)","span":{"file_name":"/Users/shelwitz/.cargo/registry/src/github.com-1ecc6299db9ec823/bio-0.39.0/src/alignment/pairwise/mod.rs","byte_start":58708,"byte_end":58725,"line_start":1067,"line_end":1067,"column_start":5,"column_end":22}}]},{"kind":"Method","id":{"krate":0,"index":214},"span":{"file_name":"/Users/shelwitz/.cargo/registry/src/github.com-1ecc6299db9ec823/bio-0.39.0/src/alignment/pairwise/mod.rs","byte_start":58897,"byte_end":58907,"line_start":1074,"line_end":1074,"column_start":12,"column_end":22},"name":"set_s_bits","qualname":"<TracebackCell>::set_s_bits","value":"pub fn set_s_bits(&mut Self, u16)","parent":null,"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[{"value":"inline(always)","span":{"file_name":"/Users/shelwitz/.cargo/registry/src/github.com-1ecc6299db9ec823/bio-0.39.0/src/alignment/pairwise/mod.rs","byte_start":58868,"byte_end":58885,"line_start":1073,"line_end":1073,"column_start":5,"column_end":22}}]},{"kind":"Method","id":{"krate":0,"index":216},"span":{"file_name":"/Users/shelwitz/.cargo/registry/src/github.com-1ecc6299db9ec823/bio-0.39.0/src/alignment/pairwise/mod.rs","byte_start":59198,"byte_end":59208,"line_start":1086,"line_end":1086,"column_start":12,"column_end":22},"name":"get_i_bits","qualname":"<TracebackCell>::get_i_bits","value":"pub fn get_i_bits(Self) -> u16","parent":null,"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[{"value":"inline(always)","span":{"file_name":"/Users/shelwitz/.cargo/registry/src/github.com-1ecc6299db9ec823/bio-0.39.0/src/alignment/pairwise/mod.rs","byte_start":59169,"byte_end":59186,"line_start":1085,"line_end":1085,"column_start":5,"column_end":22}}]},{"kind":"Method","id":{"krate":0,"index":217},"span":{"file_name":"/Users/shelwitz/.cargo/registry/src/github.com-1ecc6299db9ec823/bio-0.39.0/src/alignment/pairwise/mod.rs","byte_start":59293,"byte_end":59303,"line_start":1091,"line_end":1091,"column_start":12,"column_end":22},"name":"get_d_bits","qualname":"<TracebackCell>::get_d_bits","value":"pub fn get_d_bits(Self) -> u16","parent":null,"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[{"value":"inline(always)","span":{"file_name":"/Users/shelwitz/.cargo/registry/src/github.com-1ecc6299db9ec823/bio-0.39.0/src/alignment/pairwise/mod.rs","byte_start":59264,"byte_end":59281,"line_start":1090,"line_end":1090,"column_start":5,"column_end":22}}]},{"kind":"Method","id":{"krate":0,"index":218},"span":{"file_name":"/Users/shelwitz/.cargo/registry/src/github.com-1ecc6299db9ec823/bio-0.39.0/src/alignment/pairwise/mod.rs","byte_start":59388,"byte_end":59398,"line_start":1096,"line_end":1096,"column_start":12,"column_end":22},"name":"get_s_bits","qualname":"<TracebackCell>::get_s_bits","value":"pub fn get_s_bits(Self) -> u16","parent":null,"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[{"value":"inline(always)","span":{"file_name":"/Users/shelwitz/.cargo/registry/src/github.com-1ecc6299db9ec823/bio-0.39.0/src/alignment/pairwise/mod.rs","byte_start":59359,"byte_end":59376,"line_start":1095,"line_end":1095,"column_start":5,"column_end":22}}]},{"kind":"Method","id":{"krate":0,"index":219},"span":{"file_name":"/Users/shelwitz/.cargo/registry/src/github.com-1ecc6299db9ec823/bio-0.39.0/src/alignment/pairwise/mod.rs","byte_start":59505,"byte_end":59512,"line_start":1101,"line_end":1101,"column_start":12,"column_end":19},"name":"set_all","qualname":"<TracebackCell>::set_all","value":"pub fn set_all(&mut Self, u16)","parent":null,"children":[],"decl_id":null,"docs":" Set all matrices to the same value.\n","sig":null,"attributes":[{"value":"/ Set all matrices to the same value.","span":{"file_name":"/Users/shelwitz/.cargo/registry/src/github.com-1ecc6299db9ec823/bio-0.39.0/src/alignment/pairwise/mod.rs","byte_start":59454,"byte_end":59493,"line_start":1100,"line_end":1100,"column_start":5,"column_end":44}}]},{"kind":"Mod","id":{"krate":0,"index":231},"span":{"file_name":"/Users/shelwitz/.cargo/registry/src/github.com-1ecc6299db9ec823/bio-0.39.0/src/alignment/poa.rs","byte_start":0,"byte_end":0,"line_start":1,"line_end":1,"column_start":1,"column_end":1},"name":"poa","qualname":"::alignment::poa","value":"/Users/shelwitz/.cargo/registry/src/github.com-1ecc6299db9ec823/bio-0.39.0/src/alignment/poa.rs","parent":null,"children":[{"krate":0,"index":232},{"krate":0,"index":233},{"krate":0,"index":236},{"krate":0,"index":239},{"krate":0,"index":242},{"krate":0,"index":243},{"krate":0,"index":246},{"krate":0,"index":249},{"krate":0,"index":252},{"krate":0,"index":255},{"krate":0,"index":256},{"krate":0,"index":259},{"krate":0,"index":262},{"krate":0,"index":263},{"krate":0,"index":265},{"krate":0,"index":266},{"krate":0,"index":3358},{"krate":0,"index":3368},{"krate":0,"index":3370},{"krate":0,"index":267},{"krate":0,"index":3372},{"krate":0,"index":3375},{"krate":0,"index":3377},{"krate":0,"index":270},{"krate":0,"index":272},{"krate":0,"index":274},{"krate":0,"index":276},{"krate":0,"index":277},{"krate":0,"index":282},{"krate":0,"index":290},{"krate":0,"index":295},{"krate":0,"index":302},{"krate":0,"index":306}],"decl_id":null,"docs":" Partial-Order Alignment for fast alignment and consensus of multiple homologous sequences.","sig":null,"attributes":[{"value":"/ Partial-Order Alignment for fast alignment and consensus of multiple homologous sequences.","span":{"file_name":"/Users/shelwitz/.cargo/registry/src/github.com-1ecc6299db9ec823/bio-0.39.0/src/alignment/poa.rs","byte_start":166059,"byte_end":166153,"line_start":6,"line_end":6,"column_start":1,"column_end":95}},{"value":"/","span":{"file_name":"/Users/shelwitz/.cargo/registry/src/github.com-1ecc6299db9ec823/bio-0.39.0/src/alignment/poa.rs","byte_start":166154,"byte_end":166157,"line_start":7,"line_end":7,"column_start":1,"column_end":4}},{"value":"/ - time complexity: `O(N^2 * L^2)`, where `N` is the number of sequences and `L` is the length of each sequence.","span":{"file_name":"/Users/shelwitz/.cargo/registry/src/github.com-1ecc6299db9ec823/bio-0.39.0/src/alignment/poa.rs","byte_start":166158,"byte_end":166273,"line_start":8,"line_end":8,"column_start":1,"column_end":116}},{"value":"/","span":{"file_name":"/Users/shelwitz/.cargo/registry/src/github.com-1ecc6299db9ec823/bio-0.39.0/src/alignment/poa.rs","byte_start":166274,"byte_end":166277,"line_start":9,"line_end":9,"column_start":1,"column_end":4}},{"value":"/ For the original concept and theory, see:","span":{"file_name":"/Users/shelwitz/.cargo/registry/src/github.com-1ecc6299db9ec823/bio-0.39.0/src/alignment/poa.rs","byte_start":166278,"byte_end":166323,"line_start":10,"line_end":10,"column_start":1,"column_end":46}},{"value":"/ * Lee, Christopher, Catherine Grasso, and Mark F. Sharlow. \"Multiple sequence alignment using","span":{"file_name":"/Users/shelwitz/.cargo/registry/src/github.com-1ecc6299db9ec823/bio-0.39.0/src/alignment/poa.rs","byte_start":166324,"byte_end":166421,"line_start":11,"line_end":11,"column_start":1,"column_end":98}},{"value":"/ partial order graphs.\" Bioinformatics 18.3 (2002): 452-464.","span":{"file_name":"/Users/shelwitz/.cargo/registry/src/github.com-1ecc6299db9ec823/bio-0.39.0/src/alignment/poa.rs","byte_start":166422,"byte_end":166485,"line_start":12,"line_end":12,"column_start":1,"column_end":64}},{"value":"/ * Lee, Christopher. \"Generating consensus sequences from partial order multiple sequence","span":{"file_name":"/Users/shelwitz/.cargo/registry/src/github.com-1ecc6299db9ec823/bio-0.39.0/src/alignment/poa.rs","byte_start":166486,"byte_end":166578,"line_start":13,"line_end":13,"column_start":1,"column_end":93}},{"value":"/ alignment graphs.\" Bioinformatics 19.8 (2003): 999-1008.","span":{"file_name":"/Users/shelwitz/.cargo/registry/src/github.com-1ecc6299db9ec823/bio-0.39.0/src/alignment/poa.rs","byte_start":166579,"byte_end":166639,"line_start":14,"line_end":14,"column_start":1,"column_end":61}},{"value":"/","span":{"file_name":"/Users/shelwitz/.cargo/registry/src/github.com-1ecc6299db9ec823/bio-0.39.0/src/alignment/poa.rs","byte_start":166640,"byte_end":166643,"line_start":15,"line_end":15,"column_start":1,"column_end":4}},{"value":"/ For a modern reference implementation, see poapy:","span":{"file_name":"/Users/shelwitz/.cargo/registry/src/github.com-1ecc6299db9ec823/bio-0.39.0/src/alignment/poa.rs","byte_start":166644,"byte_end":166697,"line_start":16,"line_end":16,"column_start":1,"column_end":54}},{"value":"/ https://github.com/ljdursi/poapy","span":{"file_name":"/Users/shelwitz/.cargo/registry/src/github.com-1ecc6299db9ec823/bio-0.39.0/src/alignment/poa.rs","byte_start":166698,"byte_end":166734,"line_start":17,"line_end":17,"column_start":1,"column_end":37}},{"value":"/","span":{"file_name":"/Users/shelwitz/.cargo/registry/src/github.com-1ecc6299db9ec823/bio-0.39.0/src/alignment/poa.rs","byte_start":166735,"byte_end":166738,"line_start":18,"line_end":18,"column_start":1,"column_end":4}},{"value":"/ # Example","span":{"file_name":"/Users/shelwitz/.cargo/registry/src/github.com-1ecc6299db9ec823/bio-0.39.0/src/alignment/poa.rs","byte_start":166739,"byte_end":166752,"line_start":19,"line_end":19,"column_start":1,"column_end":14}},{"value":"/","span":{"file_name":"/Users/shelwitz/.cargo/registry/src/github.com-1ecc6299db9ec823/bio-0.39.0/src/alignment/poa.rs","byte_start":166753,"byte_end":166756,"line_start":20,"line_end":20,"column_start":1,"column_end":4}},{"value":"/ ```","span":{"file_name":"/Users/shelwitz/.cargo/registry/src/github.com-1ecc6299db9ec823/bio-0.39.0/src/alignment/poa.rs","byte_start":166757,"byte_end":166764,"line_start":21,"line_end":21,"column_start":1,"column_end":8}},{"value":"/ use bio::alignment::pairwise::Scoring;","span":{"file_name":"/Users/shelwitz/.cargo/registry/src/github.com-1ecc6299db9ec823/bio-0.39.0/src/alignment/poa.rs","byte_start":166765,"byte_end":166807,"line_start":22,"line_end":22,"column_start":1,"column_end":43}},{"value":"/ use bio::alignment::poa::*;","span":{"file_name":"/Users/shelwitz/.cargo/registry/src/github.com-1ecc6299db9ec823/bio-0.39.0/src/alignment/poa.rs","byte_start":166808,"byte_end":166839,"line_start":23,"line_end":23,"column_start":1,"column_end":32}},{"value":"/","span":{"file_name":"/Users/shelwitz/.cargo/registry/src/github.com-1ecc6299db9ec823/bio-0.39.0/src/alignment/poa.rs","byte_start":166840,"byte_end":166843,"line_start":24,"line_end":24,"column_start":1,"column_end":4}},{"value":"/ let x = b\"AAAAAAA\";","span":{"file_name":"/Users/shelwitz/.cargo/registry/src/github.com-1ecc6299db9ec823/bio-0.39.0/src/alignment/poa.rs","byte_start":166844,"byte_end":166867,"line_start":25,"line_end":25,"column_start":1,"column_end":24}},{"value":"/ let y = b\"AABBBAA\";","span":{"file_name":"/Users/shelwitz/.cargo/registry/src/github.com-1ecc6299db9ec823/bio-0.39.0/src/alignment/poa.rs","byte_start":166868,"byte_end":166891,"line_start":26,"line_end":26,"column_start":1,"column_end":24}},{"value":"/ let z = b\"AABCBAA\";","span":{"file_name":"/Users/shelwitz/.cargo/registry/src/github.com-1ecc6299db9ec823/bio-0.39.0/src/alignment/poa.rs","byte_start":166892,"byte_end":166915,"line_start":27,"line_end":27,"column_start":1,"column_end":24}},{"value":"/","span":{"file_name":"/Users/shelwitz/.cargo/registry/src/github.com-1ecc6299db9ec823/bio-0.39.0/src/alignment/poa.rs","byte_start":166916,"byte_end":166919,"line_start":28,"line_end":28,"column_start":1,"column_end":4}},{"value":"/ let scoring = Scoring::new(-1, 0, |a: u8, b: u8| if a == b { 1i32 } else { -1i32 });","span":{"file_name":"/Users/shelwitz/.cargo/registry/src/github.com-1ecc6299db9ec823/bio-0.39.0/src/alignment/poa.rs","byte_start":166920,"byte_end":167008,"line_start":29,"line_end":29,"column_start":1,"column_end":89}},{"value":"/ let mut aligner = Aligner::new(scoring, x);","span":{"file_name":"/Users/shelwitz/.cargo/registry/src/github.com-1ecc6299db9ec823/bio-0.39.0/src/alignment/poa.rs","byte_start":167009,"byte_end":167056,"line_start":30,"line_end":30,"column_start":1,"column_end":48}},{"value":"/ // z differs from x in 3 locations","span":{"file_name":"/Users/shelwitz/.cargo/registry/src/github.com-1ecc6299db9ec823/bio-0.39.0/src/alignment/poa.rs","byte_start":167057,"byte_end":167095,"line_start":31,"line_end":31,"column_start":1,"column_end":39}},{"value":"/ assert_eq!(aligner.global(z).alignment().score, 1);","span":{"file_name":"/Users/shelwitz/.cargo/registry/src/github.com-1ecc6299db9ec823/bio-0.39.0/src/alignment/poa.rs","byte_start":167096,"byte_end":167151,"line_start":32,"line_end":32,"column_start":1,"column_end":56}},{"value":"/ aligner.global(y).add_to_graph();","span":{"file_name":"/Users/shelwitz/.cargo/registry/src/github.com-1ecc6299db9ec823/bio-0.39.0/src/alignment/poa.rs","byte_start":167152,"byte_end":167189,"line_start":33,"line_end":33,"column_start":1,"column_end":38}},{"value":"/ // z differs from x and y's partial order alignment by 1 base","span":{"file_name":"/Users/shelwitz/.cargo/registry/src/github.com-1ecc6299db9ec823/bio-0.39.0/src/alignment/poa.rs","byte_start":167190,"byte_end":167255,"line_start":34,"line_end":34,"column_start":1,"column_end":66}},{"value":"/ assert_eq!(aligner.global(z).alignment().score, 5);","span":{"file_name":"/Users/shelwitz/.cargo/registry/src/github.com-1ecc6299db9ec823/bio-0.39.0/src/alignment/poa.rs","byte_start":167256,"byte_end":167311,"line_start":35,"line_end":35,"column_start":1,"column_end":56}},{"value":"/ ```","span":{"file_name":"/Users/shelwitz/.cargo/registry/src/github.com-1ecc6299db9ec823/bio-0.39.0/src/alignment/poa.rs","byte_start":167312,"byte_end":167319,"line_start":36,"line_end":36,"column_start":1,"column_end":8}}]},{"kind":"Const","id":{"krate":0,"index":265},"span":{"file_name":"/Users/shelwitz/.cargo/registry/src/github.com-1ecc6299db9ec823/bio-0.39.0/src/alignment/poa.rs","byte_start":167552,"byte_end":167561,"line_start":49,"line_end":49,"column_start":11,"column_end":20},"name":"MIN_SCORE","qualname":"::alignment::poa::MIN_SCORE","value":"i32","parent":null,"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Type","id":{"krate":0,"index":266},"span":{"file_name":"/Users/shelwitz/.cargo/registry/src/github.com-1ecc6299db9ec823/bio-0.39.0/src/alignment/poa.rs","byte_start":167644,"byte_end":167652,"line_start":50,"line_end":50,"column_start":10,"column_end":18},"name":"POAGraph","qualname":"::alignment::poa::POAGraph","value":"Graph<u8, i32, Directed, usize>","parent":null,"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"TupleVariant","id":{"krate":0,"index":3359},"span":{"file_name":"/Users/shelwitz/.cargo/registry/src/github.com-1ecc6299db9ec823/bio-0.39.0/src/alignment/poa.rs","byte_start":167991,"byte_end":167996,"line_start":58,"line_end":58,"column_start":5,"column_end":10},"name":"Match","qualname":"::alignment::poa::AlignmentOperation::Match","value":"AlignmentOperation::Match(Option<(usize, usize)>)","parent":{"krate":0,"index":3358},"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"TupleVariant","id":{"krate":0,"index":3362},"span":{"file_name":"/Users/shelwitz/.cargo/registry/src/github.com-1ecc6299db9ec823/bio-0.39.0/src/alignment/poa.rs","byte_start":168026,"byte_end":168029,"line_start":59,"line_end":59,"column_start":5,"column_end":8},"name":"Del","qualname":"::alignment::poa::AlignmentOperation::Del","value":"AlignmentOperation::Del(Option<(usize, usize)>)","parent":{"krate":0,"index":3358},"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"TupleVariant","id":{"krate":0,"index":3365},"span":{"file_name":"/Users/shelwitz/.cargo/registry/src/github.com-1ecc6299db9ec823/bio-0.39.0/src/alignment/poa.rs","byte_start":168059,"byte_end":168062,"line_start":60,"line_end":60,"column_start":5,"column_end":8},"name":"Ins","qualname":"::alignment::poa::AlignmentOperation::Ins","value":"AlignmentOperation::Ins(Option<usize>)","parent":{"krate":0,"index":3358},"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Enum","id":{"krate":0,"index":3358},"span":{"file_name":"/Users/shelwitz/.cargo/registry/src/github.com-1ecc6299db9ec823/bio-0.39.0/src/alignment/poa.rs","byte_start":167966,"byte_end":167984,"line_start":57,"line_end":57,"column_start":10,"column_end":28},"name":"AlignmentOperation","qualname":"::alignment::poa::AlignmentOperation","value":"pub enum AlignmentOperation {\n    Match(Option<(usize, usize)>),\n    Del(Option<(usize, usize)>),\n    Ins(Option<usize>),\n}","parent":null,"children":[{"krate":0,"index":3359},{"krate":0,"index":3362},{"krate":0,"index":3365}],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Struct","id":{"krate":0,"index":267},"span":{"file_name":"/Users/shelwitz/.cargo/registry/src/github.com-1ecc6299db9ec823/bio-0.39.0/src/alignment/poa.rs","byte_start":168093,"byte_end":168102,"line_start":63,"line_end":63,"column_start":12,"column_end":21},"name":"Alignment","qualname":"::alignment::poa::Alignment","value":"Alignment { score }","parent":null,"children":[{"krate":0,"index":268},{"krate":0,"index":269}],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Field","id":{"krate":0,"index":268},"span":{"file_name":"/Users/shelwitz/.cargo/registry/src/github.com-1ecc6299db9ec823/bio-0.39.0/src/alignment/poa.rs","byte_start":168113,"byte_end":168118,"line_start":64,"line_end":64,"column_start":9,"column_end":14},"name":"score","qualname":"::alignment::poa::Alignment::score","value":"i32","parent":{"krate":0,"index":267},"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Struct","id":{"krate":0,"index":3372},"span":{"file_name":"/Users/shelwitz/.cargo/registry/src/github.com-1ecc6299db9ec823/bio-0.39.0/src/alignment/poa.rs","byte_start":168228,"byte_end":168241,"line_start":70,"line_end":70,"column_start":12,"column_end":25},"name":"TracebackCell","qualname":"::alignment::poa::TracebackCell","value":"TracebackCell {  }","parent":null,"children":[{"krate":0,"index":3373},{"krate":0,"index":3374}],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Struct","id":{"krate":0,"index":277},"span":{"file_name":"/Users/shelwitz/.cargo/registry/src/github.com-1ecc6299db9ec823/bio-0.39.0/src/alignment/poa.rs","byte_start":168774,"byte_end":168783,"line_start":97,"line_end":97,"column_start":12,"column_end":21},"name":"Traceback","qualname":"::alignment::poa::Traceback","value":"Traceback {  }","parent":null,"children":[{"krate":0,"index":278},{"krate":0,"index":279},{"krate":0,"index":280},{"krate":0,"index":281}],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":288},"span":{"file_name":"/Users/shelwitz/.cargo/registry/src/github.com-1ecc6299db9ec823/bio-0.39.0/src/alignment/poa.rs","byte_start":170765,"byte_end":170770,"line_start":173,"line_end":173,"column_start":12,"column_end":17},"name":"print","qualname":"<Traceback>::print","value":"pub fn print(&Self, &Graph<u8, i32, Directed, usize>, TextSlice)","parent":null,"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":289},"span":{"file_name":"/Users/shelwitz/.cargo/registry/src/github.com-1ecc6299db9ec823/bio-0.39.0/src/alignment/poa.rs","byte_start":171234,"byte_end":171243,"line_start":188,"line_end":188,"column_start":12,"column_end":21},"name":"alignment","qualname":"<Traceback>::alignment","value":"pub fn alignment(&Self) -> Alignment","parent":null,"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Struct","id":{"krate":0,"index":290},"span":{"file_name":"/Users/shelwitz/.cargo/registry/src/github.com-1ecc6299db9ec823/bio-0.39.0/src/alignment/poa.rs","byte_start":172747,"byte_end":172754,"line_start":236,"line_end":236,"column_start":12,"column_end":19},"name":"Aligner","qualname":"::alignment::poa::Aligner","value":"Aligner {  }","parent":null,"children":[{"krate":0,"index":292},{"krate":0,"index":293},{"krate":0,"index":294}],"decl_id":null,"docs":" A partially ordered aligner builder","sig":null,"attributes":[{"value":"/ A partially ordered aligner builder","span":{"file_name":"/Users/shelwitz/.cargo/registry/src/github.com-1ecc6299db9ec823/bio-0.39.0/src/alignment/poa.rs","byte_start":172594,"byte_end":172633,"line_start":233,"line_end":233,"column_start":1,"column_end":40}},{"value":"/","span":{"file_name":"/Users/shelwitz/.cargo/registry/src/github.com-1ecc6299db9ec823/bio-0.39.0/src/alignment/poa.rs","byte_start":172634,"byte_end":172637,"line_start":234,"line_end":234,"column_start":1,"column_end":4}},{"value":"/ Uses consuming builder pattern for constructing partial order alignments with method chaining","span":{"file_name":"/Users/shelwitz/.cargo/registry/src/github.com-1ecc6299db9ec823/bio-0.39.0/src/alignment/poa.rs","byte_start":172638,"byte_end":172735,"line_start":235,"line_end":235,"column_start":1,"column_end":98}}]},{"kind":"Method","id":{"krate":0,"index":297},"span":{"file_name":"/Users/shelwitz/.cargo/registry/src/github.com-1ecc6299db9ec823/bio-0.39.0/src/alignment/poa.rs","byte_start":172909,"byte_end":172912,"line_start":244,"line_end":244,"column_start":12,"column_end":15},"name":"new","qualname":"<Aligner<F>>::new","value":"pub fn new(Scoring<F>, TextSlice) -> Self","parent":null,"children":[],"decl_id":null,"docs":" Create new instance.\n","sig":null,"attributes":[{"value":"/ Create new instance.","span":{"file_name":"/Users/shelwitz/.cargo/registry/src/github.com-1ecc6299db9ec823/bio-0.39.0/src/alignment/poa.rs","byte_start":172873,"byte_end":172897,"line_start":243,"line_end":243,"column_start":5,"column_end":29}}]},{"kind":"Method","id":{"krate":0,"index":298},"span":{"file_name":"/Users/shelwitz/.cargo/registry/src/github.com-1ecc6299db9ec823/bio-0.39.0/src/alignment/poa.rs","byte_start":173205,"byte_end":173217,"line_start":253,"line_end":253,"column_start":12,"column_end":24},"name":"add_to_graph","qualname":"<Aligner<F>>::add_to_graph","value":"pub fn add_to_graph(&mut Self) -> &mut Self","parent":null,"children":[],"decl_id":null,"docs":" Add the alignment of the last query to the graph.\n","sig":null,"attributes":[{"value":"/ Add the alignment of the last query to the graph.","span":{"file_name":"/Users/shelwitz/.cargo/registry/src/github.com-1ecc6299db9ec823/bio-0.39.0/src/alignment/poa.rs","byte_start":173140,"byte_end":173193,"line_start":252,"line_end":252,"column_start":5,"column_end":58}}]},{"kind":"Method","id":{"krate":0,"index":299},"span":{"file_name":"/Users/shelwitz/.cargo/registry/src/github.com-1ecc6299db9ec823/bio-0.39.0/src/alignment/poa.rs","byte_start":173448,"byte_end":173457,"line_start":260,"line_end":260,"column_start":12,"column_end":21},"name":"alignment","qualname":"<Aligner<F>>::alignment","value":"pub fn alignment(&Self) -> Alignment","parent":null,"children":[],"decl_id":null,"docs":" Return alignment of last added query against the graph.\n","sig":null,"attributes":[{"value":"/ Return alignment of last added query against the graph.","span":{"file_name":"/Users/shelwitz/.cargo/registry/src/github.com-1ecc6299db9ec823/bio-0.39.0/src/alignment/poa.rs","byte_start":173377,"byte_end":173436,"line_start":259,"line_end":259,"column_start":5,"column_end":64}}]},{"kind":"Method","id":{"krate":0,"index":300},"span":{"file_name":"/Users/shelwitz/.cargo/registry/src/github.com-1ecc6299db9ec823/bio-0.39.0/src/alignment/poa.rs","byte_start":173589,"byte_end":173595,"line_start":265,"line_end":265,"column_start":12,"column_end":18},"name":"global","qualname":"<Aligner<F>>::global","value":"pub fn global(&mut Self, TextSlice) -> &mut Self","parent":null,"children":[],"decl_id":null,"docs":" Globally align a given query against the graph.\n","sig":null,"attributes":[{"value":"/ Globally align a given query against the graph.","span":{"file_name":"/Users/shelwitz/.cargo/registry/src/github.com-1ecc6299db9ec823/bio-0.39.0/src/alignment/poa.rs","byte_start":173526,"byte_end":173577,"line_start":264,"line_end":264,"column_start":5,"column_end":56}}]},{"kind":"Method","id":{"krate":0,"index":301},"span":{"file_name":"/Users/shelwitz/.cargo/registry/src/github.com-1ecc6299db9ec823/bio-0.39.0/src/alignment/poa.rs","byte_start":173789,"byte_end":173794,"line_start":272,"line_end":272,"column_start":12,"column_end":17},"name":"graph","qualname":"<Aligner<F>>::graph","value":"pub fn graph(&Self) -> &POAGraph","parent":null,"children":[],"decl_id":null,"docs":" Return alignment graph.\n","sig":null,"attributes":[{"value":"/ Return alignment graph.","span":{"file_name":"/Users/shelwitz/.cargo/registry/src/github.com-1ecc6299db9ec823/bio-0.39.0/src/alignment/poa.rs","byte_start":173750,"byte_end":173777,"line_start":271,"line_end":271,"column_start":5,"column_end":32}}]},{"kind":"Struct","id":{"krate":0,"index":302},"span":{"file_name":"/Users/shelwitz/.cargo/registry/src/github.com-1ecc6299db9ec823/bio-0.39.0/src/alignment/poa.rs","byte_start":174004,"byte_end":174007,"line_start":281,"line_end":281,"column_start":12,"column_end":15},"name":"Poa","qualname":"::alignment::poa::Poa","value":"Poa { graph }","parent":null,"children":[{"krate":0,"index":304},{"krate":0,"index":305}],"decl_id":null,"docs":" A partially ordered alignment graph","sig":null,"attributes":[{"value":"/ A partially ordered alignment graph","span":{"file_name":"/Users/shelwitz/.cargo/registry/src/github.com-1ecc6299db9ec823/bio-0.39.0/src/alignment/poa.rs","byte_start":173850,"byte_end":173889,"line_start":277,"line_end":277,"column_start":1,"column_end":40}},{"value":"/","span":{"file_name":"/Users/shelwitz/.cargo/registry/src/github.com-1ecc6299db9ec823/bio-0.39.0/src/alignment/poa.rs","byte_start":173890,"byte_end":173893,"line_start":278,"line_end":278,"column_start":1,"column_end":4}},{"value":"/ A directed acyclic graph datastructure that represents the topology of a","span":{"file_name":"/Users/shelwitz/.cargo/registry/src/github.com-1ecc6299db9ec823/bio-0.39.0/src/alignment/poa.rs","byte_start":173894,"byte_end":173970,"line_start":279,"line_end":279,"column_start":1,"column_end":77}},{"value":"/ traceback matrix.","span":{"file_name":"/Users/shelwitz/.cargo/registry/src/github.com-1ecc6299db9ec823/bio-0.39.0/src/alignment/poa.rs","byte_start":173971,"byte_end":173992,"line_start":280,"line_end":280,"column_start":1,"column_end":22}}]},{"kind":"Field","id":{"krate":0,"index":305},"span":{"file_name":"/Users/shelwitz/.cargo/registry/src/github.com-1ecc6299db9ec823/bio-0.39.0/src/alignment/poa.rs","byte_start":174057,"byte_end":174062,"line_start":283,"line_end":283,"column_start":9,"column_end":14},"name":"graph","qualname":"::alignment::poa::Poa::graph","value":"petgraph::Graph<u8, i32, petgraph::Directed, usize>","parent":{"krate":0,"index":302},"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":308},"span":{"file_name":"/Users/shelwitz/.cargo/registry/src/github.com-1ecc6299db9ec823/bio-0.39.0/src/alignment/poa.rs","byte_start":174333,"byte_end":174336,"line_start":293,"line_end":293,"column_start":12,"column_end":15},"name":"new","qualname":"<Poa<F>>::new","value":"pub fn new(Scoring<F>, POAGraph) -> Self","parent":null,"children":[],"decl_id":null,"docs":" Create a new aligner instance from the directed acyclic graph of another.","sig":null,"attributes":[{"value":"/ Create a new aligner instance from the directed acyclic graph of another.","span":{"file_name":"/Users/shelwitz/.cargo/registry/src/github.com-1ecc6299db9ec823/bio-0.39.0/src/alignment/poa.rs","byte_start":174109,"byte_end":174186,"line_start":287,"line_end":287,"column_start":5,"column_end":82}},{"value":"/","span":{"file_name":"/Users/shelwitz/.cargo/registry/src/github.com-1ecc6299db9ec823/bio-0.39.0/src/alignment/poa.rs","byte_start":174191,"byte_end":174194,"line_start":288,"line_end":288,"column_start":5,"column_end":8}},{"value":"/ # Arguments","span":{"file_name":"/Users/shelwitz/.cargo/registry/src/github.com-1ecc6299db9ec823/bio-0.39.0/src/alignment/poa.rs","byte_start":174199,"byte_end":174214,"line_start":289,"line_end":289,"column_start":5,"column_end":20}},{"value":"/","span":{"file_name":"/Users/shelwitz/.cargo/registry/src/github.com-1ecc6299db9ec823/bio-0.39.0/src/alignment/poa.rs","byte_start":174219,"byte_end":174222,"line_start":290,"line_end":290,"column_start":5,"column_end":8}},{"value":"/ * `scoring` - the score struct","span":{"file_name":"/Users/shelwitz/.cargo/registry/src/github.com-1ecc6299db9ec823/bio-0.39.0/src/alignment/poa.rs","byte_start":174227,"byte_end":174261,"line_start":291,"line_end":291,"column_start":5,"column_end":39}},{"value":"/ * `poa` - the partially ordered reference alignment","span":{"file_name":"/Users/shelwitz/.cargo/registry/src/github.com-1ecc6299db9ec823/bio-0.39.0/src/alignment/poa.rs","byte_start":174266,"byte_end":174321,"line_start":292,"line_end":292,"column_start":5,"column_end":60}}]},{"kind":"Method","id":{"krate":0,"index":309},"span":{"file_name":"/Users/shelwitz/.cargo/registry/src/github.com-1ecc6299db9ec823/bio-0.39.0/src/alignment/poa.rs","byte_start":174686,"byte_end":174697,"line_start":303,"line_end":303,"column_start":12,"column_end":23},"name":"from_string","qualname":"<Poa<F>>::from_string","value":"pub fn from_string(Scoring<F>, TextSlice) -> Self","parent":null,"children":[],"decl_id":null,"docs":" Create a new POA graph from an initial reference sequence and alignment penalties.","sig":null,"attributes":[{"value":"/ Create a new POA graph from an initial reference sequence and alignment penalties.","span":{"file_name":"/Users/shelwitz/.cargo/registry/src/github.com-1ecc6299db9ec823/bio-0.39.0/src/alignment/poa.rs","byte_start":174427,"byte_end":174513,"line_start":297,"line_end":297,"column_start":5,"column_end":91}},{"value":"/","span":{"file_name":"/Users/shelwitz/.cargo/registry/src/github.com-1ecc6299db9ec823/bio-0.39.0/src/alignment/poa.rs","byte_start":174518,"byte_end":174521,"line_start":298,"line_end":298,"column_start":5,"column_end":8}},{"value":"/ # Arguments","span":{"file_name":"/Users/shelwitz/.cargo/registry/src/github.com-1ecc6299db9ec823/bio-0.39.0/src/alignment/poa.rs","byte_start":174526,"byte_end":174541,"line_start":299,"line_end":299,"column_start":5,"column_end":20}},{"value":"/","span":{"file_name":"/Users/shelwitz/.cargo/registry/src/github.com-1ecc6299db9ec823/bio-0.39.0/src/alignment/poa.rs","byte_start":174546,"byte_end":174549,"line_start":300,"line_end":300,"column_start":5,"column_end":8}},{"value":"/ * `scoring` - the score struct","span":{"file_name":"/Users/shelwitz/.cargo/registry/src/github.com-1ecc6299db9ec823/bio-0.39.0/src/alignment/poa.rs","byte_start":174554,"byte_end":174588,"line_start":301,"line_end":301,"column_start":5,"column_end":39}},{"value":"/ * `reference` - a reference TextSlice to populate the initial reference graph","span":{"file_name":"/Users/shelwitz/.cargo/registry/src/github.com-1ecc6299db9ec823/bio-0.39.0/src/alignment/poa.rs","byte_start":174593,"byte_end":174674,"line_start":302,"line_end":302,"column_start":5,"column_end":86}}]},{"kind":"Method","id":{"krate":0,"index":310},"span":{"file_name":"/Users/shelwitz/.cargo/registry/src/github.com-1ecc6299db9ec823/bio-0.39.0/src/alignment/poa.rs","byte_start":175360,"byte_end":175366,"line_start":321,"line_end":321,"column_start":12,"column_end":18},"name":"global","qualname":"<Poa<F>>::global","value":"pub fn global(&Self, TextSlice) -> Traceback","parent":null,"children":[],"decl_id":null,"docs":" A global Needleman-Wunsch aligner on partially ordered graphs.","sig":null,"attributes":[{"value":"/ A global Needleman-Wunsch aligner on partially ordered graphs.","span":{"file_name":"/Users/shelwitz/.cargo/registry/src/github.com-1ecc6299db9ec823/bio-0.39.0/src/alignment/poa.rs","byte_start":175171,"byte_end":175237,"line_start":317,"line_end":317,"column_start":5,"column_end":71}},{"value":"/","span":{"file_name":"/Users/shelwitz/.cargo/registry/src/github.com-1ecc6299db9ec823/bio-0.39.0/src/alignment/poa.rs","byte_start":175242,"byte_end":175245,"line_start":318,"line_end":318,"column_start":5,"column_end":8}},{"value":"/ # Arguments","span":{"file_name":"/Users/shelwitz/.cargo/registry/src/github.com-1ecc6299db9ec823/bio-0.39.0/src/alignment/poa.rs","byte_start":175250,"byte_end":175265,"line_start":319,"line_end":319,"column_start":5,"column_end":20}},{"value":"/ * `query` - the query TextSlice to align against the internal graph member","span":{"file_name":"/Users/shelwitz/.cargo/registry/src/github.com-1ecc6299db9ec823/bio-0.39.0/src/alignment/poa.rs","byte_start":175270,"byte_end":175348,"line_start":320,"line_end":320,"column_start":5,"column_end":83}}]},{"kind":"Method","id":{"krate":0,"index":311},"span":{"file_name":"/Users/shelwitz/.cargo/registry/src/github.com-1ecc6299db9ec823/bio-0.39.0/src/alignment/poa.rs","byte_start":178680,"byte_end":178685,"line_start":400,"line_end":400,"column_start":12,"column_end":17},"name":"edges","qualname":"<Poa<F>>::edges","value":"pub fn edges(&Self, Alignment) -> Vec<usize>","parent":null,"children":[],"decl_id":null,"docs":" Experimental: return sequence of traversed edges","sig":null,"attributes":[{"value":"/ Experimental: return sequence of traversed edges","span":{"file_name":"/Users/shelwitz/.cargo/registry/src/github.com-1ecc6299db9ec823/bio-0.39.0/src/alignment/poa.rs","byte_start":178490,"byte_end":178542,"line_start":396,"line_end":396,"column_start":5,"column_end":57}},{"value":"/","span":{"file_name":"/Users/shelwitz/.cargo/registry/src/github.com-1ecc6299db9ec823/bio-0.39.0/src/alignment/poa.rs","byte_start":178547,"byte_end":178550,"line_start":397,"line_end":397,"column_start":5,"column_end":8}},{"value":"/ Only supports alignments for sequences that have already been added,","span":{"file_name":"/Users/shelwitz/.cargo/registry/src/github.com-1ecc6299db9ec823/bio-0.39.0/src/alignment/poa.rs","byte_start":178555,"byte_end":178627,"line_start":398,"line_end":398,"column_start":5,"column_end":77}},{"value":"/ so all operations must be Match.","span":{"file_name":"/Users/shelwitz/.cargo/registry/src/github.com-1ecc6299db9ec823/bio-0.39.0/src/alignment/poa.rs","byte_start":178632,"byte_end":178668,"line_start":399,"line_end":399,"column_start":5,"column_end":41}}]},{"kind":"Method","id":{"krate":0,"index":312},"span":{"file_name":"/Users/shelwitz/.cargo/registry/src/github.com-1ecc6299db9ec823/bio-0.39.0/src/alignment/poa.rs","byte_start":179768,"byte_end":179781,"line_start":430,"line_end":430,"column_start":12,"column_end":25},"name":"add_alignment","qualname":"<Poa<F>>::add_alignment","value":"pub fn add_alignment(&mut Self, &Alignment, TextSlice)","parent":null,"children":[],"decl_id":null,"docs":" Incorporate a new sequence into a graph from an alignment","sig":null,"attributes":[{"value":"/ Incorporate a new sequence into a graph from an alignment","span":{"file_name":"/Users/shelwitz/.cargo/registry/src/github.com-1ecc6299db9ec823/bio-0.39.0/src/alignment/poa.rs","byte_start":179544,"byte_end":179605,"line_start":424,"line_end":424,"column_start":5,"column_end":66}},{"value":"/","span":{"file_name":"/Users/shelwitz/.cargo/registry/src/github.com-1ecc6299db9ec823/bio-0.39.0/src/alignment/poa.rs","byte_start":179610,"byte_end":179613,"line_start":425,"line_end":425,"column_start":5,"column_end":8}},{"value":"/ # Arguments","span":{"file_name":"/Users/shelwitz/.cargo/registry/src/github.com-1ecc6299db9ec823/bio-0.39.0/src/alignment/poa.rs","byte_start":179618,"byte_end":179633,"line_start":426,"line_end":426,"column_start":5,"column_end":20}},{"value":"/","span":{"file_name":"/Users/shelwitz/.cargo/registry/src/github.com-1ecc6299db9ec823/bio-0.39.0/src/alignment/poa.rs","byte_start":179638,"byte_end":179641,"line_start":427,"line_end":427,"column_start":5,"column_end":8}},{"value":"/ * `aln` - The alignment of the new sequence to the graph","span":{"file_name":"/Users/shelwitz/.cargo/registry/src/github.com-1ecc6299db9ec823/bio-0.39.0/src/alignment/poa.rs","byte_start":179646,"byte_end":179706,"line_start":428,"line_end":428,"column_start":5,"column_end":65}},{"value":"/ * `seq` - The sequence being incorporated","span":{"file_name":"/Users/shelwitz/.cargo/registry/src/github.com-1ecc6299db9ec823/bio-0.39.0/src/alignment/poa.rs","byte_start":179711,"byte_end":179756,"line_start":429,"line_end":429,"column_start":5,"column_end":50}}]},{"kind":"Mod","id":{"krate":0,"index":313},"span":{"file_name":"/Users/shelwitz/.cargo/registry/src/github.com-1ecc6299db9ec823/bio-0.39.0/src/alignment/sparse.rs","byte_start":0,"byte_end":0,"line_start":1,"line_end":1,"column_start":1,"column_end":1},"name":"sparse","qualname":"::alignment::sparse","value":"/Users/shelwitz/.cargo/registry/src/github.com-1ecc6299db9ec823/bio-0.39.0/src/alignment/sparse.rs","parent":null,"children":[{"krate":0,"index":314},{"krate":0,"index":317},{"krate":0,"index":320},{"krate":0,"index":321},{"krate":0,"index":324},{"krate":0,"index":327},{"krate":0,"index":330},{"krate":0,"index":333},{"krate":0,"index":3379},{"krate":0,"index":3383},{"krate":0,"index":3385},{"krate":0,"index":3386},{"krate":0,"index":3389},{"krate":0,"index":3390},{"krate":0,"index":336},{"krate":0,"index":3392},{"krate":0,"index":3399},{"krate":0,"index":3400},{"krate":0,"index":3403},{"krate":0,"index":3404},{"krate":0,"index":3406},{"krate":0,"index":3408},{"krate":0,"index":3410},{"krate":0,"index":3412},{"krate":0,"index":3413},{"krate":0,"index":337},{"krate":0,"index":339},{"krate":0,"index":340},{"krate":0,"index":341},{"krate":0,"index":342},{"krate":0,"index":343},{"krate":0,"index":344},{"krate":0,"index":345}],"decl_id":null,"docs":" Calculate 'sparse' alignments from kmer matches. Can be much faster than\n Smith-Waterman for long string, when a large enough k is used.\n Complexity: O(n * log(n)) for a pair of strings with n k-kmer matches. This\n approach is useful for generating an approximate 'backbone' alignments\n between two long sequences, for example in long-read alignment or\n genome-genome alignment. The backbone alignment can be used as-is, or can serve\n as a guide for a banded alignment.  By tuning k so that len(query) + len(reference) < 4^k,\n the number of false positive kmer matches is kept small, resulting in very\n fast run times for long strings.","sig":null,"attributes":[{"value":"/ Calculate 'sparse' alignments from kmer matches. Can be much faster than","span":{"file_name":"/Users/shelwitz/.cargo/registry/src/github.com-1ecc6299db9ec823/bio-0.39.0/src/alignment/sparse.rs","byte_start":185951,"byte_end":186027,"line_start":6,"line_end":6,"column_start":1,"column_end":77}},{"value":"/ Smith-Waterman for long string, when a large enough k is used.","span":{"file_name":"/Users/shelwitz/.cargo/registry/src/github.com-1ecc6299db9ec823/bio-0.39.0/src/alignment/sparse.rs","byte_start":186028,"byte_end":186094,"line_start":7,"line_end":7,"column_start":1,"column_end":67}},{"value":"/ Complexity: O(n * log(n)) for a pair of strings with n k-kmer matches. This","span":{"file_name":"/Users/shelwitz/.cargo/registry/src/github.com-1ecc6299db9ec823/bio-0.39.0/src/alignment/sparse.rs","byte_start":186095,"byte_end":186174,"line_start":8,"line_end":8,"column_start":1,"column_end":80}},{"value":"/ approach is useful for generating an approximate 'backbone' alignments","span":{"file_name":"/Users/shelwitz/.cargo/registry/src/github.com-1ecc6299db9ec823/bio-0.39.0/src/alignment/sparse.rs","byte_start":186175,"byte_end":186249,"line_start":9,"line_end":9,"column_start":1,"column_end":75}},{"value":"/ between two long sequences, for example in long-read alignment or","span":{"file_name":"/Users/shelwitz/.cargo/registry/src/github.com-1ecc6299db9ec823/bio-0.39.0/src/alignment/sparse.rs","byte_start":186250,"byte_end":186319,"line_start":10,"line_end":10,"column_start":1,"column_end":70}},{"value":"/ genome-genome alignment. The backbone alignment can be used as-is, or can serve","span":{"file_name":"/Users/shelwitz/.cargo/registry/src/github.com-1ecc6299db9ec823/bio-0.39.0/src/alignment/sparse.rs","byte_start":186320,"byte_end":186403,"line_start":11,"line_end":11,"column_start":1,"column_end":84}},{"value":"/ as a guide for a banded alignment.  By tuning k so that len(query) + len(reference) < 4^k,","span":{"file_name":"/Users/shelwitz/.cargo/registry/src/github.com-1ecc6299db9ec823/bio-0.39.0/src/alignment/sparse.rs","byte_start":186404,"byte_end":186498,"line_start":12,"line_end":12,"column_start":1,"column_end":95}},{"value":"/ the number of false positive kmer matches is kept small, resulting in very","span":{"file_name":"/Users/shelwitz/.cargo/registry/src/github.com-1ecc6299db9ec823/bio-0.39.0/src/alignment/sparse.rs","byte_start":186499,"byte_end":186577,"line_start":13,"line_end":13,"column_start":1,"column_end":79}},{"value":"/ fast run times for long strings.","span":{"file_name":"/Users/shelwitz/.cargo/registry/src/github.com-1ecc6299db9ec823/bio-0.39.0/src/alignment/sparse.rs","byte_start":186578,"byte_end":186614,"line_start":14,"line_end":14,"column_start":1,"column_end":37}},{"value":"/","span":{"file_name":"/Users/shelwitz/.cargo/registry/src/github.com-1ecc6299db9ec823/bio-0.39.0/src/alignment/sparse.rs","byte_start":186615,"byte_end":186618,"line_start":15,"line_end":15,"column_start":1,"column_end":4}},{"value":"/ # Example","span":{"file_name":"/Users/shelwitz/.cargo/registry/src/github.com-1ecc6299db9ec823/bio-0.39.0/src/alignment/sparse.rs","byte_start":186619,"byte_end":186632,"line_start":16,"line_end":16,"column_start":1,"column_end":14}},{"value":"/","span":{"file_name":"/Users/shelwitz/.cargo/registry/src/github.com-1ecc6299db9ec823/bio-0.39.0/src/alignment/sparse.rs","byte_start":186633,"byte_end":186636,"line_start":17,"line_end":17,"column_start":1,"column_end":4}},{"value":"/ ```","span":{"file_name":"/Users/shelwitz/.cargo/registry/src/github.com-1ecc6299db9ec823/bio-0.39.0/src/alignment/sparse.rs","byte_start":186637,"byte_end":186644,"line_start":18,"line_end":18,"column_start":1,"column_end":8}},{"value":"/ use bio::alignment::sparse::*;","span":{"file_name":"/Users/shelwitz/.cargo/registry/src/github.com-1ecc6299db9ec823/bio-0.39.0/src/alignment/sparse.rs","byte_start":186645,"byte_end":186679,"line_start":19,"line_end":19,"column_start":1,"column_end":35}},{"value":"/","span":{"file_name":"/Users/shelwitz/.cargo/registry/src/github.com-1ecc6299db9ec823/bio-0.39.0/src/alignment/sparse.rs","byte_start":186680,"byte_end":186683,"line_start":20,"line_end":20,"column_start":1,"column_end":4}},{"value":"/ let s1 =   b\"ACGTACGATAGGTA\";","span":{"file_name":"/Users/shelwitz/.cargo/registry/src/github.com-1ecc6299db9ec823/bio-0.39.0/src/alignment/sparse.rs","byte_start":186684,"byte_end":186717,"line_start":21,"line_end":21,"column_start":1,"column_end":34}},{"value":"/ let s2 = b\"TTACGTACGATAGGTATT\";","span":{"file_name":"/Users/shelwitz/.cargo/registry/src/github.com-1ecc6299db9ec823/bio-0.39.0/src/alignment/sparse.rs","byte_start":186718,"byte_end":186753,"line_start":22,"line_end":22,"column_start":1,"column_end":36}},{"value":"/ let k = 8;","span":{"file_name":"/Users/shelwitz/.cargo/registry/src/github.com-1ecc6299db9ec823/bio-0.39.0/src/alignment/sparse.rs","byte_start":186754,"byte_end":186768,"line_start":23,"line_end":23,"column_start":1,"column_end":15}},{"value":"/ let matches = find_kmer_matches(s1, s2, k);","span":{"file_name":"/Users/shelwitz/.cargo/registry/src/github.com-1ecc6299db9ec823/bio-0.39.0/src/alignment/sparse.rs","byte_start":186769,"byte_end":186816,"line_start":24,"line_end":24,"column_start":1,"column_end":48}},{"value":"/ let sparse_al = lcskpp(&matches, k);","span":{"file_name":"/Users/shelwitz/.cargo/registry/src/github.com-1ecc6299db9ec823/bio-0.39.0/src/alignment/sparse.rs","byte_start":186817,"byte_end":186857,"line_start":25,"line_end":25,"column_start":1,"column_end":41}},{"value":"/ let match_path: Vec<(u32,u32)> = sparse_al.path.iter().map(|i| matches[*i]).collect();","span":{"file_name":"/Users/shelwitz/.cargo/registry/src/github.com-1ecc6299db9ec823/bio-0.39.0/src/alignment/sparse.rs","byte_start":186858,"byte_end":186948,"line_start":26,"line_end":26,"column_start":1,"column_end":91}},{"value":"/ assert_eq!(match_path, vec![(0,2), (1,3), (2,4), (3,5), (4,6), (5,7), (6,8)]);","span":{"file_name":"/Users/shelwitz/.cargo/registry/src/github.com-1ecc6299db9ec823/bio-0.39.0/src/alignment/sparse.rs","byte_start":186949,"byte_end":187031,"line_start":27,"line_end":27,"column_start":1,"column_end":83}},{"value":"/ assert_eq!(sparse_al.score, 14);","span":{"file_name":"/Users/shelwitz/.cargo/registry/src/github.com-1ecc6299db9ec823/bio-0.39.0/src/alignment/sparse.rs","byte_start":187032,"byte_end":187068,"line_start":28,"line_end":28,"column_start":1,"column_end":37}}]},{"kind":"Type","id":{"krate":0,"index":333},"span":{"file_name":"/Users/shelwitz/.cargo/registry/src/github.com-1ecc6299db9ec823/bio-0.39.0/src/alignment/sparse.rs","byte_start":187244,"byte_end":187253,"line_start":36,"line_end":36,"column_start":10,"column_end":19},"name":"HashMapFx","qualname":"::alignment::sparse::HashMapFx","value":"HashMap<K, V, BuildHasherDefault<FxHasher>>","parent":null,"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Struct","id":{"krate":0,"index":3379},"span":{"file_name":"/Users/shelwitz/.cargo/registry/src/github.com-1ecc6299db9ec823/bio-0.39.0/src/alignment/sparse.rs","byte_start":187384,"byte_end":187405,"line_start":40,"line_end":40,"column_start":12,"column_end":33},"name":"SparseAlignmentResult","qualname":"::alignment::sparse::SparseAlignmentResult","value":"SparseAlignmentResult { path, score, dp_vector }","parent":null,"children":[{"krate":0,"index":3380},{"krate":0,"index":3381},{"krate":0,"index":3382}],"decl_id":null,"docs":" Result of a sparse alignment\n","sig":null,"attributes":[{"value":"/ Result of a sparse alignment","span":{"file_name":"/Users/shelwitz/.cargo/registry/src/github.com-1ecc6299db9ec823/bio-0.39.0/src/alignment/sparse.rs","byte_start":187308,"byte_end":187340,"line_start":38,"line_end":38,"column_start":1,"column_end":33}}]},{"kind":"Field","id":{"krate":0,"index":3380},"span":{"file_name":"/Users/shelwitz/.cargo/registry/src/github.com-1ecc6299db9ec823/bio-0.39.0/src/alignment/sparse.rs","byte_start":187501,"byte_end":187505,"line_start":42,"line_end":42,"column_start":9,"column_end":13},"name":"path","qualname":"::alignment::sparse::SparseAlignmentResult::path","value":"std::vec::Vec<usize>","parent":{"krate":0,"index":3379},"children":[],"decl_id":null,"docs":" LCSk++ path, represented as vector of indices into the input matches vector.\n","sig":null,"attributes":[{"value":"/ LCSk++ path, represented as vector of indices into the input matches vector.","span":{"file_name":"/Users/shelwitz/.cargo/registry/src/github.com-1ecc6299db9ec823/bio-0.39.0/src/alignment/sparse.rs","byte_start":187412,"byte_end":187492,"line_start":41,"line_end":41,"column_start":5,"column_end":85}}]},{"kind":"Field","id":{"krate":0,"index":3381},"span":{"file_name":"/Users/shelwitz/.cargo/registry/src/github.com-1ecc6299db9ec823/bio-0.39.0/src/alignment/sparse.rs","byte_start":187612,"byte_end":187617,"line_start":44,"line_end":44,"column_start":9,"column_end":14},"name":"score","qualname":"::alignment::sparse::SparseAlignmentResult::score","value":"u32","parent":{"krate":0,"index":3379},"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Field","id":{"krate":0,"index":3382},"span":{"file_name":"/Users/shelwitz/.cargo/registry/src/github.com-1ecc6299db9ec823/bio-0.39.0/src/alignment/sparse.rs","byte_start":187728,"byte_end":187737,"line_start":46,"line_end":46,"column_start":9,"column_end":18},"name":"dp_vector","qualname":"::alignment::sparse::SparseAlignmentResult::dp_vector","value":"std::vec::Vec<(u32, i32)>","parent":{"krate":0,"index":3379},"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Function","id":{"krate":0,"index":336},"span":{"file_name":"/Users/shelwitz/.cargo/registry/src/github.com-1ecc6299db9ec823/bio-0.39.0/src/alignment/sparse.rs","byte_start":188716,"byte_end":188722,"line_start":67,"line_end":67,"column_start":8,"column_end":14},"name":"lcskpp","qualname":"::alignment::sparse::lcskpp","value":"pub fn lcskpp(&[(u32, u32)], usize) -> SparseAlignmentResult","parent":null,"children":[],"decl_id":null,"docs":" Sparse DP routine for Longest Common Subsequence in length k substrings.  Also known of LCSk++\n From LCSk++: Practical similarity metric for long strings. Filip Pavetić, Goran Žužić, Mile Šikić\n Paper here :https://arxiv.org/abs/1407.2407.  Original implementation here:\n https://github.com/fpavetic/lcskpp","sig":null,"attributes":[{"value":"/ Sparse DP routine for Longest Common Subsequence in length k substrings.  Also known of LCSk++","span":{"file_name":"/Users/shelwitz/.cargo/registry/src/github.com-1ecc6299db9ec823/bio-0.39.0/src/alignment/sparse.rs","byte_start":187759,"byte_end":187857,"line_start":49,"line_end":49,"column_start":1,"column_end":99}},{"value":"/ From LCSk++: Practical similarity metric for long strings. Filip Pavetić, Goran Žužić, Mile Šikić","span":{"file_name":"/Users/shelwitz/.cargo/registry/src/github.com-1ecc6299db9ec823/bio-0.39.0/src/alignment/sparse.rs","byte_start":187858,"byte_end":187965,"line_start":50,"line_end":50,"column_start":1,"column_end":102}},{"value":"/ Paper here :https://arxiv.org/abs/1407.2407.  Original implementation here:","span":{"file_name":"/Users/shelwitz/.cargo/registry/src/github.com-1ecc6299db9ec823/bio-0.39.0/src/alignment/sparse.rs","byte_start":187966,"byte_end":188045,"line_start":51,"line_end":51,"column_start":1,"column_end":80}},{"value":"/ https://github.com/fpavetic/lcskpp","span":{"file_name":"/Users/shelwitz/.cargo/registry/src/github.com-1ecc6299db9ec823/bio-0.39.0/src/alignment/sparse.rs","byte_start":188046,"byte_end":188084,"line_start":52,"line_end":52,"column_start":1,"column_end":39}},{"value":"/","span":{"file_name":"/Users/shelwitz/.cargo/registry/src/github.com-1ecc6299db9ec823/bio-0.39.0/src/alignment/sparse.rs","byte_start":188085,"byte_end":188088,"line_start":53,"line_end":53,"column_start":1,"column_end":4}},{"value":"/ # Arguments","span":{"file_name":"/Users/shelwitz/.cargo/registry/src/github.com-1ecc6299db9ec823/bio-0.39.0/src/alignment/sparse.rs","byte_start":188089,"byte_end":188104,"line_start":54,"line_end":54,"column_start":1,"column_end":16}},{"value":"/","span":{"file_name":"/Users/shelwitz/.cargo/registry/src/github.com-1ecc6299db9ec823/bio-0.39.0/src/alignment/sparse.rs","byte_start":188105,"byte_end":188108,"line_start":55,"line_end":55,"column_start":1,"column_end":4}},{"value":"/ * `matches` - a vector of tuples indicating the (string1 position, string2 position) kmer","span":{"file_name":"/Users/shelwitz/.cargo/registry/src/github.com-1ecc6299db9ec823/bio-0.39.0/src/alignment/sparse.rs","byte_start":188109,"byte_end":188202,"line_start":56,"line_end":56,"column_start":1,"column_end":94}},{"value":"/   matches between the strings","span":{"file_name":"/Users/shelwitz/.cargo/registry/src/github.com-1ecc6299db9ec823/bio-0.39.0/src/alignment/sparse.rs","byte_start":188203,"byte_end":188236,"line_start":57,"line_end":57,"column_start":1,"column_end":34}},{"value":"/ * `k` - the kmer length used for matching","span":{"file_name":"/Users/shelwitz/.cargo/registry/src/github.com-1ecc6299db9ec823/bio-0.39.0/src/alignment/sparse.rs","byte_start":188237,"byte_end":188282,"line_start":58,"line_end":58,"column_start":1,"column_end":46}},{"value":"/","span":{"file_name":"/Users/shelwitz/.cargo/registry/src/github.com-1ecc6299db9ec823/bio-0.39.0/src/alignment/sparse.rs","byte_start":188283,"byte_end":188286,"line_start":59,"line_end":59,"column_start":1,"column_end":4}},{"value":"/ # Return value","span":{"file_name":"/Users/shelwitz/.cargo/registry/src/github.com-1ecc6299db9ec823/bio-0.39.0/src/alignment/sparse.rs","byte_start":188287,"byte_end":188305,"line_start":60,"line_end":60,"column_start":1,"column_end":19}},{"value":"/","span":{"file_name":"/Users/shelwitz/.cargo/registry/src/github.com-1ecc6299db9ec823/bio-0.39.0/src/alignment/sparse.rs","byte_start":188306,"byte_end":188309,"line_start":61,"line_end":61,"column_start":1,"column_end":4}},{"value":"/ The method returns a `SparseAlignmentResult` struct with the following fields:","span":{"file_name":"/Users/shelwitz/.cargo/registry/src/github.com-1ecc6299db9ec823/bio-0.39.0/src/alignment/sparse.rs","byte_start":188310,"byte_end":188392,"line_start":62,"line_end":62,"column_start":1,"column_end":83}},{"value":"/ * `path` is the LCSk++ path, represented as vector of indices into the input matches vector.","span":{"file_name":"/Users/shelwitz/.cargo/registry/src/github.com-1ecc6299db9ec823/bio-0.39.0/src/alignment/sparse.rs","byte_start":188393,"byte_end":188489,"line_start":63,"line_end":63,"column_start":1,"column_end":97}},{"value":"/ * `score` is the score of the path, which is the number of bases covered by the matched kmers.","span":{"file_name":"/Users/shelwitz/.cargo/registry/src/github.com-1ecc6299db9ec823/bio-0.39.0/src/alignment/sparse.rs","byte_start":188490,"byte_end":188588,"line_start":64,"line_end":64,"column_start":1,"column_end":99}},{"value":"/ * `dp_vector` is the full DP vector, which can generally be ignored. (It may be useful for","span":{"file_name":"/Users/shelwitz/.cargo/registry/src/github.com-1ecc6299db9ec823/bio-0.39.0/src/alignment/sparse.rs","byte_start":188589,"byte_end":188683,"line_start":65,"line_end":65,"column_start":1,"column_end":95}},{"value":"/   testing purposes).","span":{"file_name":"/Users/shelwitz/.cargo/registry/src/github.com-1ecc6299db9ec823/bio-0.39.0/src/alignment/sparse.rs","byte_start":188684,"byte_end":188708,"line_start":66,"line_end":66,"column_start":1,"column_end":25}}]},{"kind":"Function","id":{"krate":0,"index":339},"span":{"file_name":"/Users/shelwitz/.cargo/registry/src/github.com-1ecc6299db9ec823/bio-0.39.0/src/alignment/sparse.rs","byte_start":192628,"byte_end":192634,"line_start":185,"line_end":185,"column_start":8,"column_end":14},"name":"sdpkpp","qualname":"::alignment::sparse::sdpkpp","value":"pub fn sdpkpp(&[(u32, u32)], usize, u32, i32, i32) -> SparseAlignmentResult","parent":null,"children":[],"decl_id":null,"docs":" Sparse DP routine generalizing LCSk++ method above to penalize alignment gaps.\n A gap is an unknown combination of mismatch, insertion and deletions, and incurs\n a penalty of gap_open + d * gap_extend, where d is the distance along the diagonal of the gap.\n # Arguments","sig":null,"attributes":[{"value":"/ Sparse DP routine generalizing LCSk++ method above to penalize alignment gaps.","span":{"file_name":"/Users/shelwitz/.cargo/registry/src/github.com-1ecc6299db9ec823/bio-0.39.0/src/alignment/sparse.rs","byte_start":191514,"byte_end":191596,"line_start":166,"line_end":166,"column_start":1,"column_end":83}},{"value":"/ A gap is an unknown combination of mismatch, insertion and deletions, and incurs","span":{"file_name":"/Users/shelwitz/.cargo/registry/src/github.com-1ecc6299db9ec823/bio-0.39.0/src/alignment/sparse.rs","byte_start":191597,"byte_end":191681,"line_start":167,"line_end":167,"column_start":1,"column_end":85}},{"value":"/ a penalty of gap_open + d * gap_extend, where d is the distance along the diagonal of the gap.","span":{"file_name":"/Users/shelwitz/.cargo/registry/src/github.com-1ecc6299db9ec823/bio-0.39.0/src/alignment/sparse.rs","byte_start":191682,"byte_end":191780,"line_start":168,"line_end":168,"column_start":1,"column_end":99}},{"value":"/ # Arguments","span":{"file_name":"/Users/shelwitz/.cargo/registry/src/github.com-1ecc6299db9ec823/bio-0.39.0/src/alignment/sparse.rs","byte_start":191781,"byte_end":191796,"line_start":169,"line_end":169,"column_start":1,"column_end":16}},{"value":"/","span":{"file_name":"/Users/shelwitz/.cargo/registry/src/github.com-1ecc6299db9ec823/bio-0.39.0/src/alignment/sparse.rs","byte_start":191797,"byte_end":191800,"line_start":170,"line_end":170,"column_start":1,"column_end":4}},{"value":"/ * `matches` - a vector of tuples indicating the (string1 position, string2 position) kmer","span":{"file_name":"/Users/shelwitz/.cargo/registry/src/github.com-1ecc6299db9ec823/bio-0.39.0/src/alignment/sparse.rs","byte_start":191801,"byte_end":191894,"line_start":171,"line_end":171,"column_start":1,"column_end":94}},{"value":"/   matches between the strings","span":{"file_name":"/Users/shelwitz/.cargo/registry/src/github.com-1ecc6299db9ec823/bio-0.39.0/src/alignment/sparse.rs","byte_start":191895,"byte_end":191928,"line_start":172,"line_end":172,"column_start":1,"column_end":34}},{"value":"/ * `k` - the kmer length used for matching","span":{"file_name":"/Users/shelwitz/.cargo/registry/src/github.com-1ecc6299db9ec823/bio-0.39.0/src/alignment/sparse.rs","byte_start":191929,"byte_end":191974,"line_start":173,"line_end":173,"column_start":1,"column_end":46}},{"value":"/ * `match_score` - reward for each matched base","span":{"file_name":"/Users/shelwitz/.cargo/registry/src/github.com-1ecc6299db9ec823/bio-0.39.0/src/alignment/sparse.rs","byte_start":191975,"byte_end":192025,"line_start":174,"line_end":174,"column_start":1,"column_end":51}},{"value":"/ * `gap_open` - score of opening a gap, including a mismatch gap. Must be negative.","span":{"file_name":"/Users/shelwitz/.cargo/registry/src/github.com-1ecc6299db9ec823/bio-0.39.0/src/alignment/sparse.rs","byte_start":192026,"byte_end":192112,"line_start":175,"line_end":175,"column_start":1,"column_end":87}},{"value":"/ * `gap_extend` - score for extending a gap along the diagonal. Must be negative.","span":{"file_name":"/Users/shelwitz/.cargo/registry/src/github.com-1ecc6299db9ec823/bio-0.39.0/src/alignment/sparse.rs","byte_start":192113,"byte_end":192197,"line_start":176,"line_end":176,"column_start":1,"column_end":85}},{"value":"/","span":{"file_name":"/Users/shelwitz/.cargo/registry/src/github.com-1ecc6299db9ec823/bio-0.39.0/src/alignment/sparse.rs","byte_start":192198,"byte_end":192201,"line_start":177,"line_end":177,"column_start":1,"column_end":4}},{"value":"/ # Return value","span":{"file_name":"/Users/shelwitz/.cargo/registry/src/github.com-1ecc6299db9ec823/bio-0.39.0/src/alignment/sparse.rs","byte_start":192202,"byte_end":192220,"line_start":178,"line_end":178,"column_start":1,"column_end":19}},{"value":"/","span":{"file_name":"/Users/shelwitz/.cargo/registry/src/github.com-1ecc6299db9ec823/bio-0.39.0/src/alignment/sparse.rs","byte_start":192221,"byte_end":192224,"line_start":179,"line_end":179,"column_start":1,"column_end":4}},{"value":"/ The method returns a `SparseAlignmentResult` struct with the following fields:","span":{"file_name":"/Users/shelwitz/.cargo/registry/src/github.com-1ecc6299db9ec823/bio-0.39.0/src/alignment/sparse.rs","byte_start":192225,"byte_end":192307,"line_start":180,"line_end":180,"column_start":1,"column_end":83}},{"value":"/ * `path` is the SDP path, represented as vector of indices into the input matches vector.","span":{"file_name":"/Users/shelwitz/.cargo/registry/src/github.com-1ecc6299db9ec823/bio-0.39.0/src/alignment/sparse.rs","byte_start":192308,"byte_end":192401,"line_start":181,"line_end":181,"column_start":1,"column_end":94}},{"value":"/ * `score` is the score of the path, which is the number of bases covered by the matched kmers.","span":{"file_name":"/Users/shelwitz/.cargo/registry/src/github.com-1ecc6299db9ec823/bio-0.39.0/src/alignment/sparse.rs","byte_start":192402,"byte_end":192500,"line_start":182,"line_end":182,"column_start":1,"column_end":99}},{"value":"/ * `dp_vector` is the full DP vector, which can generally be ignored. (It may be useful for","span":{"file_name":"/Users/shelwitz/.cargo/registry/src/github.com-1ecc6299db9ec823/bio-0.39.0/src/alignment/sparse.rs","byte_start":192501,"byte_end":192595,"line_start":183,"line_end":183,"column_start":1,"column_end":95}},{"value":"/   testing purposes).","span":{"file_name":"/Users/shelwitz/.cargo/registry/src/github.com-1ecc6299db9ec823/bio-0.39.0/src/alignment/sparse.rs","byte_start":192596,"byte_end":192620,"line_start":184,"line_end":184,"column_start":1,"column_end":25}}]},{"kind":"Function","id":{"krate":0,"index":340},"span":{"file_name":"/Users/shelwitz/.cargo/registry/src/github.com-1ecc6299db9ec823/bio-0.39.0/src/alignment/sparse.rs","byte_start":195945,"byte_end":195969,"line_start":289,"line_end":289,"column_start":8,"column_end":32},"name":"sdpkpp_union_lcskpp_path","qualname":"::alignment::sparse::sdpkpp_union_lcskpp_path","value":"pub fn sdpkpp_union_lcskpp_path(&[(u32, u32)], usize, u32, i32, i32)\n-> Vec<usize>","parent":null,"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Function","id":{"krate":0,"index":341},"span":{"file_name":"/Users/shelwitz/.cargo/registry/src/github.com-1ecc6299db9ec823/bio-0.39.0/src/alignment/sparse.rs","byte_start":197256,"byte_end":197273,"line_start":329,"line_end":329,"column_start":8,"column_end":25},"name":"find_kmer_matches","qualname":"::alignment::sparse::find_kmer_matches","value":"pub fn find_kmer_matches(&[u8], &[u8], usize) -> Vec<(u32, u32)>","parent":null,"children":[],"decl_id":null,"docs":" Find all matches of length k between two strings, using a q-gram\n index. For very long reference strings, it may be more efficient to use and\n FMD index to generate the matches. Note that this method is mainly for\n demonstration & testing purposes.  For aligning many query sequences\n against the same reference, you should reuse the QGramIndex of the reference.\n","sig":null,"attributes":[{"value":"/ Find all matches of length k between two strings, using a q-gram","span":{"file_name":"/Users/shelwitz/.cargo/registry/src/github.com-1ecc6299db9ec823/bio-0.39.0/src/alignment/sparse.rs","byte_start":196870,"byte_end":196938,"line_start":324,"line_end":324,"column_start":1,"column_end":69}},{"value":"/ index. For very long reference strings, it may be more efficient to use and","span":{"file_name":"/Users/shelwitz/.cargo/registry/src/github.com-1ecc6299db9ec823/bio-0.39.0/src/alignment/sparse.rs","byte_start":196939,"byte_end":197018,"line_start":325,"line_end":325,"column_start":1,"column_end":80}},{"value":"/ FMD index to generate the matches. Note that this method is mainly for","span":{"file_name":"/Users/shelwitz/.cargo/registry/src/github.com-1ecc6299db9ec823/bio-0.39.0/src/alignment/sparse.rs","byte_start":197019,"byte_end":197093,"line_start":326,"line_end":326,"column_start":1,"column_end":75}},{"value":"/ demonstration & testing purposes.  For aligning many query sequences","span":{"file_name":"/Users/shelwitz/.cargo/registry/src/github.com-1ecc6299db9ec823/bio-0.39.0/src/alignment/sparse.rs","byte_start":197094,"byte_end":197166,"line_start":327,"line_end":327,"column_start":1,"column_end":73}},{"value":"/ against the same reference, you should reuse the QGramIndex of the reference.","span":{"file_name":"/Users/shelwitz/.cargo/registry/src/github.com-1ecc6299db9ec823/bio-0.39.0/src/alignment/sparse.rs","byte_start":197167,"byte_end":197248,"line_start":328,"line_end":328,"column_start":1,"column_end":82}}]},{"kind":"Function","id":{"krate":0,"index":342},"span":{"file_name":"/Users/shelwitz/.cargo/registry/src/github.com-1ecc6299db9ec823/bio-0.39.0/src/alignment/sparse.rs","byte_start":197771,"byte_end":197781,"line_start":342,"line_end":342,"column_start":8,"column_end":18},"name":"hash_kmers","qualname":"::alignment::sparse::hash_kmers","value":"pub fn hash_kmers(&[u8], usize) -> HashMapFx<&[u8], Vec<u32>>","parent":null,"children":[],"decl_id":null,"docs":" Creates a HashMap containing all the k-mers in the sequence. FxHasher is used\n as the hash function instead of the inbuilt one. A good rolling hash function\n should speed up the code.\n","sig":null,"attributes":[{"value":"/ Creates a HashMap containing all the k-mers in the sequence. FxHasher is used","span":{"file_name":"/Users/shelwitz/.cargo/registry/src/github.com-1ecc6299db9ec823/bio-0.39.0/src/alignment/sparse.rs","byte_start":197570,"byte_end":197651,"line_start":339,"line_end":339,"column_start":1,"column_end":82}},{"value":"/ as the hash function instead of the inbuilt one. A good rolling hash function","span":{"file_name":"/Users/shelwitz/.cargo/registry/src/github.com-1ecc6299db9ec823/bio-0.39.0/src/alignment/sparse.rs","byte_start":197652,"byte_end":197733,"line_start":340,"line_end":340,"column_start":1,"column_end":82}},{"value":"/ should speed up the code.","span":{"file_name":"/Users/shelwitz/.cargo/registry/src/github.com-1ecc6299db9ec823/bio-0.39.0/src/alignment/sparse.rs","byte_start":197734,"byte_end":197763,"line_start":341,"line_end":341,"column_start":1,"column_end":30}}]},{"kind":"Function","id":{"krate":0,"index":343},"span":{"file_name":"/Users/shelwitz/.cargo/registry/src/github.com-1ecc6299db9ec823/bio-0.39.0/src/alignment/sparse.rs","byte_start":198237,"byte_end":198266,"line_start":355,"line_end":355,"column_start":8,"column_end":37},"name":"find_kmer_matches_seq1_hashed","qualname":"::alignment::sparse::find_kmer_matches_seq1_hashed","value":"pub fn find_kmer_matches_seq1_hashed(&HashMapFx<&[u8], Vec<u32>>, &[u8],\n                                     usize) -> Vec<(u32, u32)>","parent":null,"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Function","id":{"krate":0,"index":344},"span":{"file_name":"/Users/shelwitz/.cargo/registry/src/github.com-1ecc6299db9ec823/bio-0.39.0/src/alignment/sparse.rs","byte_start":198844,"byte_end":198873,"line_start":377,"line_end":377,"column_start":8,"column_end":37},"name":"find_kmer_matches_seq2_hashed","qualname":"::alignment::sparse::find_kmer_matches_seq2_hashed","value":"pub fn find_kmer_matches_seq2_hashed(&[u8], &HashMapFx<&[u8], Vec<u32>>,\n                                     usize) -> Vec<(u32, u32)>","parent":null,"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Function","id":{"krate":0,"index":345},"span":{"file_name":"/Users/shelwitz/.cargo/registry/src/github.com-1ecc6299db9ec823/bio-0.39.0/src/alignment/sparse.rs","byte_start":199314,"byte_end":199333,"line_start":398,"line_end":398,"column_start":8,"column_end":27},"name":"expand_kmer_matches","qualname":"::alignment::sparse::expand_kmer_matches","value":"pub fn expand_kmer_matches(&[u8], &[u8], usize, &[(u32, u32)], usize)\n-> Vec<(u32, u32)>","parent":null,"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Mod","id":{"krate":0,"index":347},"span":{"file_name":"/Users/shelwitz/.cargo/registry/src/github.com-1ecc6299db9ec823/bio-0.39.0/src/alphabets/mod.rs","byte_start":0,"byte_end":0,"line_start":1,"line_end":1,"column_start":1,"column_end":1},"name":"alphabets","qualname":"::alphabets","value":"/Users/shelwitz/.cargo/registry/src/github.com-1ecc6299db9ec823/bio-0.39.0/src/alphabets/mod.rs","parent":null,"children":[{"krate":0,"index":348},{"krate":0,"index":351},{"krate":0,"index":354},{"krate":0,"index":357},{"krate":0,"index":360},{"krate":0,"index":375},{"krate":0,"index":381},{"krate":0,"index":396},{"krate":0,"index":3449},{"krate":0,"index":3451},{"krate":0,"index":3453},{"krate":0,"index":3454},{"krate":0,"index":397},{"krate":0,"index":3457},{"krate":0,"index":3459},{"krate":0,"index":3465},{"krate":0,"index":414},{"krate":0,"index":426},{"krate":0,"index":435},{"krate":0,"index":440},{"krate":0,"index":446},{"krate":0,"index":447}],"decl_id":null,"docs":" Implementation of alphabets and useful utilities.","sig":null,"attributes":[{"value":"/ Implementation of alphabets and useful utilities.","span":{"file_name":"/Users/shelwitz/.cargo/registry/src/github.com-1ecc6299db9ec823/bio-0.39.0/src/alphabets/mod.rs","byte_start":213265,"byte_end":213318,"line_start":6,"line_end":6,"column_start":1,"column_end":54}},{"value":"/","span":{"file_name":"/Users/shelwitz/.cargo/registry/src/github.com-1ecc6299db9ec823/bio-0.39.0/src/alphabets/mod.rs","byte_start":213319,"byte_end":213322,"line_start":7,"line_end":7,"column_start":1,"column_end":4}},{"value":"/ # Example","span":{"file_name":"/Users/shelwitz/.cargo/registry/src/github.com-1ecc6299db9ec823/bio-0.39.0/src/alphabets/mod.rs","byte_start":213323,"byte_end":213336,"line_start":8,"line_end":8,"column_start":1,"column_end":14}},{"value":"/","span":{"file_name":"/Users/shelwitz/.cargo/registry/src/github.com-1ecc6299db9ec823/bio-0.39.0/src/alphabets/mod.rs","byte_start":213337,"byte_end":213340,"line_start":9,"line_end":9,"column_start":1,"column_end":4}},{"value":"/ ```rust","span":{"file_name":"/Users/shelwitz/.cargo/registry/src/github.com-1ecc6299db9ec823/bio-0.39.0/src/alphabets/mod.rs","byte_start":213341,"byte_end":213352,"line_start":10,"line_end":10,"column_start":1,"column_end":12}},{"value":"/ use bio::alphabets;","span":{"file_name":"/Users/shelwitz/.cargo/registry/src/github.com-1ecc6299db9ec823/bio-0.39.0/src/alphabets/mod.rs","byte_start":213353,"byte_end":213376,"line_start":11,"line_end":11,"column_start":1,"column_end":24}},{"value":"/ let alphabet = alphabets::dna::alphabet();","span":{"file_name":"/Users/shelwitz/.cargo/registry/src/github.com-1ecc6299db9ec823/bio-0.39.0/src/alphabets/mod.rs","byte_start":213377,"byte_end":213423,"line_start":12,"line_end":12,"column_start":1,"column_end":47}},{"value":"/ assert!(alphabet.is_word(b\"AACCTgga\"));","span":{"file_name":"/Users/shelwitz/.cargo/registry/src/github.com-1ecc6299db9ec823/bio-0.39.0/src/alphabets/mod.rs","byte_start":213424,"byte_end":213467,"line_start":13,"line_end":13,"column_start":1,"column_end":44}},{"value":"/ assert!(!alphabet.is_word(b\"AXYZ\"));","span":{"file_name":"/Users/shelwitz/.cargo/registry/src/github.com-1ecc6299db9ec823/bio-0.39.0/src/alphabets/mod.rs","byte_start":213468,"byte_end":213508,"line_start":14,"line_end":14,"column_start":1,"column_end":41}},{"value":"/ ```","span":{"file_name":"/Users/shelwitz/.cargo/registry/src/github.com-1ecc6299db9ec823/bio-0.39.0/src/alphabets/mod.rs","byte_start":213509,"byte_end":213516,"line_start":15,"line_end":15,"column_start":1,"column_end":8}}]},{"kind":"Mod","id":{"krate":0,"index":360},"span":{"file_name":"/Users/shelwitz/.cargo/registry/src/github.com-1ecc6299db9ec823/bio-0.39.0/src/alphabets/dna.rs","byte_start":0,"byte_end":0,"line_start":1,"line_end":1,"column_start":1,"column_end":1},"name":"dna","qualname":"::alphabets::dna","value":"/Users/shelwitz/.cargo/registry/src/github.com-1ecc6299db9ec823/bio-0.39.0/src/alphabets/dna.rs","parent":null,"children":[{"krate":0,"index":361},{"krate":0,"index":364},{"krate":0,"index":367},{"krate":0,"index":368},{"krate":0,"index":369},{"krate":0,"index":3415},{"krate":0,"index":3417},{"krate":0,"index":3418},{"krate":0,"index":3428},{"krate":0,"index":370},{"krate":0,"index":371}],"decl_id":null,"docs":" Implementation of the DNA alphabet.","sig":null,"attributes":[{"value":"/ Implementation of the DNA alphabet.","span":{"file_name":"/Users/shelwitz/.cargo/registry/src/github.com-1ecc6299db9ec823/bio-0.39.0/src/alphabets/dna.rs","byte_start":226377,"byte_end":226416,"line_start":6,"line_end":6,"column_start":1,"column_end":40}},{"value":"/","span":{"file_name":"/Users/shelwitz/.cargo/registry/src/github.com-1ecc6299db9ec823/bio-0.39.0/src/alphabets/dna.rs","byte_start":226417,"byte_end":226420,"line_start":7,"line_end":7,"column_start":1,"column_end":4}},{"value":"/ # Example","span":{"file_name":"/Users/shelwitz/.cargo/registry/src/github.com-1ecc6299db9ec823/bio-0.39.0/src/alphabets/dna.rs","byte_start":226421,"byte_end":226434,"line_start":8,"line_end":8,"column_start":1,"column_end":14}},{"value":"/","span":{"file_name":"/Users/shelwitz/.cargo/registry/src/github.com-1ecc6299db9ec823/bio-0.39.0/src/alphabets/dna.rs","byte_start":226435,"byte_end":226438,"line_start":9,"line_end":9,"column_start":1,"column_end":4}},{"value":"/ ```","span":{"file_name":"/Users/shelwitz/.cargo/registry/src/github.com-1ecc6299db9ec823/bio-0.39.0/src/alphabets/dna.rs","byte_start":226439,"byte_end":226446,"line_start":10,"line_end":10,"column_start":1,"column_end":8}},{"value":"/ use bio::alphabets;","span":{"file_name":"/Users/shelwitz/.cargo/registry/src/github.com-1ecc6299db9ec823/bio-0.39.0/src/alphabets/dna.rs","byte_start":226447,"byte_end":226470,"line_start":11,"line_end":11,"column_start":1,"column_end":24}},{"value":"/ let alphabet = alphabets::dna::alphabet();","span":{"file_name":"/Users/shelwitz/.cargo/registry/src/github.com-1ecc6299db9ec823/bio-0.39.0/src/alphabets/dna.rs","byte_start":226471,"byte_end":226517,"line_start":12,"line_end":12,"column_start":1,"column_end":47}},{"value":"/ assert!(alphabet.is_word(b\"GATTACA\"));","span":{"file_name":"/Users/shelwitz/.cargo/registry/src/github.com-1ecc6299db9ec823/bio-0.39.0/src/alphabets/dna.rs","byte_start":226518,"byte_end":226560,"line_start":13,"line_end":13,"column_start":1,"column_end":43}},{"value":"/ assert!(alphabet.is_word(b\"gattaca\"));","span":{"file_name":"/Users/shelwitz/.cargo/registry/src/github.com-1ecc6299db9ec823/bio-0.39.0/src/alphabets/dna.rs","byte_start":226561,"byte_end":226603,"line_start":14,"line_end":14,"column_start":1,"column_end":43}},{"value":"/ assert!(!alphabet.is_word(b\"ACGU\"));","span":{"file_name":"/Users/shelwitz/.cargo/registry/src/github.com-1ecc6299db9ec823/bio-0.39.0/src/alphabets/dna.rs","byte_start":226604,"byte_end":226644,"line_start":15,"line_end":15,"column_start":1,"column_end":41}},{"value":"/ ```","span":{"file_name":"/Users/shelwitz/.cargo/registry/src/github.com-1ecc6299db9ec823/bio-0.39.0/src/alphabets/dna.rs","byte_start":226645,"byte_end":226652,"line_start":16,"line_end":16,"column_start":1,"column_end":8}}]},{"kind":"Function","id":{"krate":0,"index":367},"span":{"file_name":"/Users/shelwitz/.cargo/registry/src/github.com-1ecc6299db9ec823/bio-0.39.0/src/alphabets/dna.rs","byte_start":226768,"byte_end":226776,"line_start":23,"line_end":23,"column_start":8,"column_end":16},"name":"alphabet","qualname":"::alphabets::dna::alphabet","value":"pub fn alphabet() -> Alphabet","parent":null,"children":[],"decl_id":null,"docs":" The DNA alphabet (uppercase and lowercase).\n","sig":null,"attributes":[{"value":"/ The DNA alphabet (uppercase and lowercase).","span":{"file_name":"/Users/shelwitz/.cargo/registry/src/github.com-1ecc6299db9ec823/bio-0.39.0/src/alphabets/dna.rs","byte_start":226713,"byte_end":226760,"line_start":22,"line_end":22,"column_start":1,"column_end":48}}]},{"kind":"Function","id":{"krate":0,"index":368},"span":{"file_name":"/Users/shelwitz/.cargo/registry/src/github.com-1ecc6299db9ec823/bio-0.39.0/src/alphabets/dna.rs","byte_start":226894,"byte_end":226904,"line_start":28,"line_end":28,"column_start":8,"column_end":18},"name":"n_alphabet","qualname":"::alphabets::dna::n_alphabet","value":"pub fn n_alphabet() -> Alphabet","parent":null,"children":[],"decl_id":null,"docs":" The DNA alphabet including N (uppercase and lowercase).\n","sig":null,"attributes":[{"value":"/ The DNA alphabet including N (uppercase and lowercase).","span":{"file_name":"/Users/shelwitz/.cargo/registry/src/github.com-1ecc6299db9ec823/bio-0.39.0/src/alphabets/dna.rs","byte_start":226827,"byte_end":226886,"line_start":27,"line_end":27,"column_start":1,"column_end":60}}]},{"kind":"Function","id":{"krate":0,"index":369},"span":{"file_name":"/Users/shelwitz/.cargo/registry/src/github.com-1ecc6299db9ec823/bio-0.39.0/src/alphabets/dna.rs","byte_start":227018,"byte_end":227032,"line_start":33,"line_end":33,"column_start":8,"column_end":22},"name":"iupac_alphabet","qualname":"::alphabets::dna::iupac_alphabet","value":"pub fn iupac_alphabet() -> Alphabet","parent":null,"children":[],"decl_id":null,"docs":" The IUPAC DNA alphabet (uppercase and lowercase).\n","sig":null,"attributes":[{"value":"/ The IUPAC DNA alphabet (uppercase and lowercase).","span":{"file_name":"/Users/shelwitz/.cargo/registry/src/github.com-1ecc6299db9ec823/bio-0.39.0/src/alphabets/dna.rs","byte_start":226957,"byte_end":227010,"line_start":32,"line_end":32,"column_start":1,"column_end":54}}]},{"kind":"Function","id":{"krate":0,"index":370},"span":{"file_name":"/Users/shelwitz/.cargo/registry/src/github.com-1ecc6299db9ec823/bio-0.39.0/src/alphabets/dna.rs","byte_start":228022,"byte_end":228032,"line_start":65,"line_end":65,"column_start":8,"column_end":18},"name":"complement","qualname":"::alphabets::dna::complement","value":"pub fn complement(u8) -> u8","parent":null,"children":[],"decl_id":null,"docs":" Return complement of given DNA alphabet character (IUPAC alphabet supported).","sig":null,"attributes":[{"value":"/ Return complement of given DNA alphabet character (IUPAC alphabet supported).","span":{"file_name":"/Users/shelwitz/.cargo/registry/src/github.com-1ecc6299db9ec823/bio-0.39.0/src/alphabets/dna.rs","byte_start":227501,"byte_end":227582,"line_start":51,"line_end":51,"column_start":1,"column_end":82}},{"value":"/","span":{"file_name":"/Users/shelwitz/.cargo/registry/src/github.com-1ecc6299db9ec823/bio-0.39.0/src/alphabets/dna.rs","byte_start":227583,"byte_end":227586,"line_start":52,"line_end":52,"column_start":1,"column_end":4}},{"value":"/ Casing of input character is preserved, e.g. `t` → `a`, but `T` → `A`.","span":{"file_name":"/Users/shelwitz/.cargo/registry/src/github.com-1ecc6299db9ec823/bio-0.39.0/src/alphabets/dna.rs","byte_start":227587,"byte_end":227665,"line_start":53,"line_end":53,"column_start":1,"column_end":75}},{"value":"/ All `N`s remain as they are.","span":{"file_name":"/Users/shelwitz/.cargo/registry/src/github.com-1ecc6299db9ec823/bio-0.39.0/src/alphabets/dna.rs","byte_start":227666,"byte_end":227698,"line_start":54,"line_end":54,"column_start":1,"column_end":33}},{"value":"/","span":{"file_name":"/Users/shelwitz/.cargo/registry/src/github.com-1ecc6299db9ec823/bio-0.39.0/src/alphabets/dna.rs","byte_start":227699,"byte_end":227702,"line_start":55,"line_end":55,"column_start":1,"column_end":4}},{"value":"/ ```","span":{"file_name":"/Users/shelwitz/.cargo/registry/src/github.com-1ecc6299db9ec823/bio-0.39.0/src/alphabets/dna.rs","byte_start":227703,"byte_end":227710,"line_start":56,"line_end":56,"column_start":1,"column_end":8}},{"value":"/ use bio::alphabets::dna;","span":{"file_name":"/Users/shelwitz/.cargo/registry/src/github.com-1ecc6299db9ec823/bio-0.39.0/src/alphabets/dna.rs","byte_start":227711,"byte_end":227739,"line_start":57,"line_end":57,"column_start":1,"column_end":29}},{"value":"/","span":{"file_name":"/Users/shelwitz/.cargo/registry/src/github.com-1ecc6299db9ec823/bio-0.39.0/src/alphabets/dna.rs","byte_start":227740,"byte_end":227743,"line_start":58,"line_end":58,"column_start":1,"column_end":4}},{"value":"/ assert_eq!(dna::complement(65), 84); // A → T","span":{"file_name":"/Users/shelwitz/.cargo/registry/src/github.com-1ecc6299db9ec823/bio-0.39.0/src/alphabets/dna.rs","byte_start":227744,"byte_end":227795,"line_start":59,"line_end":59,"column_start":1,"column_end":50}},{"value":"/ assert_eq!(dna::complement(99), 103); // c → g","span":{"file_name":"/Users/shelwitz/.cargo/registry/src/github.com-1ecc6299db9ec823/bio-0.39.0/src/alphabets/dna.rs","byte_start":227796,"byte_end":227848,"line_start":60,"line_end":60,"column_start":1,"column_end":51}},{"value":"/ assert_eq!(dna::complement(78), 78); // N → N","span":{"file_name":"/Users/shelwitz/.cargo/registry/src/github.com-1ecc6299db9ec823/bio-0.39.0/src/alphabets/dna.rs","byte_start":227849,"byte_end":227900,"line_start":61,"line_end":61,"column_start":1,"column_end":50}},{"value":"/ assert_eq!(dna::complement(89), 82); // Y → R","span":{"file_name":"/Users/shelwitz/.cargo/registry/src/github.com-1ecc6299db9ec823/bio-0.39.0/src/alphabets/dna.rs","byte_start":227901,"byte_end":227952,"line_start":62,"line_end":62,"column_start":1,"column_end":50}},{"value":"/ assert_eq!(dna::complement(115), 115); // s → s","span":{"file_name":"/Users/shelwitz/.cargo/registry/src/github.com-1ecc6299db9ec823/bio-0.39.0/src/alphabets/dna.rs","byte_start":227953,"byte_end":228006,"line_start":63,"line_end":63,"column_start":1,"column_end":52}},{"value":"/ ```","span":{"file_name":"/Users/shelwitz/.cargo/registry/src/github.com-1ecc6299db9ec823/bio-0.39.0/src/alphabets/dna.rs","byte_start":228007,"byte_end":228014,"line_start":64,"line_end":64,"column_start":1,"column_end":8}}]},{"kind":"Function","id":{"krate":0,"index":371},"span":{"file_name":"/Users/shelwitz/.cargo/registry/src/github.com-1ecc6299db9ec823/bio-0.39.0/src/alphabets/dna.rs","byte_start":228495,"byte_end":228502,"line_start":81,"line_end":81,"column_start":8,"column_end":15},"name":"revcomp","qualname":"::alphabets::dna::revcomp","value":"pub fn revcomp<C, T>(T) -> Vec<u8> where C: Borrow<u8>, T: IntoIterator<Item =\nC>, T::IntoIter: DoubleEndedIterator","parent":null,"children":[],"decl_id":null,"docs":" Calculate reverse complement of given text (IUPAC alphabet supported).","sig":null,"attributes":[{"value":"/ Calculate reverse complement of given text (IUPAC alphabet supported).","span":{"file_name":"/Users/shelwitz/.cargo/registry/src/github.com-1ecc6299db9ec823/bio-0.39.0/src/alphabets/dna.rs","byte_start":228078,"byte_end":228152,"line_start":69,"line_end":69,"column_start":1,"column_end":75}},{"value":"/","span":{"file_name":"/Users/shelwitz/.cargo/registry/src/github.com-1ecc6299db9ec823/bio-0.39.0/src/alphabets/dna.rs","byte_start":228153,"byte_end":228156,"line_start":70,"line_end":70,"column_start":1,"column_end":4}},{"value":"/ Casing of characters is preserved, e.g. `b\"NaCgT\"` → `b\"aCgTN\"`.","span":{"file_name":"/Users/shelwitz/.cargo/registry/src/github.com-1ecc6299db9ec823/bio-0.39.0/src/alphabets/dna.rs","byte_start":228157,"byte_end":228227,"line_start":71,"line_end":71,"column_start":1,"column_end":69}},{"value":"/ All `N`s remain as they are.","span":{"file_name":"/Users/shelwitz/.cargo/registry/src/github.com-1ecc6299db9ec823/bio-0.39.0/src/alphabets/dna.rs","byte_start":228228,"byte_end":228260,"line_start":72,"line_end":72,"column_start":1,"column_end":33}},{"value":"/","span":{"file_name":"/Users/shelwitz/.cargo/registry/src/github.com-1ecc6299db9ec823/bio-0.39.0/src/alphabets/dna.rs","byte_start":228261,"byte_end":228264,"line_start":73,"line_end":73,"column_start":1,"column_end":4}},{"value":"/ ```","span":{"file_name":"/Users/shelwitz/.cargo/registry/src/github.com-1ecc6299db9ec823/bio-0.39.0/src/alphabets/dna.rs","byte_start":228265,"byte_end":228272,"line_start":74,"line_end":74,"column_start":1,"column_end":8}},{"value":"/ use bio::alphabets::dna;","span":{"file_name":"/Users/shelwitz/.cargo/registry/src/github.com-1ecc6299db9ec823/bio-0.39.0/src/alphabets/dna.rs","byte_start":228273,"byte_end":228301,"line_start":75,"line_end":75,"column_start":1,"column_end":29}},{"value":"/","span":{"file_name":"/Users/shelwitz/.cargo/registry/src/github.com-1ecc6299db9ec823/bio-0.39.0/src/alphabets/dna.rs","byte_start":228302,"byte_end":228305,"line_start":76,"line_end":76,"column_start":1,"column_end":4}},{"value":"/ assert_eq!(dna::revcomp(b\"ACGTN\"), b\"NACGT\");","span":{"file_name":"/Users/shelwitz/.cargo/registry/src/github.com-1ecc6299db9ec823/bio-0.39.0/src/alphabets/dna.rs","byte_start":228306,"byte_end":228355,"line_start":77,"line_end":77,"column_start":1,"column_end":50}},{"value":"/ assert_eq!(dna::revcomp(b\"GaTtaCA\"), b\"TGtaAtC\");","span":{"file_name":"/Users/shelwitz/.cargo/registry/src/github.com-1ecc6299db9ec823/bio-0.39.0/src/alphabets/dna.rs","byte_start":228356,"byte_end":228409,"line_start":78,"line_end":78,"column_start":1,"column_end":54}},{"value":"/ assert_eq!(dna::revcomp(b\"AGCTYRWSKMDVHBN\"), b\"NVDBHKMSWYRAGCT\");","span":{"file_name":"/Users/shelwitz/.cargo/registry/src/github.com-1ecc6299db9ec823/bio-0.39.0/src/alphabets/dna.rs","byte_start":228410,"byte_end":228479,"line_start":79,"line_end":79,"column_start":1,"column_end":70}},{"value":"/ ```","span":{"file_name":"/Users/shelwitz/.cargo/registry/src/github.com-1ecc6299db9ec823/bio-0.39.0/src/alphabets/dna.rs","byte_start":228480,"byte_end":228487,"line_start":80,"line_end":80,"column_start":1,"column_end":8}}]},{"kind":"Mod","id":{"krate":0,"index":375},"span":{"file_name":"/Users/shelwitz/.cargo/registry/src/github.com-1ecc6299db9ec823/bio-0.39.0/src/alphabets/protein.rs","byte_start":0,"byte_end":0,"line_start":1,"line_end":1,"column_start":1,"column_end":1},"name":"protein","qualname":"::alphabets::protein","value":"/Users/shelwitz/.cargo/registry/src/github.com-1ecc6299db9ec823/bio-0.39.0/src/alphabets/protein.rs","parent":null,"children":[{"krate":0,"index":376},{"krate":0,"index":379},{"krate":0,"index":380}],"decl_id":null,"docs":" Implementation of the protein alphabet.","sig":null,"attributes":[{"value":"/ Implementation of the protein alphabet.","span":{"file_name":"/Users/shelwitz/.cargo/registry/src/github.com-1ecc6299db9ec823/bio-0.39.0/src/alphabets/protein.rs","byte_start":229339,"byte_end":229382,"line_start":6,"line_end":6,"column_start":1,"column_end":44}},{"value":"/","span":{"file_name":"/Users/shelwitz/.cargo/registry/src/github.com-1ecc6299db9ec823/bio-0.39.0/src/alphabets/protein.rs","byte_start":229383,"byte_end":229386,"line_start":7,"line_end":7,"column_start":1,"column_end":4}},{"value":"/ # Example","span":{"file_name":"/Users/shelwitz/.cargo/registry/src/github.com-1ecc6299db9ec823/bio-0.39.0/src/alphabets/protein.rs","byte_start":229387,"byte_end":229400,"line_start":8,"line_end":8,"column_start":1,"column_end":14}},{"value":"/","span":{"file_name":"/Users/shelwitz/.cargo/registry/src/github.com-1ecc6299db9ec823/bio-0.39.0/src/alphabets/protein.rs","byte_start":229401,"byte_end":229404,"line_start":9,"line_end":9,"column_start":1,"column_end":4}},{"value":"/ ```","span":{"file_name":"/Users/shelwitz/.cargo/registry/src/github.com-1ecc6299db9ec823/bio-0.39.0/src/alphabets/protein.rs","byte_start":229405,"byte_end":229412,"line_start":10,"line_end":10,"column_start":1,"column_end":8}},{"value":"/ use bio::alphabets;","span":{"file_name":"/Users/shelwitz/.cargo/registry/src/github.com-1ecc6299db9ec823/bio-0.39.0/src/alphabets/protein.rs","byte_start":229413,"byte_end":229436,"line_start":11,"line_end":11,"column_start":1,"column_end":24}},{"value":"/ let alphabet = alphabets::protein::alphabet();","span":{"file_name":"/Users/shelwitz/.cargo/registry/src/github.com-1ecc6299db9ec823/bio-0.39.0/src/alphabets/protein.rs","byte_start":229437,"byte_end":229487,"line_start":12,"line_end":12,"column_start":1,"column_end":51}},{"value":"/ assert!(alphabet.is_word(b\"DEQsga\"));","span":{"file_name":"/Users/shelwitz/.cargo/registry/src/github.com-1ecc6299db9ec823/bio-0.39.0/src/alphabets/protein.rs","byte_start":229488,"byte_end":229529,"line_start":13,"line_end":13,"column_start":1,"column_end":42}},{"value":"/ assert!(!alphabet.is_word(b\"BzJ\"));","span":{"file_name":"/Users/shelwitz/.cargo/registry/src/github.com-1ecc6299db9ec823/bio-0.39.0/src/alphabets/protein.rs","byte_start":229530,"byte_end":229569,"line_start":14,"line_end":14,"column_start":1,"column_end":40}},{"value":"/ ```","span":{"file_name":"/Users/shelwitz/.cargo/registry/src/github.com-1ecc6299db9ec823/bio-0.39.0/src/alphabets/protein.rs","byte_start":229570,"byte_end":229577,"line_start":15,"line_end":15,"column_start":1,"column_end":8}}]},{"kind":"Function","id":{"krate":0,"index":379},"span":{"file_name":"/Users/shelwitz/.cargo/registry/src/github.com-1ecc6299db9ec823/bio-0.39.0/src/alphabets/protein.rs","byte_start":229700,"byte_end":229708,"line_start":20,"line_end":20,"column_start":8,"column_end":16},"name":"alphabet","qualname":"::alphabets::protein::alphabet","value":"pub fn alphabet() -> Alphabet","parent":null,"children":[],"decl_id":null,"docs":" Returns the standard protein alphabet, containing the 20 common amino acids.\n","sig":null,"attributes":[{"value":"/ Returns the standard protein alphabet, containing the 20 common amino acids.","span":{"file_name":"/Users/shelwitz/.cargo/registry/src/github.com-1ecc6299db9ec823/bio-0.39.0/src/alphabets/protein.rs","byte_start":229612,"byte_end":229692,"line_start":19,"line_end":19,"column_start":1,"column_end":81}}]},{"kind":"Function","id":{"krate":0,"index":380},"span":{"file_name":"/Users/shelwitz/.cargo/registry/src/github.com-1ecc6299db9ec823/bio-0.39.0/src/alphabets/protein.rs","byte_start":229846,"byte_end":229860,"line_start":25,"line_end":25,"column_start":8,"column_end":22},"name":"iupac_alphabet","qualname":"::alphabets::protein::iupac_alphabet","value":"pub fn iupac_alphabet() -> Alphabet","parent":null,"children":[],"decl_id":null,"docs":" Returns the IUPAC amino acid alphabet.\n","sig":null,"attributes":[{"value":"/ Returns the IUPAC amino acid alphabet.","span":{"file_name":"/Users/shelwitz/.cargo/registry/src/github.com-1ecc6299db9ec823/bio-0.39.0/src/alphabets/protein.rs","byte_start":229796,"byte_end":229838,"line_start":24,"line_end":24,"column_start":1,"column_end":43}}]},{"kind":"Mod","id":{"krate":0,"index":381},"span":{"file_name":"/Users/shelwitz/.cargo/registry/src/github.com-1ecc6299db9ec823/bio-0.39.0/src/alphabets/rna.rs","byte_start":0,"byte_end":0,"line_start":1,"line_end":1,"column_start":1,"column_end":1},"name":"rna","qualname":"::alphabets::rna","value":"/Users/shelwitz/.cargo/registry/src/github.com-1ecc6299db9ec823/bio-0.39.0/src/alphabets/rna.rs","parent":null,"children":[{"krate":0,"index":382},{"krate":0,"index":385},{"krate":0,"index":388},{"krate":0,"index":389},{"krate":0,"index":390},{"krate":0,"index":3432},{"krate":0,"index":3434},{"krate":0,"index":3435},{"krate":0,"index":3445},{"krate":0,"index":391},{"krate":0,"index":392}],"decl_id":null,"docs":" Implementation of the RNA alphabet.","sig":null,"attributes":[{"value":"/ Implementation of the RNA alphabet.","span":{"file_name":"/Users/shelwitz/.cargo/registry/src/github.com-1ecc6299db9ec823/bio-0.39.0/src/alphabets/rna.rs","byte_start":230657,"byte_end":230696,"line_start":6,"line_end":6,"column_start":1,"column_end":40}},{"value":"/","span":{"file_name":"/Users/shelwitz/.cargo/registry/src/github.com-1ecc6299db9ec823/bio-0.39.0/src/alphabets/rna.rs","byte_start":230697,"byte_end":230700,"line_start":7,"line_end":7,"column_start":1,"column_end":4}},{"value":"/ # Example","span":{"file_name":"/Users/shelwitz/.cargo/registry/src/github.com-1ecc6299db9ec823/bio-0.39.0/src/alphabets/rna.rs","byte_start":230701,"byte_end":230714,"line_start":8,"line_end":8,"column_start":1,"column_end":14}},{"value":"/","span":{"file_name":"/Users/shelwitz/.cargo/registry/src/github.com-1ecc6299db9ec823/bio-0.39.0/src/alphabets/rna.rs","byte_start":230715,"byte_end":230718,"line_start":9,"line_end":9,"column_start":1,"column_end":4}},{"value":"/ ```","span":{"file_name":"/Users/shelwitz/.cargo/registry/src/github.com-1ecc6299db9ec823/bio-0.39.0/src/alphabets/rna.rs","byte_start":230719,"byte_end":230726,"line_start":10,"line_end":10,"column_start":1,"column_end":8}},{"value":"/ use bio::alphabets;","span":{"file_name":"/Users/shelwitz/.cargo/registry/src/github.com-1ecc6299db9ec823/bio-0.39.0/src/alphabets/rna.rs","byte_start":230727,"byte_end":230750,"line_start":11,"line_end":11,"column_start":1,"column_end":24}},{"value":"/ let alphabet = alphabets::rna::alphabet();","span":{"file_name":"/Users/shelwitz/.cargo/registry/src/github.com-1ecc6299db9ec823/bio-0.39.0/src/alphabets/rna.rs","byte_start":230751,"byte_end":230797,"line_start":12,"line_end":12,"column_start":1,"column_end":47}},{"value":"/ assert!(alphabet.is_word(b\"GAUUACA\"));","span":{"file_name":"/Users/shelwitz/.cargo/registry/src/github.com-1ecc6299db9ec823/bio-0.39.0/src/alphabets/rna.rs","byte_start":230798,"byte_end":230840,"line_start":13,"line_end":13,"column_start":1,"column_end":43}},{"value":"/ assert!(alphabet.is_word(b\"gauuaca\"));","span":{"file_name":"/Users/shelwitz/.cargo/registry/src/github.com-1ecc6299db9ec823/bio-0.39.0/src/alphabets/rna.rs","byte_start":230841,"byte_end":230883,"line_start":14,"line_end":14,"column_start":1,"column_end":43}},{"value":"/ assert!(!alphabet.is_word(b\"ACGT\"));","span":{"file_name":"/Users/shelwitz/.cargo/registry/src/github.com-1ecc6299db9ec823/bio-0.39.0/src/alphabets/rna.rs","byte_start":230884,"byte_end":230924,"line_start":15,"line_end":15,"column_start":1,"column_end":41}},{"value":"/ ```","span":{"file_name":"/Users/shelwitz/.cargo/registry/src/github.com-1ecc6299db9ec823/bio-0.39.0/src/alphabets/rna.rs","byte_start":230925,"byte_end":230932,"line_start":16,"line_end":16,"column_start":1,"column_end":8}}]},{"kind":"Function","id":{"krate":0,"index":388},"span":{"file_name":"/Users/shelwitz/.cargo/registry/src/github.com-1ecc6299db9ec823/bio-0.39.0/src/alphabets/rna.rs","byte_start":231048,"byte_end":231056,"line_start":23,"line_end":23,"column_start":8,"column_end":16},"name":"alphabet","qualname":"::alphabets::rna::alphabet","value":"pub fn alphabet() -> Alphabet","parent":null,"children":[],"decl_id":null,"docs":" The RNA alphabet (uppercase and lowercase).\n","sig":null,"attributes":[{"value":"/ The RNA alphabet (uppercase and lowercase).","span":{"file_name":"/Users/shelwitz/.cargo/registry/src/github.com-1ecc6299db9ec823/bio-0.39.0/src/alphabets/rna.rs","byte_start":230993,"byte_end":231040,"line_start":22,"line_end":22,"column_start":1,"column_end":48}}]},{"kind":"Function","id":{"krate":0,"index":389},"span":{"file_name":"/Users/shelwitz/.cargo/registry/src/github.com-1ecc6299db9ec823/bio-0.39.0/src/alphabets/rna.rs","byte_start":231174,"byte_end":231184,"line_start":28,"line_end":28,"column_start":8,"column_end":18},"name":"n_alphabet","qualname":"::alphabets::rna::n_alphabet","value":"pub fn n_alphabet() -> Alphabet","parent":null,"children":[],"decl_id":null,"docs":" The RNA alphabet including N (uppercase and lowercase).\n","sig":null,"attributes":[{"value":"/ The RNA alphabet including N (uppercase and lowercase).","span":{"file_name":"/Users/shelwitz/.cargo/registry/src/github.com-1ecc6299db9ec823/bio-0.39.0/src/alphabets/rna.rs","byte_start":231107,"byte_end":231166,"line_start":27,"line_end":27,"column_start":1,"column_end":60}}]},{"kind":"Function","id":{"krate":0,"index":390},"span":{"file_name":"/Users/shelwitz/.cargo/registry/src/github.com-1ecc6299db9ec823/bio-0.39.0/src/alphabets/rna.rs","byte_start":231298,"byte_end":231312,"line_start":33,"line_end":33,"column_start":8,"column_end":22},"name":"iupac_alphabet","qualname":"::alphabets::rna::iupac_alphabet","value":"pub fn iupac_alphabet() -> Alphabet","parent":null,"children":[],"decl_id":null,"docs":" The IUPAC RNA alphabet (uppercase and lowercase).\n","sig":null,"attributes":[{"value":"/ The IUPAC RNA alphabet (uppercase and lowercase).","span":{"file_name":"/Users/shelwitz/.cargo/registry/src/github.com-1ecc6299db9ec823/bio-0.39.0/src/alphabets/rna.rs","byte_start":231237,"byte_end":231290,"line_start":32,"line_end":32,"column_start":1,"column_end":54}}]},{"kind":"Function","id":{"krate":0,"index":391},"span":{"file_name":"/Users/shelwitz/.cargo/registry/src/github.com-1ecc6299db9ec823/bio-0.39.0/src/alphabets/rna.rs","byte_start":232313,"byte_end":232323,"line_start":65,"line_end":65,"column_start":8,"column_end":18},"name":"complement","qualname":"::alphabets::rna::complement","value":"pub fn complement(u8) -> u8","parent":null,"children":[],"decl_id":null,"docs":" Return complement of given RNA alphabet character (IUPAC alphabet supported).","sig":null,"attributes":[{"value":"/ Return complement of given RNA alphabet character (IUPAC alphabet supported).","span":{"file_name":"/Users/shelwitz/.cargo/registry/src/github.com-1ecc6299db9ec823/bio-0.39.0/src/alphabets/rna.rs","byte_start":231783,"byte_end":231864,"line_start":51,"line_end":51,"column_start":1,"column_end":82}},{"value":"/","span":{"file_name":"/Users/shelwitz/.cargo/registry/src/github.com-1ecc6299db9ec823/bio-0.39.0/src/alphabets/rna.rs","byte_start":231865,"byte_end":231868,"line_start":52,"line_end":52,"column_start":1,"column_end":4}},{"value":"/ Casing of input character is preserved, e.g. `u` → `a`, but `U` → `A`.","span":{"file_name":"/Users/shelwitz/.cargo/registry/src/github.com-1ecc6299db9ec823/bio-0.39.0/src/alphabets/rna.rs","byte_start":231869,"byte_end":231947,"line_start":53,"line_end":53,"column_start":1,"column_end":75}},{"value":"/ All `N`s and `Z`s remain as they are.","span":{"file_name":"/Users/shelwitz/.cargo/registry/src/github.com-1ecc6299db9ec823/bio-0.39.0/src/alphabets/rna.rs","byte_start":231948,"byte_end":231989,"line_start":54,"line_end":54,"column_start":1,"column_end":42}},{"value":"/","span":{"file_name":"/Users/shelwitz/.cargo/registry/src/github.com-1ecc6299db9ec823/bio-0.39.0/src/alphabets/rna.rs","byte_start":231990,"byte_end":231993,"line_start":55,"line_end":55,"column_start":1,"column_end":4}},{"value":"/ ```","span":{"file_name":"/Users/shelwitz/.cargo/registry/src/github.com-1ecc6299db9ec823/bio-0.39.0/src/alphabets/rna.rs","byte_start":231994,"byte_end":232001,"line_start":56,"line_end":56,"column_start":1,"column_end":8}},{"value":"/ use bio::alphabets::rna;","span":{"file_name":"/Users/shelwitz/.cargo/registry/src/github.com-1ecc6299db9ec823/bio-0.39.0/src/alphabets/rna.rs","byte_start":232002,"byte_end":232030,"line_start":57,"line_end":57,"column_start":1,"column_end":29}},{"value":"/","span":{"file_name":"/Users/shelwitz/.cargo/registry/src/github.com-1ecc6299db9ec823/bio-0.39.0/src/alphabets/rna.rs","byte_start":232031,"byte_end":232034,"line_start":58,"line_end":58,"column_start":1,"column_end":4}},{"value":"/ assert_eq!(rna::complement(65), 85); // A → U","span":{"file_name":"/Users/shelwitz/.cargo/registry/src/github.com-1ecc6299db9ec823/bio-0.39.0/src/alphabets/rna.rs","byte_start":232035,"byte_end":232086,"line_start":59,"line_end":59,"column_start":1,"column_end":50}},{"value":"/ assert_eq!(rna::complement(103), 99); // g → c","span":{"file_name":"/Users/shelwitz/.cargo/registry/src/github.com-1ecc6299db9ec823/bio-0.39.0/src/alphabets/rna.rs","byte_start":232087,"byte_end":232139,"line_start":60,"line_end":60,"column_start":1,"column_end":51}},{"value":"/ assert_eq!(rna::complement(89), 82); // Y → R","span":{"file_name":"/Users/shelwitz/.cargo/registry/src/github.com-1ecc6299db9ec823/bio-0.39.0/src/alphabets/rna.rs","byte_start":232140,"byte_end":232191,"line_start":61,"line_end":61,"column_start":1,"column_end":50}},{"value":"/ assert_eq!(rna::complement(115), 115); // s → s","span":{"file_name":"/Users/shelwitz/.cargo/registry/src/github.com-1ecc6299db9ec823/bio-0.39.0/src/alphabets/rna.rs","byte_start":232192,"byte_end":232245,"line_start":62,"line_end":62,"column_start":1,"column_end":52}},{"value":"/ assert_eq!(rna::complement(78), 78); // N → N","span":{"file_name":"/Users/shelwitz/.cargo/registry/src/github.com-1ecc6299db9ec823/bio-0.39.0/src/alphabets/rna.rs","byte_start":232246,"byte_end":232297,"line_start":63,"line_end":63,"column_start":1,"column_end":50}},{"value":"/ ```","span":{"file_name":"/Users/shelwitz/.cargo/registry/src/github.com-1ecc6299db9ec823/bio-0.39.0/src/alphabets/rna.rs","byte_start":232298,"byte_end":232305,"line_start":64,"line_end":64,"column_start":1,"column_end":8}}]},{"kind":"Function","id":{"krate":0,"index":392},"span":{"file_name":"/Users/shelwitz/.cargo/registry/src/github.com-1ecc6299db9ec823/bio-0.39.0/src/alphabets/rna.rs","byte_start":232787,"byte_end":232794,"line_start":80,"line_end":80,"column_start":8,"column_end":15},"name":"revcomp","qualname":"::alphabets::rna::revcomp","value":"pub fn revcomp<C, T>(T) -> Vec<u8> where C: Borrow<u8>, T: IntoIterator<Item =\nC>, T::IntoIter: DoubleEndedIterator","parent":null,"children":[],"decl_id":null,"docs":" Calculate reverse complement of given text (IUPAC alphabet supported).","sig":null,"attributes":[{"value":"/ Calculate reverse complement of given text (IUPAC alphabet supported).","span":{"file_name":"/Users/shelwitz/.cargo/registry/src/github.com-1ecc6299db9ec823/bio-0.39.0/src/alphabets/rna.rs","byte_start":232369,"byte_end":232443,"line_start":69,"line_end":69,"column_start":1,"column_end":75}},{"value":"/","span":{"file_name":"/Users/shelwitz/.cargo/registry/src/github.com-1ecc6299db9ec823/bio-0.39.0/src/alphabets/rna.rs","byte_start":232444,"byte_end":232447,"line_start":70,"line_end":70,"column_start":1,"column_end":4}},{"value":"/ Casing of characters is preserved, e.g. `b\"uAGg\"` → `b\"cCUa\"`.","span":{"file_name":"/Users/shelwitz/.cargo/registry/src/github.com-1ecc6299db9ec823/bio-0.39.0/src/alphabets/rna.rs","byte_start":232448,"byte_end":232516,"line_start":71,"line_end":71,"column_start":1,"column_end":67}},{"value":"/ All `N`s and `Z`s remain as they are.","span":{"file_name":"/Users/shelwitz/.cargo/registry/src/github.com-1ecc6299db9ec823/bio-0.39.0/src/alphabets/rna.rs","byte_start":232517,"byte_end":232558,"line_start":72,"line_end":72,"column_start":1,"column_end":42}},{"value":"/","span":{"file_name":"/Users/shelwitz/.cargo/registry/src/github.com-1ecc6299db9ec823/bio-0.39.0/src/alphabets/rna.rs","byte_start":232559,"byte_end":232562,"line_start":73,"line_end":73,"column_start":1,"column_end":4}},{"value":"/ ```","span":{"file_name":"/Users/shelwitz/.cargo/registry/src/github.com-1ecc6299db9ec823/bio-0.39.0/src/alphabets/rna.rs","byte_start":232563,"byte_end":232570,"line_start":74,"line_end":74,"column_start":1,"column_end":8}},{"value":"/ use bio::alphabets::rna;","span":{"file_name":"/Users/shelwitz/.cargo/registry/src/github.com-1ecc6299db9ec823/bio-0.39.0/src/alphabets/rna.rs","byte_start":232571,"byte_end":232599,"line_start":75,"line_end":75,"column_start":1,"column_end":29}},{"value":"/","span":{"file_name":"/Users/shelwitz/.cargo/registry/src/github.com-1ecc6299db9ec823/bio-0.39.0/src/alphabets/rna.rs","byte_start":232600,"byte_end":232603,"line_start":76,"line_end":76,"column_start":1,"column_end":4}},{"value":"/ assert_eq!(rna::revcomp(b\"ACGUN\"), b\"NACGU\");","span":{"file_name":"/Users/shelwitz/.cargo/registry/src/github.com-1ecc6299db9ec823/bio-0.39.0/src/alphabets/rna.rs","byte_start":232604,"byte_end":232653,"line_start":77,"line_end":77,"column_start":1,"column_end":50}},{"value":"/ assert_eq!(rna::revcomp(b\"GaUuaCA\"), b\"UGuaAuC\");","span":{"file_name":"/Users/shelwitz/.cargo/registry/src/github.com-1ecc6299db9ec823/bio-0.39.0/src/alphabets/rna.rs","byte_start":232654,"byte_end":232707,"line_start":78,"line_end":78,"column_start":1,"column_end":54}},{"value":"/ assert_eq!(rna::revcomp(b\"AGCUYRWSKMDVHBNZ\"), b\"ZNVDBHKMSWYRAGCU\");","span":{"file_name":"/Users/shelwitz/.cargo/registry/src/github.com-1ecc6299db9ec823/bio-0.39.0/src/alphabets/rna.rs","byte_start":232708,"byte_end":232779,"line_start":79,"line_end":79,"column_start":1,"column_end":72}}]},{"kind":"Type","id":{"krate":0,"index":396},"span":{"file_name":"/Users/shelwitz/.cargo/registry/src/github.com-1ecc6299db9ec823/bio-0.39.0/src/alphabets/mod.rs","byte_start":213654,"byte_end":213665,"line_start":27,"line_end":27,"column_start":10,"column_end":21},"name":"SymbolRanks","qualname":"::alphabets::SymbolRanks","value":"VecMap<u8>","parent":null,"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Struct","id":{"krate":0,"index":3449},"span":{"file_name":"/Users/shelwitz/.cargo/registry/src/github.com-1ecc6299db9ec823/bio-0.39.0/src/alphabets/mod.rs","byte_start":213755,"byte_end":213763,"line_start":31,"line_end":31,"column_start":12,"column_end":20},"name":"Alphabet","qualname":"::alphabets::Alphabet","value":"Alphabet { symbols }","parent":null,"children":[{"krate":0,"index":3450}],"decl_id":null,"docs":" Representation of an alphabet.\n","sig":null,"attributes":[{"value":"/ Representation of an alphabet.","span":{"file_name":"/Users/shelwitz/.cargo/registry/src/github.com-1ecc6299db9ec823/bio-0.39.0/src/alphabets/mod.rs","byte_start":213681,"byte_end":213715,"line_start":29,"line_end":29,"column_start":1,"column_end":35}}]},{"kind":"Field","id":{"krate":0,"index":3450},"span":{"file_name":"/Users/shelwitz/.cargo/registry/src/github.com-1ecc6299db9ec823/bio-0.39.0/src/alphabets/mod.rs","byte_start":213774,"byte_end":213781,"line_start":32,"line_end":32,"column_start":9,"column_end":16},"name":"symbols","qualname":"::alphabets::Alphabet::symbols","value":"bit_set::BitSet","parent":{"krate":0,"index":3449},"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":398},"span":{"file_name":"/Users/shelwitz/.cargo/registry/src/github.com-1ecc6299db9ec823/bio-0.39.0/src/alphabets/mod.rs","byte_start":214333,"byte_end":214336,"line_start":50,"line_end":50,"column_start":12,"column_end":15},"name":"new","qualname":"<Alphabet>::new","value":"pub fn new<C, T>(T) -> Self where C: Borrow<u8>, T: IntoIterator<Item = C>","parent":null,"children":[],"decl_id":null,"docs":" Create new alphabet from given symbols.","sig":null,"attributes":[{"value":"/ Create new alphabet from given symbols.","span":{"file_name":"/Users/shelwitz/.cargo/registry/src/github.com-1ecc6299db9ec823/bio-0.39.0/src/alphabets/mod.rs","byte_start":213814,"byte_end":213857,"line_start":36,"line_end":36,"column_start":5,"column_end":48}},{"value":"/","span":{"file_name":"/Users/shelwitz/.cargo/registry/src/github.com-1ecc6299db9ec823/bio-0.39.0/src/alphabets/mod.rs","byte_start":213862,"byte_end":213865,"line_start":37,"line_end":37,"column_start":5,"column_end":8}},{"value":"/ Complexity: O(n), where n is the number of symbols in the alphabet.","span":{"file_name":"/Users/shelwitz/.cargo/registry/src/github.com-1ecc6299db9ec823/bio-0.39.0/src/alphabets/mod.rs","byte_start":213870,"byte_end":213941,"line_start":38,"line_end":38,"column_start":5,"column_end":76}},{"value":"/","span":{"file_name":"/Users/shelwitz/.cargo/registry/src/github.com-1ecc6299db9ec823/bio-0.39.0/src/alphabets/mod.rs","byte_start":213946,"byte_end":213949,"line_start":39,"line_end":39,"column_start":5,"column_end":8}},{"value":"/ # Example","span":{"file_name":"/Users/shelwitz/.cargo/registry/src/github.com-1ecc6299db9ec823/bio-0.39.0/src/alphabets/mod.rs","byte_start":213954,"byte_end":213967,"line_start":40,"line_end":40,"column_start":5,"column_end":18}},{"value":"/","span":{"file_name":"/Users/shelwitz/.cargo/registry/src/github.com-1ecc6299db9ec823/bio-0.39.0/src/alphabets/mod.rs","byte_start":213972,"byte_end":213975,"line_start":41,"line_end":41,"column_start":5,"column_end":8}},{"value":"/ ```","span":{"file_name":"/Users/shelwitz/.cargo/registry/src/github.com-1ecc6299db9ec823/bio-0.39.0/src/alphabets/mod.rs","byte_start":213980,"byte_end":213987,"line_start":42,"line_end":42,"column_start":5,"column_end":12}},{"value":"/ use bio::alphabets;","span":{"file_name":"/Users/shelwitz/.cargo/registry/src/github.com-1ecc6299db9ec823/bio-0.39.0/src/alphabets/mod.rs","byte_start":213992,"byte_end":214015,"line_start":43,"line_end":43,"column_start":5,"column_end":28}},{"value":"/","span":{"file_name":"/Users/shelwitz/.cargo/registry/src/github.com-1ecc6299db9ec823/bio-0.39.0/src/alphabets/mod.rs","byte_start":214020,"byte_end":214023,"line_start":44,"line_end":44,"column_start":5,"column_end":8}},{"value":"/ // Create an alphabet (note that a DNA alphabet is already available in bio::alphabets::dna).","span":{"file_name":"/Users/shelwitz/.cargo/registry/src/github.com-1ecc6299db9ec823/bio-0.39.0/src/alphabets/mod.rs","byte_start":214028,"byte_end":214125,"line_start":45,"line_end":45,"column_start":5,"column_end":102}},{"value":"/ let dna_alphabet = alphabets::Alphabet::new(b\"ACGTacgt\");","span":{"file_name":"/Users/shelwitz/.cargo/registry/src/github.com-1ecc6299db9ec823/bio-0.39.0/src/alphabets/mod.rs","byte_start":214130,"byte_end":214191,"line_start":46,"line_end":46,"column_start":5,"column_end":66}},{"value":"/ // Check whether a given text is a word over the alphabet.","span":{"file_name":"/Users/shelwitz/.cargo/registry/src/github.com-1ecc6299db9ec823/bio-0.39.0/src/alphabets/mod.rs","byte_start":214196,"byte_end":214258,"line_start":47,"line_end":47,"column_start":5,"column_end":67}},{"value":"/ assert!(dna_alphabet.is_word(b\"GAttACA\"));","span":{"file_name":"/Users/shelwitz/.cargo/registry/src/github.com-1ecc6299db9ec823/bio-0.39.0/src/alphabets/mod.rs","byte_start":214263,"byte_end":214309,"line_start":48,"line_end":48,"column_start":5,"column_end":51}},{"value":"/ ```","span":{"file_name":"/Users/shelwitz/.cargo/registry/src/github.com-1ecc6299db9ec823/bio-0.39.0/src/alphabets/mod.rs","byte_start":214314,"byte_end":214321,"line_start":49,"line_end":49,"column_start":5,"column_end":12}}]},{"kind":"Method","id":{"krate":0,"index":402},"span":{"file_name":"/Users/shelwitz/.cargo/registry/src/github.com-1ecc6299db9ec823/bio-0.39.0/src/alphabets/mod.rs","byte_start":214950,"byte_end":214956,"line_start":75,"line_end":75,"column_start":12,"column_end":18},"name":"insert","qualname":"<Alphabet>::insert","value":"pub fn insert(&mut Self, u8)","parent":null,"children":[],"decl_id":null,"docs":" Insert symbol into alphabet.","sig":null,"attributes":[{"value":"/ Insert symbol into alphabet.","span":{"file_name":"/Users/shelwitz/.cargo/registry/src/github.com-1ecc6299db9ec823/bio-0.39.0/src/alphabets/mod.rs","byte_start":214585,"byte_end":214617,"line_start":61,"line_end":61,"column_start":5,"column_end":37}},{"value":"/","span":{"file_name":"/Users/shelwitz/.cargo/registry/src/github.com-1ecc6299db9ec823/bio-0.39.0/src/alphabets/mod.rs","byte_start":214622,"byte_end":214625,"line_start":62,"line_end":62,"column_start":5,"column_end":8}},{"value":"/ Complexity: O(1)","span":{"file_name":"/Users/shelwitz/.cargo/registry/src/github.com-1ecc6299db9ec823/bio-0.39.0/src/alphabets/mod.rs","byte_start":214630,"byte_end":214650,"line_start":63,"line_end":63,"column_start":5,"column_end":25}},{"value":"/","span":{"file_name":"/Users/shelwitz/.cargo/registry/src/github.com-1ecc6299db9ec823/bio-0.39.0/src/alphabets/mod.rs","byte_start":214655,"byte_end":214658,"line_start":64,"line_end":64,"column_start":5,"column_end":8}},{"value":"/ # Example","span":{"file_name":"/Users/shelwitz/.cargo/registry/src/github.com-1ecc6299db9ec823/bio-0.39.0/src/alphabets/mod.rs","byte_start":214663,"byte_end":214676,"line_start":65,"line_end":65,"column_start":5,"column_end":18}},{"value":"/","span":{"file_name":"/Users/shelwitz/.cargo/registry/src/github.com-1ecc6299db9ec823/bio-0.39.0/src/alphabets/mod.rs","byte_start":214681,"byte_end":214684,"line_start":66,"line_end":66,"column_start":5,"column_end":8}},{"value":"/ ```","span":{"file_name":"/Users/shelwitz/.cargo/registry/src/github.com-1ecc6299db9ec823/bio-0.39.0/src/alphabets/mod.rs","byte_start":214689,"byte_end":214696,"line_start":67,"line_end":67,"column_start":5,"column_end":12}},{"value":"/ use bio::alphabets;","span":{"file_name":"/Users/shelwitz/.cargo/registry/src/github.com-1ecc6299db9ec823/bio-0.39.0/src/alphabets/mod.rs","byte_start":214701,"byte_end":214724,"line_start":68,"line_end":68,"column_start":5,"column_end":28}},{"value":"/","span":{"file_name":"/Users/shelwitz/.cargo/registry/src/github.com-1ecc6299db9ec823/bio-0.39.0/src/alphabets/mod.rs","byte_start":214729,"byte_end":214732,"line_start":69,"line_end":69,"column_start":5,"column_end":8}},{"value":"/ let mut dna_alphabet = alphabets::Alphabet::new(b\"ACGTacgt\");","span":{"file_name":"/Users/shelwitz/.cargo/registry/src/github.com-1ecc6299db9ec823/bio-0.39.0/src/alphabets/mod.rs","byte_start":214737,"byte_end":214802,"line_start":70,"line_end":70,"column_start":5,"column_end":70}},{"value":"/ assert!(!dna_alphabet.is_word(b\"N\"));","span":{"file_name":"/Users/shelwitz/.cargo/registry/src/github.com-1ecc6299db9ec823/bio-0.39.0/src/alphabets/mod.rs","byte_start":214807,"byte_end":214848,"line_start":71,"line_end":71,"column_start":5,"column_end":46}},{"value":"/ dna_alphabet.insert(78);","span":{"file_name":"/Users/shelwitz/.cargo/registry/src/github.com-1ecc6299db9ec823/bio-0.39.0/src/alphabets/mod.rs","byte_start":214853,"byte_end":214881,"line_start":72,"line_end":72,"column_start":5,"column_end":33}},{"value":"/ assert!(dna_alphabet.is_word(b\"N\"));","span":{"file_name":"/Users/shelwitz/.cargo/registry/src/github.com-1ecc6299db9ec823/bio-0.39.0/src/alphabets/mod.rs","byte_start":214886,"byte_end":214926,"line_start":73,"line_end":73,"column_start":5,"column_end":45}},{"value":"/ ```","span":{"file_name":"/Users/shelwitz/.cargo/registry/src/github.com-1ecc6299db9ec823/bio-0.39.0/src/alphabets/mod.rs","byte_start":214931,"byte_end":214938,"line_start":74,"line_end":74,"column_start":5,"column_end":12}}]},{"kind":"Method","id":{"krate":0,"index":403},"span":{"file_name":"/Users/shelwitz/.cargo/registry/src/github.com-1ecc6299db9ec823/bio-0.39.0/src/alphabets/mod.rs","byte_start":215420,"byte_end":215427,"line_start":92,"line_end":92,"column_start":12,"column_end":19},"name":"is_word","qualname":"<Alphabet>::is_word","value":"pub fn is_word<C, T>(&Self, T) -> bool where C: Borrow<u8>,\nT: IntoIterator<Item = C>","parent":null,"children":[],"decl_id":null,"docs":" Check if given text is a word over the alphabet.","sig":null,"attributes":[{"value":"/ Check if given text is a word over the alphabet.","span":{"file_name":"/Users/shelwitz/.cargo/registry/src/github.com-1ecc6299db9ec823/bio-0.39.0/src/alphabets/mod.rs","byte_start":215029,"byte_end":215081,"line_start":79,"line_end":79,"column_start":5,"column_end":57}},{"value":"/","span":{"file_name":"/Users/shelwitz/.cargo/registry/src/github.com-1ecc6299db9ec823/bio-0.39.0/src/alphabets/mod.rs","byte_start":215086,"byte_end":215089,"line_start":80,"line_end":80,"column_start":5,"column_end":8}},{"value":"/ Complexity: O(n), where n is the length of the text.","span":{"file_name":"/Users/shelwitz/.cargo/registry/src/github.com-1ecc6299db9ec823/bio-0.39.0/src/alphabets/mod.rs","byte_start":215094,"byte_end":215150,"line_start":81,"line_end":81,"column_start":5,"column_end":61}},{"value":"/","span":{"file_name":"/Users/shelwitz/.cargo/registry/src/github.com-1ecc6299db9ec823/bio-0.39.0/src/alphabets/mod.rs","byte_start":215155,"byte_end":215158,"line_start":82,"line_end":82,"column_start":5,"column_end":8}},{"value":"/ # Example","span":{"file_name":"/Users/shelwitz/.cargo/registry/src/github.com-1ecc6299db9ec823/bio-0.39.0/src/alphabets/mod.rs","byte_start":215163,"byte_end":215176,"line_start":83,"line_end":83,"column_start":5,"column_end":18}},{"value":"/","span":{"file_name":"/Users/shelwitz/.cargo/registry/src/github.com-1ecc6299db9ec823/bio-0.39.0/src/alphabets/mod.rs","byte_start":215181,"byte_end":215184,"line_start":84,"line_end":84,"column_start":5,"column_end":8}},{"value":"/ ```","span":{"file_name":"/Users/shelwitz/.cargo/registry/src/github.com-1ecc6299db9ec823/bio-0.39.0/src/alphabets/mod.rs","byte_start":215189,"byte_end":215196,"line_start":85,"line_end":85,"column_start":5,"column_end":12}},{"value":"/ use bio::alphabets;","span":{"file_name":"/Users/shelwitz/.cargo/registry/src/github.com-1ecc6299db9ec823/bio-0.39.0/src/alphabets/mod.rs","byte_start":215201,"byte_end":215224,"line_start":86,"line_end":86,"column_start":5,"column_end":28}},{"value":"/","span":{"file_name":"/Users/shelwitz/.cargo/registry/src/github.com-1ecc6299db9ec823/bio-0.39.0/src/alphabets/mod.rs","byte_start":215229,"byte_end":215232,"line_start":87,"line_end":87,"column_start":5,"column_end":8}},{"value":"/ let dna_alphabet = alphabets::Alphabet::new(b\"ACGTacgt\");","span":{"file_name":"/Users/shelwitz/.cargo/registry/src/github.com-1ecc6299db9ec823/bio-0.39.0/src/alphabets/mod.rs","byte_start":215237,"byte_end":215298,"line_start":88,"line_end":88,"column_start":5,"column_end":66}},{"value":"/ assert!(dna_alphabet.is_word(b\"GAttACA\"));","span":{"file_name":"/Users/shelwitz/.cargo/registry/src/github.com-1ecc6299db9ec823/bio-0.39.0/src/alphabets/mod.rs","byte_start":215303,"byte_end":215349,"line_start":89,"line_end":89,"column_start":5,"column_end":51}},{"value":"/ assert!(!dna_alphabet.is_word(b\"42\"));","span":{"file_name":"/Users/shelwitz/.cargo/registry/src/github.com-1ecc6299db9ec823/bio-0.39.0/src/alphabets/mod.rs","byte_start":215354,"byte_end":215396,"line_start":90,"line_end":90,"column_start":5,"column_end":47}},{"value":"/ ```","span":{"file_name":"/Users/shelwitz/.cargo/registry/src/github.com-1ecc6299db9ec823/bio-0.39.0/src/alphabets/mod.rs","byte_start":215401,"byte_end":215408,"line_start":91,"line_end":91,"column_start":5,"column_end":12}}]},{"kind":"Method","id":{"krate":0,"index":407},"span":{"file_name":"/Users/shelwitz/.cargo/registry/src/github.com-1ecc6299db9ec823/bio-0.39.0/src/alphabets/mod.rs","byte_start":216128,"byte_end":216138,"line_start":115,"line_end":115,"column_start":12,"column_end":22},"name":"max_symbol","qualname":"<Alphabet>::max_symbol","value":"pub fn max_symbol(&Self) -> Option<u8>","parent":null,"children":[],"decl_id":null,"docs":" Return lexicographically maximal symbol.","sig":null,"attributes":[{"value":"/ Return lexicographically maximal symbol.","span":{"file_name":"/Users/shelwitz/.cargo/registry/src/github.com-1ecc6299db9ec823/bio-0.39.0/src/alphabets/mod.rs","byte_start":215634,"byte_end":215678,"line_start":101,"line_end":101,"column_start":5,"column_end":49}},{"value":"/","span":{"file_name":"/Users/shelwitz/.cargo/registry/src/github.com-1ecc6299db9ec823/bio-0.39.0/src/alphabets/mod.rs","byte_start":215683,"byte_end":215686,"line_start":102,"line_end":102,"column_start":5,"column_end":8}},{"value":"/ Complexity: O(n), where n is the number of symbols in the alphabet.","span":{"file_name":"/Users/shelwitz/.cargo/registry/src/github.com-1ecc6299db9ec823/bio-0.39.0/src/alphabets/mod.rs","byte_start":215691,"byte_end":215762,"line_start":103,"line_end":103,"column_start":5,"column_end":76}},{"value":"/","span":{"file_name":"/Users/shelwitz/.cargo/registry/src/github.com-1ecc6299db9ec823/bio-0.39.0/src/alphabets/mod.rs","byte_start":215767,"byte_end":215770,"line_start":104,"line_end":104,"column_start":5,"column_end":8}},{"value":"/ # Example","span":{"file_name":"/Users/shelwitz/.cargo/registry/src/github.com-1ecc6299db9ec823/bio-0.39.0/src/alphabets/mod.rs","byte_start":215775,"byte_end":215788,"line_start":105,"line_end":105,"column_start":5,"column_end":18}},{"value":"/","span":{"file_name":"/Users/shelwitz/.cargo/registry/src/github.com-1ecc6299db9ec823/bio-0.39.0/src/alphabets/mod.rs","byte_start":215793,"byte_end":215796,"line_start":106,"line_end":106,"column_start":5,"column_end":8}},{"value":"/ ```","span":{"file_name":"/Users/shelwitz/.cargo/registry/src/github.com-1ecc6299db9ec823/bio-0.39.0/src/alphabets/mod.rs","byte_start":215801,"byte_end":215808,"line_start":107,"line_end":107,"column_start":5,"column_end":12}},{"value":"/ use bio::alphabets;","span":{"file_name":"/Users/shelwitz/.cargo/registry/src/github.com-1ecc6299db9ec823/bio-0.39.0/src/alphabets/mod.rs","byte_start":215813,"byte_end":215836,"line_start":108,"line_end":108,"column_start":5,"column_end":28}},{"value":"/","span":{"file_name":"/Users/shelwitz/.cargo/registry/src/github.com-1ecc6299db9ec823/bio-0.39.0/src/alphabets/mod.rs","byte_start":215841,"byte_end":215844,"line_start":109,"line_end":109,"column_start":5,"column_end":8}},{"value":"/ let dna_alphabet = alphabets::Alphabet::new(b\"acgtACGT\");","span":{"file_name":"/Users/shelwitz/.cargo/registry/src/github.com-1ecc6299db9ec823/bio-0.39.0/src/alphabets/mod.rs","byte_start":215849,"byte_end":215910,"line_start":110,"line_end":110,"column_start":5,"column_end":66}},{"value":"/ assert_eq!(dna_alphabet.max_symbol(), Some(116)); // max symbol is \"t\"","span":{"file_name":"/Users/shelwitz/.cargo/registry/src/github.com-1ecc6299db9ec823/bio-0.39.0/src/alphabets/mod.rs","byte_start":215915,"byte_end":215989,"line_start":111,"line_end":111,"column_start":5,"column_end":79}},{"value":"/ let empty_alphabet = alphabets::Alphabet::new(b\"\");","span":{"file_name":"/Users/shelwitz/.cargo/registry/src/github.com-1ecc6299db9ec823/bio-0.39.0/src/alphabets/mod.rs","byte_start":215994,"byte_end":216049,"line_start":112,"line_end":112,"column_start":5,"column_end":60}},{"value":"/ assert_eq!(empty_alphabet.max_symbol(), None);","span":{"file_name":"/Users/shelwitz/.cargo/registry/src/github.com-1ecc6299db9ec823/bio-0.39.0/src/alphabets/mod.rs","byte_start":216054,"byte_end":216104,"line_start":113,"line_end":113,"column_start":5,"column_end":55}},{"value":"/ ```","span":{"file_name":"/Users/shelwitz/.cargo/registry/src/github.com-1ecc6299db9ec823/bio-0.39.0/src/alphabets/mod.rs","byte_start":216109,"byte_end":216116,"line_start":114,"line_end":114,"column_start":5,"column_end":12}}]},{"kind":"Method","id":{"krate":0,"index":409},"span":{"file_name":"/Users/shelwitz/.cargo/registry/src/github.com-1ecc6299db9ec823/bio-0.39.0/src/alphabets/mod.rs","byte_start":216674,"byte_end":216677,"line_start":134,"line_end":134,"column_start":12,"column_end":15},"name":"len","qualname":"<Alphabet>::len","value":"pub fn len(&Self) -> usize","parent":null,"children":[],"decl_id":null,"docs":" Return size of the alphabet.","sig":null,"attributes":[{"value":"/ Return size of the alphabet.","span":{"file_name":"/Users/shelwitz/.cargo/registry/src/github.com-1ecc6299db9ec823/bio-0.39.0/src/alphabets/mod.rs","byte_start":216224,"byte_end":216256,"line_start":119,"line_end":119,"column_start":5,"column_end":37}},{"value":"/","span":{"file_name":"/Users/shelwitz/.cargo/registry/src/github.com-1ecc6299db9ec823/bio-0.39.0/src/alphabets/mod.rs","byte_start":216261,"byte_end":216264,"line_start":120,"line_end":120,"column_start":5,"column_end":8}},{"value":"/ Upper and lower case representations of the same character","span":{"file_name":"/Users/shelwitz/.cargo/registry/src/github.com-1ecc6299db9ec823/bio-0.39.0/src/alphabets/mod.rs","byte_start":216269,"byte_end":216331,"line_start":121,"line_end":121,"column_start":5,"column_end":67}},{"value":"/ are counted as distinct characters.","span":{"file_name":"/Users/shelwitz/.cargo/registry/src/github.com-1ecc6299db9ec823/bio-0.39.0/src/alphabets/mod.rs","byte_start":216336,"byte_end":216375,"line_start":122,"line_end":122,"column_start":5,"column_end":44}},{"value":"/","span":{"file_name":"/Users/shelwitz/.cargo/registry/src/github.com-1ecc6299db9ec823/bio-0.39.0/src/alphabets/mod.rs","byte_start":216380,"byte_end":216383,"line_start":123,"line_end":123,"column_start":5,"column_end":8}},{"value":"/ Complexity: O(n), where n is the number of symbols in the alphabet.","span":{"file_name":"/Users/shelwitz/.cargo/registry/src/github.com-1ecc6299db9ec823/bio-0.39.0/src/alphabets/mod.rs","byte_start":216388,"byte_end":216459,"line_start":124,"line_end":124,"column_start":5,"column_end":76}},{"value":"/","span":{"file_name":"/Users/shelwitz/.cargo/registry/src/github.com-1ecc6299db9ec823/bio-0.39.0/src/alphabets/mod.rs","byte_start":216464,"byte_end":216467,"line_start":125,"line_end":125,"column_start":5,"column_end":8}},{"value":"/ # Example","span":{"file_name":"/Users/shelwitz/.cargo/registry/src/github.com-1ecc6299db9ec823/bio-0.39.0/src/alphabets/mod.rs","byte_start":216472,"byte_end":216485,"line_start":126,"line_end":126,"column_start":5,"column_end":18}},{"value":"/","span":{"file_name":"/Users/shelwitz/.cargo/registry/src/github.com-1ecc6299db9ec823/bio-0.39.0/src/alphabets/mod.rs","byte_start":216490,"byte_end":216493,"line_start":127,"line_end":127,"column_start":5,"column_end":8}},{"value":"/ ```","span":{"file_name":"/Users/shelwitz/.cargo/registry/src/github.com-1ecc6299db9ec823/bio-0.39.0/src/alphabets/mod.rs","byte_start":216498,"byte_end":216505,"line_start":128,"line_end":128,"column_start":5,"column_end":12}},{"value":"/ use bio::alphabets;","span":{"file_name":"/Users/shelwitz/.cargo/registry/src/github.com-1ecc6299db9ec823/bio-0.39.0/src/alphabets/mod.rs","byte_start":216510,"byte_end":216533,"line_start":129,"line_end":129,"column_start":5,"column_end":28}},{"value":"/","span":{"file_name":"/Users/shelwitz/.cargo/registry/src/github.com-1ecc6299db9ec823/bio-0.39.0/src/alphabets/mod.rs","byte_start":216538,"byte_end":216541,"line_start":130,"line_end":130,"column_start":5,"column_end":8}},{"value":"/ let dna_alphabet = alphabets::Alphabet::new(b\"acgtACGT\");","span":{"file_name":"/Users/shelwitz/.cargo/registry/src/github.com-1ecc6299db9ec823/bio-0.39.0/src/alphabets/mod.rs","byte_start":216546,"byte_end":216607,"line_start":131,"line_end":131,"column_start":5,"column_end":66}},{"value":"/ assert_eq!(dna_alphabet.len(), 8);","span":{"file_name":"/Users/shelwitz/.cargo/registry/src/github.com-1ecc6299db9ec823/bio-0.39.0/src/alphabets/mod.rs","byte_start":216612,"byte_end":216650,"line_start":132,"line_end":132,"column_start":5,"column_end":43}},{"value":"/ ```","span":{"file_name":"/Users/shelwitz/.cargo/registry/src/github.com-1ecc6299db9ec823/bio-0.39.0/src/alphabets/mod.rs","byte_start":216655,"byte_end":216662,"line_start":133,"line_end":133,"column_start":5,"column_end":12}}]},{"kind":"Method","id":{"krate":0,"index":410},"span":{"file_name":"/Users/shelwitz/.cargo/registry/src/github.com-1ecc6299db9ec823/bio-0.39.0/src/alphabets/mod.rs","byte_start":217164,"byte_end":217172,"line_start":152,"line_end":152,"column_start":12,"column_end":20},"name":"is_empty","qualname":"<Alphabet>::is_empty","value":"pub fn is_empty(&Self) -> bool","parent":null,"children":[],"decl_id":null,"docs":" Is this alphabet empty?","sig":null,"attributes":[{"value":"/ Is this alphabet empty?","span":{"file_name":"/Users/shelwitz/.cargo/registry/src/github.com-1ecc6299db9ec823/bio-0.39.0/src/alphabets/mod.rs","byte_start":216734,"byte_end":216761,"line_start":138,"line_end":138,"column_start":5,"column_end":32}},{"value":"/","span":{"file_name":"/Users/shelwitz/.cargo/registry/src/github.com-1ecc6299db9ec823/bio-0.39.0/src/alphabets/mod.rs","byte_start":216766,"byte_end":216769,"line_start":139,"line_end":139,"column_start":5,"column_end":8}},{"value":"/ Complexity: O(n), where n is the number of symbols in the alphabet.","span":{"file_name":"/Users/shelwitz/.cargo/registry/src/github.com-1ecc6299db9ec823/bio-0.39.0/src/alphabets/mod.rs","byte_start":216774,"byte_end":216845,"line_start":140,"line_end":140,"column_start":5,"column_end":76}},{"value":"/","span":{"file_name":"/Users/shelwitz/.cargo/registry/src/github.com-1ecc6299db9ec823/bio-0.39.0/src/alphabets/mod.rs","byte_start":216850,"byte_end":216853,"line_start":141,"line_end":141,"column_start":5,"column_end":8}},{"value":"/ # Example","span":{"file_name":"/Users/shelwitz/.cargo/registry/src/github.com-1ecc6299db9ec823/bio-0.39.0/src/alphabets/mod.rs","byte_start":216858,"byte_end":216871,"line_start":142,"line_end":142,"column_start":5,"column_end":18}},{"value":"/","span":{"file_name":"/Users/shelwitz/.cargo/registry/src/github.com-1ecc6299db9ec823/bio-0.39.0/src/alphabets/mod.rs","byte_start":216876,"byte_end":216879,"line_start":143,"line_end":143,"column_start":5,"column_end":8}},{"value":"/ ```","span":{"file_name":"/Users/shelwitz/.cargo/registry/src/github.com-1ecc6299db9ec823/bio-0.39.0/src/alphabets/mod.rs","byte_start":216884,"byte_end":216891,"line_start":144,"line_end":144,"column_start":5,"column_end":12}},{"value":"/ use bio::alphabets;","span":{"file_name":"/Users/shelwitz/.cargo/registry/src/github.com-1ecc6299db9ec823/bio-0.39.0/src/alphabets/mod.rs","byte_start":216896,"byte_end":216919,"line_start":145,"line_end":145,"column_start":5,"column_end":28}},{"value":"/","span":{"file_name":"/Users/shelwitz/.cargo/registry/src/github.com-1ecc6299db9ec823/bio-0.39.0/src/alphabets/mod.rs","byte_start":216924,"byte_end":216927,"line_start":146,"line_end":146,"column_start":5,"column_end":8}},{"value":"/ let dna_alphabet = alphabets::Alphabet::new(b\"acgtACGT\");","span":{"file_name":"/Users/shelwitz/.cargo/registry/src/github.com-1ecc6299db9ec823/bio-0.39.0/src/alphabets/mod.rs","byte_start":216932,"byte_end":216993,"line_start":147,"line_end":147,"column_start":5,"column_end":66}},{"value":"/ assert!(!dna_alphabet.is_empty());","span":{"file_name":"/Users/shelwitz/.cargo/registry/src/github.com-1ecc6299db9ec823/bio-0.39.0/src/alphabets/mod.rs","byte_start":216998,"byte_end":217036,"line_start":148,"line_end":148,"column_start":5,"column_end":43}},{"value":"/ let empty_alphabet = alphabets::Alphabet::new(b\"\");","span":{"file_name":"/Users/shelwitz/.cargo/registry/src/github.com-1ecc6299db9ec823/bio-0.39.0/src/alphabets/mod.rs","byte_start":217041,"byte_end":217096,"line_start":149,"line_end":149,"column_start":5,"column_end":60}},{"value":"/ assert!(empty_alphabet.is_empty());","span":{"file_name":"/Users/shelwitz/.cargo/registry/src/github.com-1ecc6299db9ec823/bio-0.39.0/src/alphabets/mod.rs","byte_start":217101,"byte_end":217140,"line_start":150,"line_end":150,"column_start":5,"column_end":44}},{"value":"/ ```","span":{"file_name":"/Users/shelwitz/.cargo/registry/src/github.com-1ecc6299db9ec823/bio-0.39.0/src/alphabets/mod.rs","byte_start":217145,"byte_end":217152,"line_start":151,"line_end":151,"column_start":5,"column_end":12}}]},{"kind":"Method","id":{"krate":0,"index":411},"span":{"file_name":"/Users/shelwitz/.cargo/registry/src/github.com-1ecc6299db9ec823/bio-0.39.0/src/alphabets/mod.rs","byte_start":217664,"byte_end":217676,"line_start":168,"line_end":168,"column_start":12,"column_end":24},"name":"intersection","qualname":"<Alphabet>::intersection","value":"pub fn intersection(&Self, &Alphabet) -> Self","parent":null,"children":[],"decl_id":null,"docs":" Return a new alphabet taking the intersect between this and other.","sig":null,"attributes":[{"value":"/ Return a new alphabet taking the intersect between this and other.","span":{"file_name":"/Users/shelwitz/.cargo/registry/src/github.com-1ecc6299db9ec823/bio-0.39.0/src/alphabets/mod.rs","byte_start":217233,"byte_end":217303,"line_start":156,"line_end":156,"column_start":5,"column_end":75}},{"value":"/","span":{"file_name":"/Users/shelwitz/.cargo/registry/src/github.com-1ecc6299db9ec823/bio-0.39.0/src/alphabets/mod.rs","byte_start":217308,"byte_end":217311,"line_start":157,"line_end":157,"column_start":5,"column_end":8}},{"value":"/ # Example","span":{"file_name":"/Users/shelwitz/.cargo/registry/src/github.com-1ecc6299db9ec823/bio-0.39.0/src/alphabets/mod.rs","byte_start":217316,"byte_end":217329,"line_start":158,"line_end":158,"column_start":5,"column_end":18}},{"value":"/ ```","span":{"file_name":"/Users/shelwitz/.cargo/registry/src/github.com-1ecc6299db9ec823/bio-0.39.0/src/alphabets/mod.rs","byte_start":217334,"byte_end":217341,"line_start":159,"line_end":159,"column_start":5,"column_end":12}},{"value":"/ use bio::alphabets;","span":{"file_name":"/Users/shelwitz/.cargo/registry/src/github.com-1ecc6299db9ec823/bio-0.39.0/src/alphabets/mod.rs","byte_start":217346,"byte_end":217369,"line_start":160,"line_end":160,"column_start":5,"column_end":28}},{"value":"/","span":{"file_name":"/Users/shelwitz/.cargo/registry/src/github.com-1ecc6299db9ec823/bio-0.39.0/src/alphabets/mod.rs","byte_start":217374,"byte_end":217377,"line_start":161,"line_end":161,"column_start":5,"column_end":8}},{"value":"/ let alpha_a = alphabets::Alphabet::new(b\"acgtACGT\");","span":{"file_name":"/Users/shelwitz/.cargo/registry/src/github.com-1ecc6299db9ec823/bio-0.39.0/src/alphabets/mod.rs","byte_start":217382,"byte_end":217438,"line_start":162,"line_end":162,"column_start":5,"column_end":61}},{"value":"/ let alpha_b = alphabets::Alphabet::new(b\"atcgMVP\");","span":{"file_name":"/Users/shelwitz/.cargo/registry/src/github.com-1ecc6299db9ec823/bio-0.39.0/src/alphabets/mod.rs","byte_start":217443,"byte_end":217498,"line_start":163,"line_end":163,"column_start":5,"column_end":60}},{"value":"/ let intersect_alpha = alpha_a.intersection(&alpha_b);","span":{"file_name":"/Users/shelwitz/.cargo/registry/src/github.com-1ecc6299db9ec823/bio-0.39.0/src/alphabets/mod.rs","byte_start":217503,"byte_end":217560,"line_start":164,"line_end":164,"column_start":5,"column_end":62}},{"value":"/","span":{"file_name":"/Users/shelwitz/.cargo/registry/src/github.com-1ecc6299db9ec823/bio-0.39.0/src/alphabets/mod.rs","byte_start":217565,"byte_end":217568,"line_start":165,"line_end":165,"column_start":5,"column_end":8}},{"value":"/ assert_eq!(intersect_alpha, alphabets::Alphabet::new(b\"atcg\"));","span":{"file_name":"/Users/shelwitz/.cargo/registry/src/github.com-1ecc6299db9ec823/bio-0.39.0/src/alphabets/mod.rs","byte_start":217573,"byte_end":217640,"line_start":166,"line_end":166,"column_start":5,"column_end":72}},{"value":"/ ```","span":{"file_name":"/Users/shelwitz/.cargo/registry/src/github.com-1ecc6299db9ec823/bio-0.39.0/src/alphabets/mod.rs","byte_start":217645,"byte_end":217652,"line_start":167,"line_end":167,"column_start":5,"column_end":12}}]},{"kind":"Method","id":{"krate":0,"index":412},"span":{"file_name":"/Users/shelwitz/.cargo/registry/src/github.com-1ecc6299db9ec823/bio-0.39.0/src/alphabets/mod.rs","byte_start":218281,"byte_end":218291,"line_start":186,"line_end":186,"column_start":12,"column_end":22},"name":"difference","qualname":"<Alphabet>::difference","value":"pub fn difference(&Self, &Alphabet) -> Self","parent":null,"children":[],"decl_id":null,"docs":" Return a new alphabet taking the difference between this and other.","sig":null,"attributes":[{"value":"/ Return a new alphabet taking the difference between this and other.","span":{"file_name":"/Users/shelwitz/.cargo/registry/src/github.com-1ecc6299db9ec823/bio-0.39.0/src/alphabets/mod.rs","byte_start":217834,"byte_end":217905,"line_start":174,"line_end":174,"column_start":5,"column_end":76}},{"value":"/","span":{"file_name":"/Users/shelwitz/.cargo/registry/src/github.com-1ecc6299db9ec823/bio-0.39.0/src/alphabets/mod.rs","byte_start":217910,"byte_end":217913,"line_start":175,"line_end":175,"column_start":5,"column_end":8}},{"value":"/ # Example","span":{"file_name":"/Users/shelwitz/.cargo/registry/src/github.com-1ecc6299db9ec823/bio-0.39.0/src/alphabets/mod.rs","byte_start":217918,"byte_end":217931,"line_start":176,"line_end":176,"column_start":5,"column_end":18}},{"value":"/ ```","span":{"file_name":"/Users/shelwitz/.cargo/registry/src/github.com-1ecc6299db9ec823/bio-0.39.0/src/alphabets/mod.rs","byte_start":217936,"byte_end":217943,"line_start":177,"line_end":177,"column_start":5,"column_end":12}},{"value":"/ use bio::alphabets;","span":{"file_name":"/Users/shelwitz/.cargo/registry/src/github.com-1ecc6299db9ec823/bio-0.39.0/src/alphabets/mod.rs","byte_start":217948,"byte_end":217971,"line_start":178,"line_end":178,"column_start":5,"column_end":28}},{"value":"/","span":{"file_name":"/Users/shelwitz/.cargo/registry/src/github.com-1ecc6299db9ec823/bio-0.39.0/src/alphabets/mod.rs","byte_start":217976,"byte_end":217979,"line_start":179,"line_end":179,"column_start":5,"column_end":8}},{"value":"/ let dna_alphabet = alphabets::Alphabet::new(b\"acgtACGT\");","span":{"file_name":"/Users/shelwitz/.cargo/registry/src/github.com-1ecc6299db9ec823/bio-0.39.0/src/alphabets/mod.rs","byte_start":217984,"byte_end":218045,"line_start":180,"line_end":180,"column_start":5,"column_end":66}},{"value":"/ let dna_alphabet_upper = alphabets::Alphabet::new(b\"ACGT\");","span":{"file_name":"/Users/shelwitz/.cargo/registry/src/github.com-1ecc6299db9ec823/bio-0.39.0/src/alphabets/mod.rs","byte_start":218050,"byte_end":218113,"line_start":181,"line_end":181,"column_start":5,"column_end":68}},{"value":"/ let dna_lower = dna_alphabet.difference(&dna_alphabet_upper);","span":{"file_name":"/Users/shelwitz/.cargo/registry/src/github.com-1ecc6299db9ec823/bio-0.39.0/src/alphabets/mod.rs","byte_start":218118,"byte_end":218183,"line_start":182,"line_end":182,"column_start":5,"column_end":70}},{"value":"/","span":{"file_name":"/Users/shelwitz/.cargo/registry/src/github.com-1ecc6299db9ec823/bio-0.39.0/src/alphabets/mod.rs","byte_start":218188,"byte_end":218191,"line_start":183,"line_end":183,"column_start":5,"column_end":8}},{"value":"/ assert_eq!(dna_lower, alphabets::Alphabet::new(b\"atcg\"));","span":{"file_name":"/Users/shelwitz/.cargo/registry/src/github.com-1ecc6299db9ec823/bio-0.39.0/src/alphabets/mod.rs","byte_start":218196,"byte_end":218257,"line_start":184,"line_end":184,"column_start":5,"column_end":66}},{"value":"/ ```","span":{"file_name":"/Users/shelwitz/.cargo/registry/src/github.com-1ecc6299db9ec823/bio-0.39.0/src/alphabets/mod.rs","byte_start":218262,"byte_end":218269,"line_start":185,"line_end":185,"column_start":5,"column_end":12}}]},{"kind":"Method","id":{"krate":0,"index":413},"span":{"file_name":"/Users/shelwitz/.cargo/registry/src/github.com-1ecc6299db9ec823/bio-0.39.0/src/alphabets/mod.rs","byte_start":218864,"byte_end":218869,"line_start":204,"line_end":204,"column_start":12,"column_end":17},"name":"union","qualname":"<Alphabet>::union","value":"pub fn union(&Self, &Alphabet) -> Self","parent":null,"children":[],"decl_id":null,"docs":" Return a new alphabet taking the union between this and other.","sig":null,"attributes":[{"value":"/ Return a new alphabet taking the union between this and other.","span":{"file_name":"/Users/shelwitz/.cargo/registry/src/github.com-1ecc6299db9ec823/bio-0.39.0/src/alphabets/mod.rs","byte_start":218447,"byte_end":218513,"line_start":192,"line_end":192,"column_start":5,"column_end":71}},{"value":"/","span":{"file_name":"/Users/shelwitz/.cargo/registry/src/github.com-1ecc6299db9ec823/bio-0.39.0/src/alphabets/mod.rs","byte_start":218518,"byte_end":218521,"line_start":193,"line_end":193,"column_start":5,"column_end":8}},{"value":"/ # Example","span":{"file_name":"/Users/shelwitz/.cargo/registry/src/github.com-1ecc6299db9ec823/bio-0.39.0/src/alphabets/mod.rs","byte_start":218526,"byte_end":218539,"line_start":194,"line_end":194,"column_start":5,"column_end":18}},{"value":"/ ```","span":{"file_name":"/Users/shelwitz/.cargo/registry/src/github.com-1ecc6299db9ec823/bio-0.39.0/src/alphabets/mod.rs","byte_start":218544,"byte_end":218551,"line_start":195,"line_end":195,"column_start":5,"column_end":12}},{"value":"/ use bio::alphabets;","span":{"file_name":"/Users/shelwitz/.cargo/registry/src/github.com-1ecc6299db9ec823/bio-0.39.0/src/alphabets/mod.rs","byte_start":218556,"byte_end":218579,"line_start":196,"line_end":196,"column_start":5,"column_end":28}},{"value":"/","span":{"file_name":"/Users/shelwitz/.cargo/registry/src/github.com-1ecc6299db9ec823/bio-0.39.0/src/alphabets/mod.rs","byte_start":218584,"byte_end":218587,"line_start":197,"line_end":197,"column_start":5,"column_end":8}},{"value":"/ let dna_alphabet = alphabets::Alphabet::new(b\"ATCG\");","span":{"file_name":"/Users/shelwitz/.cargo/registry/src/github.com-1ecc6299db9ec823/bio-0.39.0/src/alphabets/mod.rs","byte_start":218592,"byte_end":218649,"line_start":198,"line_end":198,"column_start":5,"column_end":62}},{"value":"/ let tokenize_alpha = alphabets::Alphabet::new(b\"?|\");","span":{"file_name":"/Users/shelwitz/.cargo/registry/src/github.com-1ecc6299db9ec823/bio-0.39.0/src/alphabets/mod.rs","byte_start":218654,"byte_end":218711,"line_start":199,"line_end":199,"column_start":5,"column_end":62}},{"value":"/ let alpha = dna_alphabet.union(&tokenize_alpha);","span":{"file_name":"/Users/shelwitz/.cargo/registry/src/github.com-1ecc6299db9ec823/bio-0.39.0/src/alphabets/mod.rs","byte_start":218716,"byte_end":218768,"line_start":200,"line_end":200,"column_start":5,"column_end":57}},{"value":"/","span":{"file_name":"/Users/shelwitz/.cargo/registry/src/github.com-1ecc6299db9ec823/bio-0.39.0/src/alphabets/mod.rs","byte_start":218773,"byte_end":218776,"line_start":201,"line_end":201,"column_start":5,"column_end":8}},{"value":"/ assert_eq!(alpha, alphabets::Alphabet::new(b\"ATCG?|\"));","span":{"file_name":"/Users/shelwitz/.cargo/registry/src/github.com-1ecc6299db9ec823/bio-0.39.0/src/alphabets/mod.rs","byte_start":218781,"byte_end":218840,"line_start":202,"line_end":202,"column_start":5,"column_end":64}},{"value":"/ ```","span":{"file_name":"/Users/shelwitz/.cargo/registry/src/github.com-1ecc6299db9ec823/bio-0.39.0/src/alphabets/mod.rs","byte_start":218845,"byte_end":218852,"line_start":203,"line_end":203,"column_start":5,"column_end":12}}]},{"kind":"Struct","id":{"krate":0,"index":3457},"span":{"file_name":"/Users/shelwitz/.cargo/registry/src/github.com-1ecc6299db9ec823/bio-0.39.0/src/alphabets/mod.rs","byte_start":219560,"byte_end":219573,"line_start":221,"line_end":221,"column_start":12,"column_end":25},"name":"RankTransform","qualname":"::alphabets::RankTransform","value":"RankTransform { ranks }","parent":null,"children":[{"krate":0,"index":3458}],"decl_id":null,"docs":" Tools based on transforming the alphabet symbols to their lexicographical ranks.","sig":null,"attributes":[{"value":"/ Tools based on transforming the alphabet symbols to their lexicographical ranks.","span":{"file_name":"/Users/shelwitz/.cargo/registry/src/github.com-1ecc6299db9ec823/bio-0.39.0/src/alphabets/mod.rs","byte_start":219018,"byte_end":219102,"line_start":211,"line_end":211,"column_start":1,"column_end":85}},{"value":"/","span":{"file_name":"/Users/shelwitz/.cargo/registry/src/github.com-1ecc6299db9ec823/bio-0.39.0/src/alphabets/mod.rs","byte_start":219103,"byte_end":219106,"line_start":212,"line_end":212,"column_start":1,"column_end":4}},{"value":"/ Lexicographical rank is computed using `u8` representations,","span":{"file_name":"/Users/shelwitz/.cargo/registry/src/github.com-1ecc6299db9ec823/bio-0.39.0/src/alphabets/mod.rs","byte_start":219107,"byte_end":219171,"line_start":213,"line_end":213,"column_start":1,"column_end":65}},{"value":"/ i.e. ASCII codes, of the input characters.","span":{"file_name":"/Users/shelwitz/.cargo/registry/src/github.com-1ecc6299db9ec823/bio-0.39.0/src/alphabets/mod.rs","byte_start":219172,"byte_end":219218,"line_start":214,"line_end":214,"column_start":1,"column_end":47}},{"value":"/ For example, assuming that the alphabet consists of the symbols `A`, `C`, `G`, and `T`, this","span":{"file_name":"/Users/shelwitz/.cargo/registry/src/github.com-1ecc6299db9ec823/bio-0.39.0/src/alphabets/mod.rs","byte_start":219219,"byte_end":219315,"line_start":215,"line_end":215,"column_start":1,"column_end":97}},{"value":"/ will yield ranks `0`, `1`, `2`, `3` for them, respectively.","span":{"file_name":"/Users/shelwitz/.cargo/registry/src/github.com-1ecc6299db9ec823/bio-0.39.0/src/alphabets/mod.rs","byte_start":219316,"byte_end":219379,"line_start":216,"line_end":216,"column_start":1,"column_end":64}},{"value":"/","span":{"file_name":"/Users/shelwitz/.cargo/registry/src/github.com-1ecc6299db9ec823/bio-0.39.0/src/alphabets/mod.rs","byte_start":219380,"byte_end":219383,"line_start":217,"line_end":217,"column_start":1,"column_end":4}},{"value":"/ `RankTransform` can be used in to perform bit encoding for texts over a","span":{"file_name":"/Users/shelwitz/.cargo/registry/src/github.com-1ecc6299db9ec823/bio-0.39.0/src/alphabets/mod.rs","byte_start":219384,"byte_end":219459,"line_start":218,"line_end":218,"column_start":1,"column_end":76}},{"value":"/ given alphabet via `bio::data_structures::bitenc`.","span":{"file_name":"/Users/shelwitz/.cargo/registry/src/github.com-1ecc6299db9ec823/bio-0.39.0/src/alphabets/mod.rs","byte_start":219460,"byte_end":219514,"line_start":219,"line_end":219,"column_start":1,"column_end":55}}]},{"kind":"Field","id":{"krate":0,"index":3458},"span":{"file_name":"/Users/shelwitz/.cargo/registry/src/github.com-1ecc6299db9ec823/bio-0.39.0/src/alphabets/mod.rs","byte_start":219584,"byte_end":219589,"line_start":222,"line_end":222,"column_start":9,"column_end":14},"name":"ranks","qualname":"::alphabets::RankTransform::ranks","value":"vec_map::VecMap<u8>","parent":{"krate":0,"index":3457},"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":415},"span":{"file_name":"/Users/shelwitz/.cargo/registry/src/github.com-1ecc6299db9ec823/bio-0.39.0/src/alphabets/mod.rs","byte_start":219994,"byte_end":219997,"line_start":238,"line_end":238,"column_start":12,"column_end":15},"name":"new","qualname":"<RankTransform>::new","value":"pub fn new(&Alphabet) -> Self","parent":null,"children":[],"decl_id":null,"docs":" Construct a new `RankTransform`.","sig":null,"attributes":[{"value":"/ Construct a new `RankTransform`.","span":{"file_name":"/Users/shelwitz/.cargo/registry/src/github.com-1ecc6299db9ec823/bio-0.39.0/src/alphabets/mod.rs","byte_start":219632,"byte_end":219668,"line_start":226,"line_end":226,"column_start":5,"column_end":41}},{"value":"/","span":{"file_name":"/Users/shelwitz/.cargo/registry/src/github.com-1ecc6299db9ec823/bio-0.39.0/src/alphabets/mod.rs","byte_start":219673,"byte_end":219676,"line_start":227,"line_end":227,"column_start":5,"column_end":8}},{"value":"/ Complexity: O(n), where n is the number of symbols in the alphabet.","span":{"file_name":"/Users/shelwitz/.cargo/registry/src/github.com-1ecc6299db9ec823/bio-0.39.0/src/alphabets/mod.rs","byte_start":219681,"byte_end":219752,"line_start":228,"line_end":228,"column_start":5,"column_end":76}},{"value":"/","span":{"file_name":"/Users/shelwitz/.cargo/registry/src/github.com-1ecc6299db9ec823/bio-0.39.0/src/alphabets/mod.rs","byte_start":219757,"byte_end":219760,"line_start":229,"line_end":229,"column_start":5,"column_end":8}},{"value":"/ # Example","span":{"file_name":"/Users/shelwitz/.cargo/registry/src/github.com-1ecc6299db9ec823/bio-0.39.0/src/alphabets/mod.rs","byte_start":219765,"byte_end":219778,"line_start":230,"line_end":230,"column_start":5,"column_end":18}},{"value":"/","span":{"file_name":"/Users/shelwitz/.cargo/registry/src/github.com-1ecc6299db9ec823/bio-0.39.0/src/alphabets/mod.rs","byte_start":219783,"byte_end":219786,"line_start":231,"line_end":231,"column_start":5,"column_end":8}},{"value":"/ ```","span":{"file_name":"/Users/shelwitz/.cargo/registry/src/github.com-1ecc6299db9ec823/bio-0.39.0/src/alphabets/mod.rs","byte_start":219791,"byte_end":219798,"line_start":232,"line_end":232,"column_start":5,"column_end":12}},{"value":"/ use bio::alphabets;","span":{"file_name":"/Users/shelwitz/.cargo/registry/src/github.com-1ecc6299db9ec823/bio-0.39.0/src/alphabets/mod.rs","byte_start":219803,"byte_end":219826,"line_start":233,"line_end":233,"column_start":5,"column_end":28}},{"value":"/","span":{"file_name":"/Users/shelwitz/.cargo/registry/src/github.com-1ecc6299db9ec823/bio-0.39.0/src/alphabets/mod.rs","byte_start":219831,"byte_end":219834,"line_start":234,"line_end":234,"column_start":5,"column_end":8}},{"value":"/ let dna_alphabet = alphabets::Alphabet::new(b\"acgtACGT\");","span":{"file_name":"/Users/shelwitz/.cargo/registry/src/github.com-1ecc6299db9ec823/bio-0.39.0/src/alphabets/mod.rs","byte_start":219839,"byte_end":219900,"line_start":235,"line_end":235,"column_start":5,"column_end":66}},{"value":"/ let dna_ranks = alphabets::RankTransform::new(&dna_alphabet);","span":{"file_name":"/Users/shelwitz/.cargo/registry/src/github.com-1ecc6299db9ec823/bio-0.39.0/src/alphabets/mod.rs","byte_start":219905,"byte_end":219970,"line_start":236,"line_end":236,"column_start":5,"column_end":70}},{"value":"/ ```","span":{"file_name":"/Users/shelwitz/.cargo/registry/src/github.com-1ecc6299db9ec823/bio-0.39.0/src/alphabets/mod.rs","byte_start":219975,"byte_end":219982,"line_start":237,"line_end":237,"column_start":5,"column_end":12}}]},{"kind":"Method","id":{"krate":0,"index":416},"span":{"file_name":"/Users/shelwitz/.cargo/registry/src/github.com-1ecc6299db9ec823/bio-0.39.0/src/alphabets/mod.rs","byte_start":220706,"byte_end":220709,"line_start":263,"line_end":263,"column_start":12,"column_end":15},"name":"get","qualname":"<RankTransform>::get","value":"pub fn get(&Self, u8) -> u8","parent":null,"children":[],"decl_id":null,"docs":" Get the rank of symbol `a`.","sig":null,"attributes":[{"value":"/ Get the rank of symbol `a`.","span":{"file_name":"/Users/shelwitz/.cargo/registry/src/github.com-1ecc6299db9ec823/bio-0.39.0/src/alphabets/mod.rs","byte_start":220220,"byte_end":220251,"line_start":247,"line_end":247,"column_start":5,"column_end":36}},{"value":"/","span":{"file_name":"/Users/shelwitz/.cargo/registry/src/github.com-1ecc6299db9ec823/bio-0.39.0/src/alphabets/mod.rs","byte_start":220256,"byte_end":220259,"line_start":248,"line_end":248,"column_start":5,"column_end":8}},{"value":"/ This method panics for characters not contained in the alphabet.","span":{"file_name":"/Users/shelwitz/.cargo/registry/src/github.com-1ecc6299db9ec823/bio-0.39.0/src/alphabets/mod.rs","byte_start":220264,"byte_end":220332,"line_start":249,"line_end":249,"column_start":5,"column_end":73}},{"value":"/","span":{"file_name":"/Users/shelwitz/.cargo/registry/src/github.com-1ecc6299db9ec823/bio-0.39.0/src/alphabets/mod.rs","byte_start":220337,"byte_end":220340,"line_start":250,"line_end":250,"column_start":5,"column_end":8}},{"value":"/ Complexity: O(1)","span":{"file_name":"/Users/shelwitz/.cargo/registry/src/github.com-1ecc6299db9ec823/bio-0.39.0/src/alphabets/mod.rs","byte_start":220345,"byte_end":220365,"line_start":251,"line_end":251,"column_start":5,"column_end":25}},{"value":"/","span":{"file_name":"/Users/shelwitz/.cargo/registry/src/github.com-1ecc6299db9ec823/bio-0.39.0/src/alphabets/mod.rs","byte_start":220370,"byte_end":220373,"line_start":252,"line_end":252,"column_start":5,"column_end":8}},{"value":"/ # Example","span":{"file_name":"/Users/shelwitz/.cargo/registry/src/github.com-1ecc6299db9ec823/bio-0.39.0/src/alphabets/mod.rs","byte_start":220378,"byte_end":220391,"line_start":253,"line_end":253,"column_start":5,"column_end":18}},{"value":"/","span":{"file_name":"/Users/shelwitz/.cargo/registry/src/github.com-1ecc6299db9ec823/bio-0.39.0/src/alphabets/mod.rs","byte_start":220396,"byte_end":220399,"line_start":254,"line_end":254,"column_start":5,"column_end":8}},{"value":"/ ```","span":{"file_name":"/Users/shelwitz/.cargo/registry/src/github.com-1ecc6299db9ec823/bio-0.39.0/src/alphabets/mod.rs","byte_start":220404,"byte_end":220411,"line_start":255,"line_end":255,"column_start":5,"column_end":12}},{"value":"/ use bio::alphabets;","span":{"file_name":"/Users/shelwitz/.cargo/registry/src/github.com-1ecc6299db9ec823/bio-0.39.0/src/alphabets/mod.rs","byte_start":220416,"byte_end":220439,"line_start":256,"line_end":256,"column_start":5,"column_end":28}},{"value":"/","span":{"file_name":"/Users/shelwitz/.cargo/registry/src/github.com-1ecc6299db9ec823/bio-0.39.0/src/alphabets/mod.rs","byte_start":220444,"byte_end":220447,"line_start":257,"line_end":257,"column_start":5,"column_end":8}},{"value":"/ let dna_alphabet = alphabets::Alphabet::new(b\"acgtACGT\");","span":{"file_name":"/Users/shelwitz/.cargo/registry/src/github.com-1ecc6299db9ec823/bio-0.39.0/src/alphabets/mod.rs","byte_start":220452,"byte_end":220513,"line_start":258,"line_end":258,"column_start":5,"column_end":66}},{"value":"/ let dna_ranks = alphabets::RankTransform::new(&dna_alphabet);","span":{"file_name":"/Users/shelwitz/.cargo/registry/src/github.com-1ecc6299db9ec823/bio-0.39.0/src/alphabets/mod.rs","byte_start":220518,"byte_end":220583,"line_start":259,"line_end":259,"column_start":5,"column_end":70}},{"value":"/ assert_eq!(dna_ranks.get(65), 0); // \"A\"","span":{"file_name":"/Users/shelwitz/.cargo/registry/src/github.com-1ecc6299db9ec823/bio-0.39.0/src/alphabets/mod.rs","byte_start":220588,"byte_end":220632,"line_start":260,"line_end":260,"column_start":5,"column_end":49}},{"value":"/ assert_eq!(dna_ranks.get(116), 7); // \"t\"","span":{"file_name":"/Users/shelwitz/.cargo/registry/src/github.com-1ecc6299db9ec823/bio-0.39.0/src/alphabets/mod.rs","byte_start":220637,"byte_end":220682,"line_start":261,"line_end":261,"column_start":5,"column_end":50}},{"value":"/ ```","span":{"file_name":"/Users/shelwitz/.cargo/registry/src/github.com-1ecc6299db9ec823/bio-0.39.0/src/alphabets/mod.rs","byte_start":220687,"byte_end":220694,"line_start":262,"line_end":262,"column_start":5,"column_end":12}}]},{"kind":"Method","id":{"krate":0,"index":417},"span":{"file_name":"/Users/shelwitz/.cargo/registry/src/github.com-1ecc6299db9ec823/bio-0.39.0/src/alphabets/mod.rs","byte_start":221289,"byte_end":221298,"line_start":281,"line_end":281,"column_start":12,"column_end":21},"name":"transform","qualname":"<RankTransform>::transform","value":"pub fn transform<C, T>(&Self, T) -> Vec<u8> where C: Borrow<u8>,\nT: IntoIterator<Item = C>","parent":null,"children":[],"decl_id":null,"docs":" Transform a given `text` into a vector of rank values.","sig":null,"attributes":[{"value":"/ Transform a given `text` into a vector of rank values.","span":{"file_name":"/Users/shelwitz/.cargo/registry/src/github.com-1ecc6299db9ec823/bio-0.39.0/src/alphabets/mod.rs","byte_start":220811,"byte_end":220869,"line_start":267,"line_end":267,"column_start":5,"column_end":63}},{"value":"/","span":{"file_name":"/Users/shelwitz/.cargo/registry/src/github.com-1ecc6299db9ec823/bio-0.39.0/src/alphabets/mod.rs","byte_start":220874,"byte_end":220877,"line_start":268,"line_end":268,"column_start":5,"column_end":8}},{"value":"/ Complexity: O(n), where n is the length of the text.","span":{"file_name":"/Users/shelwitz/.cargo/registry/src/github.com-1ecc6299db9ec823/bio-0.39.0/src/alphabets/mod.rs","byte_start":220882,"byte_end":220938,"line_start":269,"line_end":269,"column_start":5,"column_end":61}},{"value":"/","span":{"file_name":"/Users/shelwitz/.cargo/registry/src/github.com-1ecc6299db9ec823/bio-0.39.0/src/alphabets/mod.rs","byte_start":220943,"byte_end":220946,"line_start":270,"line_end":270,"column_start":5,"column_end":8}},{"value":"/ # Example","span":{"file_name":"/Users/shelwitz/.cargo/registry/src/github.com-1ecc6299db9ec823/bio-0.39.0/src/alphabets/mod.rs","byte_start":220951,"byte_end":220964,"line_start":271,"line_end":271,"column_start":5,"column_end":18}},{"value":"/","span":{"file_name":"/Users/shelwitz/.cargo/registry/src/github.com-1ecc6299db9ec823/bio-0.39.0/src/alphabets/mod.rs","byte_start":220969,"byte_end":220972,"line_start":272,"line_end":272,"column_start":5,"column_end":8}},{"value":"/ ```","span":{"file_name":"/Users/shelwitz/.cargo/registry/src/github.com-1ecc6299db9ec823/bio-0.39.0/src/alphabets/mod.rs","byte_start":220977,"byte_end":220984,"line_start":273,"line_end":273,"column_start":5,"column_end":12}},{"value":"/ use bio::alphabets;","span":{"file_name":"/Users/shelwitz/.cargo/registry/src/github.com-1ecc6299db9ec823/bio-0.39.0/src/alphabets/mod.rs","byte_start":220989,"byte_end":221012,"line_start":274,"line_end":274,"column_start":5,"column_end":28}},{"value":"/","span":{"file_name":"/Users/shelwitz/.cargo/registry/src/github.com-1ecc6299db9ec823/bio-0.39.0/src/alphabets/mod.rs","byte_start":221017,"byte_end":221020,"line_start":275,"line_end":275,"column_start":5,"column_end":8}},{"value":"/ let dna_alphabet = alphabets::Alphabet::new(b\"ACGTacgt\");","span":{"file_name":"/Users/shelwitz/.cargo/registry/src/github.com-1ecc6299db9ec823/bio-0.39.0/src/alphabets/mod.rs","byte_start":221025,"byte_end":221086,"line_start":276,"line_end":276,"column_start":5,"column_end":66}},{"value":"/ let dna_ranks = alphabets::RankTransform::new(&dna_alphabet);","span":{"file_name":"/Users/shelwitz/.cargo/registry/src/github.com-1ecc6299db9ec823/bio-0.39.0/src/alphabets/mod.rs","byte_start":221091,"byte_end":221156,"line_start":277,"line_end":277,"column_start":5,"column_end":70}},{"value":"/ let text = b\"aAcCgGtT\";","span":{"file_name":"/Users/shelwitz/.cargo/registry/src/github.com-1ecc6299db9ec823/bio-0.39.0/src/alphabets/mod.rs","byte_start":221161,"byte_end":221188,"line_start":278,"line_end":278,"column_start":5,"column_end":32}},{"value":"/ assert_eq!(dna_ranks.transform(text), vec![4, 0, 5, 1, 6, 2, 7, 3]);","span":{"file_name":"/Users/shelwitz/.cargo/registry/src/github.com-1ecc6299db9ec823/bio-0.39.0/src/alphabets/mod.rs","byte_start":221193,"byte_end":221265,"line_start":279,"line_end":279,"column_start":5,"column_end":77}},{"value":"/ ```","span":{"file_name":"/Users/shelwitz/.cargo/registry/src/github.com-1ecc6299db9ec823/bio-0.39.0/src/alphabets/mod.rs","byte_start":221270,"byte_end":221277,"line_start":280,"line_end":280,"column_start":5,"column_end":12}}]},{"kind":"Method","id":{"krate":0,"index":421},"span":{"file_name":"/Users/shelwitz/.cargo/registry/src/github.com-1ecc6299db9ec823/bio-0.39.0/src/alphabets/mod.rs","byte_start":222388,"byte_end":222394,"line_start":314,"line_end":314,"column_start":12,"column_end":18},"name":"qgrams","qualname":"<RankTransform>::qgrams","value":"pub fn qgrams<C, T>(&Self, u32, T) -> QGrams<, C, T::IntoIter> where\nC: Borrow<u8>, T: IntoIterator<Item = C>","parent":null,"children":[],"decl_id":null,"docs":" Iterate over q-grams (substrings of length q) of given `text`. The q-grams are encoded\n as `usize` by storing the symbol ranks in log2(|A|) bits (with |A| being the alphabet size).","sig":null,"attributes":[{"value":"/ Iterate over q-grams (substrings of length q) of given `text`. The q-grams are encoded","span":{"file_name":"/Users/shelwitz/.cargo/registry/src/github.com-1ecc6299db9ec823/bio-0.39.0/src/alphabets/mod.rs","byte_start":221660,"byte_end":221750,"line_start":296,"line_end":296,"column_start":5,"column_end":95}},{"value":"/ as `usize` by storing the symbol ranks in log2(|A|) bits (with |A| being the alphabet size).","span":{"file_name":"/Users/shelwitz/.cargo/registry/src/github.com-1ecc6299db9ec823/bio-0.39.0/src/alphabets/mod.rs","byte_start":221755,"byte_end":221851,"line_start":297,"line_end":297,"column_start":5,"column_end":101}},{"value":"/","span":{"file_name":"/Users/shelwitz/.cargo/registry/src/github.com-1ecc6299db9ec823/bio-0.39.0/src/alphabets/mod.rs","byte_start":221856,"byte_end":221859,"line_start":298,"line_end":298,"column_start":5,"column_end":8}},{"value":"/ If q is larger than usize::BITS / log2(|A|), this method fails with an assertion.","span":{"file_name":"/Users/shelwitz/.cargo/registry/src/github.com-1ecc6299db9ec823/bio-0.39.0/src/alphabets/mod.rs","byte_start":221864,"byte_end":221949,"line_start":299,"line_end":299,"column_start":5,"column_end":90}},{"value":"/","span":{"file_name":"/Users/shelwitz/.cargo/registry/src/github.com-1ecc6299db9ec823/bio-0.39.0/src/alphabets/mod.rs","byte_start":221954,"byte_end":221957,"line_start":300,"line_end":300,"column_start":5,"column_end":8}},{"value":"/ Complexity: O(n), where n is the length of the text.","span":{"file_name":"/Users/shelwitz/.cargo/registry/src/github.com-1ecc6299db9ec823/bio-0.39.0/src/alphabets/mod.rs","byte_start":221962,"byte_end":222018,"line_start":301,"line_end":301,"column_start":5,"column_end":61}},{"value":"/","span":{"file_name":"/Users/shelwitz/.cargo/registry/src/github.com-1ecc6299db9ec823/bio-0.39.0/src/alphabets/mod.rs","byte_start":222023,"byte_end":222026,"line_start":302,"line_end":302,"column_start":5,"column_end":8}},{"value":"/ # Example","span":{"file_name":"/Users/shelwitz/.cargo/registry/src/github.com-1ecc6299db9ec823/bio-0.39.0/src/alphabets/mod.rs","byte_start":222031,"byte_end":222044,"line_start":303,"line_end":303,"column_start":5,"column_end":18}},{"value":"/","span":{"file_name":"/Users/shelwitz/.cargo/registry/src/github.com-1ecc6299db9ec823/bio-0.39.0/src/alphabets/mod.rs","byte_start":222049,"byte_end":222052,"line_start":304,"line_end":304,"column_start":5,"column_end":8}},{"value":"/ ```","span":{"file_name":"/Users/shelwitz/.cargo/registry/src/github.com-1ecc6299db9ec823/bio-0.39.0/src/alphabets/mod.rs","byte_start":222057,"byte_end":222064,"line_start":305,"line_end":305,"column_start":5,"column_end":12}},{"value":"/ use bio::alphabets;","span":{"file_name":"/Users/shelwitz/.cargo/registry/src/github.com-1ecc6299db9ec823/bio-0.39.0/src/alphabets/mod.rs","byte_start":222069,"byte_end":222092,"line_start":306,"line_end":306,"column_start":5,"column_end":28}},{"value":"/","span":{"file_name":"/Users/shelwitz/.cargo/registry/src/github.com-1ecc6299db9ec823/bio-0.39.0/src/alphabets/mod.rs","byte_start":222097,"byte_end":222100,"line_start":307,"line_end":307,"column_start":5,"column_end":8}},{"value":"/ let dna_alphabet = alphabets::Alphabet::new(b\"ACGTacgt\");","span":{"file_name":"/Users/shelwitz/.cargo/registry/src/github.com-1ecc6299db9ec823/bio-0.39.0/src/alphabets/mod.rs","byte_start":222105,"byte_end":222166,"line_start":308,"line_end":308,"column_start":5,"column_end":66}},{"value":"/ let dna_ranks = alphabets::RankTransform::new(&dna_alphabet);","span":{"file_name":"/Users/shelwitz/.cargo/registry/src/github.com-1ecc6299db9ec823/bio-0.39.0/src/alphabets/mod.rs","byte_start":222171,"byte_end":222236,"line_start":309,"line_end":309,"column_start":5,"column_end":70}},{"value":"/","span":{"file_name":"/Users/shelwitz/.cargo/registry/src/github.com-1ecc6299db9ec823/bio-0.39.0/src/alphabets/mod.rs","byte_start":222241,"byte_end":222244,"line_start":310,"line_end":310,"column_start":5,"column_end":8}},{"value":"/ let q_grams: Vec<usize> = dna_ranks.qgrams(2, b\"ACGT\").collect();","span":{"file_name":"/Users/shelwitz/.cargo/registry/src/github.com-1ecc6299db9ec823/bio-0.39.0/src/alphabets/mod.rs","byte_start":222249,"byte_end":222318,"line_start":311,"line_end":311,"column_start":5,"column_end":74}},{"value":"/ assert_eq!(q_grams, vec![1, 10, 19]);","span":{"file_name":"/Users/shelwitz/.cargo/registry/src/github.com-1ecc6299db9ec823/bio-0.39.0/src/alphabets/mod.rs","byte_start":222323,"byte_end":222364,"line_start":312,"line_end":312,"column_start":5,"column_end":46}},{"value":"/ ```","span":{"file_name":"/Users/shelwitz/.cargo/registry/src/github.com-1ecc6299db9ec823/bio-0.39.0/src/alphabets/mod.rs","byte_start":222369,"byte_end":222376,"line_start":313,"line_end":313,"column_start":5,"column_end":12}}]},{"kind":"Method","id":{"krate":0,"index":424},"span":{"file_name":"/Users/shelwitz/.cargo/registry/src/github.com-1ecc6299db9ec823/bio-0.39.0/src/alphabets/mod.rs","byte_start":223466,"byte_end":223474,"line_start":353,"line_end":353,"column_start":12,"column_end":20},"name":"alphabet","qualname":"<RankTransform>::alphabet","value":"pub fn alphabet(&Self) -> Alphabet","parent":null,"children":[],"decl_id":null,"docs":" Restore alphabet from transform.","sig":null,"attributes":[{"value":"/ Restore alphabet from transform.","span":{"file_name":"/Users/shelwitz/.cargo/registry/src/github.com-1ecc6299db9ec823/bio-0.39.0/src/alphabets/mod.rs","byte_start":223032,"byte_end":223068,"line_start":340,"line_end":340,"column_start":5,"column_end":41}},{"value":"/","span":{"file_name":"/Users/shelwitz/.cargo/registry/src/github.com-1ecc6299db9ec823/bio-0.39.0/src/alphabets/mod.rs","byte_start":223073,"byte_end":223076,"line_start":341,"line_end":341,"column_start":5,"column_end":8}},{"value":"/ Complexity: O(n), where n is the number of symbols in the alphabet.","span":{"file_name":"/Users/shelwitz/.cargo/registry/src/github.com-1ecc6299db9ec823/bio-0.39.0/src/alphabets/mod.rs","byte_start":223081,"byte_end":223152,"line_start":342,"line_end":342,"column_start":5,"column_end":76}},{"value":"/","span":{"file_name":"/Users/shelwitz/.cargo/registry/src/github.com-1ecc6299db9ec823/bio-0.39.0/src/alphabets/mod.rs","byte_start":223157,"byte_end":223160,"line_start":343,"line_end":343,"column_start":5,"column_end":8}},{"value":"/ # Example","span":{"file_name":"/Users/shelwitz/.cargo/registry/src/github.com-1ecc6299db9ec823/bio-0.39.0/src/alphabets/mod.rs","byte_start":223165,"byte_end":223178,"line_start":344,"line_end":344,"column_start":5,"column_end":18}},{"value":"/","span":{"file_name":"/Users/shelwitz/.cargo/registry/src/github.com-1ecc6299db9ec823/bio-0.39.0/src/alphabets/mod.rs","byte_start":223183,"byte_end":223186,"line_start":345,"line_end":345,"column_start":5,"column_end":8}},{"value":"/ ```","span":{"file_name":"/Users/shelwitz/.cargo/registry/src/github.com-1ecc6299db9ec823/bio-0.39.0/src/alphabets/mod.rs","byte_start":223191,"byte_end":223198,"line_start":346,"line_end":346,"column_start":5,"column_end":12}},{"value":"/ use bio::alphabets;","span":{"file_name":"/Users/shelwitz/.cargo/registry/src/github.com-1ecc6299db9ec823/bio-0.39.0/src/alphabets/mod.rs","byte_start":223203,"byte_end":223226,"line_start":347,"line_end":347,"column_start":5,"column_end":28}},{"value":"/","span":{"file_name":"/Users/shelwitz/.cargo/registry/src/github.com-1ecc6299db9ec823/bio-0.39.0/src/alphabets/mod.rs","byte_start":223231,"byte_end":223234,"line_start":348,"line_end":348,"column_start":5,"column_end":8}},{"value":"/ let dna_alphabet = alphabets::Alphabet::new(b\"acgtACGT\");","span":{"file_name":"/Users/shelwitz/.cargo/registry/src/github.com-1ecc6299db9ec823/bio-0.39.0/src/alphabets/mod.rs","byte_start":223239,"byte_end":223300,"line_start":349,"line_end":349,"column_start":5,"column_end":66}},{"value":"/ let dna_ranks = alphabets::RankTransform::new(&dna_alphabet);","span":{"file_name":"/Users/shelwitz/.cargo/registry/src/github.com-1ecc6299db9ec823/bio-0.39.0/src/alphabets/mod.rs","byte_start":223305,"byte_end":223370,"line_start":350,"line_end":350,"column_start":5,"column_end":70}},{"value":"/ assert_eq!(dna_ranks.alphabet().symbols, dna_alphabet.symbols);","span":{"file_name":"/Users/shelwitz/.cargo/registry/src/github.com-1ecc6299db9ec823/bio-0.39.0/src/alphabets/mod.rs","byte_start":223375,"byte_end":223442,"line_start":351,"line_end":351,"column_start":5,"column_end":72}},{"value":"/ ```","span":{"file_name":"/Users/shelwitz/.cargo/registry/src/github.com-1ecc6299db9ec823/bio-0.39.0/src/alphabets/mod.rs","byte_start":223447,"byte_end":223454,"line_start":352,"line_end":352,"column_start":5,"column_end":12}}]},{"kind":"Method","id":{"krate":0,"index":425},"span":{"file_name":"/Users/shelwitz/.cargo/registry/src/github.com-1ecc6299db9ec823/bio-0.39.0/src/alphabets/mod.rs","byte_start":224543,"byte_end":224552,"line_start":381,"line_end":381,"column_start":12,"column_end":21},"name":"get_width","qualname":"<RankTransform>::get_width","value":"pub fn get_width(&Self) -> usize","parent":null,"children":[],"decl_id":null,"docs":" Compute the number of bits required to encode the largest rank value.","sig":null,"attributes":[{"value":"/ Compute the number of bits required to encode the largest rank value.","span":{"file_name":"/Users/shelwitz/.cargo/registry/src/github.com-1ecc6299db9ec823/bio-0.39.0/src/alphabets/mod.rs","byte_start":223646,"byte_end":223719,"line_start":359,"line_end":359,"column_start":5,"column_end":78}},{"value":"/","span":{"file_name":"/Users/shelwitz/.cargo/registry/src/github.com-1ecc6299db9ec823/bio-0.39.0/src/alphabets/mod.rs","byte_start":223724,"byte_end":223727,"line_start":360,"line_end":360,"column_start":5,"column_end":8}},{"value":"/ For example, the alphabet `b\"ACGT\"` with 4 symbols has the maximal rank","span":{"file_name":"/Users/shelwitz/.cargo/registry/src/github.com-1ecc6299db9ec823/bio-0.39.0/src/alphabets/mod.rs","byte_start":223732,"byte_end":223807,"line_start":361,"line_end":361,"column_start":5,"column_end":80}},{"value":"/ 3, which can be encoded in 2 bits.","span":{"file_name":"/Users/shelwitz/.cargo/registry/src/github.com-1ecc6299db9ec823/bio-0.39.0/src/alphabets/mod.rs","byte_start":223812,"byte_end":223850,"line_start":362,"line_end":362,"column_start":5,"column_end":43}},{"value":"/","span":{"file_name":"/Users/shelwitz/.cargo/registry/src/github.com-1ecc6299db9ec823/bio-0.39.0/src/alphabets/mod.rs","byte_start":223855,"byte_end":223858,"line_start":363,"line_end":363,"column_start":5,"column_end":8}},{"value":"/ This value can be used to create a `data_structures::bitenc::BitEnc`","span":{"file_name":"/Users/shelwitz/.cargo/registry/src/github.com-1ecc6299db9ec823/bio-0.39.0/src/alphabets/mod.rs","byte_start":223863,"byte_end":223935,"line_start":364,"line_end":364,"column_start":5,"column_end":77}},{"value":"/ bit encoding tailored to the given alphabet.","span":{"file_name":"/Users/shelwitz/.cargo/registry/src/github.com-1ecc6299db9ec823/bio-0.39.0/src/alphabets/mod.rs","byte_start":223940,"byte_end":223988,"line_start":365,"line_end":365,"column_start":5,"column_end":53}},{"value":"/","span":{"file_name":"/Users/shelwitz/.cargo/registry/src/github.com-1ecc6299db9ec823/bio-0.39.0/src/alphabets/mod.rs","byte_start":223993,"byte_end":223996,"line_start":366,"line_end":366,"column_start":5,"column_end":8}},{"value":"/ Complexity: O(n), where n is the number of symbols in the alphabet.","span":{"file_name":"/Users/shelwitz/.cargo/registry/src/github.com-1ecc6299db9ec823/bio-0.39.0/src/alphabets/mod.rs","byte_start":224001,"byte_end":224072,"line_start":367,"line_end":367,"column_start":5,"column_end":76}},{"value":"/","span":{"file_name":"/Users/shelwitz/.cargo/registry/src/github.com-1ecc6299db9ec823/bio-0.39.0/src/alphabets/mod.rs","byte_start":224077,"byte_end":224080,"line_start":368,"line_end":368,"column_start":5,"column_end":8}},{"value":"/ # Example","span":{"file_name":"/Users/shelwitz/.cargo/registry/src/github.com-1ecc6299db9ec823/bio-0.39.0/src/alphabets/mod.rs","byte_start":224085,"byte_end":224098,"line_start":369,"line_end":369,"column_start":5,"column_end":18}},{"value":"/","span":{"file_name":"/Users/shelwitz/.cargo/registry/src/github.com-1ecc6299db9ec823/bio-0.39.0/src/alphabets/mod.rs","byte_start":224103,"byte_end":224106,"line_start":370,"line_end":370,"column_start":5,"column_end":8}},{"value":"/ ```","span":{"file_name":"/Users/shelwitz/.cargo/registry/src/github.com-1ecc6299db9ec823/bio-0.39.0/src/alphabets/mod.rs","byte_start":224111,"byte_end":224118,"line_start":371,"line_end":371,"column_start":5,"column_end":12}},{"value":"/ use bio::alphabets;","span":{"file_name":"/Users/shelwitz/.cargo/registry/src/github.com-1ecc6299db9ec823/bio-0.39.0/src/alphabets/mod.rs","byte_start":224123,"byte_end":224146,"line_start":372,"line_end":372,"column_start":5,"column_end":28}},{"value":"/","span":{"file_name":"/Users/shelwitz/.cargo/registry/src/github.com-1ecc6299db9ec823/bio-0.39.0/src/alphabets/mod.rs","byte_start":224151,"byte_end":224154,"line_start":373,"line_end":373,"column_start":5,"column_end":8}},{"value":"/ let dna_alphabet = alphabets::Alphabet::new(b\"ACGT\");","span":{"file_name":"/Users/shelwitz/.cargo/registry/src/github.com-1ecc6299db9ec823/bio-0.39.0/src/alphabets/mod.rs","byte_start":224159,"byte_end":224216,"line_start":374,"line_end":374,"column_start":5,"column_end":62}},{"value":"/ let dna_ranks = alphabets::RankTransform::new(&dna_alphabet);","span":{"file_name":"/Users/shelwitz/.cargo/registry/src/github.com-1ecc6299db9ec823/bio-0.39.0/src/alphabets/mod.rs","byte_start":224221,"byte_end":224286,"line_start":375,"line_end":375,"column_start":5,"column_end":70}},{"value":"/ assert_eq!(dna_ranks.get_width(), 2);","span":{"file_name":"/Users/shelwitz/.cargo/registry/src/github.com-1ecc6299db9ec823/bio-0.39.0/src/alphabets/mod.rs","byte_start":224291,"byte_end":224332,"line_start":376,"line_end":376,"column_start":5,"column_end":46}},{"value":"/ let dna_n_alphabet = alphabets::Alphabet::new(b\"ACGTN\");","span":{"file_name":"/Users/shelwitz/.cargo/registry/src/github.com-1ecc6299db9ec823/bio-0.39.0/src/alphabets/mod.rs","byte_start":224337,"byte_end":224397,"line_start":377,"line_end":377,"column_start":5,"column_end":65}},{"value":"/ let dna_n_ranks = alphabets::RankTransform::new(&dna_n_alphabet);","span":{"file_name":"/Users/shelwitz/.cargo/registry/src/github.com-1ecc6299db9ec823/bio-0.39.0/src/alphabets/mod.rs","byte_start":224402,"byte_end":224471,"line_start":378,"line_end":378,"column_start":5,"column_end":74}},{"value":"/ assert_eq!(dna_n_ranks.get_width(), 3);","span":{"file_name":"/Users/shelwitz/.cargo/registry/src/github.com-1ecc6299db9ec823/bio-0.39.0/src/alphabets/mod.rs","byte_start":224476,"byte_end":224519,"line_start":379,"line_end":379,"column_start":5,"column_end":48}},{"value":"/ ```","span":{"file_name":"/Users/shelwitz/.cargo/registry/src/github.com-1ecc6299db9ec823/bio-0.39.0/src/alphabets/mod.rs","byte_start":224524,"byte_end":224531,"line_start":380,"line_end":380,"column_start":5,"column_end":12}}]},{"kind":"Struct","id":{"krate":0,"index":426},"span":{"file_name":"/Users/shelwitz/.cargo/registry/src/github.com-1ecc6299db9ec823/bio-0.39.0/src/alphabets/mod.rs","byte_start":224675,"byte_end":224681,"line_start":387,"line_end":387,"column_start":12,"column_end":18},"name":"QGrams","qualname":"::alphabets::QGrams","value":"QGrams {  }","parent":null,"children":[{"krate":0,"index":430},{"krate":0,"index":431},{"krate":0,"index":432},{"krate":0,"index":433},{"krate":0,"index":434}],"decl_id":null,"docs":" Iterator over q-grams.\n","sig":null,"attributes":[{"value":"/ Iterator over q-grams.","span":{"file_name":"/Users/shelwitz/.cargo/registry/src/github.com-1ecc6299db9ec823/bio-0.39.0/src/alphabets/mod.rs","byte_start":224637,"byte_end":224663,"line_start":386,"line_end":386,"column_start":1,"column_end":27}}]},{"kind":"Function","id":{"krate":0,"index":446},"span":{"file_name":"/Users/shelwitz/.cargo/registry/src/github.com-1ecc6299db9ec823/bio-0.39.0/src/alphabets/mod.rs","byte_start":225591,"byte_end":225619,"line_start":432,"line_end":432,"column_start":8,"column_end":36},"name":"english_ascii_lower_alphabet","qualname":"::alphabets::english_ascii_lower_alphabet","value":"pub fn english_ascii_lower_alphabet() -> Alphabet","parent":null,"children":[],"decl_id":null,"docs":" Returns the english ascii lower case alphabet.\n","sig":null,"attributes":[{"value":"/ Returns the english ascii lower case alphabet.","span":{"file_name":"/Users/shelwitz/.cargo/registry/src/github.com-1ecc6299db9ec823/bio-0.39.0/src/alphabets/mod.rs","byte_start":225533,"byte_end":225583,"line_start":431,"line_end":431,"column_start":1,"column_end":51}}]},{"kind":"Function","id":{"krate":0,"index":447},"span":{"file_name":"/Users/shelwitz/.cargo/registry/src/github.com-1ecc6299db9ec823/bio-0.39.0/src/alphabets/mod.rs","byte_start":225751,"byte_end":225779,"line_start":437,"line_end":437,"column_start":8,"column_end":36},"name":"english_ascii_upper_alphabet","qualname":"::alphabets::english_ascii_upper_alphabet","value":"pub fn english_ascii_upper_alphabet() -> Alphabet","parent":null,"children":[],"decl_id":null,"docs":" Returns the english ascii upper case alphabet.\n","sig":null,"attributes":[{"value":"/ Returns the english ascii upper case alphabet.","span":{"file_name":"/Users/shelwitz/.cargo/registry/src/github.com-1ecc6299db9ec823/bio-0.39.0/src/alphabets/mod.rs","byte_start":225693,"byte_end":225743,"line_start":436,"line_end":436,"column_start":1,"column_end":51}}]},{"kind":"Mod","id":{"krate":0,"index":448},"span":{"file_name":"/Users/shelwitz/.cargo/registry/src/github.com-1ecc6299db9ec823/bio-0.39.0/src/data_structures/mod.rs","byte_start":0,"byte_end":0,"line_start":1,"line_end":1,"column_start":1,"column_end":1},"name":"data_structures","qualname":"::data_structures","value":"/Users/shelwitz/.cargo/registry/src/github.com-1ecc6299db9ec823/bio-0.39.0/src/data_structures/mod.rs","parent":null,"children":[{"krate":0,"index":449},{"krate":0,"index":508},{"krate":0,"index":546},{"krate":0,"index":572},{"krate":0,"index":597},{"krate":0,"index":673},{"krate":0,"index":688},{"krate":0,"index":854},{"krate":0,"index":896},{"krate":0,"index":936},{"krate":0,"index":999},{"krate":0,"index":1151}],"decl_id":null,"docs":" Various useful data structures.\n","sig":null,"attributes":[{"value":"/ Various useful data structures.","span":{"file_name":"/Users/shelwitz/.cargo/registry/src/github.com-1ecc6299db9ec823/bio-0.39.0/src/data_structures/mod.rs","byte_start":233739,"byte_end":233774,"line_start":6,"line_end":6,"column_start":1,"column_end":36}}]},{"kind":"Mod","id":{"krate":0,"index":449},"span":{"file_name":"/Users/shelwitz/.cargo/registry/src/github.com-1ecc6299db9ec823/bio-0.39.0/src/data_structures/annot_map.rs","byte_start":0,"byte_end":0,"line_start":1,"line_end":1,"column_start":1,"column_end":1},"name":"annot_map","qualname":"::data_structures::annot_map","value":"/Users/shelwitz/.cargo/registry/src/github.com-1ecc6299db9ec823/bio-0.39.0/src/data_structures/annot_map.rs","parent":null,"children":[{"krate":0,"index":450},{"krate":0,"index":453},{"krate":0,"index":454},{"krate":0,"index":456},{"krate":0,"index":459},{"krate":0,"index":460},{"krate":0,"index":463},{"krate":0,"index":466},{"krate":0,"index":469},{"krate":0,"index":3506},{"krate":0,"index":3510},{"krate":0,"index":3514},{"krate":0,"index":472},{"krate":0,"index":476},{"krate":0,"index":485},{"krate":0,"index":3518},{"krate":0,"index":3524},{"krate":0,"index":3529},{"krate":0,"index":489},{"krate":0,"index":496},{"krate":0,"index":502}],"decl_id":null,"docs":" Efficient container for locations annotated across a set of named\n reference sequences.","sig":null,"attributes":[{"value":"/ Efficient container for locations annotated across a set of named","span":{"file_name":"/Users/shelwitz/.cargo/registry/src/github.com-1ecc6299db9ec823/bio-0.39.0/src/data_structures/annot_map.rs","byte_start":234019,"byte_end":234088,"line_start":1,"line_end":1,"column_start":1,"column_end":70}},{"value":"/ reference sequences.","span":{"file_name":"/Users/shelwitz/.cargo/registry/src/github.com-1ecc6299db9ec823/bio-0.39.0/src/data_structures/annot_map.rs","byte_start":234089,"byte_end":234113,"line_start":2,"line_end":2,"column_start":1,"column_end":25}},{"value":"/","span":{"file_name":"/Users/shelwitz/.cargo/registry/src/github.com-1ecc6299db9ec823/bio-0.39.0/src/data_structures/annot_map.rs","byte_start":234114,"byte_end":234117,"line_start":3,"line_end":3,"column_start":1,"column_end":4}},{"value":"/ # Example","span":{"file_name":"/Users/shelwitz/.cargo/registry/src/github.com-1ecc6299db9ec823/bio-0.39.0/src/data_structures/annot_map.rs","byte_start":234118,"byte_end":234131,"line_start":4,"line_end":4,"column_start":1,"column_end":14}},{"value":"/","span":{"file_name":"/Users/shelwitz/.cargo/registry/src/github.com-1ecc6299db9ec823/bio-0.39.0/src/data_structures/annot_map.rs","byte_start":234132,"byte_end":234135,"line_start":5,"line_end":5,"column_start":1,"column_end":4}},{"value":"/ ```","span":{"file_name":"/Users/shelwitz/.cargo/registry/src/github.com-1ecc6299db9ec823/bio-0.39.0/src/data_structures/annot_map.rs","byte_start":234136,"byte_end":234143,"line_start":6,"line_end":6,"column_start":1,"column_end":8}},{"value":"/ extern crate bio_types;","span":{"file_name":"/Users/shelwitz/.cargo/registry/src/github.com-1ecc6299db9ec823/bio-0.39.0/src/data_structures/annot_map.rs","byte_start":234144,"byte_end":234171,"line_start":7,"line_end":7,"column_start":1,"column_end":28}},{"value":"/ use bio::data_structures::annot_map::AnnotMap;","span":{"file_name":"/Users/shelwitz/.cargo/registry/src/github.com-1ecc6299db9ec823/bio-0.39.0/src/data_structures/annot_map.rs","byte_start":234172,"byte_end":234222,"line_start":8,"line_end":8,"column_start":1,"column_end":51}},{"value":"/ use bio_types::annot::contig::Contig;","span":{"file_name":"/Users/shelwitz/.cargo/registry/src/github.com-1ecc6299db9ec823/bio-0.39.0/src/data_structures/annot_map.rs","byte_start":234223,"byte_end":234264,"line_start":9,"line_end":9,"column_start":1,"column_end":42}},{"value":"/ use bio_types::strand::ReqStrand;","span":{"file_name":"/Users/shelwitz/.cargo/registry/src/github.com-1ecc6299db9ec823/bio-0.39.0/src/data_structures/annot_map.rs","byte_start":234265,"byte_end":234302,"line_start":10,"line_end":10,"column_start":1,"column_end":38}},{"value":"/","span":{"file_name":"/Users/shelwitz/.cargo/registry/src/github.com-1ecc6299db9ec823/bio-0.39.0/src/data_structures/annot_map.rs","byte_start":234303,"byte_end":234306,"line_start":11,"line_end":11,"column_start":1,"column_end":4}},{"value":"/ // Insert a String annotation into the annotation map at a specified location.","span":{"file_name":"/Users/shelwitz/.cargo/registry/src/github.com-1ecc6299db9ec823/bio-0.39.0/src/data_structures/annot_map.rs","byte_start":234307,"byte_end":234389,"line_start":12,"line_end":12,"column_start":1,"column_end":83}},{"value":"/ let mut genes: AnnotMap<String, String> = AnnotMap::new();","span":{"file_name":"/Users/shelwitz/.cargo/registry/src/github.com-1ecc6299db9ec823/bio-0.39.0/src/data_structures/annot_map.rs","byte_start":234390,"byte_end":234452,"line_start":13,"line_end":13,"column_start":1,"column_end":63}},{"value":"/ let tma22 = Contig::new(","span":{"file_name":"/Users/shelwitz/.cargo/registry/src/github.com-1ecc6299db9ec823/bio-0.39.0/src/data_structures/annot_map.rs","byte_start":234453,"byte_end":234481,"line_start":14,"line_end":14,"column_start":1,"column_end":29}},{"value":"/     \"chrX\".to_owned(),","span":{"file_name":"/Users/shelwitz/.cargo/registry/src/github.com-1ecc6299db9ec823/bio-0.39.0/src/data_structures/annot_map.rs","byte_start":234482,"byte_end":234508,"line_start":15,"line_end":15,"column_start":1,"column_end":27}},{"value":"/     461829,","span":{"file_name":"/Users/shelwitz/.cargo/registry/src/github.com-1ecc6299db9ec823/bio-0.39.0/src/data_structures/annot_map.rs","byte_start":234509,"byte_end":234524,"line_start":16,"line_end":16,"column_start":1,"column_end":16}},{"value":"/     462426 - 461829,","span":{"file_name":"/Users/shelwitz/.cargo/registry/src/github.com-1ecc6299db9ec823/bio-0.39.0/src/data_structures/annot_map.rs","byte_start":234525,"byte_end":234549,"line_start":17,"line_end":17,"column_start":1,"column_end":25}},{"value":"/     ReqStrand::Forward,","span":{"file_name":"/Users/shelwitz/.cargo/registry/src/github.com-1ecc6299db9ec823/bio-0.39.0/src/data_structures/annot_map.rs","byte_start":234550,"byte_end":234577,"line_start":18,"line_end":18,"column_start":1,"column_end":28}},{"value":"/ );","span":{"file_name":"/Users/shelwitz/.cargo/registry/src/github.com-1ecc6299db9ec823/bio-0.39.0/src/data_structures/annot_map.rs","byte_start":234578,"byte_end":234584,"line_start":19,"line_end":19,"column_start":1,"column_end":7}},{"value":"/ genes.insert_at(\"TMA22\".to_owned(), &tma22);","span":{"file_name":"/Users/shelwitz/.cargo/registry/src/github.com-1ecc6299db9ec823/bio-0.39.0/src/data_structures/annot_map.rs","byte_start":234585,"byte_end":234633,"line_start":20,"line_end":20,"column_start":1,"column_end":49}},{"value":"/","span":{"file_name":"/Users/shelwitz/.cargo/registry/src/github.com-1ecc6299db9ec823/bio-0.39.0/src/data_structures/annot_map.rs","byte_start":234634,"byte_end":234637,"line_start":21,"line_end":21,"column_start":1,"column_end":4}},{"value":"/ // Find annotations that overlap a specific query","span":{"file_name":"/Users/shelwitz/.cargo/registry/src/github.com-1ecc6299db9ec823/bio-0.39.0/src/data_structures/annot_map.rs","byte_start":234638,"byte_end":234691,"line_start":22,"line_end":22,"column_start":1,"column_end":54}},{"value":"/ let query = Contig::new(\"chrX\".to_owned(), 462400, 100, ReqStrand::Forward);","span":{"file_name":"/Users/shelwitz/.cargo/registry/src/github.com-1ecc6299db9ec823/bio-0.39.0/src/data_structures/annot_map.rs","byte_start":234692,"byte_end":234772,"line_start":23,"line_end":23,"column_start":1,"column_end":81}},{"value":"/ let hits: Vec<&String> = genes.find(&query).map(|e| e.data()).collect();","span":{"file_name":"/Users/shelwitz/.cargo/registry/src/github.com-1ecc6299db9ec823/bio-0.39.0/src/data_structures/annot_map.rs","byte_start":234773,"byte_end":234849,"line_start":24,"line_end":24,"column_start":1,"column_end":77}},{"value":"/ assert_eq!(hits, vec![\"TMA22\"]);","span":{"file_name":"/Users/shelwitz/.cargo/registry/src/github.com-1ecc6299db9ec823/bio-0.39.0/src/data_structures/annot_map.rs","byte_start":234850,"byte_end":234886,"line_start":25,"line_end":25,"column_start":1,"column_end":37}},{"value":"/ ```","span":{"file_name":"/Users/shelwitz/.cargo/registry/src/github.com-1ecc6299db9ec823/bio-0.39.0/src/data_structures/annot_map.rs","byte_start":234887,"byte_end":234894,"line_start":26,"line_end":26,"column_start":1,"column_end":8}}]},{"kind":"Struct","id":{"krate":0,"index":3506},"span":{"file_name":"/Users/shelwitz/.cargo/registry/src/github.com-1ecc6299db9ec823/bio-0.39.0/src/data_structures/annot_map.rs","byte_start":235769,"byte_end":235777,"line_start":51,"line_end":51,"column_start":12,"column_end":20},"name":"AnnotMap","qualname":"::data_structures::annot_map::AnnotMap","value":"AnnotMap {  }","parent":null,"children":[{"krate":0,"index":3509}],"decl_id":null,"docs":" Efficient container for querying annotations, using `HashMap` and\n `IntervalTree`.","sig":null,"attributes":[{"value":"/ Efficient container for querying annotations, using `HashMap` and","span":{"file_name":"/Users/shelwitz/.cargo/registry/src/github.com-1ecc6299db9ec823/bio-0.39.0/src/data_structures/annot_map.rs","byte_start":235134,"byte_end":235203,"line_start":36,"line_end":36,"column_start":1,"column_end":70}},{"value":"/ `IntervalTree`.","span":{"file_name":"/Users/shelwitz/.cargo/registry/src/github.com-1ecc6299db9ec823/bio-0.39.0/src/data_structures/annot_map.rs","byte_start":235204,"byte_end":235223,"line_start":37,"line_end":37,"column_start":1,"column_end":20}},{"value":"/","span":{"file_name":"/Users/shelwitz/.cargo/registry/src/github.com-1ecc6299db9ec823/bio-0.39.0/src/data_structures/annot_map.rs","byte_start":235224,"byte_end":235227,"line_start":38,"line_end":38,"column_start":1,"column_end":4}},{"value":"/ The container is parameterized over the type of the reference","span":{"file_name":"/Users/shelwitz/.cargo/registry/src/github.com-1ecc6299db9ec823/bio-0.39.0/src/data_structures/annot_map.rs","byte_start":235228,"byte_end":235293,"line_start":39,"line_end":39,"column_start":1,"column_end":66}},{"value":"/ sequence names `R` (which is often a `String`) and the type of the","span":{"file_name":"/Users/shelwitz/.cargo/registry/src/github.com-1ecc6299db9ec823/bio-0.39.0/src/data_structures/annot_map.rs","byte_start":235294,"byte_end":235364,"line_start":40,"line_end":40,"column_start":1,"column_end":71}},{"value":"/ contained objects `T`.","span":{"file_name":"/Users/shelwitz/.cargo/registry/src/github.com-1ecc6299db9ec823/bio-0.39.0/src/data_structures/annot_map.rs","byte_start":235365,"byte_end":235391,"line_start":41,"line_end":41,"column_start":1,"column_end":27}},{"value":"/","span":{"file_name":"/Users/shelwitz/.cargo/registry/src/github.com-1ecc6299db9ec823/bio-0.39.0/src/data_structures/annot_map.rs","byte_start":235392,"byte_end":235395,"line_start":42,"line_end":42,"column_start":1,"column_end":4}},{"value":"/ The container finds annotations that overlap a specific query","span":{"file_name":"/Users/shelwitz/.cargo/registry/src/github.com-1ecc6299db9ec823/bio-0.39.0/src/data_structures/annot_map.rs","byte_start":235396,"byte_end":235461,"line_start":43,"line_end":43,"column_start":1,"column_end":66}},{"value":"/ location. Overlaps are identified without regard for strandedness","span":{"file_name":"/Users/shelwitz/.cargo/registry/src/github.com-1ecc6299db9ec823/bio-0.39.0/src/data_structures/annot_map.rs","byte_start":235462,"byte_end":235531,"line_start":44,"line_end":44,"column_start":1,"column_end":70}},{"value":"/ and without regard for e.g. spliced-out introns within the","span":{"file_name":"/Users/shelwitz/.cargo/registry/src/github.com-1ecc6299db9ec823/bio-0.39.0/src/data_structures/annot_map.rs","byte_start":235532,"byte_end":235594,"line_start":45,"line_end":45,"column_start":1,"column_end":63}},{"value":"/ annotation or the query.","span":{"file_name":"/Users/shelwitz/.cargo/registry/src/github.com-1ecc6299db9ec823/bio-0.39.0/src/data_structures/annot_map.rs","byte_start":235595,"byte_end":235623,"line_start":46,"line_end":46,"column_start":1,"column_end":29}},{"value":"/","span":{"file_name":"/Users/shelwitz/.cargo/registry/src/github.com-1ecc6299db9ec823/bio-0.39.0/src/data_structures/annot_map.rs","byte_start":235624,"byte_end":235627,"line_start":47,"line_end":47,"column_start":1,"column_end":4}},{"value":"/ Thus, the overlapping annotations identified by querying a","span":{"file_name":"/Users/shelwitz/.cargo/registry/src/github.com-1ecc6299db9ec823/bio-0.39.0/src/data_structures/annot_map.rs","byte_start":235628,"byte_end":235690,"line_start":48,"line_end":48,"column_start":1,"column_end":63}},{"value":"/ `AnnotMap` may need further filtering.","span":{"file_name":"/Users/shelwitz/.cargo/registry/src/github.com-1ecc6299db9ec823/bio-0.39.0/src/data_structures/annot_map.rs","byte_start":235691,"byte_end":235733,"line_start":49,"line_end":49,"column_start":1,"column_end":43}}]},{"kind":"Method","id":{"krate":0,"index":479},"span":{"file_name":"/Users/shelwitz/.cargo/registry/src/github.com-1ecc6299db9ec823/bio-0.39.0/src/data_structures/annot_map.rs","byte_start":236203,"byte_end":236206,"line_start":75,"line_end":75,"column_start":12,"column_end":15},"name":"new","qualname":"<AnnotMap<R, T>>::new","value":"pub fn new() -> Self","parent":null,"children":[],"decl_id":null,"docs":" Create a new, empty `AnnotMap`. Used in conjunction with `insert_at`\n or `insert_loc`.\n","sig":null,"attributes":[{"value":"/ Create a new, empty `AnnotMap`. Used in conjunction with `insert_at`","span":{"file_name":"/Users/shelwitz/.cargo/registry/src/github.com-1ecc6299db9ec823/bio-0.39.0/src/data_structures/annot_map.rs","byte_start":236094,"byte_end":236166,"line_start":73,"line_end":73,"column_start":5,"column_end":77}},{"value":"/ or `insert_loc`.","span":{"file_name":"/Users/shelwitz/.cargo/registry/src/github.com-1ecc6299db9ec823/bio-0.39.0/src/data_structures/annot_map.rs","byte_start":236171,"byte_end":236191,"line_start":74,"line_end":74,"column_start":5,"column_end":25}}]},{"kind":"Method","id":{"krate":0,"index":480},"span":{"file_name":"/Users/shelwitz/.cargo/registry/src/github.com-1ecc6299db9ec823/bio-0.39.0/src/data_structures/annot_map.rs","byte_start":237100,"byte_end":237109,"line_start":104,"line_end":104,"column_start":12,"column_end":21},"name":"insert_at","qualname":"<AnnotMap<R, T>>::insert_at","value":"pub fn insert_at<L>(&mut Self, T, &L) where R: Eq + Hash + Clone, L: Loc<RefID\n= R>","parent":null,"children":[],"decl_id":null,"docs":" Insert an object into the container at a specified location (`Loc`).","sig":null,"attributes":[{"value":"/ Insert an object into the container at a specified location (`Loc`).","span":{"file_name":"/Users/shelwitz/.cargo/registry/src/github.com-1ecc6299db9ec823/bio-0.39.0/src/data_structures/annot_map.rs","byte_start":236257,"byte_end":236329,"line_start":79,"line_end":79,"column_start":5,"column_end":77}},{"value":"/","span":{"file_name":"/Users/shelwitz/.cargo/registry/src/github.com-1ecc6299db9ec823/bio-0.39.0/src/data_structures/annot_map.rs","byte_start":236334,"byte_end":236337,"line_start":80,"line_end":80,"column_start":5,"column_end":8}},{"value":"/ # Arguments","span":{"file_name":"/Users/shelwitz/.cargo/registry/src/github.com-1ecc6299db9ec823/bio-0.39.0/src/data_structures/annot_map.rs","byte_start":236342,"byte_end":236357,"line_start":81,"line_end":81,"column_start":5,"column_end":20}},{"value":"/","span":{"file_name":"/Users/shelwitz/.cargo/registry/src/github.com-1ecc6299db9ec823/bio-0.39.0/src/data_structures/annot_map.rs","byte_start":236362,"byte_end":236365,"line_start":82,"line_end":82,"column_start":5,"column_end":8}},{"value":"/ * `data` - any type of data to be inserted at the location / region","span":{"file_name":"/Users/shelwitz/.cargo/registry/src/github.com-1ecc6299db9ec823/bio-0.39.0/src/data_structures/annot_map.rs","byte_start":236370,"byte_end":236441,"line_start":83,"line_end":83,"column_start":5,"column_end":76}},{"value":"/ * `location` - any object with the `Loc` trait implemented, determining","span":{"file_name":"/Users/shelwitz/.cargo/registry/src/github.com-1ecc6299db9ec823/bio-0.39.0/src/data_structures/annot_map.rs","byte_start":236446,"byte_end":236521,"line_start":84,"line_end":84,"column_start":5,"column_end":80}},{"value":"/   the Range at which to insert the `data`","span":{"file_name":"/Users/shelwitz/.cargo/registry/src/github.com-1ecc6299db9ec823/bio-0.39.0/src/data_structures/annot_map.rs","byte_start":236526,"byte_end":236571,"line_start":85,"line_end":85,"column_start":5,"column_end":50}},{"value":"/","span":{"file_name":"/Users/shelwitz/.cargo/registry/src/github.com-1ecc6299db9ec823/bio-0.39.0/src/data_structures/annot_map.rs","byte_start":236576,"byte_end":236579,"line_start":86,"line_end":86,"column_start":5,"column_end":8}},{"value":"/ # Example","span":{"file_name":"/Users/shelwitz/.cargo/registry/src/github.com-1ecc6299db9ec823/bio-0.39.0/src/data_structures/annot_map.rs","byte_start":236584,"byte_end":236597,"line_start":87,"line_end":87,"column_start":5,"column_end":18}},{"value":"/","span":{"file_name":"/Users/shelwitz/.cargo/registry/src/github.com-1ecc6299db9ec823/bio-0.39.0/src/data_structures/annot_map.rs","byte_start":236602,"byte_end":236605,"line_start":88,"line_end":88,"column_start":5,"column_end":8}},{"value":"/ ```","span":{"file_name":"/Users/shelwitz/.cargo/registry/src/github.com-1ecc6299db9ec823/bio-0.39.0/src/data_structures/annot_map.rs","byte_start":236610,"byte_end":236617,"line_start":89,"line_end":89,"column_start":5,"column_end":12}},{"value":"/ extern crate bio_types;","span":{"file_name":"/Users/shelwitz/.cargo/registry/src/github.com-1ecc6299db9ec823/bio-0.39.0/src/data_structures/annot_map.rs","byte_start":236622,"byte_end":236649,"line_start":90,"line_end":90,"column_start":5,"column_end":32}},{"value":"/ use bio::data_structures::annot_map::AnnotMap;","span":{"file_name":"/Users/shelwitz/.cargo/registry/src/github.com-1ecc6299db9ec823/bio-0.39.0/src/data_structures/annot_map.rs","byte_start":236654,"byte_end":236704,"line_start":91,"line_end":91,"column_start":5,"column_end":55}},{"value":"/ use bio_types::annot::contig::Contig;","span":{"file_name":"/Users/shelwitz/.cargo/registry/src/github.com-1ecc6299db9ec823/bio-0.39.0/src/data_structures/annot_map.rs","byte_start":236709,"byte_end":236750,"line_start":92,"line_end":92,"column_start":5,"column_end":46}},{"value":"/ use bio_types::strand::ReqStrand;","span":{"file_name":"/Users/shelwitz/.cargo/registry/src/github.com-1ecc6299db9ec823/bio-0.39.0/src/data_structures/annot_map.rs","byte_start":236755,"byte_end":236792,"line_start":93,"line_end":93,"column_start":5,"column_end":42}},{"value":"/","span":{"file_name":"/Users/shelwitz/.cargo/registry/src/github.com-1ecc6299db9ec823/bio-0.39.0/src/data_structures/annot_map.rs","byte_start":236797,"byte_end":236800,"line_start":94,"line_end":94,"column_start":5,"column_end":8}},{"value":"/ let mut genes: AnnotMap<String, String> = AnnotMap::new();","span":{"file_name":"/Users/shelwitz/.cargo/registry/src/github.com-1ecc6299db9ec823/bio-0.39.0/src/data_structures/annot_map.rs","byte_start":236805,"byte_end":236867,"line_start":95,"line_end":95,"column_start":5,"column_end":67}},{"value":"/ let tma22 = Contig::new(","span":{"file_name":"/Users/shelwitz/.cargo/registry/src/github.com-1ecc6299db9ec823/bio-0.39.0/src/data_structures/annot_map.rs","byte_start":236872,"byte_end":236900,"line_start":96,"line_end":96,"column_start":5,"column_end":33}},{"value":"/     \"chrX\".to_owned(),","span":{"file_name":"/Users/shelwitz/.cargo/registry/src/github.com-1ecc6299db9ec823/bio-0.39.0/src/data_structures/annot_map.rs","byte_start":236905,"byte_end":236931,"line_start":97,"line_end":97,"column_start":5,"column_end":31}},{"value":"/     461829,","span":{"file_name":"/Users/shelwitz/.cargo/registry/src/github.com-1ecc6299db9ec823/bio-0.39.0/src/data_structures/annot_map.rs","byte_start":236936,"byte_end":236951,"line_start":98,"line_end":98,"column_start":5,"column_end":20}},{"value":"/     462426 - 461829,","span":{"file_name":"/Users/shelwitz/.cargo/registry/src/github.com-1ecc6299db9ec823/bio-0.39.0/src/data_structures/annot_map.rs","byte_start":236956,"byte_end":236980,"line_start":99,"line_end":99,"column_start":5,"column_end":29}},{"value":"/     ReqStrand::Forward,","span":{"file_name":"/Users/shelwitz/.cargo/registry/src/github.com-1ecc6299db9ec823/bio-0.39.0/src/data_structures/annot_map.rs","byte_start":236985,"byte_end":237012,"line_start":100,"line_end":100,"column_start":5,"column_end":32}},{"value":"/ );","span":{"file_name":"/Users/shelwitz/.cargo/registry/src/github.com-1ecc6299db9ec823/bio-0.39.0/src/data_structures/annot_map.rs","byte_start":237017,"byte_end":237023,"line_start":101,"line_end":101,"column_start":5,"column_end":11}},{"value":"/ genes.insert_at(\"TMA22\".to_owned(), &tma22);","span":{"file_name":"/Users/shelwitz/.cargo/registry/src/github.com-1ecc6299db9ec823/bio-0.39.0/src/data_structures/annot_map.rs","byte_start":237028,"byte_end":237076,"line_start":102,"line_end":102,"column_start":5,"column_end":53}},{"value":"/ ```","span":{"file_name":"/Users/shelwitz/.cargo/registry/src/github.com-1ecc6299db9ec823/bio-0.39.0/src/data_structures/annot_map.rs","byte_start":237081,"byte_end":237088,"line_start":103,"line_end":103,"column_start":5,"column_end":12}}]},{"kind":"Method","id":{"krate":0,"index":482},"span":{"file_name":"/Users/shelwitz/.cargo/registry/src/github.com-1ecc6299db9ec823/bio-0.39.0/src/data_structures/annot_map.rs","byte_start":237598,"byte_end":237602,"line_start":119,"line_end":119,"column_start":12,"column_end":16},"name":"find","qualname":"<AnnotMap<R, T>>::find","value":"pub fn find<'a, L>(&'a Self, &'a L) -> AnnotMapIterator where L: Loc<RefID =\nR>","parent":null,"children":[],"decl_id":null,"docs":" Create an `Iterator` that will visit all entries that overlap\n a query location.\n","sig":null,"attributes":[{"value":"/ Create an `Iterator` that will visit all entries that overlap","span":{"file_name":"/Users/shelwitz/.cargo/registry/src/github.com-1ecc6299db9ec823/bio-0.39.0/src/data_structures/annot_map.rs","byte_start":237495,"byte_end":237560,"line_start":117,"line_end":117,"column_start":5,"column_end":70}},{"value":"/ a query location.","span":{"file_name":"/Users/shelwitz/.cargo/registry/src/github.com-1ecc6299db9ec823/bio-0.39.0/src/data_structures/annot_map.rs","byte_start":237565,"byte_end":237586,"line_start":118,"line_end":118,"column_start":5,"column_end":26}}]},{"kind":"Method","id":{"krate":0,"index":488},"span":{"file_name":"/Users/shelwitz/.cargo/registry/src/github.com-1ecc6299db9ec823/bio-0.39.0/src/data_structures/annot_map.rs","byte_start":239344,"byte_end":239354,"line_start":172,"line_end":172,"column_start":12,"column_end":22},"name":"insert_loc","qualname":"<AnnotMap<R, T>>::insert_loc","value":"pub fn insert_loc(&mut Self, T)","parent":null,"children":[],"decl_id":null,"docs":" Insert an object with the `Loc` trait into the container at\n its location.","sig":null,"attributes":[{"value":"/ Insert an object with the `Loc` trait into the container at","span":{"file_name":"/Users/shelwitz/.cargo/registry/src/github.com-1ecc6299db9ec823/bio-0.39.0/src/data_structures/annot_map.rs","byte_start":238303,"byte_end":238366,"line_start":144,"line_end":144,"column_start":5,"column_end":68}},{"value":"/ its location.","span":{"file_name":"/Users/shelwitz/.cargo/registry/src/github.com-1ecc6299db9ec823/bio-0.39.0/src/data_structures/annot_map.rs","byte_start":238371,"byte_end":238388,"line_start":145,"line_end":145,"column_start":5,"column_end":22}},{"value":"/","span":{"file_name":"/Users/shelwitz/.cargo/registry/src/github.com-1ecc6299db9ec823/bio-0.39.0/src/data_structures/annot_map.rs","byte_start":238393,"byte_end":238396,"line_start":146,"line_end":146,"column_start":5,"column_end":8}},{"value":"/ This inserts all of `data` at the Range of length `data.length()`","span":{"file_name":"/Users/shelwitz/.cargo/registry/src/github.com-1ecc6299db9ec823/bio-0.39.0/src/data_structures/annot_map.rs","byte_start":238401,"byte_end":238470,"line_start":147,"line_end":147,"column_start":5,"column_end":74}},{"value":"/ that starts at `data.start()`.","span":{"file_name":"/Users/shelwitz/.cargo/registry/src/github.com-1ecc6299db9ec823/bio-0.39.0/src/data_structures/annot_map.rs","byte_start":238475,"byte_end":238509,"line_start":148,"line_end":148,"column_start":5,"column_end":39}},{"value":"/","span":{"file_name":"/Users/shelwitz/.cargo/registry/src/github.com-1ecc6299db9ec823/bio-0.39.0/src/data_structures/annot_map.rs","byte_start":238514,"byte_end":238517,"line_start":149,"line_end":149,"column_start":5,"column_end":8}},{"value":"/ # Example","span":{"file_name":"/Users/shelwitz/.cargo/registry/src/github.com-1ecc6299db9ec823/bio-0.39.0/src/data_structures/annot_map.rs","byte_start":238522,"byte_end":238535,"line_start":150,"line_end":150,"column_start":5,"column_end":18}},{"value":"/","span":{"file_name":"/Users/shelwitz/.cargo/registry/src/github.com-1ecc6299db9ec823/bio-0.39.0/src/data_structures/annot_map.rs","byte_start":238540,"byte_end":238543,"line_start":151,"line_end":151,"column_start":5,"column_end":8}},{"value":"/ ```","span":{"file_name":"/Users/shelwitz/.cargo/registry/src/github.com-1ecc6299db9ec823/bio-0.39.0/src/data_structures/annot_map.rs","byte_start":238548,"byte_end":238555,"line_start":152,"line_end":152,"column_start":5,"column_end":12}},{"value":"/ extern crate bio_types;","span":{"file_name":"/Users/shelwitz/.cargo/registry/src/github.com-1ecc6299db9ec823/bio-0.39.0/src/data_structures/annot_map.rs","byte_start":238560,"byte_end":238587,"line_start":153,"line_end":153,"column_start":5,"column_end":32}},{"value":"/ use bio::data_structures::annot_map::AnnotMap;","span":{"file_name":"/Users/shelwitz/.cargo/registry/src/github.com-1ecc6299db9ec823/bio-0.39.0/src/data_structures/annot_map.rs","byte_start":238592,"byte_end":238642,"line_start":154,"line_end":154,"column_start":5,"column_end":55}},{"value":"/ use bio_types::annot::contig::Contig;","span":{"file_name":"/Users/shelwitz/.cargo/registry/src/github.com-1ecc6299db9ec823/bio-0.39.0/src/data_structures/annot_map.rs","byte_start":238647,"byte_end":238688,"line_start":155,"line_end":155,"column_start":5,"column_end":46}},{"value":"/ use bio_types::strand::ReqStrand;","span":{"file_name":"/Users/shelwitz/.cargo/registry/src/github.com-1ecc6299db9ec823/bio-0.39.0/src/data_structures/annot_map.rs","byte_start":238693,"byte_end":238730,"line_start":156,"line_end":156,"column_start":5,"column_end":42}},{"value":"/","span":{"file_name":"/Users/shelwitz/.cargo/registry/src/github.com-1ecc6299db9ec823/bio-0.39.0/src/data_structures/annot_map.rs","byte_start":238735,"byte_end":238738,"line_start":157,"line_end":157,"column_start":5,"column_end":8}},{"value":"/ let mut gene_locs = AnnotMap::new();","span":{"file_name":"/Users/shelwitz/.cargo/registry/src/github.com-1ecc6299db9ec823/bio-0.39.0/src/data_structures/annot_map.rs","byte_start":238743,"byte_end":238783,"line_start":158,"line_end":158,"column_start":5,"column_end":45}},{"value":"/ let tma19 = Contig::new(","span":{"file_name":"/Users/shelwitz/.cargo/registry/src/github.com-1ecc6299db9ec823/bio-0.39.0/src/data_structures/annot_map.rs","byte_start":238788,"byte_end":238816,"line_start":159,"line_end":159,"column_start":5,"column_end":33}},{"value":"/     String::from(\"chrXI\"),","span":{"file_name":"/Users/shelwitz/.cargo/registry/src/github.com-1ecc6299db9ec823/bio-0.39.0/src/data_structures/annot_map.rs","byte_start":238821,"byte_end":238851,"line_start":160,"line_end":160,"column_start":5,"column_end":35}},{"value":"/     334412,","span":{"file_name":"/Users/shelwitz/.cargo/registry/src/github.com-1ecc6299db9ec823/bio-0.39.0/src/data_structures/annot_map.rs","byte_start":238856,"byte_end":238871,"line_start":161,"line_end":161,"column_start":5,"column_end":20}},{"value":"/     (334916 - 334412),","span":{"file_name":"/Users/shelwitz/.cargo/registry/src/github.com-1ecc6299db9ec823/bio-0.39.0/src/data_structures/annot_map.rs","byte_start":238876,"byte_end":238902,"line_start":162,"line_end":162,"column_start":5,"column_end":31}},{"value":"/     ReqStrand::Reverse,","span":{"file_name":"/Users/shelwitz/.cargo/registry/src/github.com-1ecc6299db9ec823/bio-0.39.0/src/data_structures/annot_map.rs","byte_start":238907,"byte_end":238934,"line_start":163,"line_end":163,"column_start":5,"column_end":32}},{"value":"/ );","span":{"file_name":"/Users/shelwitz/.cargo/registry/src/github.com-1ecc6299db9ec823/bio-0.39.0/src/data_structures/annot_map.rs","byte_start":238939,"byte_end":238945,"line_start":164,"line_end":164,"column_start":5,"column_end":11}},{"value":"/ let assert_copy = tma19.clone();","span":{"file_name":"/Users/shelwitz/.cargo/registry/src/github.com-1ecc6299db9ec823/bio-0.39.0/src/data_structures/annot_map.rs","byte_start":238950,"byte_end":238986,"line_start":165,"line_end":165,"column_start":5,"column_end":41}},{"value":"/ gene_locs.insert_loc(tma19);","span":{"file_name":"/Users/shelwitz/.cargo/registry/src/github.com-1ecc6299db9ec823/bio-0.39.0/src/data_structures/annot_map.rs","byte_start":238991,"byte_end":239023,"line_start":166,"line_end":166,"column_start":5,"column_end":37}},{"value":"/ // Find annotations that overlap a specific query","span":{"file_name":"/Users/shelwitz/.cargo/registry/src/github.com-1ecc6299db9ec823/bio-0.39.0/src/data_structures/annot_map.rs","byte_start":239028,"byte_end":239081,"line_start":167,"line_end":167,"column_start":5,"column_end":58}},{"value":"/ let query = Contig::new(String::from(\"chrXI\"), 334400, 100, ReqStrand::Reverse);","span":{"file_name":"/Users/shelwitz/.cargo/registry/src/github.com-1ecc6299db9ec823/bio-0.39.0/src/data_structures/annot_map.rs","byte_start":239086,"byte_end":239170,"line_start":168,"line_end":168,"column_start":5,"column_end":89}},{"value":"/ let hits: Vec<&Contig<String, ReqStrand>> = gene_locs.find(&query).map(|e| e.data()).collect();","span":{"file_name":"/Users/shelwitz/.cargo/registry/src/github.com-1ecc6299db9ec823/bio-0.39.0/src/data_structures/annot_map.rs","byte_start":239175,"byte_end":239274,"line_start":169,"line_end":169,"column_start":5,"column_end":104}},{"value":"/ assert_eq!(hits, vec![&assert_copy]);","span":{"file_name":"/Users/shelwitz/.cargo/registry/src/github.com-1ecc6299db9ec823/bio-0.39.0/src/data_structures/annot_map.rs","byte_start":239279,"byte_end":239320,"line_start":170,"line_end":170,"column_start":5,"column_end":46}},{"value":"/ ```","span":{"file_name":"/Users/shelwitz/.cargo/registry/src/github.com-1ecc6299db9ec823/bio-0.39.0/src/data_structures/annot_map.rs","byte_start":239325,"byte_end":239332,"line_start":171,"line_end":171,"column_start":5,"column_end":12}}]},{"kind":"Struct","id":{"krate":0,"index":3518},"span":{"file_name":"/Users/shelwitz/.cargo/registry/src/github.com-1ecc6299db9ec823/bio-0.39.0/src/data_structures/annot_map.rs","byte_start":239725,"byte_end":239730,"line_start":184,"line_end":184,"column_start":12,"column_end":17},"name":"Entry","qualname":"::data_structures::annot_map::Entry","value":"Entry {  }","parent":null,"children":[{"krate":0,"index":3522},{"krate":0,"index":3523}],"decl_id":null,"docs":" A view of one annotation in a `AnnotMap` container.\n","sig":null,"attributes":[{"value":"/ A view of one annotation in a `AnnotMap` container.","span":{"file_name":"/Users/shelwitz/.cargo/registry/src/github.com-1ecc6299db9ec823/bio-0.39.0/src/data_structures/annot_map.rs","byte_start":239634,"byte_end":239689,"line_start":182,"line_end":182,"column_start":1,"column_end":56}}]},{"kind":"Method","id":{"krate":0,"index":493},"span":{"file_name":"/Users/shelwitz/.cargo/registry/src/github.com-1ecc6299db9ec823/bio-0.39.0/src/data_structures/annot_map.rs","byte_start":239973,"byte_end":239977,"line_start":197,"line_end":197,"column_start":12,"column_end":16},"name":"data","qualname":"<Entry>::data","value":"pub fn data(&Self) -> &'a T","parent":null,"children":[],"decl_id":null,"docs":" Return a reference to the data value in the `AnnotMap`.\n","sig":null,"attributes":[{"value":"/ Return a reference to the data value in the `AnnotMap`.","span":{"file_name":"/Users/shelwitz/.cargo/registry/src/github.com-1ecc6299db9ec823/bio-0.39.0/src/data_structures/annot_map.rs","byte_start":239902,"byte_end":239961,"line_start":196,"line_end":196,"column_start":5,"column_end":64}}]},{"kind":"Method","id":{"krate":0,"index":494},"span":{"file_name":"/Users/shelwitz/.cargo/registry/src/github.com-1ecc6299db9ec823/bio-0.39.0/src/data_structures/annot_map.rs","byte_start":240116,"byte_end":240124,"line_start":202,"line_end":202,"column_start":12,"column_end":20},"name":"interval","qualname":"<Entry>::interval","value":"pub fn interval(&Self) -> &'a Interval<isize>","parent":null,"children":[],"decl_id":null,"docs":" Return a reference to the interval spanned by the annotation.\n","sig":null,"attributes":[{"value":"/ Return a reference to the interval spanned by the annotation.","span":{"file_name":"/Users/shelwitz/.cargo/registry/src/github.com-1ecc6299db9ec823/bio-0.39.0/src/data_structures/annot_map.rs","byte_start":240039,"byte_end":240104,"line_start":201,"line_end":201,"column_start":5,"column_end":70}}]},{"kind":"Method","id":{"krate":0,"index":495},"span":{"file_name":"/Users/shelwitz/.cargo/registry/src/github.com-1ecc6299db9ec823/bio-0.39.0/src/data_structures/annot_map.rs","byte_start":240293,"byte_end":240298,"line_start":207,"line_end":207,"column_start":12,"column_end":17},"name":"refid","qualname":"<Entry>::refid","value":"pub fn refid(&Self) -> &'a R","parent":null,"children":[],"decl_id":null,"docs":" Return a reference to the identifier of the annotated reference sequence.\n","sig":null,"attributes":[{"value":"/ Return a reference to the identifier of the annotated reference sequence.","span":{"file_name":"/Users/shelwitz/.cargo/registry/src/github.com-1ecc6299db9ec823/bio-0.39.0/src/data_structures/annot_map.rs","byte_start":240204,"byte_end":240281,"line_start":206,"line_end":206,"column_start":5,"column_end":82}}]},{"kind":"Struct","id":{"krate":0,"index":496},"span":{"file_name":"/Users/shelwitz/.cargo/registry/src/github.com-1ecc6299db9ec823/bio-0.39.0/src/data_structures/annot_map.rs","byte_start":240504,"byte_end":240520,"line_start":216,"line_end":216,"column_start":12,"column_end":28},"name":"AnnotMapIterator","qualname":"::data_structures::annot_map::AnnotMapIterator","value":"AnnotMapIterator {  }","parent":null,"children":[{"krate":0,"index":500},{"krate":0,"index":501}],"decl_id":null,"docs":" An iterator over annotation entries (of type `Entry`) in a\n `AnnotMap`.","sig":null,"attributes":[{"value":"/ An iterator over annotation entries (of type `Entry`) in a","span":{"file_name":"/Users/shelwitz/.cargo/registry/src/github.com-1ecc6299db9ec823/bio-0.39.0/src/data_structures/annot_map.rs","byte_start":240345,"byte_end":240407,"line_start":212,"line_end":212,"column_start":1,"column_end":63}},{"value":"/ `AnnotMap`.","span":{"file_name":"/Users/shelwitz/.cargo/registry/src/github.com-1ecc6299db9ec823/bio-0.39.0/src/data_structures/annot_map.rs","byte_start":240408,"byte_end":240423,"line_start":213,"line_end":213,"column_start":1,"column_end":16}},{"value":"/","span":{"file_name":"/Users/shelwitz/.cargo/registry/src/github.com-1ecc6299db9ec823/bio-0.39.0/src/data_structures/annot_map.rs","byte_start":240424,"byte_end":240427,"line_start":214,"line_end":214,"column_start":1,"column_end":4}},{"value":"/ This struct is created by the `find` function on `AnnotMap`.","span":{"file_name":"/Users/shelwitz/.cargo/registry/src/github.com-1ecc6299db9ec823/bio-0.39.0/src/data_structures/annot_map.rs","byte_start":240428,"byte_end":240492,"line_start":215,"line_end":215,"column_start":1,"column_end":65}}]},{"kind":"Mod","id":{"krate":0,"index":508},"span":{"file_name":"/Users/shelwitz/.cargo/registry/src/github.com-1ecc6299db9ec823/bio-0.39.0/src/data_structures/bit_tree.rs","byte_start":0,"byte_end":0,"line_start":1,"line_end":1,"column_start":1,"column_end":1},"name":"bit_tree","qualname":"::data_structures::bit_tree","value":"/Users/shelwitz/.cargo/registry/src/github.com-1ecc6299db9ec823/bio-0.39.0/src/data_structures/bit_tree.rs","parent":null,"children":[{"krate":0,"index":509},{"krate":0,"index":512},{"krate":0,"index":513},{"krate":0,"index":515},{"krate":0,"index":518},{"krate":0,"index":521},{"krate":0,"index":526},{"krate":0,"index":532},{"krate":0,"index":534},{"krate":0,"index":537},{"krate":0,"index":539},{"krate":0,"index":541},{"krate":0,"index":544}],"decl_id":null,"docs":" BIT-tree (Binary Indexed Trees, aka Fenwick Tree) maintains a prefix-sum or\n prefix-max that can be efficiently queried and updated. From: Peter M. Fenwick (1994). \"A new data structure for cumulative frequency tables\". Software: Practice and Experience. 24 (3): 327–336.\n Implementation outlined here: https://www.topcoder.com/community/data-science/data-science-tutorials/binary-indexed-trees/","sig":null,"attributes":[{"value":"/ BIT-tree (Binary Indexed Trees, aka Fenwick Tree) maintains a prefix-sum or","span":{"file_name":"/Users/shelwitz/.cargo/registry/src/github.com-1ecc6299db9ec823/bio-0.39.0/src/data_structures/bit_tree.rs","byte_start":245118,"byte_end":245197,"line_start":6,"line_end":6,"column_start":1,"column_end":80}},{"value":"/ prefix-max that can be efficiently queried and updated. From: Peter M. Fenwick (1994). \"A new data structure for cumulative frequency tables\". Software: Practice and Experience. 24 (3): 327–336.","span":{"file_name":"/Users/shelwitz/.cargo/registry/src/github.com-1ecc6299db9ec823/bio-0.39.0/src/data_structures/bit_tree.rs","byte_start":245198,"byte_end":245398,"line_start":7,"line_end":7,"column_start":1,"column_end":199}},{"value":"/ Implementation outlined here: https://www.topcoder.com/community/data-science/data-science-tutorials/binary-indexed-trees/","span":{"file_name":"/Users/shelwitz/.cargo/registry/src/github.com-1ecc6299db9ec823/bio-0.39.0/src/data_structures/bit_tree.rs","byte_start":245399,"byte_end":245525,"line_start":8,"line_end":8,"column_start":1,"column_end":127}},{"value":"/","span":{"file_name":"/Users/shelwitz/.cargo/registry/src/github.com-1ecc6299db9ec823/bio-0.39.0/src/data_structures/bit_tree.rs","byte_start":245526,"byte_end":245529,"line_start":9,"line_end":9,"column_start":1,"column_end":4}},{"value":"/ Time Complexity: O(log n) where `n = tree.len()`.","span":{"file_name":"/Users/shelwitz/.cargo/registry/src/github.com-1ecc6299db9ec823/bio-0.39.0/src/data_structures/bit_tree.rs","byte_start":245530,"byte_end":245583,"line_start":10,"line_end":10,"column_start":1,"column_end":54}},{"value":"/ Memory Complexity: O(n) where `n = tree.len()`.","span":{"file_name":"/Users/shelwitz/.cargo/registry/src/github.com-1ecc6299db9ec823/bio-0.39.0/src/data_structures/bit_tree.rs","byte_start":245584,"byte_end":245635,"line_start":11,"line_end":11,"column_start":1,"column_end":52}},{"value":"/ # Example for a max bit tree","span":{"file_name":"/Users/shelwitz/.cargo/registry/src/github.com-1ecc6299db9ec823/bio-0.39.0/src/data_structures/bit_tree.rs","byte_start":245636,"byte_end":245668,"line_start":12,"line_end":12,"column_start":1,"column_end":33}},{"value":"/","span":{"file_name":"/Users/shelwitz/.cargo/registry/src/github.com-1ecc6299db9ec823/bio-0.39.0/src/data_structures/bit_tree.rs","byte_start":245669,"byte_end":245672,"line_start":13,"line_end":13,"column_start":1,"column_end":4}},{"value":"/ ```","span":{"file_name":"/Users/shelwitz/.cargo/registry/src/github.com-1ecc6299db9ec823/bio-0.39.0/src/data_structures/bit_tree.rs","byte_start":245673,"byte_end":245680,"line_start":14,"line_end":14,"column_start":1,"column_end":8}},{"value":"/ use bio::data_structures::bit_tree::*;","span":{"file_name":"/Users/shelwitz/.cargo/registry/src/github.com-1ecc6299db9ec823/bio-0.39.0/src/data_structures/bit_tree.rs","byte_start":245681,"byte_end":245723,"line_start":15,"line_end":15,"column_start":1,"column_end":43}},{"value":"/","span":{"file_name":"/Users/shelwitz/.cargo/registry/src/github.com-1ecc6299db9ec823/bio-0.39.0/src/data_structures/bit_tree.rs","byte_start":245724,"byte_end":245727,"line_start":16,"line_end":16,"column_start":1,"column_end":4}},{"value":"/ let mut bit = MaxBitTree::new(10);","span":{"file_name":"/Users/shelwitz/.cargo/registry/src/github.com-1ecc6299db9ec823/bio-0.39.0/src/data_structures/bit_tree.rs","byte_start":245728,"byte_end":245766,"line_start":17,"line_end":17,"column_start":1,"column_end":39}},{"value":"/ bit.set(0, (1,0));","span":{"file_name":"/Users/shelwitz/.cargo/registry/src/github.com-1ecc6299db9ec823/bio-0.39.0/src/data_structures/bit_tree.rs","byte_start":245767,"byte_end":245789,"line_start":18,"line_end":18,"column_start":1,"column_end":23}},{"value":"/ bit.set(1, (0,1));","span":{"file_name":"/Users/shelwitz/.cargo/registry/src/github.com-1ecc6299db9ec823/bio-0.39.0/src/data_structures/bit_tree.rs","byte_start":245790,"byte_end":245812,"line_start":19,"line_end":19,"column_start":1,"column_end":23}},{"value":"/ bit.set(2, (2,2));","span":{"file_name":"/Users/shelwitz/.cargo/registry/src/github.com-1ecc6299db9ec823/bio-0.39.0/src/data_structures/bit_tree.rs","byte_start":245813,"byte_end":245835,"line_start":20,"line_end":20,"column_start":1,"column_end":23}},{"value":"/ bit.set(3, (4,3));","span":{"file_name":"/Users/shelwitz/.cargo/registry/src/github.com-1ecc6299db9ec823/bio-0.39.0/src/data_structures/bit_tree.rs","byte_start":245836,"byte_end":245858,"line_start":21,"line_end":21,"column_start":1,"column_end":23}},{"value":"/","span":{"file_name":"/Users/shelwitz/.cargo/registry/src/github.com-1ecc6299db9ec823/bio-0.39.0/src/data_structures/bit_tree.rs","byte_start":245859,"byte_end":245862,"line_start":22,"line_end":22,"column_start":1,"column_end":4}},{"value":"/ assert_eq!(bit.get(0), (1, 0));","span":{"file_name":"/Users/shelwitz/.cargo/registry/src/github.com-1ecc6299db9ec823/bio-0.39.0/src/data_structures/bit_tree.rs","byte_start":245863,"byte_end":245898,"line_start":23,"line_end":23,"column_start":1,"column_end":36}},{"value":"/ assert_eq!(bit.get(1), (1, 0));","span":{"file_name":"/Users/shelwitz/.cargo/registry/src/github.com-1ecc6299db9ec823/bio-0.39.0/src/data_structures/bit_tree.rs","byte_start":245899,"byte_end":245934,"line_start":24,"line_end":24,"column_start":1,"column_end":36}},{"value":"/ assert_eq!(bit.get(2), (2, 2));","span":{"file_name":"/Users/shelwitz/.cargo/registry/src/github.com-1ecc6299db9ec823/bio-0.39.0/src/data_structures/bit_tree.rs","byte_start":245935,"byte_end":245970,"line_start":25,"line_end":25,"column_start":1,"column_end":36}},{"value":"/ assert_eq!(bit.get(3), (4, 3));","span":{"file_name":"/Users/shelwitz/.cargo/registry/src/github.com-1ecc6299db9ec823/bio-0.39.0/src/data_structures/bit_tree.rs","byte_start":245971,"byte_end":246006,"line_start":26,"line_end":26,"column_start":1,"column_end":36}},{"value":"/ assert_eq!(bit.get(4), (4, 3));","span":{"file_name":"/Users/shelwitz/.cargo/registry/src/github.com-1ecc6299db9ec823/bio-0.39.0/src/data_structures/bit_tree.rs","byte_start":246007,"byte_end":246042,"line_start":27,"line_end":27,"column_start":1,"column_end":36}}]},{"kind":"Trait","id":{"krate":0,"index":518},"span":{"file_name":"/Users/shelwitz/.cargo/registry/src/github.com-1ecc6299db9ec823/bio-0.39.0/src/data_structures/bit_tree.rs","byte_start":246156,"byte_end":246164,"line_start":34,"line_end":34,"column_start":11,"column_end":19},"name":"PrefixOp","qualname":"::data_structures::bit_tree::PrefixOp","value":"PrefixOp<T>","parent":null,"children":[{"krate":0,"index":520}],"decl_id":null,"docs":" Fenwick tree prefix operator\n","sig":null,"attributes":[{"value":"/ Fenwick tree prefix operator","span":{"file_name":"/Users/shelwitz/.cargo/registry/src/github.com-1ecc6299db9ec823/bio-0.39.0/src/data_structures/bit_tree.rs","byte_start":246113,"byte_end":246145,"line_start":33,"line_end":33,"column_start":1,"column_end":33}}]},{"kind":"Method","id":{"krate":0,"index":520},"span":{"file_name":"/Users/shelwitz/.cargo/registry/src/github.com-1ecc6299db9ec823/bio-0.39.0/src/data_structures/bit_tree.rs","byte_start":246177,"byte_end":246186,"line_start":35,"line_end":35,"column_start":8,"column_end":17},"name":"operation","qualname":"::data_structures::bit_tree::PrefixOp::operation","value":"pub fn operation(T, T) -> T","parent":{"krate":0,"index":518},"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Struct","id":{"krate":0,"index":521},"span":{"file_name":"/Users/shelwitz/.cargo/registry/src/github.com-1ecc6299db9ec823/bio-0.39.0/src/data_structures/bit_tree.rs","byte_start":246635,"byte_end":246646,"line_start":44,"line_end":44,"column_start":12,"column_end":23},"name":"FenwickTree","qualname":"::data_structures::bit_tree::FenwickTree","value":"FenwickTree {  }","parent":null,"children":[{"krate":0,"index":524},{"krate":0,"index":525}],"decl_id":null,"docs":" In a max bit tree or Fenwick Tree, get(i) will return the largest element e that has been added\n to the bit tree with set(j, e), where j <= i. Initially all positions have\n the value T::default(). Note that a set cannot be 'undone' by inserting\n a smaller element at the same index.\n Time Complexity: O(n) to build a new tree or O(log n) for get() and set() operations,\n where `n = tree.len()`.\n","sig":null,"attributes":[{"value":"/ In a max bit tree or Fenwick Tree, get(i) will return the largest element e that has been added","span":{"file_name":"/Users/shelwitz/.cargo/registry/src/github.com-1ecc6299db9ec823/bio-0.39.0/src/data_structures/bit_tree.rs","byte_start":246210,"byte_end":246309,"line_start":38,"line_end":38,"column_start":1,"column_end":100}},{"value":"/ to the bit tree with set(j, e), where j <= i. Initially all positions have","span":{"file_name":"/Users/shelwitz/.cargo/registry/src/github.com-1ecc6299db9ec823/bio-0.39.0/src/data_structures/bit_tree.rs","byte_start":246310,"byte_end":246388,"line_start":39,"line_end":39,"column_start":1,"column_end":79}},{"value":"/ the value T::default(). Note that a set cannot be 'undone' by inserting","span":{"file_name":"/Users/shelwitz/.cargo/registry/src/github.com-1ecc6299db9ec823/bio-0.39.0/src/data_structures/bit_tree.rs","byte_start":246389,"byte_end":246464,"line_start":40,"line_end":40,"column_start":1,"column_end":76}},{"value":"/ a smaller element at the same index.","span":{"file_name":"/Users/shelwitz/.cargo/registry/src/github.com-1ecc6299db9ec823/bio-0.39.0/src/data_structures/bit_tree.rs","byte_start":246465,"byte_end":246505,"line_start":41,"line_end":41,"column_start":1,"column_end":41}},{"value":"/ Time Complexity: O(n) to build a new tree or O(log n) for get() and set() operations,","span":{"file_name":"/Users/shelwitz/.cargo/registry/src/github.com-1ecc6299db9ec823/bio-0.39.0/src/data_structures/bit_tree.rs","byte_start":246506,"byte_end":246595,"line_start":42,"line_end":42,"column_start":1,"column_end":90}},{"value":"/ where `n = tree.len()`.","span":{"file_name":"/Users/shelwitz/.cargo/registry/src/github.com-1ecc6299db9ec823/bio-0.39.0/src/data_structures/bit_tree.rs","byte_start":246596,"byte_end":246623,"line_start":43,"line_end":43,"column_start":1,"column_end":28}}]},{"kind":"Method","id":{"krate":0,"index":529},"span":{"file_name":"/Users/shelwitz/.cargo/registry/src/github.com-1ecc6299db9ec823/bio-0.39.0/src/data_structures/bit_tree.rs","byte_start":246862,"byte_end":246865,"line_start":51,"line_end":51,"column_start":12,"column_end":15},"name":"new","qualname":"<FenwickTree<T, Op>>::new","value":"pub fn new(usize) -> FenwickTree<T, Op>","parent":null,"children":[],"decl_id":null,"docs":" Create a new bit tree with len elements\n","sig":null,"attributes":[{"value":"/ Create a new bit tree with len elements","span":{"file_name":"/Users/shelwitz/.cargo/registry/src/github.com-1ecc6299db9ec823/bio-0.39.0/src/data_structures/bit_tree.rs","byte_start":246807,"byte_end":246850,"line_start":50,"line_end":50,"column_start":5,"column_end":48}}]},{"kind":"Method","id":{"krate":0,"index":530},"span":{"file_name":"/Users/shelwitz/.cargo/registry/src/github.com-1ecc6299db9ec823/bio-0.39.0/src/data_structures/bit_tree.rs","byte_start":247272,"byte_end":247275,"line_start":62,"line_end":62,"column_start":12,"column_end":15},"name":"get","qualname":"<FenwickTree<T, Op>>::get","value":"pub fn get(&Self, usize) -> T","parent":null,"children":[],"decl_id":null,"docs":" Returns the largest element e that has been added\n to the bit tree with set(j, e), where j <= i.\n","sig":null,"attributes":[{"value":"/ Returns the largest element e that has been added","span":{"file_name":"/Users/shelwitz/.cargo/registry/src/github.com-1ecc6299db9ec823/bio-0.39.0/src/data_structures/bit_tree.rs","byte_start":247153,"byte_end":247206,"line_start":60,"line_end":60,"column_start":5,"column_end":58}},{"value":"/ to the bit tree with set(j, e), where j <= i.","span":{"file_name":"/Users/shelwitz/.cargo/registry/src/github.com-1ecc6299db9ec823/bio-0.39.0/src/data_structures/bit_tree.rs","byte_start":247211,"byte_end":247260,"line_start":61,"line_end":61,"column_start":5,"column_end":54}}]},{"kind":"Method","id":{"krate":0,"index":531},"span":{"file_name":"/Users/shelwitz/.cargo/registry/src/github.com-1ecc6299db9ec823/bio-0.39.0/src/data_structures/bit_tree.rs","byte_start":247819,"byte_end":247822,"line_start":78,"line_end":78,"column_start":12,"column_end":15},"name":"set","qualname":"<FenwickTree<T, Op>>::set","value":"pub fn set(&mut Self, usize, T)","parent":null,"children":[],"decl_id":null,"docs":" Set the value `val` at position `idx`; `val` will\n be returned for any get(j) where j >= idx, if\n it is the maximum value inserted between 0 and j.\n Inserting a value val2 after inserting val1 where val1 > val2\n will have no effect.\n","sig":null,"attributes":[{"value":"/ Set the value `val` at position `idx`; `val` will","span":{"file_name":"/Users/shelwitz/.cargo/registry/src/github.com-1ecc6299db9ec823/bio-0.39.0/src/data_structures/bit_tree.rs","byte_start":247543,"byte_end":247596,"line_start":73,"line_end":73,"column_start":5,"column_end":58}},{"value":"/ be returned for any get(j) where j >= idx, if","span":{"file_name":"/Users/shelwitz/.cargo/registry/src/github.com-1ecc6299db9ec823/bio-0.39.0/src/data_structures/bit_tree.rs","byte_start":247601,"byte_end":247650,"line_start":74,"line_end":74,"column_start":5,"column_end":54}},{"value":"/ it is the maximum value inserted between 0 and j.","span":{"file_name":"/Users/shelwitz/.cargo/registry/src/github.com-1ecc6299db9ec823/bio-0.39.0/src/data_structures/bit_tree.rs","byte_start":247655,"byte_end":247708,"line_start":75,"line_end":75,"column_start":5,"column_end":58}},{"value":"/ Inserting a value val2 after inserting val1 where val1 > val2","span":{"file_name":"/Users/shelwitz/.cargo/registry/src/github.com-1ecc6299db9ec823/bio-0.39.0/src/data_structures/bit_tree.rs","byte_start":247713,"byte_end":247778,"line_start":76,"line_end":76,"column_start":5,"column_end":70}},{"value":"/ will have no effect.","span":{"file_name":"/Users/shelwitz/.cargo/registry/src/github.com-1ecc6299db9ec823/bio-0.39.0/src/data_structures/bit_tree.rs","byte_start":247783,"byte_end":247807,"line_start":77,"line_end":77,"column_start":5,"column_end":29}}]},{"kind":"Struct","id":{"krate":0,"index":532},"span":{"file_name":"/Users/shelwitz/.cargo/registry/src/github.com-1ecc6299db9ec823/bio-0.39.0/src/data_structures/bit_tree.rs","byte_start":248082,"byte_end":248087,"line_start":87,"line_end":87,"column_start":12,"column_end":17},"name":"MaxOp","qualname":"::data_structures::bit_tree::MaxOp","value":"","parent":null,"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Type","id":{"krate":0,"index":537},"span":{"file_name":"/Users/shelwitz/.cargo/registry/src/github.com-1ecc6299db9ec823/bio-0.39.0/src/data_structures/bit_tree.rs","byte_start":248253,"byte_end":248263,"line_start":95,"line_end":95,"column_start":10,"column_end":20},"name":"MaxBitTree","qualname":"::data_structures::bit_tree::MaxBitTree","value":"FenwickTree<T, MaxOp>","parent":null,"children":[],"decl_id":null,"docs":" Fenwick tree specialized for prefix-max\n","sig":null,"attributes":[{"value":"/ Fenwick tree specialized for prefix-max","span":{"file_name":"/Users/shelwitz/.cargo/registry/src/github.com-1ecc6299db9ec823/bio-0.39.0/src/data_structures/bit_tree.rs","byte_start":248200,"byte_end":248243,"line_start":94,"line_end":94,"column_start":1,"column_end":44}}]},{"kind":"Struct","id":{"krate":0,"index":539},"span":{"file_name":"/Users/shelwitz/.cargo/registry/src/github.com-1ecc6299db9ec823/bio-0.39.0/src/data_structures/bit_tree.rs","byte_start":248304,"byte_end":248309,"line_start":97,"line_end":97,"column_start":12,"column_end":17},"name":"SumOp","qualname":"::data_structures::bit_tree::SumOp","value":"","parent":null,"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Type","id":{"krate":0,"index":544},"span":{"file_name":"/Users/shelwitz/.cargo/registry/src/github.com-1ecc6299db9ec823/bio-0.39.0/src/data_structures/bit_tree.rs","byte_start":248501,"byte_end":248511,"line_start":108,"line_end":108,"column_start":10,"column_end":20},"name":"SumBitTree","qualname":"::data_structures::bit_tree::SumBitTree","value":"FenwickTree<T, SumOp>","parent":null,"children":[],"decl_id":null,"docs":" Fenwick tree specialized for prefix-sum\n","sig":null,"attributes":[{"value":"/ Fenwick tree specialized for prefix-sum","span":{"file_name":"/Users/shelwitz/.cargo/registry/src/github.com-1ecc6299db9ec823/bio-0.39.0/src/data_structures/bit_tree.rs","byte_start":248448,"byte_end":248491,"line_start":107,"line_end":107,"column_start":1,"column_end":44}}]},{"kind":"Mod","id":{"krate":0,"index":546},"span":{"file_name":"/Users/shelwitz/.cargo/registry/src/github.com-1ecc6299db9ec823/bio-0.39.0/src/data_structures/bitenc.rs","byte_start":0,"byte_end":0,"line_start":1,"line_end":1,"column_start":1,"column_end":1},"name":"bitenc","qualname":"::data_structures::bitenc","value":"/Users/shelwitz/.cargo/registry/src/github.com-1ecc6299db9ec823/bio-0.39.0/src/data_structures/bitenc.rs","parent":null,"children":[{"krate":0,"index":3534},{"krate":0,"index":3540},{"krate":0,"index":3546},{"krate":0,"index":3595},{"krate":0,"index":3596},{"krate":0,"index":3599},{"krate":0,"index":3600},{"krate":0,"index":3602},{"krate":0,"index":547},{"krate":0,"index":548},{"krate":0,"index":564},{"krate":0,"index":568}],"decl_id":null,"docs":" A fixed-width bit encoding implementation. This allows to store a sequence of values over\n a reduced alphabet by packing them bit-encoded into a sequence of bytes.","sig":null,"attributes":[{"value":"/ A fixed-width bit encoding implementation. This allows to store a sequence of values over","span":{"file_name":"/Users/shelwitz/.cargo/registry/src/github.com-1ecc6299db9ec823/bio-0.39.0/src/data_structures/bitenc.rs","byte_start":249447,"byte_end":249540,"line_start":6,"line_end":6,"column_start":1,"column_end":94}},{"value":"/ a reduced alphabet by packing them bit-encoded into a sequence of bytes.","span":{"file_name":"/Users/shelwitz/.cargo/registry/src/github.com-1ecc6299db9ec823/bio-0.39.0/src/data_structures/bitenc.rs","byte_start":249541,"byte_end":249617,"line_start":7,"line_end":7,"column_start":1,"column_end":77}},{"value":"/","span":{"file_name":"/Users/shelwitz/.cargo/registry/src/github.com-1ecc6299db9ec823/bio-0.39.0/src/data_structures/bitenc.rs","byte_start":249618,"byte_end":249621,"line_start":8,"line_end":8,"column_start":1,"column_end":4}},{"value":"/ Similar behaviour can be achieved using a `PackedVec` from the [packedvec](https://docs.rs/packedvec) crate.","span":{"file_name":"/Users/shelwitz/.cargo/registry/src/github.com-1ecc6299db9ec823/bio-0.39.0/src/data_structures/bitenc.rs","byte_start":249622,"byte_end":249734,"line_start":9,"line_end":9,"column_start":1,"column_end":113}},{"value":"/","span":{"file_name":"/Users/shelwitz/.cargo/registry/src/github.com-1ecc6299db9ec823/bio-0.39.0/src/data_structures/bitenc.rs","byte_start":249735,"byte_end":249738,"line_start":10,"line_end":10,"column_start":1,"column_end":4}},{"value":"/ # Example","span":{"file_name":"/Users/shelwitz/.cargo/registry/src/github.com-1ecc6299db9ec823/bio-0.39.0/src/data_structures/bitenc.rs","byte_start":249739,"byte_end":249752,"line_start":11,"line_end":11,"column_start":1,"column_end":14}},{"value":"/","span":{"file_name":"/Users/shelwitz/.cargo/registry/src/github.com-1ecc6299db9ec823/bio-0.39.0/src/data_structures/bitenc.rs","byte_start":249753,"byte_end":249756,"line_start":12,"line_end":12,"column_start":1,"column_end":4}},{"value":"/ ```","span":{"file_name":"/Users/shelwitz/.cargo/registry/src/github.com-1ecc6299db9ec823/bio-0.39.0/src/data_structures/bitenc.rs","byte_start":249757,"byte_end":249764,"line_start":13,"line_end":13,"column_start":1,"column_end":8}},{"value":"/ use bio::data_structures::bitenc::BitEnc;","span":{"file_name":"/Users/shelwitz/.cargo/registry/src/github.com-1ecc6299db9ec823/bio-0.39.0/src/data_structures/bitenc.rs","byte_start":249765,"byte_end":249810,"line_start":14,"line_end":14,"column_start":1,"column_end":46}},{"value":"/ let mut bitenc = BitEnc::new(2);","span":{"file_name":"/Users/shelwitz/.cargo/registry/src/github.com-1ecc6299db9ec823/bio-0.39.0/src/data_structures/bitenc.rs","byte_start":249811,"byte_end":249847,"line_start":15,"line_end":15,"column_start":1,"column_end":37}},{"value":"/ bitenc.push(0);","span":{"file_name":"/Users/shelwitz/.cargo/registry/src/github.com-1ecc6299db9ec823/bio-0.39.0/src/data_structures/bitenc.rs","byte_start":249848,"byte_end":249867,"line_start":16,"line_end":16,"column_start":1,"column_end":20}},{"value":"/ bitenc.push(2);","span":{"file_name":"/Users/shelwitz/.cargo/registry/src/github.com-1ecc6299db9ec823/bio-0.39.0/src/data_structures/bitenc.rs","byte_start":249868,"byte_end":249887,"line_start":17,"line_end":17,"column_start":1,"column_end":20}},{"value":"/ bitenc.push(1);","span":{"file_name":"/Users/shelwitz/.cargo/registry/src/github.com-1ecc6299db9ec823/bio-0.39.0/src/data_structures/bitenc.rs","byte_start":249888,"byte_end":249907,"line_start":18,"line_end":18,"column_start":1,"column_end":20}},{"value":"/ let values: Vec<u8> = bitenc.iter().collect();","span":{"file_name":"/Users/shelwitz/.cargo/registry/src/github.com-1ecc6299db9ec823/bio-0.39.0/src/data_structures/bitenc.rs","byte_start":249908,"byte_end":249958,"line_start":19,"line_end":19,"column_start":1,"column_end":51}},{"value":"/ assert_eq!(values, [0, 2, 1]);","span":{"file_name":"/Users/shelwitz/.cargo/registry/src/github.com-1ecc6299db9ec823/bio-0.39.0/src/data_structures/bitenc.rs","byte_start":249959,"byte_end":249993,"line_start":20,"line_end":20,"column_start":1,"column_end":35}},{"value":"/ ```","span":{"file_name":"/Users/shelwitz/.cargo/registry/src/github.com-1ecc6299db9ec823/bio-0.39.0/src/data_structures/bitenc.rs","byte_start":249994,"byte_end":250001,"line_start":21,"line_end":21,"column_start":1,"column_end":8}},{"value":"/","span":{"file_name":"/Users/shelwitz/.cargo/registry/src/github.com-1ecc6299db9ec823/bio-0.39.0/src/data_structures/bitenc.rs","byte_start":250002,"byte_end":250005,"line_start":22,"line_end":22,"column_start":1,"column_end":4}},{"value":"/ BitEnc can be used in combination with `alphabets::RankTransform`","span":{"file_name":"/Users/shelwitz/.cargo/registry/src/github.com-1ecc6299db9ec823/bio-0.39.0/src/data_structures/bitenc.rs","byte_start":250006,"byte_end":250075,"line_start":23,"line_end":23,"column_start":1,"column_end":70}},{"value":"/ to generate rank-encoded values, like 2-bit encoded DNA bases,","span":{"file_name":"/Users/shelwitz/.cargo/registry/src/github.com-1ecc6299db9ec823/bio-0.39.0/src/data_structures/bitenc.rs","byte_start":250076,"byte_end":250142,"line_start":24,"line_end":24,"column_start":1,"column_end":67}},{"value":"/ and store these using `BitEnc`.","span":{"file_name":"/Users/shelwitz/.cargo/registry/src/github.com-1ecc6299db9ec823/bio-0.39.0/src/data_structures/bitenc.rs","byte_start":250143,"byte_end":250178,"line_start":25,"line_end":25,"column_start":1,"column_end":36}},{"value":"/","span":{"file_name":"/Users/shelwitz/.cargo/registry/src/github.com-1ecc6299db9ec823/bio-0.39.0/src/data_structures/bitenc.rs","byte_start":250179,"byte_end":250182,"line_start":26,"line_end":26,"column_start":1,"column_end":4}},{"value":"/ ```","span":{"file_name":"/Users/shelwitz/.cargo/registry/src/github.com-1ecc6299db9ec823/bio-0.39.0/src/data_structures/bitenc.rs","byte_start":250183,"byte_end":250190,"line_start":27,"line_end":27,"column_start":1,"column_end":8}},{"value":"/ use bio::alphabets;","span":{"file_name":"/Users/shelwitz/.cargo/registry/src/github.com-1ecc6299db9ec823/bio-0.39.0/src/data_structures/bitenc.rs","byte_start":250191,"byte_end":250214,"line_start":28,"line_end":28,"column_start":1,"column_end":24}},{"value":"/ use bio::data_structures::bitenc::BitEnc;","span":{"file_name":"/Users/shelwitz/.cargo/registry/src/github.com-1ecc6299db9ec823/bio-0.39.0/src/data_structures/bitenc.rs","byte_start":250215,"byte_end":250260,"line_start":29,"line_end":29,"column_start":1,"column_end":46}},{"value":"/","span":{"file_name":"/Users/shelwitz/.cargo/registry/src/github.com-1ecc6299db9ec823/bio-0.39.0/src/data_structures/bitenc.rs","byte_start":250261,"byte_end":250264,"line_start":30,"line_end":30,"column_start":1,"column_end":4}},{"value":"/ let dna_alphabet = alphabets::Alphabet::new(b\"ACGT\");","span":{"file_name":"/Users/shelwitz/.cargo/registry/src/github.com-1ecc6299db9ec823/bio-0.39.0/src/data_structures/bitenc.rs","byte_start":250265,"byte_end":250322,"line_start":31,"line_end":31,"column_start":1,"column_end":58}},{"value":"/ let dna_ranks = alphabets::RankTransform::new(&dna_alphabet);","span":{"file_name":"/Users/shelwitz/.cargo/registry/src/github.com-1ecc6299db9ec823/bio-0.39.0/src/data_structures/bitenc.rs","byte_start":250323,"byte_end":250388,"line_start":32,"line_end":32,"column_start":1,"column_end":66}},{"value":"/","span":{"file_name":"/Users/shelwitz/.cargo/registry/src/github.com-1ecc6299db9ec823/bio-0.39.0/src/data_structures/bitenc.rs","byte_start":250389,"byte_end":250392,"line_start":33,"line_end":33,"column_start":1,"column_end":4}},{"value":"/ // Compute the number of bits required for the largest rank","span":{"file_name":"/Users/shelwitz/.cargo/registry/src/github.com-1ecc6299db9ec823/bio-0.39.0/src/data_structures/bitenc.rs","byte_start":250393,"byte_end":250456,"line_start":34,"line_end":34,"column_start":1,"column_end":64}},{"value":"/ let mut bit_enc = BitEnc::new(dna_ranks.get_width());","span":{"file_name":"/Users/shelwitz/.cargo/registry/src/github.com-1ecc6299db9ec823/bio-0.39.0/src/data_structures/bitenc.rs","byte_start":250457,"byte_end":250514,"line_start":35,"line_end":35,"column_start":1,"column_end":58}},{"value":"/","span":{"file_name":"/Users/shelwitz/.cargo/registry/src/github.com-1ecc6299db9ec823/bio-0.39.0/src/data_structures/bitenc.rs","byte_start":250515,"byte_end":250518,"line_start":36,"line_end":36,"column_start":1,"column_end":4}},{"value":"/ let text = b\"GATTACA\";","span":{"file_name":"/Users/shelwitz/.cargo/registry/src/github.com-1ecc6299db9ec823/bio-0.39.0/src/data_structures/bitenc.rs","byte_start":250519,"byte_end":250545,"line_start":37,"line_end":37,"column_start":1,"column_end":27}},{"value":"/ assert_eq!(dna_ranks.transform(text), [2, 0, 3, 3, 0, 1, 0]);","span":{"file_name":"/Users/shelwitz/.cargo/registry/src/github.com-1ecc6299db9ec823/bio-0.39.0/src/data_structures/bitenc.rs","byte_start":250546,"byte_end":250611,"line_start":38,"line_end":38,"column_start":1,"column_end":66}},{"value":"/ ```","span":{"file_name":"/Users/shelwitz/.cargo/registry/src/github.com-1ecc6299db9ec823/bio-0.39.0/src/data_structures/bitenc.rs","byte_start":250612,"byte_end":250619,"line_start":39,"line_end":39,"column_start":1,"column_end":8}}]},{"kind":"Struct","id":{"krate":0,"index":3534},"span":{"file_name":"/Users/shelwitz/.cargo/registry/src/github.com-1ecc6299db9ec823/bio-0.39.0/src/data_structures/bitenc.rs","byte_start":251129,"byte_end":251135,"line_start":50,"line_end":50,"column_start":12,"column_end":18},"name":"BitEnc","qualname":"::data_structures::bitenc::BitEnc","value":"BitEnc {  }","parent":null,"children":[{"krate":0,"index":3535},{"krate":0,"index":3536},{"krate":0,"index":3537},{"krate":0,"index":3538},{"krate":0,"index":3539}],"decl_id":null,"docs":" A sequence of bitencoded values.","sig":null,"attributes":[{"value":"/ A sequence of bitencoded values.","span":{"file_name":"/Users/shelwitz/.cargo/registry/src/github.com-1ecc6299db9ec823/bio-0.39.0/src/data_structures/bitenc.rs","byte_start":250621,"byte_end":250657,"line_start":41,"line_end":41,"column_start":1,"column_end":37}},{"value":"/","span":{"file_name":"/Users/shelwitz/.cargo/registry/src/github.com-1ecc6299db9ec823/bio-0.39.0/src/data_structures/bitenc.rs","byte_start":250658,"byte_end":250661,"line_start":42,"line_end":42,"column_start":1,"column_end":4}},{"value":"/ Space complexity: O(⌈(n * width) / k⌉) * 32 bit, where n is the length of the input","span":{"file_name":"/Users/shelwitz/.cargo/registry/src/github.com-1ecc6299db9ec823/bio-0.39.0/src/data_structures/bitenc.rs","byte_start":250662,"byte_end":250753,"line_start":43,"line_end":43,"column_start":1,"column_end":88}},{"value":"/ sequence and `k = 32 - (32 % width)`  is the number of bits in each","span":{"file_name":"/Users/shelwitz/.cargo/registry/src/github.com-1ecc6299db9ec823/bio-0.39.0/src/data_structures/bitenc.rs","byte_start":250754,"byte_end":250825,"line_start":44,"line_end":44,"column_start":1,"column_end":72}},{"value":"/ 32-bit block that can be used to store values.","span":{"file_name":"/Users/shelwitz/.cargo/registry/src/github.com-1ecc6299db9ec823/bio-0.39.0/src/data_structures/bitenc.rs","byte_start":250826,"byte_end":250876,"line_start":45,"line_end":45,"column_start":1,"column_end":51}},{"value":"/ For values that are not a divider of 32, some bits will remain unused.","span":{"file_name":"/Users/shelwitz/.cargo/registry/src/github.com-1ecc6299db9ec823/bio-0.39.0/src/data_structures/bitenc.rs","byte_start":250877,"byte_end":250951,"line_start":46,"line_end":46,"column_start":1,"column_end":75}},{"value":"/ For example for `width = 7` only `4 * 7 = 28` bits are used.","span":{"file_name":"/Users/shelwitz/.cargo/registry/src/github.com-1ecc6299db9ec823/bio-0.39.0/src/data_structures/bitenc.rs","byte_start":250952,"byte_end":251016,"line_start":47,"line_end":47,"column_start":1,"column_end":65}},{"value":"/ Five 7-bit values are stored in 2 blocks.","span":{"file_name":"/Users/shelwitz/.cargo/registry/src/github.com-1ecc6299db9ec823/bio-0.39.0/src/data_structures/bitenc.rs","byte_start":251017,"byte_end":251062,"line_start":48,"line_end":48,"column_start":1,"column_end":46}}]},{"kind":"Method","id":{"krate":0,"index":549},"span":{"file_name":"/Users/shelwitz/.cargo/registry/src/github.com-1ecc6299db9ec823/bio-0.39.0/src/data_structures/bitenc.rs","byte_start":251723,"byte_end":251726,"line_start":75,"line_end":75,"column_start":12,"column_end":15},"name":"new","qualname":"<BitEnc>::new","value":"pub fn new(usize) -> Self","parent":null,"children":[],"decl_id":null,"docs":" Create a new instance with a given encoding width (e.g. width=2 for using two bits per value).\n Supports widths up to 8 bits per character, i.e. `1 <= width <= 8`.","sig":null,"attributes":[{"value":"/ Create a new instance with a given encoding width (e.g. width=2 for using two bits per value).","span":{"file_name":"/Users/shelwitz/.cargo/registry/src/github.com-1ecc6299db9ec823/bio-0.39.0/src/data_structures/bitenc.rs","byte_start":251359,"byte_end":251457,"line_start":64,"line_end":64,"column_start":5,"column_end":103}},{"value":"/ Supports widths up to 8 bits per character, i.e. `1 <= width <= 8`.","span":{"file_name":"/Users/shelwitz/.cargo/registry/src/github.com-1ecc6299db9ec823/bio-0.39.0/src/data_structures/bitenc.rs","byte_start":251462,"byte_end":251533,"line_start":65,"line_end":65,"column_start":5,"column_end":76}},{"value":"/","span":{"file_name":"/Users/shelwitz/.cargo/registry/src/github.com-1ecc6299db9ec823/bio-0.39.0/src/data_structures/bitenc.rs","byte_start":251538,"byte_end":251541,"line_start":66,"line_end":66,"column_start":5,"column_end":8}},{"value":"/ Complexity: O(1)","span":{"file_name":"/Users/shelwitz/.cargo/registry/src/github.com-1ecc6299db9ec823/bio-0.39.0/src/data_structures/bitenc.rs","byte_start":251546,"byte_end":251566,"line_start":67,"line_end":67,"column_start":5,"column_end":25}},{"value":"/","span":{"file_name":"/Users/shelwitz/.cargo/registry/src/github.com-1ecc6299db9ec823/bio-0.39.0/src/data_structures/bitenc.rs","byte_start":251571,"byte_end":251574,"line_start":68,"line_end":68,"column_start":5,"column_end":8}},{"value":"/ # Example","span":{"file_name":"/Users/shelwitz/.cargo/registry/src/github.com-1ecc6299db9ec823/bio-0.39.0/src/data_structures/bitenc.rs","byte_start":251579,"byte_end":251592,"line_start":69,"line_end":69,"column_start":5,"column_end":18}},{"value":"/","span":{"file_name":"/Users/shelwitz/.cargo/registry/src/github.com-1ecc6299db9ec823/bio-0.39.0/src/data_structures/bitenc.rs","byte_start":251597,"byte_end":251600,"line_start":70,"line_end":70,"column_start":5,"column_end":8}},{"value":"/ ```","span":{"file_name":"/Users/shelwitz/.cargo/registry/src/github.com-1ecc6299db9ec823/bio-0.39.0/src/data_structures/bitenc.rs","byte_start":251605,"byte_end":251612,"line_start":71,"line_end":71,"column_start":5,"column_end":12}},{"value":"/ use bio::data_structures::bitenc::BitEnc;","span":{"file_name":"/Users/shelwitz/.cargo/registry/src/github.com-1ecc6299db9ec823/bio-0.39.0/src/data_structures/bitenc.rs","byte_start":251617,"byte_end":251662,"line_start":72,"line_end":72,"column_start":5,"column_end":50}},{"value":"/ let bitenc = BitEnc::new(3);","span":{"file_name":"/Users/shelwitz/.cargo/registry/src/github.com-1ecc6299db9ec823/bio-0.39.0/src/data_structures/bitenc.rs","byte_start":251667,"byte_end":251699,"line_start":73,"line_end":73,"column_start":5,"column_end":37}},{"value":"/ ```","span":{"file_name":"/Users/shelwitz/.cargo/registry/src/github.com-1ecc6299db9ec823/bio-0.39.0/src/data_structures/bitenc.rs","byte_start":251704,"byte_end":251711,"line_start":74,"line_end":74,"column_start":5,"column_end":12}}]},{"kind":"Method","id":{"krate":0,"index":550},"span":{"file_name":"/Users/shelwitz/.cargo/registry/src/github.com-1ecc6299db9ec823/bio-0.39.0/src/data_structures/bitenc.rs","byte_start":252422,"byte_end":252435,"line_start":99,"line_end":99,"column_start":12,"column_end":25},"name":"with_capacity","qualname":"<BitEnc>::with_capacity","value":"pub fn with_capacity(usize, usize) -> Self","parent":null,"children":[],"decl_id":null,"docs":" Create a new instance with a given capacity and encoding width\n (e.g. width=2 for using two bits per value).\n Supports widths up to 8 bits per character, i.e. `1 <= width <= 8`.","sig":null,"attributes":[{"value":"/ Create a new instance with a given capacity and encoding width","span":{"file_name":"/Users/shelwitz/.cargo/registry/src/github.com-1ecc6299db9ec823/bio-0.39.0/src/data_structures/bitenc.rs","byte_start":252015,"byte_end":252081,"line_start":86,"line_end":86,"column_start":5,"column_end":71}},{"value":"/ (e.g. width=2 for using two bits per value).","span":{"file_name":"/Users/shelwitz/.cargo/registry/src/github.com-1ecc6299db9ec823/bio-0.39.0/src/data_structures/bitenc.rs","byte_start":252086,"byte_end":252134,"line_start":87,"line_end":87,"column_start":5,"column_end":53}},{"value":"/ Supports widths up to 8 bits per character, i.e. `1 <= width <= 8`.","span":{"file_name":"/Users/shelwitz/.cargo/registry/src/github.com-1ecc6299db9ec823/bio-0.39.0/src/data_structures/bitenc.rs","byte_start":252139,"byte_end":252210,"line_start":88,"line_end":88,"column_start":5,"column_end":76}},{"value":"/","span":{"file_name":"/Users/shelwitz/.cargo/registry/src/github.com-1ecc6299db9ec823/bio-0.39.0/src/data_structures/bitenc.rs","byte_start":252215,"byte_end":252218,"line_start":89,"line_end":89,"column_start":5,"column_end":8}},{"value":"/ Complexity: O(1)","span":{"file_name":"/Users/shelwitz/.cargo/registry/src/github.com-1ecc6299db9ec823/bio-0.39.0/src/data_structures/bitenc.rs","byte_start":252223,"byte_end":252243,"line_start":90,"line_end":90,"column_start":5,"column_end":25}},{"value":"/","span":{"file_name":"/Users/shelwitz/.cargo/registry/src/github.com-1ecc6299db9ec823/bio-0.39.0/src/data_structures/bitenc.rs","byte_start":252248,"byte_end":252251,"line_start":91,"line_end":91,"column_start":5,"column_end":8}},{"value":"/ # Example","span":{"file_name":"/Users/shelwitz/.cargo/registry/src/github.com-1ecc6299db9ec823/bio-0.39.0/src/data_structures/bitenc.rs","byte_start":252256,"byte_end":252269,"line_start":92,"line_end":92,"column_start":5,"column_end":18}},{"value":"/","span":{"file_name":"/Users/shelwitz/.cargo/registry/src/github.com-1ecc6299db9ec823/bio-0.39.0/src/data_structures/bitenc.rs","byte_start":252274,"byte_end":252277,"line_start":93,"line_end":93,"column_start":5,"column_end":8}},{"value":"/ ```","span":{"file_name":"/Users/shelwitz/.cargo/registry/src/github.com-1ecc6299db9ec823/bio-0.39.0/src/data_structures/bitenc.rs","byte_start":252282,"byte_end":252289,"line_start":94,"line_end":94,"column_start":5,"column_end":12}},{"value":"/ use bio::data_structures::bitenc::BitEnc;","span":{"file_name":"/Users/shelwitz/.cargo/registry/src/github.com-1ecc6299db9ec823/bio-0.39.0/src/data_structures/bitenc.rs","byte_start":252294,"byte_end":252339,"line_start":95,"line_end":95,"column_start":5,"column_end":50}},{"value":"/","span":{"file_name":"/Users/shelwitz/.cargo/registry/src/github.com-1ecc6299db9ec823/bio-0.39.0/src/data_structures/bitenc.rs","byte_start":252344,"byte_end":252347,"line_start":96,"line_end":96,"column_start":5,"column_end":8}},{"value":"/ let bitenc = BitEnc::with_capacity(3, 42);","span":{"file_name":"/Users/shelwitz/.cargo/registry/src/github.com-1ecc6299db9ec823/bio-0.39.0/src/data_structures/bitenc.rs","byte_start":252352,"byte_end":252398,"line_start":97,"line_end":97,"column_start":5,"column_end":51}},{"value":"/ ```","span":{"file_name":"/Users/shelwitz/.cargo/registry/src/github.com-1ecc6299db9ec823/bio-0.39.0/src/data_structures/bitenc.rs","byte_start":252403,"byte_end":252410,"line_start":98,"line_end":98,"column_start":5,"column_end":12}}]},{"kind":"Method","id":{"krate":0,"index":551},"span":{"file_name":"/Users/shelwitz/.cargo/registry/src/github.com-1ecc6299db9ec823/bio-0.39.0/src/data_structures/bitenc.rs","byte_start":253283,"byte_end":253287,"line_start":127,"line_end":127,"column_start":12,"column_end":16},"name":"push","qualname":"<BitEnc>::push","value":"pub fn push(&mut Self, u8)","parent":null,"children":[],"decl_id":null,"docs":" Append a character to the current bit-encoding.","sig":null,"attributes":[{"value":"/ Append a character to the current bit-encoding.","span":{"file_name":"/Users/shelwitz/.cargo/registry/src/github.com-1ecc6299db9ec823/bio-0.39.0/src/data_structures/bitenc.rs","byte_start":252758,"byte_end":252809,"line_start":110,"line_end":110,"column_start":5,"column_end":56}},{"value":"/","span":{"file_name":"/Users/shelwitz/.cargo/registry/src/github.com-1ecc6299db9ec823/bio-0.39.0/src/data_structures/bitenc.rs","byte_start":252814,"byte_end":252817,"line_start":111,"line_end":111,"column_start":5,"column_end":8}},{"value":"/ Complexity: O(1)","span":{"file_name":"/Users/shelwitz/.cargo/registry/src/github.com-1ecc6299db9ec823/bio-0.39.0/src/data_structures/bitenc.rs","byte_start":252822,"byte_end":252842,"line_start":112,"line_end":112,"column_start":5,"column_end":25}},{"value":"/","span":{"file_name":"/Users/shelwitz/.cargo/registry/src/github.com-1ecc6299db9ec823/bio-0.39.0/src/data_structures/bitenc.rs","byte_start":252847,"byte_end":252850,"line_start":113,"line_end":113,"column_start":5,"column_end":8}},{"value":"/ # Example","span":{"file_name":"/Users/shelwitz/.cargo/registry/src/github.com-1ecc6299db9ec823/bio-0.39.0/src/data_structures/bitenc.rs","byte_start":252855,"byte_end":252868,"line_start":114,"line_end":114,"column_start":5,"column_end":18}},{"value":"/","span":{"file_name":"/Users/shelwitz/.cargo/registry/src/github.com-1ecc6299db9ec823/bio-0.39.0/src/data_structures/bitenc.rs","byte_start":252873,"byte_end":252876,"line_start":115,"line_end":115,"column_start":5,"column_end":8}},{"value":"/ ```","span":{"file_name":"/Users/shelwitz/.cargo/registry/src/github.com-1ecc6299db9ec823/bio-0.39.0/src/data_structures/bitenc.rs","byte_start":252881,"byte_end":252888,"line_start":116,"line_end":116,"column_start":5,"column_end":12}},{"value":"/ use bio::data_structures::bitenc::BitEnc;","span":{"file_name":"/Users/shelwitz/.cargo/registry/src/github.com-1ecc6299db9ec823/bio-0.39.0/src/data_structures/bitenc.rs","byte_start":252893,"byte_end":252938,"line_start":117,"line_end":117,"column_start":5,"column_end":50}},{"value":"/","span":{"file_name":"/Users/shelwitz/.cargo/registry/src/github.com-1ecc6299db9ec823/bio-0.39.0/src/data_structures/bitenc.rs","byte_start":252943,"byte_end":252946,"line_start":118,"line_end":118,"column_start":5,"column_end":8}},{"value":"/ let mut bitenc = BitEnc::new(4);","span":{"file_name":"/Users/shelwitz/.cargo/registry/src/github.com-1ecc6299db9ec823/bio-0.39.0/src/data_structures/bitenc.rs","byte_start":252951,"byte_end":252987,"line_start":119,"line_end":119,"column_start":5,"column_end":41}},{"value":"/ bitenc.push(0b0000);","span":{"file_name":"/Users/shelwitz/.cargo/registry/src/github.com-1ecc6299db9ec823/bio-0.39.0/src/data_structures/bitenc.rs","byte_start":252992,"byte_end":253016,"line_start":120,"line_end":120,"column_start":5,"column_end":29}},{"value":"/ bitenc.push(0b1000);","span":{"file_name":"/Users/shelwitz/.cargo/registry/src/github.com-1ecc6299db9ec823/bio-0.39.0/src/data_structures/bitenc.rs","byte_start":253021,"byte_end":253045,"line_start":121,"line_end":121,"column_start":5,"column_end":29}},{"value":"/ bitenc.push(0b1010);","span":{"file_name":"/Users/shelwitz/.cargo/registry/src/github.com-1ecc6299db9ec823/bio-0.39.0/src/data_structures/bitenc.rs","byte_start":253050,"byte_end":253074,"line_start":122,"line_end":122,"column_start":5,"column_end":29}},{"value":"/ // The three characters added above are encoded into one u32 entry.","span":{"file_name":"/Users/shelwitz/.cargo/registry/src/github.com-1ecc6299db9ec823/bio-0.39.0/src/data_structures/bitenc.rs","byte_start":253079,"byte_end":253150,"line_start":123,"line_end":123,"column_start":5,"column_end":76}},{"value":"/ let values: Vec<u8> = bitenc.iter().collect();","span":{"file_name":"/Users/shelwitz/.cargo/registry/src/github.com-1ecc6299db9ec823/bio-0.39.0/src/data_structures/bitenc.rs","byte_start":253155,"byte_end":253205,"line_start":124,"line_end":124,"column_start":5,"column_end":55}},{"value":"/ assert_eq!(values, [0b0000, 0b1000, 0b1010]);","span":{"file_name":"/Users/shelwitz/.cargo/registry/src/github.com-1ecc6299db9ec823/bio-0.39.0/src/data_structures/bitenc.rs","byte_start":253210,"byte_end":253259,"line_start":125,"line_end":125,"column_start":5,"column_end":54}},{"value":"/ ```","span":{"file_name":"/Users/shelwitz/.cargo/registry/src/github.com-1ecc6299db9ec823/bio-0.39.0/src/data_structures/bitenc.rs","byte_start":253264,"byte_end":253271,"line_start":126,"line_end":126,"column_start":5,"column_end":12}}]},{"kind":"Method","id":{"krate":0,"index":552},"span":{"file_name":"/Users/shelwitz/.cargo/registry/src/github.com-1ecc6299db9ec823/bio-0.39.0/src/data_structures/bitenc.rs","byte_start":254944,"byte_end":254955,"line_start":175,"line_end":175,"column_start":12,"column_end":23},"name":"push_values","qualname":"<BitEnc>::push_values","value":"pub fn push_values(&mut Self, usize, u8)","parent":null,"children":[],"decl_id":null,"docs":" Append the given `value` to the encoding `n` times.","sig":null,"attributes":[{"value":"/ Append the given `value` to the encoding `n` times.","span":{"file_name":"/Users/shelwitz/.cargo/registry/src/github.com-1ecc6299db9ec823/bio-0.39.0/src/data_structures/bitenc.rs","byte_start":253505,"byte_end":253560,"line_start":136,"line_end":136,"column_start":5,"column_end":60}},{"value":"/","span":{"file_name":"/Users/shelwitz/.cargo/registry/src/github.com-1ecc6299db9ec823/bio-0.39.0/src/data_structures/bitenc.rs","byte_start":253565,"byte_end":253568,"line_start":137,"line_end":137,"column_start":5,"column_end":8}},{"value":"/ The added values comprise 0 to 1 blocks that need to be filled up","span":{"file_name":"/Users/shelwitz/.cargo/registry/src/github.com-1ecc6299db9ec823/bio-0.39.0/src/data_structures/bitenc.rs","byte_start":253573,"byte_end":253642,"line_start":138,"line_end":138,"column_start":5,"column_end":74}},{"value":"/ from previous steps, 0 to m blocks that are","span":{"file_name":"/Users/shelwitz/.cargo/registry/src/github.com-1ecc6299db9ec823/bio-0.39.0/src/data_structures/bitenc.rs","byte_start":253647,"byte_end":253694,"line_start":139,"line_end":139,"column_start":5,"column_end":52}},{"value":"/ completely filled with the value and 0 to 1 blocks","span":{"file_name":"/Users/shelwitz/.cargo/registry/src/github.com-1ecc6299db9ec823/bio-0.39.0/src/data_structures/bitenc.rs","byte_start":253699,"byte_end":253753,"line_start":140,"line_end":140,"column_start":5,"column_end":59}},{"value":"/ that are only partially filled.","span":{"file_name":"/Users/shelwitz/.cargo/registry/src/github.com-1ecc6299db9ec823/bio-0.39.0/src/data_structures/bitenc.rs","byte_start":253758,"byte_end":253793,"line_start":141,"line_end":141,"column_start":5,"column_end":40}},{"value":"/","span":{"file_name":"/Users/shelwitz/.cargo/registry/src/github.com-1ecc6299db9ec823/bio-0.39.0/src/data_structures/bitenc.rs","byte_start":253798,"byte_end":253801,"line_start":142,"line_end":142,"column_start":5,"column_end":8}},{"value":"/ Complexity: O(n)","span":{"file_name":"/Users/shelwitz/.cargo/registry/src/github.com-1ecc6299db9ec823/bio-0.39.0/src/data_structures/bitenc.rs","byte_start":253806,"byte_end":253826,"line_start":143,"line_end":143,"column_start":5,"column_end":25}},{"value":"/","span":{"file_name":"/Users/shelwitz/.cargo/registry/src/github.com-1ecc6299db9ec823/bio-0.39.0/src/data_structures/bitenc.rs","byte_start":253831,"byte_end":253834,"line_start":144,"line_end":144,"column_start":5,"column_end":8}},{"value":"/ # Example","span":{"file_name":"/Users/shelwitz/.cargo/registry/src/github.com-1ecc6299db9ec823/bio-0.39.0/src/data_structures/bitenc.rs","byte_start":253839,"byte_end":253852,"line_start":145,"line_end":145,"column_start":5,"column_end":18}},{"value":"/","span":{"file_name":"/Users/shelwitz/.cargo/registry/src/github.com-1ecc6299db9ec823/bio-0.39.0/src/data_structures/bitenc.rs","byte_start":253857,"byte_end":253860,"line_start":146,"line_end":146,"column_start":5,"column_end":8}},{"value":"/ ```","span":{"file_name":"/Users/shelwitz/.cargo/registry/src/github.com-1ecc6299db9ec823/bio-0.39.0/src/data_structures/bitenc.rs","byte_start":253865,"byte_end":253872,"line_start":147,"line_end":147,"column_start":5,"column_end":12}},{"value":"/ use bio::data_structures::bitenc::BitEnc;","span":{"file_name":"/Users/shelwitz/.cargo/registry/src/github.com-1ecc6299db9ec823/bio-0.39.0/src/data_structures/bitenc.rs","byte_start":253877,"byte_end":253922,"line_start":148,"line_end":148,"column_start":5,"column_end":50}},{"value":"/","span":{"file_name":"/Users/shelwitz/.cargo/registry/src/github.com-1ecc6299db9ec823/bio-0.39.0/src/data_structures/bitenc.rs","byte_start":253927,"byte_end":253930,"line_start":149,"line_end":149,"column_start":5,"column_end":8}},{"value":"/ let mut bitenc = BitEnc::new(8);","span":{"file_name":"/Users/shelwitz/.cargo/registry/src/github.com-1ecc6299db9ec823/bio-0.39.0/src/data_structures/bitenc.rs","byte_start":253935,"byte_end":253971,"line_start":150,"line_end":150,"column_start":5,"column_end":41}},{"value":"/ // Width: 8 → 4 values per block","span":{"file_name":"/Users/shelwitz/.cargo/registry/src/github.com-1ecc6299db9ec823/bio-0.39.0/src/data_structures/bitenc.rs","byte_start":253976,"byte_end":254014,"line_start":151,"line_end":151,"column_start":5,"column_end":41}},{"value":"/ // | __ __ __ __ | Denotes one block with 4 empty slots","span":{"file_name":"/Users/shelwitz/.cargo/registry/src/github.com-1ecc6299db9ec823/bio-0.39.0/src/data_structures/bitenc.rs","byte_start":254019,"byte_end":254078,"line_start":152,"line_end":152,"column_start":5,"column_end":64}},{"value":"/","span":{"file_name":"/Users/shelwitz/.cargo/registry/src/github.com-1ecc6299db9ec823/bio-0.39.0/src/data_structures/bitenc.rs","byte_start":254083,"byte_end":254086,"line_start":153,"line_end":153,"column_start":5,"column_end":8}},{"value":"/ bitenc.push_values(5, 0b101010);","span":{"file_name":"/Users/shelwitz/.cargo/registry/src/github.com-1ecc6299db9ec823/bio-0.39.0/src/data_structures/bitenc.rs","byte_start":254091,"byte_end":254127,"line_start":154,"line_end":154,"column_start":5,"column_end":41}},{"value":"/ // This adds one full and one partial block.","span":{"file_name":"/Users/shelwitz/.cargo/registry/src/github.com-1ecc6299db9ec823/bio-0.39.0/src/data_structures/bitenc.rs","byte_start":254132,"byte_end":254180,"line_start":155,"line_end":155,"column_start":5,"column_end":53}},{"value":"/ // | 42 42 42 42 | __ __ __ 42 |","span":{"file_name":"/Users/shelwitz/.cargo/registry/src/github.com-1ecc6299db9ec823/bio-0.39.0/src/data_structures/bitenc.rs","byte_start":254185,"byte_end":254221,"line_start":156,"line_end":156,"column_start":5,"column_end":41}},{"value":"/","span":{"file_name":"/Users/shelwitz/.cargo/registry/src/github.com-1ecc6299db9ec823/bio-0.39.0/src/data_structures/bitenc.rs","byte_start":254226,"byte_end":254229,"line_start":157,"line_end":157,"column_start":5,"column_end":8}},{"value":"/ let values: Vec<u8> = bitenc.iter().collect();","span":{"file_name":"/Users/shelwitz/.cargo/registry/src/github.com-1ecc6299db9ec823/bio-0.39.0/src/data_structures/bitenc.rs","byte_start":254234,"byte_end":254284,"line_start":158,"line_end":158,"column_start":5,"column_end":55}},{"value":"/ assert_eq!(values, [42, 42, 42, 42, 42]);","span":{"file_name":"/Users/shelwitz/.cargo/registry/src/github.com-1ecc6299db9ec823/bio-0.39.0/src/data_structures/bitenc.rs","byte_start":254289,"byte_end":254334,"line_start":159,"line_end":159,"column_start":5,"column_end":50}},{"value":"/","span":{"file_name":"/Users/shelwitz/.cargo/registry/src/github.com-1ecc6299db9ec823/bio-0.39.0/src/data_structures/bitenc.rs","byte_start":254339,"byte_end":254342,"line_start":160,"line_end":160,"column_start":5,"column_end":8}},{"value":"/ bitenc.push_values(1, 23);","span":{"file_name":"/Users/shelwitz/.cargo/registry/src/github.com-1ecc6299db9ec823/bio-0.39.0/src/data_structures/bitenc.rs","byte_start":254347,"byte_end":254377,"line_start":161,"line_end":161,"column_start":5,"column_end":35}},{"value":"/ // This only fills up an existing block;","span":{"file_name":"/Users/shelwitz/.cargo/registry/src/github.com-1ecc6299db9ec823/bio-0.39.0/src/data_structures/bitenc.rs","byte_start":254382,"byte_end":254426,"line_start":162,"line_end":162,"column_start":5,"column_end":49}},{"value":"/ // | 42 42 42 42 | __ __ 23 42 |","span":{"file_name":"/Users/shelwitz/.cargo/registry/src/github.com-1ecc6299db9ec823/bio-0.39.0/src/data_structures/bitenc.rs","byte_start":254431,"byte_end":254467,"line_start":163,"line_end":163,"column_start":5,"column_end":41}},{"value":"/","span":{"file_name":"/Users/shelwitz/.cargo/registry/src/github.com-1ecc6299db9ec823/bio-0.39.0/src/data_structures/bitenc.rs","byte_start":254472,"byte_end":254475,"line_start":164,"line_end":164,"column_start":5,"column_end":8}},{"value":"/ let values: Vec<u8> = bitenc.iter().collect();","span":{"file_name":"/Users/shelwitz/.cargo/registry/src/github.com-1ecc6299db9ec823/bio-0.39.0/src/data_structures/bitenc.rs","byte_start":254480,"byte_end":254530,"line_start":165,"line_end":165,"column_start":5,"column_end":55}},{"value":"/ assert_eq!(values, [42, 42, 42, 42, 42, 23]);","span":{"file_name":"/Users/shelwitz/.cargo/registry/src/github.com-1ecc6299db9ec823/bio-0.39.0/src/data_structures/bitenc.rs","byte_start":254535,"byte_end":254584,"line_start":166,"line_end":166,"column_start":5,"column_end":54}},{"value":"/","span":{"file_name":"/Users/shelwitz/.cargo/registry/src/github.com-1ecc6299db9ec823/bio-0.39.0/src/data_structures/bitenc.rs","byte_start":254589,"byte_end":254592,"line_start":167,"line_end":167,"column_start":5,"column_end":8}},{"value":"/ bitenc.push_values(6, 17);","span":{"file_name":"/Users/shelwitz/.cargo/registry/src/github.com-1ecc6299db9ec823/bio-0.39.0/src/data_structures/bitenc.rs","byte_start":254597,"byte_end":254627,"line_start":168,"line_end":168,"column_start":5,"column_end":35}},{"value":"/ // Fills up the current block, adds a whole new one but does not create a partial block.","span":{"file_name":"/Users/shelwitz/.cargo/registry/src/github.com-1ecc6299db9ec823/bio-0.39.0/src/data_structures/bitenc.rs","byte_start":254632,"byte_end":254724,"line_start":169,"line_end":169,"column_start":5,"column_end":97}},{"value":"/ // | 42 42 42 42 | 17 17 23 42 | 17 17 17 17 |","span":{"file_name":"/Users/shelwitz/.cargo/registry/src/github.com-1ecc6299db9ec823/bio-0.39.0/src/data_structures/bitenc.rs","byte_start":254729,"byte_end":254779,"line_start":170,"line_end":170,"column_start":5,"column_end":55}},{"value":"/","span":{"file_name":"/Users/shelwitz/.cargo/registry/src/github.com-1ecc6299db9ec823/bio-0.39.0/src/data_structures/bitenc.rs","byte_start":254784,"byte_end":254787,"line_start":171,"line_end":171,"column_start":5,"column_end":8}},{"value":"/ let values: Vec<u8> = bitenc.iter().collect();","span":{"file_name":"/Users/shelwitz/.cargo/registry/src/github.com-1ecc6299db9ec823/bio-0.39.0/src/data_structures/bitenc.rs","byte_start":254792,"byte_end":254842,"line_start":172,"line_end":172,"column_start":5,"column_end":55}},{"value":"/ assert_eq!(values, [42, 42, 42, 42, 42, 23, 17, 17, 17, 17, 17, 17]);","span":{"file_name":"/Users/shelwitz/.cargo/registry/src/github.com-1ecc6299db9ec823/bio-0.39.0/src/data_structures/bitenc.rs","byte_start":254847,"byte_end":254920,"line_start":173,"line_end":173,"column_start":5,"column_end":78}},{"value":"/ ```","span":{"file_name":"/Users/shelwitz/.cargo/registry/src/github.com-1ecc6299db9ec823/bio-0.39.0/src/data_structures/bitenc.rs","byte_start":254925,"byte_end":254932,"line_start":174,"line_end":174,"column_start":5,"column_end":12}}]},{"kind":"Method","id":{"krate":0,"index":553},"span":{"file_name":"/Users/shelwitz/.cargo/registry/src/github.com-1ecc6299db9ec823/bio-0.39.0/src/data_structures/bitenc.rs","byte_start":257557,"byte_end":257560,"line_start":246,"line_end":246,"column_start":12,"column_end":15},"name":"set","qualname":"<BitEnc>::set","value":"pub fn set(&mut Self, usize, u8)","parent":null,"children":[],"decl_id":null,"docs":" Replace the current value as position `i` with the given value.","sig":null,"attributes":[{"value":"/ Replace the current value as position `i` with the given value.","span":{"file_name":"/Users/shelwitz/.cargo/registry/src/github.com-1ecc6299db9ec823/bio-0.39.0/src/data_structures/bitenc.rs","byte_start":257119,"byte_end":257186,"line_start":232,"line_end":232,"column_start":5,"column_end":72}},{"value":"/","span":{"file_name":"/Users/shelwitz/.cargo/registry/src/github.com-1ecc6299db9ec823/bio-0.39.0/src/data_structures/bitenc.rs","byte_start":257191,"byte_end":257194,"line_start":233,"line_end":233,"column_start":5,"column_end":8}},{"value":"/ Complexity: O(1)","span":{"file_name":"/Users/shelwitz/.cargo/registry/src/github.com-1ecc6299db9ec823/bio-0.39.0/src/data_structures/bitenc.rs","byte_start":257199,"byte_end":257219,"line_start":234,"line_end":234,"column_start":5,"column_end":25}},{"value":"/","span":{"file_name":"/Users/shelwitz/.cargo/registry/src/github.com-1ecc6299db9ec823/bio-0.39.0/src/data_structures/bitenc.rs","byte_start":257224,"byte_end":257227,"line_start":235,"line_end":235,"column_start":5,"column_end":8}},{"value":"/ ```","span":{"file_name":"/Users/shelwitz/.cargo/registry/src/github.com-1ecc6299db9ec823/bio-0.39.0/src/data_structures/bitenc.rs","byte_start":257232,"byte_end":257239,"line_start":236,"line_end":236,"column_start":5,"column_end":12}},{"value":"/ use bio::data_structures::bitenc::BitEnc;","span":{"file_name":"/Users/shelwitz/.cargo/registry/src/github.com-1ecc6299db9ec823/bio-0.39.0/src/data_structures/bitenc.rs","byte_start":257244,"byte_end":257289,"line_start":237,"line_end":237,"column_start":5,"column_end":50}},{"value":"/","span":{"file_name":"/Users/shelwitz/.cargo/registry/src/github.com-1ecc6299db9ec823/bio-0.39.0/src/data_structures/bitenc.rs","byte_start":257294,"byte_end":257297,"line_start":238,"line_end":238,"column_start":5,"column_end":8}},{"value":"/ let mut bitenc = BitEnc::new(4);","span":{"file_name":"/Users/shelwitz/.cargo/registry/src/github.com-1ecc6299db9ec823/bio-0.39.0/src/data_structures/bitenc.rs","byte_start":257302,"byte_end":257338,"line_start":239,"line_end":239,"column_start":5,"column_end":41}},{"value":"/ bitenc.push_values(4, 0b1111);","span":{"file_name":"/Users/shelwitz/.cargo/registry/src/github.com-1ecc6299db9ec823/bio-0.39.0/src/data_structures/bitenc.rs","byte_start":257343,"byte_end":257377,"line_start":240,"line_end":240,"column_start":5,"column_end":39}},{"value":"/ bitenc.set(2, 0b0000);","span":{"file_name":"/Users/shelwitz/.cargo/registry/src/github.com-1ecc6299db9ec823/bio-0.39.0/src/data_structures/bitenc.rs","byte_start":257382,"byte_end":257408,"line_start":241,"line_end":241,"column_start":5,"column_end":31}},{"value":"/","span":{"file_name":"/Users/shelwitz/.cargo/registry/src/github.com-1ecc6299db9ec823/bio-0.39.0/src/data_structures/bitenc.rs","byte_start":257413,"byte_end":257416,"line_start":242,"line_end":242,"column_start":5,"column_end":8}},{"value":"/ let values: Vec<u8> = bitenc.iter().collect();","span":{"file_name":"/Users/shelwitz/.cargo/registry/src/github.com-1ecc6299db9ec823/bio-0.39.0/src/data_structures/bitenc.rs","byte_start":257421,"byte_end":257471,"line_start":243,"line_end":243,"column_start":5,"column_end":55}},{"value":"/ assert_eq!(values, [0b1111, 0b1111, 0b0000, 0b1111]);","span":{"file_name":"/Users/shelwitz/.cargo/registry/src/github.com-1ecc6299db9ec823/bio-0.39.0/src/data_structures/bitenc.rs","byte_start":257476,"byte_end":257533,"line_start":244,"line_end":244,"column_start":5,"column_end":62}},{"value":"/ ```","span":{"file_name":"/Users/shelwitz/.cargo/registry/src/github.com-1ecc6299db9ec823/bio-0.39.0/src/data_structures/bitenc.rs","byte_start":257538,"byte_end":257545,"line_start":245,"line_end":245,"column_start":5,"column_end":12}}]},{"kind":"Method","id":{"krate":0,"index":554},"span":{"file_name":"/Users/shelwitz/.cargo/registry/src/github.com-1ecc6299db9ec823/bio-0.39.0/src/data_structures/bitenc.rs","byte_start":258098,"byte_end":258101,"line_start":266,"line_end":266,"column_start":12,"column_end":15},"name":"get","qualname":"<BitEnc>::get","value":"pub fn get(&Self, usize) -> Option<u8>","parent":null,"children":[],"decl_id":null,"docs":" Get the value at position `i`.","sig":null,"attributes":[{"value":"/ Get the value at position `i`.","span":{"file_name":"/Users/shelwitz/.cargo/registry/src/github.com-1ecc6299db9ec823/bio-0.39.0/src/data_structures/bitenc.rs","byte_start":257692,"byte_end":257726,"line_start":251,"line_end":251,"column_start":5,"column_end":39}},{"value":"/","span":{"file_name":"/Users/shelwitz/.cargo/registry/src/github.com-1ecc6299db9ec823/bio-0.39.0/src/data_structures/bitenc.rs","byte_start":257731,"byte_end":257734,"line_start":252,"line_end":252,"column_start":5,"column_end":8}},{"value":"/ Complexity: O(1)","span":{"file_name":"/Users/shelwitz/.cargo/registry/src/github.com-1ecc6299db9ec823/bio-0.39.0/src/data_structures/bitenc.rs","byte_start":257739,"byte_end":257759,"line_start":253,"line_end":253,"column_start":5,"column_end":25}},{"value":"/","span":{"file_name":"/Users/shelwitz/.cargo/registry/src/github.com-1ecc6299db9ec823/bio-0.39.0/src/data_structures/bitenc.rs","byte_start":257764,"byte_end":257767,"line_start":254,"line_end":254,"column_start":5,"column_end":8}},{"value":"/ ```","span":{"file_name":"/Users/shelwitz/.cargo/registry/src/github.com-1ecc6299db9ec823/bio-0.39.0/src/data_structures/bitenc.rs","byte_start":257772,"byte_end":257779,"line_start":255,"line_end":255,"column_start":5,"column_end":12}},{"value":"/ use bio::data_structures::bitenc::BitEnc;","span":{"file_name":"/Users/shelwitz/.cargo/registry/src/github.com-1ecc6299db9ec823/bio-0.39.0/src/data_structures/bitenc.rs","byte_start":257784,"byte_end":257829,"line_start":256,"line_end":256,"column_start":5,"column_end":50}},{"value":"/","span":{"file_name":"/Users/shelwitz/.cargo/registry/src/github.com-1ecc6299db9ec823/bio-0.39.0/src/data_structures/bitenc.rs","byte_start":257834,"byte_end":257837,"line_start":257,"line_end":257,"column_start":5,"column_end":8}},{"value":"/ let mut bitenc = BitEnc::new(4);","span":{"file_name":"/Users/shelwitz/.cargo/registry/src/github.com-1ecc6299db9ec823/bio-0.39.0/src/data_structures/bitenc.rs","byte_start":257842,"byte_end":257878,"line_start":258,"line_end":258,"column_start":5,"column_end":41}},{"value":"/ for value in 1..=4 {","span":{"file_name":"/Users/shelwitz/.cargo/registry/src/github.com-1ecc6299db9ec823/bio-0.39.0/src/data_structures/bitenc.rs","byte_start":257883,"byte_end":257907,"line_start":259,"line_end":259,"column_start":5,"column_end":29}},{"value":"/     bitenc.push(value);","span":{"file_name":"/Users/shelwitz/.cargo/registry/src/github.com-1ecc6299db9ec823/bio-0.39.0/src/data_structures/bitenc.rs","byte_start":257912,"byte_end":257939,"line_start":260,"line_end":260,"column_start":5,"column_end":32}},{"value":"/ }","span":{"file_name":"/Users/shelwitz/.cargo/registry/src/github.com-1ecc6299db9ec823/bio-0.39.0/src/data_structures/bitenc.rs","byte_start":257944,"byte_end":257949,"line_start":261,"line_end":261,"column_start":5,"column_end":10}},{"value":"/","span":{"file_name":"/Users/shelwitz/.cargo/registry/src/github.com-1ecc6299db9ec823/bio-0.39.0/src/data_structures/bitenc.rs","byte_start":257954,"byte_end":257957,"line_start":262,"line_end":262,"column_start":5,"column_end":8}},{"value":"/ let values: Vec<u8> = bitenc.iter().collect();","span":{"file_name":"/Users/shelwitz/.cargo/registry/src/github.com-1ecc6299db9ec823/bio-0.39.0/src/data_structures/bitenc.rs","byte_start":257962,"byte_end":258012,"line_start":263,"line_end":263,"column_start":5,"column_end":55}},{"value":"/ assert_eq!(values, [0b0001, 0b0010, 0b0011, 0b0100]);","span":{"file_name":"/Users/shelwitz/.cargo/registry/src/github.com-1ecc6299db9ec823/bio-0.39.0/src/data_structures/bitenc.rs","byte_start":258017,"byte_end":258074,"line_start":264,"line_end":264,"column_start":5,"column_end":62}},{"value":"/ ```","span":{"file_name":"/Users/shelwitz/.cargo/registry/src/github.com-1ecc6299db9ec823/bio-0.39.0/src/data_structures/bitenc.rs","byte_start":258079,"byte_end":258086,"line_start":265,"line_end":265,"column_start":5,"column_end":12}}]},{"kind":"Method","id":{"krate":0,"index":555},"span":{"file_name":"/Users/shelwitz/.cargo/registry/src/github.com-1ecc6299db9ec823/bio-0.39.0/src/data_structures/bitenc.rs","byte_start":258903,"byte_end":258907,"line_start":294,"line_end":294,"column_start":12,"column_end":16},"name":"iter","qualname":"<BitEnc>::iter","value":"pub fn iter(&Self) -> BitEncIter","parent":null,"children":[],"decl_id":null,"docs":" Iterate over stored values (values will be unpacked into bytes).","sig":null,"attributes":[{"value":"/ Iterate over stored values (values will be unpacked into bytes).","span":{"file_name":"/Users/shelwitz/.cargo/registry/src/github.com-1ecc6299db9ec823/bio-0.39.0/src/data_structures/bitenc.rs","byte_start":258309,"byte_end":258377,"line_start":275,"line_end":275,"column_start":5,"column_end":73}},{"value":"/","span":{"file_name":"/Users/shelwitz/.cargo/registry/src/github.com-1ecc6299db9ec823/bio-0.39.0/src/data_structures/bitenc.rs","byte_start":258382,"byte_end":258385,"line_start":276,"line_end":276,"column_start":5,"column_end":8}},{"value":"/ Complexity: O(n), where n is the number of encoded values","span":{"file_name":"/Users/shelwitz/.cargo/registry/src/github.com-1ecc6299db9ec823/bio-0.39.0/src/data_structures/bitenc.rs","byte_start":258390,"byte_end":258451,"line_start":277,"line_end":277,"column_start":5,"column_end":66}},{"value":"/","span":{"file_name":"/Users/shelwitz/.cargo/registry/src/github.com-1ecc6299db9ec823/bio-0.39.0/src/data_structures/bitenc.rs","byte_start":258456,"byte_end":258459,"line_start":278,"line_end":278,"column_start":5,"column_end":8}},{"value":"/ # Example","span":{"file_name":"/Users/shelwitz/.cargo/registry/src/github.com-1ecc6299db9ec823/bio-0.39.0/src/data_structures/bitenc.rs","byte_start":258464,"byte_end":258477,"line_start":279,"line_end":279,"column_start":5,"column_end":18}},{"value":"/","span":{"file_name":"/Users/shelwitz/.cargo/registry/src/github.com-1ecc6299db9ec823/bio-0.39.0/src/data_structures/bitenc.rs","byte_start":258482,"byte_end":258485,"line_start":280,"line_end":280,"column_start":5,"column_end":8}},{"value":"/ ```","span":{"file_name":"/Users/shelwitz/.cargo/registry/src/github.com-1ecc6299db9ec823/bio-0.39.0/src/data_structures/bitenc.rs","byte_start":258490,"byte_end":258497,"line_start":281,"line_end":281,"column_start":5,"column_end":12}},{"value":"/ use bio::data_structures::bitenc::BitEnc;","span":{"file_name":"/Users/shelwitz/.cargo/registry/src/github.com-1ecc6299db9ec823/bio-0.39.0/src/data_structures/bitenc.rs","byte_start":258502,"byte_end":258547,"line_start":282,"line_end":282,"column_start":5,"column_end":50}},{"value":"/","span":{"file_name":"/Users/shelwitz/.cargo/registry/src/github.com-1ecc6299db9ec823/bio-0.39.0/src/data_structures/bitenc.rs","byte_start":258552,"byte_end":258555,"line_start":283,"line_end":283,"column_start":5,"column_end":8}},{"value":"/ // Fill bitenc with 1, 2, 3, and 4.","span":{"file_name":"/Users/shelwitz/.cargo/registry/src/github.com-1ecc6299db9ec823/bio-0.39.0/src/data_structures/bitenc.rs","byte_start":258560,"byte_end":258599,"line_start":284,"line_end":284,"column_start":5,"column_end":44}},{"value":"/ let mut bitenc = BitEnc::new(4);","span":{"file_name":"/Users/shelwitz/.cargo/registry/src/github.com-1ecc6299db9ec823/bio-0.39.0/src/data_structures/bitenc.rs","byte_start":258604,"byte_end":258640,"line_start":285,"line_end":285,"column_start":5,"column_end":41}},{"value":"/ for value in 1..=4 {","span":{"file_name":"/Users/shelwitz/.cargo/registry/src/github.com-1ecc6299db9ec823/bio-0.39.0/src/data_structures/bitenc.rs","byte_start":258645,"byte_end":258669,"line_start":286,"line_end":286,"column_start":5,"column_end":29}},{"value":"/     bitenc.push(value);","span":{"file_name":"/Users/shelwitz/.cargo/registry/src/github.com-1ecc6299db9ec823/bio-0.39.0/src/data_structures/bitenc.rs","byte_start":258674,"byte_end":258701,"line_start":287,"line_end":287,"column_start":5,"column_end":32}},{"value":"/ }","span":{"file_name":"/Users/shelwitz/.cargo/registry/src/github.com-1ecc6299db9ec823/bio-0.39.0/src/data_structures/bitenc.rs","byte_start":258706,"byte_end":258711,"line_start":288,"line_end":288,"column_start":5,"column_end":10}},{"value":"/","span":{"file_name":"/Users/shelwitz/.cargo/registry/src/github.com-1ecc6299db9ec823/bio-0.39.0/src/data_structures/bitenc.rs","byte_start":258716,"byte_end":258719,"line_start":289,"line_end":289,"column_start":5,"column_end":8}},{"value":"/ // Collect iterator for comparison","span":{"file_name":"/Users/shelwitz/.cargo/registry/src/github.com-1ecc6299db9ec823/bio-0.39.0/src/data_structures/bitenc.rs","byte_start":258724,"byte_end":258762,"line_start":290,"line_end":290,"column_start":5,"column_end":43}},{"value":"/ let values: Vec<u8> = bitenc.iter().collect();","span":{"file_name":"/Users/shelwitz/.cargo/registry/src/github.com-1ecc6299db9ec823/bio-0.39.0/src/data_structures/bitenc.rs","byte_start":258767,"byte_end":258817,"line_start":291,"line_end":291,"column_start":5,"column_end":55}},{"value":"/ assert_eq!(values, [0b0001, 0b0010, 0b0011, 0b0100]);","span":{"file_name":"/Users/shelwitz/.cargo/registry/src/github.com-1ecc6299db9ec823/bio-0.39.0/src/data_structures/bitenc.rs","byte_start":258822,"byte_end":258879,"line_start":292,"line_end":292,"column_start":5,"column_end":62}},{"value":"/ ```","span":{"file_name":"/Users/shelwitz/.cargo/registry/src/github.com-1ecc6299db9ec823/bio-0.39.0/src/data_structures/bitenc.rs","byte_start":258884,"byte_end":258891,"line_start":293,"line_end":293,"column_start":5,"column_end":12}}]},{"kind":"Method","id":{"krate":0,"index":556},"span":{"file_name":"/Users/shelwitz/.cargo/registry/src/github.com-1ecc6299db9ec823/bio-0.39.0/src/data_structures/bitenc.rs","byte_start":259335,"byte_end":259340,"line_start":313,"line_end":313,"column_start":12,"column_end":17},"name":"clear","qualname":"<BitEnc>::clear","value":"pub fn clear(&mut Self)","parent":null,"children":[],"decl_id":null,"docs":" Clear the sequence.","sig":null,"attributes":[{"value":"/ Clear the sequence.","span":{"file_name":"/Users/shelwitz/.cargo/registry/src/github.com-1ecc6299db9ec823/bio-0.39.0/src/data_structures/bitenc.rs","byte_start":258988,"byte_end":259011,"line_start":298,"line_end":298,"column_start":5,"column_end":28}},{"value":"/","span":{"file_name":"/Users/shelwitz/.cargo/registry/src/github.com-1ecc6299db9ec823/bio-0.39.0/src/data_structures/bitenc.rs","byte_start":259016,"byte_end":259019,"line_start":299,"line_end":299,"column_start":5,"column_end":8}},{"value":"/ Complexity: O(1)","span":{"file_name":"/Users/shelwitz/.cargo/registry/src/github.com-1ecc6299db9ec823/bio-0.39.0/src/data_structures/bitenc.rs","byte_start":259024,"byte_end":259044,"line_start":300,"line_end":300,"column_start":5,"column_end":25}},{"value":"/","span":{"file_name":"/Users/shelwitz/.cargo/registry/src/github.com-1ecc6299db9ec823/bio-0.39.0/src/data_structures/bitenc.rs","byte_start":259049,"byte_end":259052,"line_start":301,"line_end":301,"column_start":5,"column_end":8}},{"value":"/ # Example","span":{"file_name":"/Users/shelwitz/.cargo/registry/src/github.com-1ecc6299db9ec823/bio-0.39.0/src/data_structures/bitenc.rs","byte_start":259057,"byte_end":259070,"line_start":302,"line_end":302,"column_start":5,"column_end":18}},{"value":"/","span":{"file_name":"/Users/shelwitz/.cargo/registry/src/github.com-1ecc6299db9ec823/bio-0.39.0/src/data_structures/bitenc.rs","byte_start":259075,"byte_end":259078,"line_start":303,"line_end":303,"column_start":5,"column_end":8}},{"value":"/ ```","span":{"file_name":"/Users/shelwitz/.cargo/registry/src/github.com-1ecc6299db9ec823/bio-0.39.0/src/data_structures/bitenc.rs","byte_start":259083,"byte_end":259090,"line_start":304,"line_end":304,"column_start":5,"column_end":12}},{"value":"/ use bio::data_structures::bitenc::BitEnc;","span":{"file_name":"/Users/shelwitz/.cargo/registry/src/github.com-1ecc6299db9ec823/bio-0.39.0/src/data_structures/bitenc.rs","byte_start":259095,"byte_end":259140,"line_start":305,"line_end":305,"column_start":5,"column_end":50}},{"value":"/","span":{"file_name":"/Users/shelwitz/.cargo/registry/src/github.com-1ecc6299db9ec823/bio-0.39.0/src/data_structures/bitenc.rs","byte_start":259145,"byte_end":259148,"line_start":306,"line_end":306,"column_start":5,"column_end":8}},{"value":"/ let mut bitenc = BitEnc::new(2);","span":{"file_name":"/Users/shelwitz/.cargo/registry/src/github.com-1ecc6299db9ec823/bio-0.39.0/src/data_structures/bitenc.rs","byte_start":259153,"byte_end":259189,"line_start":307,"line_end":307,"column_start":5,"column_end":41}},{"value":"/ bitenc.push(2);","span":{"file_name":"/Users/shelwitz/.cargo/registry/src/github.com-1ecc6299db9ec823/bio-0.39.0/src/data_structures/bitenc.rs","byte_start":259194,"byte_end":259213,"line_start":308,"line_end":308,"column_start":5,"column_end":24}},{"value":"/ assert_eq!(bitenc.len(), 1);","span":{"file_name":"/Users/shelwitz/.cargo/registry/src/github.com-1ecc6299db9ec823/bio-0.39.0/src/data_structures/bitenc.rs","byte_start":259218,"byte_end":259250,"line_start":309,"line_end":309,"column_start":5,"column_end":37}},{"value":"/ bitenc.clear();","span":{"file_name":"/Users/shelwitz/.cargo/registry/src/github.com-1ecc6299db9ec823/bio-0.39.0/src/data_structures/bitenc.rs","byte_start":259255,"byte_end":259274,"line_start":310,"line_end":310,"column_start":5,"column_end":24}},{"value":"/ assert_eq!(bitenc.len(), 0);","span":{"file_name":"/Users/shelwitz/.cargo/registry/src/github.com-1ecc6299db9ec823/bio-0.39.0/src/data_structures/bitenc.rs","byte_start":259279,"byte_end":259311,"line_start":311,"line_end":311,"column_start":5,"column_end":37}},{"value":"/ ```","span":{"file_name":"/Users/shelwitz/.cargo/registry/src/github.com-1ecc6299db9ec823/bio-0.39.0/src/data_structures/bitenc.rs","byte_start":259316,"byte_end":259323,"line_start":312,"line_end":312,"column_start":5,"column_end":12}}]},{"kind":"Method","id":{"krate":0,"index":560},"span":{"file_name":"/Users/shelwitz/.cargo/registry/src/github.com-1ecc6299db9ec823/bio-0.39.0/src/data_structures/bitenc.rs","byte_start":260865,"byte_end":260868,"line_start":364,"line_end":364,"column_start":12,"column_end":15},"name":"len","qualname":"<BitEnc>::len","value":"pub fn len(&Self) -> usize","parent":null,"children":[],"decl_id":null,"docs":" Get the number of symbols encoded.","sig":null,"attributes":[{"value":"/ Get the number of symbols encoded.","span":{"file_name":"/Users/shelwitz/.cargo/registry/src/github.com-1ecc6299db9ec823/bio-0.39.0/src/data_structures/bitenc.rs","byte_start":260199,"byte_end":260237,"line_start":340,"line_end":340,"column_start":5,"column_end":43}},{"value":"/","span":{"file_name":"/Users/shelwitz/.cargo/registry/src/github.com-1ecc6299db9ec823/bio-0.39.0/src/data_structures/bitenc.rs","byte_start":260242,"byte_end":260245,"line_start":341,"line_end":341,"column_start":5,"column_end":8}},{"value":"/ Complexity: O(1)","span":{"file_name":"/Users/shelwitz/.cargo/registry/src/github.com-1ecc6299db9ec823/bio-0.39.0/src/data_structures/bitenc.rs","byte_start":260250,"byte_end":260270,"line_start":342,"line_end":342,"column_start":5,"column_end":25}},{"value":"/","span":{"file_name":"/Users/shelwitz/.cargo/registry/src/github.com-1ecc6299db9ec823/bio-0.39.0/src/data_structures/bitenc.rs","byte_start":260275,"byte_end":260278,"line_start":343,"line_end":343,"column_start":5,"column_end":8}},{"value":"/ # Example","span":{"file_name":"/Users/shelwitz/.cargo/registry/src/github.com-1ecc6299db9ec823/bio-0.39.0/src/data_structures/bitenc.rs","byte_start":260283,"byte_end":260296,"line_start":344,"line_end":344,"column_start":5,"column_end":18}},{"value":"/","span":{"file_name":"/Users/shelwitz/.cargo/registry/src/github.com-1ecc6299db9ec823/bio-0.39.0/src/data_structures/bitenc.rs","byte_start":260301,"byte_end":260304,"line_start":345,"line_end":345,"column_start":5,"column_end":8}},{"value":"/ ```","span":{"file_name":"/Users/shelwitz/.cargo/registry/src/github.com-1ecc6299db9ec823/bio-0.39.0/src/data_structures/bitenc.rs","byte_start":260309,"byte_end":260316,"line_start":346,"line_end":346,"column_start":5,"column_end":12}},{"value":"/ use bio::data_structures::bitenc::BitEnc;","span":{"file_name":"/Users/shelwitz/.cargo/registry/src/github.com-1ecc6299db9ec823/bio-0.39.0/src/data_structures/bitenc.rs","byte_start":260321,"byte_end":260366,"line_start":347,"line_end":347,"column_start":5,"column_end":50}},{"value":"/","span":{"file_name":"/Users/shelwitz/.cargo/registry/src/github.com-1ecc6299db9ec823/bio-0.39.0/src/data_structures/bitenc.rs","byte_start":260371,"byte_end":260374,"line_start":348,"line_end":348,"column_start":5,"column_end":8}},{"value":"/ let mut bitenc = BitEnc::new(8);","span":{"file_name":"/Users/shelwitz/.cargo/registry/src/github.com-1ecc6299db9ec823/bio-0.39.0/src/data_structures/bitenc.rs","byte_start":260379,"byte_end":260415,"line_start":349,"line_end":349,"column_start":5,"column_end":41}},{"value":"/ bitenc.push(2);","span":{"file_name":"/Users/shelwitz/.cargo/registry/src/github.com-1ecc6299db9ec823/bio-0.39.0/src/data_structures/bitenc.rs","byte_start":260420,"byte_end":260439,"line_start":350,"line_end":350,"column_start":5,"column_end":24}},{"value":"/ assert_eq!(bitenc.len(), 1);","span":{"file_name":"/Users/shelwitz/.cargo/registry/src/github.com-1ecc6299db9ec823/bio-0.39.0/src/data_structures/bitenc.rs","byte_start":260444,"byte_end":260476,"line_start":351,"line_end":351,"column_start":5,"column_end":37}},{"value":"/ bitenc.push(2);","span":{"file_name":"/Users/shelwitz/.cargo/registry/src/github.com-1ecc6299db9ec823/bio-0.39.0/src/data_structures/bitenc.rs","byte_start":260481,"byte_end":260500,"line_start":352,"line_end":352,"column_start":5,"column_end":24}},{"value":"/ bitenc.push(2);","span":{"file_name":"/Users/shelwitz/.cargo/registry/src/github.com-1ecc6299db9ec823/bio-0.39.0/src/data_structures/bitenc.rs","byte_start":260505,"byte_end":260524,"line_start":353,"line_end":353,"column_start":5,"column_end":24}},{"value":"/ bitenc.push(2);","span":{"file_name":"/Users/shelwitz/.cargo/registry/src/github.com-1ecc6299db9ec823/bio-0.39.0/src/data_structures/bitenc.rs","byte_start":260529,"byte_end":260548,"line_start":354,"line_end":354,"column_start":5,"column_end":24}},{"value":"/ assert_eq!(bitenc.len(), 4);","span":{"file_name":"/Users/shelwitz/.cargo/registry/src/github.com-1ecc6299db9ec823/bio-0.39.0/src/data_structures/bitenc.rs","byte_start":260553,"byte_end":260585,"line_start":355,"line_end":355,"column_start":5,"column_end":37}},{"value":"/ // Add another 2 to create a second block","span":{"file_name":"/Users/shelwitz/.cargo/registry/src/github.com-1ecc6299db9ec823/bio-0.39.0/src/data_structures/bitenc.rs","byte_start":260590,"byte_end":260635,"line_start":356,"line_end":356,"column_start":5,"column_end":50}},{"value":"/ bitenc.push(2);","span":{"file_name":"/Users/shelwitz/.cargo/registry/src/github.com-1ecc6299db9ec823/bio-0.39.0/src/data_structures/bitenc.rs","byte_start":260640,"byte_end":260659,"line_start":357,"line_end":357,"column_start":5,"column_end":24}},{"value":"/ assert_eq!(bitenc.len(), 5);","span":{"file_name":"/Users/shelwitz/.cargo/registry/src/github.com-1ecc6299db9ec823/bio-0.39.0/src/data_structures/bitenc.rs","byte_start":260664,"byte_end":260696,"line_start":358,"line_end":358,"column_start":5,"column_end":37}},{"value":"/ ```","span":{"file_name":"/Users/shelwitz/.cargo/registry/src/github.com-1ecc6299db9ec823/bio-0.39.0/src/data_structures/bitenc.rs","byte_start":260701,"byte_end":260708,"line_start":359,"line_end":359,"column_start":5,"column_end":12}},{"value":"deprecated(since = \"0.33.0\", note =\n             \"Please use the more specific `nr_blocks` and `nr_symbols` functions instead.\")","span":{"file_name":"/Users/shelwitz/.cargo/registry/src/github.com-1ecc6299db9ec823/bio-0.39.0/src/data_structures/bitenc.rs","byte_start":260713,"byte_end":260853,"line_start":360,"line_end":363,"column_start":5,"column_end":7}}]},{"kind":"Method","id":{"krate":0,"index":561},"span":{"file_name":"/Users/shelwitz/.cargo/registry/src/github.com-1ecc6299db9ec823/bio-0.39.0/src/data_structures/bitenc.rs","byte_start":261530,"byte_end":261539,"line_start":389,"line_end":389,"column_start":12,"column_end":21},"name":"nr_blocks","qualname":"<BitEnc>::nr_blocks","value":"pub fn nr_blocks(&Self) -> usize","parent":null,"children":[],"decl_id":null,"docs":" Get the number of blocks used by the encoding.","sig":null,"attributes":[{"value":"/ Get the number of blocks used by the encoding.","span":{"file_name":"/Users/shelwitz/.cargo/registry/src/github.com-1ecc6299db9ec823/bio-0.39.0/src/data_structures/bitenc.rs","byte_start":260915,"byte_end":260965,"line_start":368,"line_end":368,"column_start":5,"column_end":55}},{"value":"/","span":{"file_name":"/Users/shelwitz/.cargo/registry/src/github.com-1ecc6299db9ec823/bio-0.39.0/src/data_structures/bitenc.rs","byte_start":260970,"byte_end":260973,"line_start":369,"line_end":369,"column_start":5,"column_end":8}},{"value":"/ Complexity: O(1)","span":{"file_name":"/Users/shelwitz/.cargo/registry/src/github.com-1ecc6299db9ec823/bio-0.39.0/src/data_structures/bitenc.rs","byte_start":260978,"byte_end":260998,"line_start":370,"line_end":370,"column_start":5,"column_end":25}},{"value":"/","span":{"file_name":"/Users/shelwitz/.cargo/registry/src/github.com-1ecc6299db9ec823/bio-0.39.0/src/data_structures/bitenc.rs","byte_start":261003,"byte_end":261006,"line_start":371,"line_end":371,"column_start":5,"column_end":8}},{"value":"/ # Example","span":{"file_name":"/Users/shelwitz/.cargo/registry/src/github.com-1ecc6299db9ec823/bio-0.39.0/src/data_structures/bitenc.rs","byte_start":261011,"byte_end":261024,"line_start":372,"line_end":372,"column_start":5,"column_end":18}},{"value":"/","span":{"file_name":"/Users/shelwitz/.cargo/registry/src/github.com-1ecc6299db9ec823/bio-0.39.0/src/data_structures/bitenc.rs","byte_start":261029,"byte_end":261032,"line_start":373,"line_end":373,"column_start":5,"column_end":8}},{"value":"/ ```","span":{"file_name":"/Users/shelwitz/.cargo/registry/src/github.com-1ecc6299db9ec823/bio-0.39.0/src/data_structures/bitenc.rs","byte_start":261037,"byte_end":261044,"line_start":374,"line_end":374,"column_start":5,"column_end":12}},{"value":"/ use bio::data_structures::bitenc::BitEnc;","span":{"file_name":"/Users/shelwitz/.cargo/registry/src/github.com-1ecc6299db9ec823/bio-0.39.0/src/data_structures/bitenc.rs","byte_start":261049,"byte_end":261094,"line_start":375,"line_end":375,"column_start":5,"column_end":50}},{"value":"/","span":{"file_name":"/Users/shelwitz/.cargo/registry/src/github.com-1ecc6299db9ec823/bio-0.39.0/src/data_structures/bitenc.rs","byte_start":261099,"byte_end":261102,"line_start":376,"line_end":376,"column_start":5,"column_end":8}},{"value":"/ let mut bitenc = BitEnc::new(8);","span":{"file_name":"/Users/shelwitz/.cargo/registry/src/github.com-1ecc6299db9ec823/bio-0.39.0/src/data_structures/bitenc.rs","byte_start":261107,"byte_end":261143,"line_start":377,"line_end":377,"column_start":5,"column_end":41}},{"value":"/ bitenc.push(2);","span":{"file_name":"/Users/shelwitz/.cargo/registry/src/github.com-1ecc6299db9ec823/bio-0.39.0/src/data_structures/bitenc.rs","byte_start":261148,"byte_end":261167,"line_start":378,"line_end":378,"column_start":5,"column_end":24}},{"value":"/ assert_eq!(bitenc.nr_blocks(), 1);","span":{"file_name":"/Users/shelwitz/.cargo/registry/src/github.com-1ecc6299db9ec823/bio-0.39.0/src/data_structures/bitenc.rs","byte_start":261172,"byte_end":261210,"line_start":379,"line_end":379,"column_start":5,"column_end":43}},{"value":"/ // Add enough 2s to completely fill the first block","span":{"file_name":"/Users/shelwitz/.cargo/registry/src/github.com-1ecc6299db9ec823/bio-0.39.0/src/data_structures/bitenc.rs","byte_start":261215,"byte_end":261270,"line_start":380,"line_end":380,"column_start":5,"column_end":60}},{"value":"/ bitenc.push(2);","span":{"file_name":"/Users/shelwitz/.cargo/registry/src/github.com-1ecc6299db9ec823/bio-0.39.0/src/data_structures/bitenc.rs","byte_start":261275,"byte_end":261294,"line_start":381,"line_end":381,"column_start":5,"column_end":24}},{"value":"/ bitenc.push(2);","span":{"file_name":"/Users/shelwitz/.cargo/registry/src/github.com-1ecc6299db9ec823/bio-0.39.0/src/data_structures/bitenc.rs","byte_start":261299,"byte_end":261318,"line_start":382,"line_end":382,"column_start":5,"column_end":24}},{"value":"/ bitenc.push(2);","span":{"file_name":"/Users/shelwitz/.cargo/registry/src/github.com-1ecc6299db9ec823/bio-0.39.0/src/data_structures/bitenc.rs","byte_start":261323,"byte_end":261342,"line_start":383,"line_end":383,"column_start":5,"column_end":24}},{"value":"/ assert_eq!(bitenc.nr_blocks(), 1);","span":{"file_name":"/Users/shelwitz/.cargo/registry/src/github.com-1ecc6299db9ec823/bio-0.39.0/src/data_structures/bitenc.rs","byte_start":261347,"byte_end":261385,"line_start":384,"line_end":384,"column_start":5,"column_end":43}},{"value":"/ // Add another 2 to create a second block","span":{"file_name":"/Users/shelwitz/.cargo/registry/src/github.com-1ecc6299db9ec823/bio-0.39.0/src/data_structures/bitenc.rs","byte_start":261390,"byte_end":261435,"line_start":385,"line_end":385,"column_start":5,"column_end":50}},{"value":"/ bitenc.push(2);","span":{"file_name":"/Users/shelwitz/.cargo/registry/src/github.com-1ecc6299db9ec823/bio-0.39.0/src/data_structures/bitenc.rs","byte_start":261440,"byte_end":261459,"line_start":386,"line_end":386,"column_start":5,"column_end":24}},{"value":"/ assert_eq!(bitenc.nr_blocks(), 2);","span":{"file_name":"/Users/shelwitz/.cargo/registry/src/github.com-1ecc6299db9ec823/bio-0.39.0/src/data_structures/bitenc.rs","byte_start":261464,"byte_end":261502,"line_start":387,"line_end":387,"column_start":5,"column_end":43}},{"value":"/ ```    ","span":{"file_name":"/Users/shelwitz/.cargo/registry/src/github.com-1ecc6299db9ec823/bio-0.39.0/src/data_structures/bitenc.rs","byte_start":261507,"byte_end":261518,"line_start":388,"line_end":388,"column_start":5,"column_end":16}}]},{"kind":"Method","id":{"krate":0,"index":562},"span":{"file_name":"/Users/shelwitz/.cargo/registry/src/github.com-1ecc6299db9ec823/bio-0.39.0/src/data_structures/bitenc.rs","byte_start":262092,"byte_end":262102,"line_start":412,"line_end":412,"column_start":12,"column_end":22},"name":"nr_symbols","qualname":"<BitEnc>::nr_symbols","value":"pub fn nr_symbols(&Self) -> usize","parent":null,"children":[],"decl_id":null,"docs":" Get the number of symbols encoded.","sig":null,"attributes":[{"value":"/ Get the number of symbols encoded.","span":{"file_name":"/Users/shelwitz/.cargo/registry/src/github.com-1ecc6299db9ec823/bio-0.39.0/src/data_structures/bitenc.rs","byte_start":261596,"byte_end":261634,"line_start":393,"line_end":393,"column_start":5,"column_end":43}},{"value":"/","span":{"file_name":"/Users/shelwitz/.cargo/registry/src/github.com-1ecc6299db9ec823/bio-0.39.0/src/data_structures/bitenc.rs","byte_start":261639,"byte_end":261642,"line_start":394,"line_end":394,"column_start":5,"column_end":8}},{"value":"/ Complexity: O(1)","span":{"file_name":"/Users/shelwitz/.cargo/registry/src/github.com-1ecc6299db9ec823/bio-0.39.0/src/data_structures/bitenc.rs","byte_start":261647,"byte_end":261667,"line_start":395,"line_end":395,"column_start":5,"column_end":25}},{"value":"/","span":{"file_name":"/Users/shelwitz/.cargo/registry/src/github.com-1ecc6299db9ec823/bio-0.39.0/src/data_structures/bitenc.rs","byte_start":261672,"byte_end":261675,"line_start":396,"line_end":396,"column_start":5,"column_end":8}},{"value":"/ # Example","span":{"file_name":"/Users/shelwitz/.cargo/registry/src/github.com-1ecc6299db9ec823/bio-0.39.0/src/data_structures/bitenc.rs","byte_start":261680,"byte_end":261693,"line_start":397,"line_end":397,"column_start":5,"column_end":18}},{"value":"/","span":{"file_name":"/Users/shelwitz/.cargo/registry/src/github.com-1ecc6299db9ec823/bio-0.39.0/src/data_structures/bitenc.rs","byte_start":261698,"byte_end":261701,"line_start":398,"line_end":398,"column_start":5,"column_end":8}},{"value":"/ ```","span":{"file_name":"/Users/shelwitz/.cargo/registry/src/github.com-1ecc6299db9ec823/bio-0.39.0/src/data_structures/bitenc.rs","byte_start":261706,"byte_end":261713,"line_start":399,"line_end":399,"column_start":5,"column_end":12}},{"value":"/ use bio::data_structures::bitenc::BitEnc;","span":{"file_name":"/Users/shelwitz/.cargo/registry/src/github.com-1ecc6299db9ec823/bio-0.39.0/src/data_structures/bitenc.rs","byte_start":261718,"byte_end":261763,"line_start":400,"line_end":400,"column_start":5,"column_end":50}},{"value":"/","span":{"file_name":"/Users/shelwitz/.cargo/registry/src/github.com-1ecc6299db9ec823/bio-0.39.0/src/data_structures/bitenc.rs","byte_start":261768,"byte_end":261771,"line_start":401,"line_end":401,"column_start":5,"column_end":8}},{"value":"/ let mut bitenc = BitEnc::new(8);","span":{"file_name":"/Users/shelwitz/.cargo/registry/src/github.com-1ecc6299db9ec823/bio-0.39.0/src/data_structures/bitenc.rs","byte_start":261776,"byte_end":261812,"line_start":402,"line_end":402,"column_start":5,"column_end":41}},{"value":"/ bitenc.push(2);","span":{"file_name":"/Users/shelwitz/.cargo/registry/src/github.com-1ecc6299db9ec823/bio-0.39.0/src/data_structures/bitenc.rs","byte_start":261817,"byte_end":261836,"line_start":403,"line_end":403,"column_start":5,"column_end":24}},{"value":"/ assert_eq!(bitenc.nr_symbols(), 1);","span":{"file_name":"/Users/shelwitz/.cargo/registry/src/github.com-1ecc6299db9ec823/bio-0.39.0/src/data_structures/bitenc.rs","byte_start":261841,"byte_end":261880,"line_start":404,"line_end":404,"column_start":5,"column_end":44}},{"value":"/ bitenc.push(2);","span":{"file_name":"/Users/shelwitz/.cargo/registry/src/github.com-1ecc6299db9ec823/bio-0.39.0/src/data_structures/bitenc.rs","byte_start":261885,"byte_end":261904,"line_start":405,"line_end":405,"column_start":5,"column_end":24}},{"value":"/ bitenc.push(2);","span":{"file_name":"/Users/shelwitz/.cargo/registry/src/github.com-1ecc6299db9ec823/bio-0.39.0/src/data_structures/bitenc.rs","byte_start":261909,"byte_end":261928,"line_start":406,"line_end":406,"column_start":5,"column_end":24}},{"value":"/ bitenc.push(2);","span":{"file_name":"/Users/shelwitz/.cargo/registry/src/github.com-1ecc6299db9ec823/bio-0.39.0/src/data_structures/bitenc.rs","byte_start":261933,"byte_end":261952,"line_start":407,"line_end":407,"column_start":5,"column_end":24}},{"value":"/ assert_eq!(bitenc.nr_symbols(), 4);","span":{"file_name":"/Users/shelwitz/.cargo/registry/src/github.com-1ecc6299db9ec823/bio-0.39.0/src/data_structures/bitenc.rs","byte_start":261957,"byte_end":261996,"line_start":408,"line_end":408,"column_start":5,"column_end":44}},{"value":"/ bitenc.push(2);","span":{"file_name":"/Users/shelwitz/.cargo/registry/src/github.com-1ecc6299db9ec823/bio-0.39.0/src/data_structures/bitenc.rs","byte_start":262001,"byte_end":262020,"line_start":409,"line_end":409,"column_start":5,"column_end":24}},{"value":"/ assert_eq!(bitenc.nr_symbols(), 5);","span":{"file_name":"/Users/shelwitz/.cargo/registry/src/github.com-1ecc6299db9ec823/bio-0.39.0/src/data_structures/bitenc.rs","byte_start":262025,"byte_end":262064,"line_start":410,"line_end":410,"column_start":5,"column_end":44}},{"value":"/ ```    ","span":{"file_name":"/Users/shelwitz/.cargo/registry/src/github.com-1ecc6299db9ec823/bio-0.39.0/src/data_structures/bitenc.rs","byte_start":262069,"byte_end":262080,"line_start":411,"line_end":411,"column_start":5,"column_end":16}}]},{"kind":"Method","id":{"krate":0,"index":563},"span":{"file_name":"/Users/shelwitz/.cargo/registry/src/github.com-1ecc6299db9ec823/bio-0.39.0/src/data_structures/bitenc.rs","byte_start":262542,"byte_end":262550,"line_start":432,"line_end":432,"column_start":12,"column_end":20},"name":"is_empty","qualname":"<BitEnc>::is_empty","value":"pub fn is_empty(&Self) -> bool","parent":null,"children":[],"decl_id":null,"docs":" Is the encoded sequence empty?","sig":null,"attributes":[{"value":"/ Is the encoded sequence empty?","span":{"file_name":"/Users/shelwitz/.cargo/registry/src/github.com-1ecc6299db9ec823/bio-0.39.0/src/data_structures/bitenc.rs","byte_start":262149,"byte_end":262183,"line_start":416,"line_end":416,"column_start":5,"column_end":39}},{"value":"/","span":{"file_name":"/Users/shelwitz/.cargo/registry/src/github.com-1ecc6299db9ec823/bio-0.39.0/src/data_structures/bitenc.rs","byte_start":262188,"byte_end":262191,"line_start":417,"line_end":417,"column_start":5,"column_end":8}},{"value":"/ Complexity: O(1)","span":{"file_name":"/Users/shelwitz/.cargo/registry/src/github.com-1ecc6299db9ec823/bio-0.39.0/src/data_structures/bitenc.rs","byte_start":262196,"byte_end":262216,"line_start":418,"line_end":418,"column_start":5,"column_end":25}},{"value":"/","span":{"file_name":"/Users/shelwitz/.cargo/registry/src/github.com-1ecc6299db9ec823/bio-0.39.0/src/data_structures/bitenc.rs","byte_start":262221,"byte_end":262224,"line_start":419,"line_end":419,"column_start":5,"column_end":8}},{"value":"/ # Example","span":{"file_name":"/Users/shelwitz/.cargo/registry/src/github.com-1ecc6299db9ec823/bio-0.39.0/src/data_structures/bitenc.rs","byte_start":262229,"byte_end":262242,"line_start":420,"line_end":420,"column_start":5,"column_end":18}},{"value":"/","span":{"file_name":"/Users/shelwitz/.cargo/registry/src/github.com-1ecc6299db9ec823/bio-0.39.0/src/data_structures/bitenc.rs","byte_start":262247,"byte_end":262250,"line_start":421,"line_end":421,"column_start":5,"column_end":8}},{"value":"/ ```","span":{"file_name":"/Users/shelwitz/.cargo/registry/src/github.com-1ecc6299db9ec823/bio-0.39.0/src/data_structures/bitenc.rs","byte_start":262255,"byte_end":262262,"line_start":422,"line_end":422,"column_start":5,"column_end":12}},{"value":"/ use bio::data_structures::bitenc::BitEnc;","span":{"file_name":"/Users/shelwitz/.cargo/registry/src/github.com-1ecc6299db9ec823/bio-0.39.0/src/data_structures/bitenc.rs","byte_start":262267,"byte_end":262312,"line_start":423,"line_end":423,"column_start":5,"column_end":50}},{"value":"/","span":{"file_name":"/Users/shelwitz/.cargo/registry/src/github.com-1ecc6299db9ec823/bio-0.39.0/src/data_structures/bitenc.rs","byte_start":262317,"byte_end":262320,"line_start":424,"line_end":424,"column_start":5,"column_end":8}},{"value":"/ let mut bitenc = BitEnc::new(2);","span":{"file_name":"/Users/shelwitz/.cargo/registry/src/github.com-1ecc6299db9ec823/bio-0.39.0/src/data_structures/bitenc.rs","byte_start":262325,"byte_end":262361,"line_start":425,"line_end":425,"column_start":5,"column_end":41}},{"value":"/ assert!(bitenc.is_empty());","span":{"file_name":"/Users/shelwitz/.cargo/registry/src/github.com-1ecc6299db9ec823/bio-0.39.0/src/data_structures/bitenc.rs","byte_start":262366,"byte_end":262397,"line_start":426,"line_end":426,"column_start":5,"column_end":36}},{"value":"/ bitenc.push(2);","span":{"file_name":"/Users/shelwitz/.cargo/registry/src/github.com-1ecc6299db9ec823/bio-0.39.0/src/data_structures/bitenc.rs","byte_start":262402,"byte_end":262421,"line_start":427,"line_end":427,"column_start":5,"column_end":24}},{"value":"/ assert!(!bitenc.is_empty());","span":{"file_name":"/Users/shelwitz/.cargo/registry/src/github.com-1ecc6299db9ec823/bio-0.39.0/src/data_structures/bitenc.rs","byte_start":262426,"byte_end":262458,"line_start":428,"line_end":428,"column_start":5,"column_end":37}},{"value":"/ bitenc.clear();","span":{"file_name":"/Users/shelwitz/.cargo/registry/src/github.com-1ecc6299db9ec823/bio-0.39.0/src/data_structures/bitenc.rs","byte_start":262463,"byte_end":262482,"line_start":429,"line_end":429,"column_start":5,"column_end":24}},{"value":"/ assert!(bitenc.is_empty());","span":{"file_name":"/Users/shelwitz/.cargo/registry/src/github.com-1ecc6299db9ec823/bio-0.39.0/src/data_structures/bitenc.rs","byte_start":262487,"byte_end":262518,"line_start":430,"line_end":430,"column_start":5,"column_end":36}},{"value":"/ ```","span":{"file_name":"/Users/shelwitz/.cargo/registry/src/github.com-1ecc6299db9ec823/bio-0.39.0/src/data_structures/bitenc.rs","byte_start":262523,"byte_end":262530,"line_start":431,"line_end":431,"column_start":5,"column_end":12}}]},{"kind":"Struct","id":{"krate":0,"index":564},"span":{"file_name":"/Users/shelwitz/.cargo/registry/src/github.com-1ecc6299db9ec823/bio-0.39.0/src/data_structures/bitenc.rs","byte_start":262751,"byte_end":262761,"line_start":439,"line_end":439,"column_start":12,"column_end":22},"name":"BitEncIter","qualname":"::data_structures::bitenc::BitEncIter","value":"BitEncIter {  }","parent":null,"children":[{"krate":0,"index":566},{"krate":0,"index":567}],"decl_id":null,"docs":" Iterator over values of a bitencoded sequence (values will be unpacked into bytes).\n Used to implement the `iter` method of `BitEnc`.\n","sig":null,"attributes":[{"value":"/ Iterator over values of a bitencoded sequence (values will be unpacked into bytes).","span":{"file_name":"/Users/shelwitz/.cargo/registry/src/github.com-1ecc6299db9ec823/bio-0.39.0/src/data_structures/bitenc.rs","byte_start":262599,"byte_end":262686,"line_start":437,"line_end":437,"column_start":1,"column_end":88}},{"value":"/ Used to implement the `iter` method of `BitEnc`.","span":{"file_name":"/Users/shelwitz/.cargo/registry/src/github.com-1ecc6299db9ec823/bio-0.39.0/src/data_structures/bitenc.rs","byte_start":262687,"byte_end":262739,"line_start":438,"line_end":438,"column_start":1,"column_end":53}}]},{"kind":"Mod","id":{"krate":0,"index":572},"span":{"file_name":"/Users/shelwitz/.cargo/registry/src/github.com-1ecc6299db9ec823/bio-0.39.0/src/data_structures/bwt.rs","byte_start":0,"byte_end":0,"line_start":1,"line_end":1,"column_start":1,"column_end":1},"name":"bwt","qualname":"::data_structures::bwt","value":"/Users/shelwitz/.cargo/registry/src/github.com-1ecc6299db9ec823/bio-0.39.0/src/data_structures/bwt.rs","parent":null,"children":[{"krate":0,"index":573},{"krate":0,"index":576},{"krate":0,"index":579},{"krate":0,"index":582},{"krate":0,"index":585},{"krate":0,"index":586},{"krate":0,"index":587},{"krate":0,"index":588},{"krate":0,"index":589},{"krate":0,"index":590},{"krate":0,"index":3605},{"krate":0,"index":3608},{"krate":0,"index":3610},{"krate":0,"index":3616},{"krate":0,"index":591},{"krate":0,"index":594},{"krate":0,"index":596}],"decl_id":null,"docs":" The [Burrows-Wheeler-Transform](https://citeseerx.ist.psu.edu/viewdoc/summary?doi=10.1.1.37.6774) and related data structures.\n The implementation is based on the lecture notes\n \"Algorithmen auf Sequenzen\", Kopczynski, Marschall, Martin and Rahmann, 2008 - 2015.\n","sig":null,"attributes":[{"value":"/ The [Burrows-Wheeler-Transform](https://citeseerx.ist.psu.edu/viewdoc/summary?doi=10.1.1.37.6774) and related data structures.","span":{"file_name":"/Users/shelwitz/.cargo/registry/src/github.com-1ecc6299db9ec823/bio-0.39.0/src/data_structures/bwt.rs","byte_start":265791,"byte_end":265921,"line_start":6,"line_end":6,"column_start":1,"column_end":131}},{"value":"/ The implementation is based on the lecture notes","span":{"file_name":"/Users/shelwitz/.cargo/registry/src/github.com-1ecc6299db9ec823/bio-0.39.0/src/data_structures/bwt.rs","byte_start":265922,"byte_end":265974,"line_start":7,"line_end":7,"column_start":1,"column_end":53}},{"value":"/ \"Algorithmen auf Sequenzen\", Kopczynski, Marschall, Martin and Rahmann, 2008 - 2015.","span":{"file_name":"/Users/shelwitz/.cargo/registry/src/github.com-1ecc6299db9ec823/bio-0.39.0/src/data_structures/bwt.rs","byte_start":265975,"byte_end":266063,"line_start":8,"line_end":8,"column_start":1,"column_end":89}}]},{"kind":"Type","id":{"krate":0,"index":585},"span":{"file_name":"/Users/shelwitz/.cargo/registry/src/github.com-1ecc6299db9ec823/bio-0.39.0/src/data_structures/bwt.rs","byte_start":266221,"byte_end":266224,"line_start":16,"line_end":16,"column_start":10,"column_end":13},"name":"BWT","qualname":"::data_structures::bwt::BWT","value":"Vec<u8>","parent":null,"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Type","id":{"krate":0,"index":586},"span":{"file_name":"/Users/shelwitz/.cargo/registry/src/github.com-1ecc6299db9ec823/bio-0.39.0/src/data_structures/bwt.rs","byte_start":266245,"byte_end":266253,"line_start":17,"line_end":17,"column_start":10,"column_end":18},"name":"BWTSlice","qualname":"::data_structures::bwt::BWTSlice","value":"[u8]","parent":null,"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Type","id":{"krate":0,"index":587},"span":{"file_name":"/Users/shelwitz/.cargo/registry/src/github.com-1ecc6299db9ec823/bio-0.39.0/src/data_structures/bwt.rs","byte_start":266271,"byte_end":266275,"line_start":18,"line_end":18,"column_start":10,"column_end":14},"name":"Less","qualname":"::data_structures::bwt::Less","value":"Vec<usize>","parent":null,"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Type","id":{"krate":0,"index":588},"span":{"file_name":"/Users/shelwitz/.cargo/registry/src/github.com-1ecc6299db9ec823/bio-0.39.0/src/data_structures/bwt.rs","byte_start":266299,"byte_end":266306,"line_start":19,"line_end":19,"column_start":10,"column_end":17},"name":"BWTFind","qualname":"::data_structures::bwt::BWTFind","value":"Vec<usize>","parent":null,"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Function","id":{"krate":0,"index":589},"span":{"file_name":"/Users/shelwitz/.cargo/registry/src/github.com-1ecc6299db9ec823/bio-0.39.0/src/data_structures/bwt.rs","byte_start":266865,"byte_end":266868,"line_start":39,"line_end":39,"column_start":8,"column_end":11},"name":"bwt","qualname":"::data_structures::bwt::bwt","value":"pub fn bwt(&[u8], RawSuffixArraySlice) -> BWT","parent":null,"children":[],"decl_id":null,"docs":" Calculate Burrows-Wheeler-Transform of the given text of length n.\n Complexity: O(n).","sig":null,"attributes":[{"value":"/ Calculate Burrows-Wheeler-Transform of the given text of length n.","span":{"file_name":"/Users/shelwitz/.cargo/registry/src/github.com-1ecc6299db9ec823/bio-0.39.0/src/data_structures/bwt.rs","byte_start":266322,"byte_end":266392,"line_start":21,"line_end":21,"column_start":1,"column_end":71}},{"value":"/ Complexity: O(n).","span":{"file_name":"/Users/shelwitz/.cargo/registry/src/github.com-1ecc6299db9ec823/bio-0.39.0/src/data_structures/bwt.rs","byte_start":266393,"byte_end":266414,"line_start":22,"line_end":22,"column_start":1,"column_end":22}},{"value":"/","span":{"file_name":"/Users/shelwitz/.cargo/registry/src/github.com-1ecc6299db9ec823/bio-0.39.0/src/data_structures/bwt.rs","byte_start":266415,"byte_end":266418,"line_start":23,"line_end":23,"column_start":1,"column_end":4}},{"value":"/ # Arguments","span":{"file_name":"/Users/shelwitz/.cargo/registry/src/github.com-1ecc6299db9ec823/bio-0.39.0/src/data_structures/bwt.rs","byte_start":266419,"byte_end":266434,"line_start":24,"line_end":24,"column_start":1,"column_end":16}},{"value":"/","span":{"file_name":"/Users/shelwitz/.cargo/registry/src/github.com-1ecc6299db9ec823/bio-0.39.0/src/data_structures/bwt.rs","byte_start":266435,"byte_end":266438,"line_start":25,"line_end":25,"column_start":1,"column_end":4}},{"value":"/ * `text` - the text ended by sentinel symbol (being lexicographically smallest)","span":{"file_name":"/Users/shelwitz/.cargo/registry/src/github.com-1ecc6299db9ec823/bio-0.39.0/src/data_structures/bwt.rs","byte_start":266439,"byte_end":266522,"line_start":26,"line_end":26,"column_start":1,"column_end":84}},{"value":"/ * `pos` - the suffix array for the text","span":{"file_name":"/Users/shelwitz/.cargo/registry/src/github.com-1ecc6299db9ec823/bio-0.39.0/src/data_structures/bwt.rs","byte_start":266523,"byte_end":266566,"line_start":27,"line_end":27,"column_start":1,"column_end":44}},{"value":"/","span":{"file_name":"/Users/shelwitz/.cargo/registry/src/github.com-1ecc6299db9ec823/bio-0.39.0/src/data_structures/bwt.rs","byte_start":266567,"byte_end":266570,"line_start":28,"line_end":28,"column_start":1,"column_end":4}},{"value":"/ # Example","span":{"file_name":"/Users/shelwitz/.cargo/registry/src/github.com-1ecc6299db9ec823/bio-0.39.0/src/data_structures/bwt.rs","byte_start":266571,"byte_end":266584,"line_start":29,"line_end":29,"column_start":1,"column_end":14}},{"value":"/","span":{"file_name":"/Users/shelwitz/.cargo/registry/src/github.com-1ecc6299db9ec823/bio-0.39.0/src/data_structures/bwt.rs","byte_start":266585,"byte_end":266588,"line_start":30,"line_end":30,"column_start":1,"column_end":4}},{"value":"/ ```","span":{"file_name":"/Users/shelwitz/.cargo/registry/src/github.com-1ecc6299db9ec823/bio-0.39.0/src/data_structures/bwt.rs","byte_start":266589,"byte_end":266596,"line_start":31,"line_end":31,"column_start":1,"column_end":8}},{"value":"/ use bio::data_structures::bwt::bwt;","span":{"file_name":"/Users/shelwitz/.cargo/registry/src/github.com-1ecc6299db9ec823/bio-0.39.0/src/data_structures/bwt.rs","byte_start":266597,"byte_end":266636,"line_start":32,"line_end":32,"column_start":1,"column_end":40}},{"value":"/ use bio::data_structures::suffix_array::suffix_array;","span":{"file_name":"/Users/shelwitz/.cargo/registry/src/github.com-1ecc6299db9ec823/bio-0.39.0/src/data_structures/bwt.rs","byte_start":266637,"byte_end":266694,"line_start":33,"line_end":33,"column_start":1,"column_end":58}},{"value":"/ let text = b\"GCCTTAACATTATTACGCCTA$\";","span":{"file_name":"/Users/shelwitz/.cargo/registry/src/github.com-1ecc6299db9ec823/bio-0.39.0/src/data_structures/bwt.rs","byte_start":266695,"byte_end":266736,"line_start":34,"line_end":34,"column_start":1,"column_end":42}},{"value":"/ let pos = suffix_array(text);","span":{"file_name":"/Users/shelwitz/.cargo/registry/src/github.com-1ecc6299db9ec823/bio-0.39.0/src/data_structures/bwt.rs","byte_start":266737,"byte_end":266770,"line_start":35,"line_end":35,"column_start":1,"column_end":34}},{"value":"/ let bwt = bwt(text, &pos);","span":{"file_name":"/Users/shelwitz/.cargo/registry/src/github.com-1ecc6299db9ec823/bio-0.39.0/src/data_structures/bwt.rs","byte_start":266771,"byte_end":266801,"line_start":36,"line_end":36,"column_start":1,"column_end":31}},{"value":"/ assert_eq!(bwt, b\"ATTATTCAGGACCC$CTTTCAA\");","span":{"file_name":"/Users/shelwitz/.cargo/registry/src/github.com-1ecc6299db9ec823/bio-0.39.0/src/data_structures/bwt.rs","byte_start":266802,"byte_end":266849,"line_start":37,"line_end":37,"column_start":1,"column_end":48}},{"value":"/ ```","span":{"file_name":"/Users/shelwitz/.cargo/registry/src/github.com-1ecc6299db9ec823/bio-0.39.0/src/data_structures/bwt.rs","byte_start":266850,"byte_end":266857,"line_start":38,"line_end":38,"column_start":1,"column_end":8}}]},{"kind":"Function","id":{"krate":0,"index":590},"span":{"file_name":"/Users/shelwitz/.cargo/registry/src/github.com-1ecc6299db9ec823/bio-0.39.0/src/data_structures/bwt.rs","byte_start":267425,"byte_end":267435,"line_start":60,"line_end":60,"column_start":8,"column_end":18},"name":"invert_bwt","qualname":"::data_structures::bwt::invert_bwt","value":"pub fn invert_bwt(&BWTSlice) -> Vec<u8>","parent":null,"children":[],"decl_id":null,"docs":" Calculate the inverse of a BWT of length n, which is the original text.\n Complexity: O(n).","sig":null,"attributes":[{"value":"/ Calculate the inverse of a BWT of length n, which is the original text.","span":{"file_name":"/Users/shelwitz/.cargo/registry/src/github.com-1ecc6299db9ec823/bio-0.39.0/src/data_structures/bwt.rs","byte_start":267158,"byte_end":267233,"line_start":51,"line_end":51,"column_start":1,"column_end":76}},{"value":"/ Complexity: O(n).","span":{"file_name":"/Users/shelwitz/.cargo/registry/src/github.com-1ecc6299db9ec823/bio-0.39.0/src/data_structures/bwt.rs","byte_start":267234,"byte_end":267255,"line_start":52,"line_end":52,"column_start":1,"column_end":22}},{"value":"/","span":{"file_name":"/Users/shelwitz/.cargo/registry/src/github.com-1ecc6299db9ec823/bio-0.39.0/src/data_structures/bwt.rs","byte_start":267256,"byte_end":267259,"line_start":53,"line_end":53,"column_start":1,"column_end":4}},{"value":"/ This only works if the last sentinel in the original text is unique","span":{"file_name":"/Users/shelwitz/.cargo/registry/src/github.com-1ecc6299db9ec823/bio-0.39.0/src/data_structures/bwt.rs","byte_start":267260,"byte_end":267331,"line_start":54,"line_end":54,"column_start":1,"column_end":72}},{"value":"/ and lexicographically the smallest.","span":{"file_name":"/Users/shelwitz/.cargo/registry/src/github.com-1ecc6299db9ec823/bio-0.39.0/src/data_structures/bwt.rs","byte_start":267332,"byte_end":267371,"line_start":55,"line_end":55,"column_start":1,"column_end":40}},{"value":"/","span":{"file_name":"/Users/shelwitz/.cargo/registry/src/github.com-1ecc6299db9ec823/bio-0.39.0/src/data_structures/bwt.rs","byte_start":267372,"byte_end":267375,"line_start":56,"line_end":56,"column_start":1,"column_end":4}},{"value":"/ # Arguments","span":{"file_name":"/Users/shelwitz/.cargo/registry/src/github.com-1ecc6299db9ec823/bio-0.39.0/src/data_structures/bwt.rs","byte_start":267376,"byte_end":267391,"line_start":57,"line_end":57,"column_start":1,"column_end":16}},{"value":"/","span":{"file_name":"/Users/shelwitz/.cargo/registry/src/github.com-1ecc6299db9ec823/bio-0.39.0/src/data_structures/bwt.rs","byte_start":267392,"byte_end":267395,"line_start":58,"line_end":58,"column_start":1,"column_end":4}},{"value":"/ * `bwt` - the BWT","span":{"file_name":"/Users/shelwitz/.cargo/registry/src/github.com-1ecc6299db9ec823/bio-0.39.0/src/data_structures/bwt.rs","byte_start":267396,"byte_end":267417,"line_start":59,"line_end":59,"column_start":1,"column_end":22}}]},{"kind":"Struct","id":{"krate":0,"index":3605},"span":{"file_name":"/Users/shelwitz/.cargo/registry/src/github.com-1ecc6299db9ec823/bio-0.39.0/src/data_structures/bwt.rs","byte_start":267832,"byte_end":267835,"line_start":77,"line_end":77,"column_start":12,"column_end":15},"name":"Occ","qualname":"::data_structures::bwt::Occ","value":"Occ {  }","parent":null,"children":[{"krate":0,"index":3606},{"krate":0,"index":3607}],"decl_id":null,"docs":" An occurrence array implementation.\n","sig":null,"attributes":[{"value":"/ An occurrence array implementation.","span":{"file_name":"/Users/shelwitz/.cargo/registry/src/github.com-1ecc6299db9ec823/bio-0.39.0/src/data_structures/bwt.rs","byte_start":267740,"byte_end":267779,"line_start":75,"line_end":75,"column_start":1,"column_end":40}}]},{"kind":"Method","id":{"krate":0,"index":592},"span":{"file_name":"/Users/shelwitz/.cargo/registry/src/github.com-1ecc6299db9ec823/bio-0.39.0/src/data_structures/bwt.rs","byte_start":268407,"byte_end":268410,"line_start":94,"line_end":94,"column_start":12,"column_end":15},"name":"new","qualname":"<Occ>::new","value":"pub fn new(&BWTSlice, u32, &Alphabet) -> Self","parent":null,"children":[],"decl_id":null,"docs":" Calculate occ array with sampling from BWT of length n.\n Time complexity: O(n).\n Space complexity: O(n / k * A) with A being the alphabet size.\n The specified alphabet must match the alphabet of the text and its BWT.\n For large texts, it is advisable to transform\n the text before calculating the BWT (see alphabets::rank_transform).","sig":null,"attributes":[{"value":"/ Calculate occ array with sampling from BWT of length n.","span":{"file_name":"/Users/shelwitz/.cargo/registry/src/github.com-1ecc6299db9ec823/bio-0.39.0/src/data_structures/bwt.rs","byte_start":267894,"byte_end":267953,"line_start":83,"line_end":83,"column_start":5,"column_end":64}},{"value":"/ Time complexity: O(n).","span":{"file_name":"/Users/shelwitz/.cargo/registry/src/github.com-1ecc6299db9ec823/bio-0.39.0/src/data_structures/bwt.rs","byte_start":267958,"byte_end":267984,"line_start":84,"line_end":84,"column_start":5,"column_end":31}},{"value":"/ Space complexity: O(n / k * A) with A being the alphabet size.","span":{"file_name":"/Users/shelwitz/.cargo/registry/src/github.com-1ecc6299db9ec823/bio-0.39.0/src/data_structures/bwt.rs","byte_start":267989,"byte_end":268055,"line_start":85,"line_end":85,"column_start":5,"column_end":71}},{"value":"/ The specified alphabet must match the alphabet of the text and its BWT.","span":{"file_name":"/Users/shelwitz/.cargo/registry/src/github.com-1ecc6299db9ec823/bio-0.39.0/src/data_structures/bwt.rs","byte_start":268060,"byte_end":268135,"line_start":86,"line_end":86,"column_start":5,"column_end":80}},{"value":"/ For large texts, it is advisable to transform","span":{"file_name":"/Users/shelwitz/.cargo/registry/src/github.com-1ecc6299db9ec823/bio-0.39.0/src/data_structures/bwt.rs","byte_start":268140,"byte_end":268189,"line_start":87,"line_end":87,"column_start":5,"column_end":54}},{"value":"/ the text before calculating the BWT (see alphabets::rank_transform).","span":{"file_name":"/Users/shelwitz/.cargo/registry/src/github.com-1ecc6299db9ec823/bio-0.39.0/src/data_structures/bwt.rs","byte_start":268194,"byte_end":268266,"line_start":88,"line_end":88,"column_start":5,"column_end":77}},{"value":"/","span":{"file_name":"/Users/shelwitz/.cargo/registry/src/github.com-1ecc6299db9ec823/bio-0.39.0/src/data_structures/bwt.rs","byte_start":268271,"byte_end":268274,"line_start":89,"line_end":89,"column_start":5,"column_end":8}},{"value":"/ # Arguments","span":{"file_name":"/Users/shelwitz/.cargo/registry/src/github.com-1ecc6299db9ec823/bio-0.39.0/src/data_structures/bwt.rs","byte_start":268279,"byte_end":268294,"line_start":90,"line_end":90,"column_start":5,"column_end":20}},{"value":"/","span":{"file_name":"/Users/shelwitz/.cargo/registry/src/github.com-1ecc6299db9ec823/bio-0.39.0/src/data_structures/bwt.rs","byte_start":268299,"byte_end":268302,"line_start":91,"line_end":91,"column_start":5,"column_end":8}},{"value":"/ * `bwt` - the BWT","span":{"file_name":"/Users/shelwitz/.cargo/registry/src/github.com-1ecc6299db9ec823/bio-0.39.0/src/data_structures/bwt.rs","byte_start":268307,"byte_end":268328,"line_start":92,"line_end":92,"column_start":5,"column_end":26}},{"value":"/ * `k` - the sampling rate: every k-th entry will be stored","span":{"file_name":"/Users/shelwitz/.cargo/registry/src/github.com-1ecc6299db9ec823/bio-0.39.0/src/data_structures/bwt.rs","byte_start":268333,"byte_end":268395,"line_start":93,"line_end":93,"column_start":5,"column_end":67}}]},{"kind":"Method","id":{"krate":0,"index":593},"span":{"file_name":"/Users/shelwitz/.cargo/registry/src/github.com-1ecc6299db9ec823/bio-0.39.0/src/data_structures/bwt.rs","byte_start":269520,"byte_end":269523,"line_start":129,"line_end":129,"column_start":12,"column_end":15},"name":"get","qualname":"<Occ>::get","value":"pub fn get(&Self, &BWTSlice, usize, u8) -> usize","parent":null,"children":[],"decl_id":null,"docs":" Get occurrence count of symbol a in BWT[..r+1].\n Complexity: O(k).\n","sig":null,"attributes":[{"value":"/ Get occurrence count of symbol a in BWT[..r+1].","span":{"file_name":"/Users/shelwitz/.cargo/registry/src/github.com-1ecc6299db9ec823/bio-0.39.0/src/data_structures/bwt.rs","byte_start":269431,"byte_end":269482,"line_start":127,"line_end":127,"column_start":5,"column_end":56}},{"value":"/ Complexity: O(k).","span":{"file_name":"/Users/shelwitz/.cargo/registry/src/github.com-1ecc6299db9ec823/bio-0.39.0/src/data_structures/bwt.rs","byte_start":269487,"byte_end":269508,"line_start":128,"line_end":128,"column_start":5,"column_end":26}}]},{"kind":"Function","id":{"krate":0,"index":594},"span":{"file_name":"/Users/shelwitz/.cargo/registry/src/github.com-1ecc6299db9ec823/bio-0.39.0/src/data_structures/bwt.rs","byte_start":272016,"byte_end":272020,"line_start":186,"line_end":186,"column_start":8,"column_end":12},"name":"less","qualname":"::data_structures::bwt::less","value":"pub fn less(&BWTSlice, &Alphabet) -> Less","parent":null,"children":[],"decl_id":null,"docs":" Calculate the less array for a given BWT. Complexity O(n).\n","sig":null,"attributes":[{"value":"/ Calculate the less array for a given BWT. Complexity O(n).","span":{"file_name":"/Users/shelwitz/.cargo/registry/src/github.com-1ecc6299db9ec823/bio-0.39.0/src/data_structures/bwt.rs","byte_start":271946,"byte_end":272008,"line_start":185,"line_end":185,"column_start":1,"column_end":63}}]},{"kind":"Function","id":{"krate":0,"index":596},"span":{"file_name":"/Users/shelwitz/.cargo/registry/src/github.com-1ecc6299db9ec823/bio-0.39.0/src/data_structures/bwt.rs","byte_start":272471,"byte_end":272478,"line_start":202,"line_end":202,"column_start":8,"column_end":15},"name":"bwtfind","qualname":"::data_structures::bwt::bwtfind","value":"pub fn bwtfind(&BWTSlice, &Alphabet) -> BWTFind","parent":null,"children":[],"decl_id":null,"docs":" Calculate the bwtfind array needed for inverting the BWT. Complexity O(n).\n","sig":null,"attributes":[{"value":"/ Calculate the bwtfind array needed for inverting the BWT. Complexity O(n).","span":{"file_name":"/Users/shelwitz/.cargo/registry/src/github.com-1ecc6299db9ec823/bio-0.39.0/src/data_structures/bwt.rs","byte_start":272385,"byte_end":272463,"line_start":201,"line_end":201,"column_start":1,"column_end":79}}]},{"kind":"Mod","id":{"krate":0,"index":597},"span":{"file_name":"/Users/shelwitz/.cargo/registry/src/github.com-1ecc6299db9ec823/bio-0.39.0/src/data_structures/fmindex.rs","byte_start":0,"byte_end":0,"line_start":1,"line_end":1,"column_start":1,"column_end":1},"name":"fmindex","qualname":"::data_structures::fmindex","value":"/Users/shelwitz/.cargo/registry/src/github.com-1ecc6299db9ec823/bio-0.39.0/src/data_structures/fmindex.rs","parent":null,"children":[{"krate":0,"index":598},{"krate":0,"index":601},{"krate":0,"index":604},{"krate":0,"index":607},{"krate":0,"index":608},{"krate":0,"index":611},{"krate":0,"index":614},{"krate":0,"index":617},{"krate":0,"index":620},{"krate":0,"index":3659},{"krate":0,"index":3662},{"krate":0,"index":3664},{"krate":0,"index":3665},{"krate":0,"index":3667},{"krate":0,"index":3668},{"krate":0,"index":3671},{"krate":0,"index":3672},{"krate":0,"index":3674},{"krate":0,"index":623},{"krate":0,"index":3677},{"krate":0,"index":3687},{"krate":0,"index":3689},{"krate":0,"index":3690},{"krate":0,"index":3692},{"krate":0,"index":3693},{"krate":0,"index":3696},{"krate":0,"index":3697},{"krate":0,"index":3699},{"krate":0,"index":627},{"krate":0,"index":3702},{"krate":0,"index":3709},{"krate":0,"index":3718},{"krate":0,"index":634},{"krate":0,"index":641},{"krate":0,"index":3772},{"krate":0,"index":3777},{"krate":0,"index":3779},{"krate":0,"index":3780},{"krate":0,"index":3782},{"krate":0,"index":3783},{"krate":0,"index":3786},{"krate":0,"index":3787},{"krate":0,"index":3789},{"krate":0,"index":646},{"krate":0,"index":3792},{"krate":0,"index":3797},{"krate":0,"index":3806},{"krate":0,"index":650},{"krate":0,"index":657},{"krate":0,"index":662}],"decl_id":null,"docs":" The [Full-text index in Minute space index (FM-index)](https://doi.org/10.1109/SFCS.2000.892127) and\n the FMD-Index for finding suffix array intervals matching a given pattern in linear time.","sig":null,"attributes":[{"value":"/ The [Full-text index in Minute space index (FM-index)](https://doi.org/10.1109/SFCS.2000.892127) and","span":{"file_name":"/Users/shelwitz/.cargo/registry/src/github.com-1ecc6299db9ec823/bio-0.39.0/src/data_structures/fmindex.rs","byte_start":274715,"byte_end":274819,"line_start":6,"line_end":6,"column_start":1,"column_end":105}},{"value":"/ the FMD-Index for finding suffix array intervals matching a given pattern in linear time.","span":{"file_name":"/Users/shelwitz/.cargo/registry/src/github.com-1ecc6299db9ec823/bio-0.39.0/src/data_structures/fmindex.rs","byte_start":274820,"byte_end":274913,"line_start":7,"line_end":7,"column_start":1,"column_end":94}},{"value":"/","span":{"file_name":"/Users/shelwitz/.cargo/registry/src/github.com-1ecc6299db9ec823/bio-0.39.0/src/data_structures/fmindex.rs","byte_start":274914,"byte_end":274917,"line_start":8,"line_end":8,"column_start":1,"column_end":4}},{"value":"/ # Examples","span":{"file_name":"/Users/shelwitz/.cargo/registry/src/github.com-1ecc6299db9ec823/bio-0.39.0/src/data_structures/fmindex.rs","byte_start":274918,"byte_end":274932,"line_start":9,"line_end":9,"column_start":1,"column_end":15}},{"value":"/","span":{"file_name":"/Users/shelwitz/.cargo/registry/src/github.com-1ecc6299db9ec823/bio-0.39.0/src/data_structures/fmindex.rs","byte_start":274933,"byte_end":274936,"line_start":10,"line_end":10,"column_start":1,"column_end":4}},{"value":"/ ## Generate","span":{"file_name":"/Users/shelwitz/.cargo/registry/src/github.com-1ecc6299db9ec823/bio-0.39.0/src/data_structures/fmindex.rs","byte_start":274937,"byte_end":274952,"line_start":11,"line_end":11,"column_start":1,"column_end":16}},{"value":"/","span":{"file_name":"/Users/shelwitz/.cargo/registry/src/github.com-1ecc6299db9ec823/bio-0.39.0/src/data_structures/fmindex.rs","byte_start":274953,"byte_end":274956,"line_start":12,"line_end":12,"column_start":1,"column_end":4}},{"value":"/ ```","span":{"file_name":"/Users/shelwitz/.cargo/registry/src/github.com-1ecc6299db9ec823/bio-0.39.0/src/data_structures/fmindex.rs","byte_start":274957,"byte_end":274964,"line_start":13,"line_end":13,"column_start":1,"column_end":8}},{"value":"/ use bio::alphabets::dna;","span":{"file_name":"/Users/shelwitz/.cargo/registry/src/github.com-1ecc6299db9ec823/bio-0.39.0/src/data_structures/fmindex.rs","byte_start":274965,"byte_end":274993,"line_start":14,"line_end":14,"column_start":1,"column_end":29}},{"value":"/ use bio::data_structures::bwt::{bwt, less, Occ};","span":{"file_name":"/Users/shelwitz/.cargo/registry/src/github.com-1ecc6299db9ec823/bio-0.39.0/src/data_structures/fmindex.rs","byte_start":274994,"byte_end":275046,"line_start":15,"line_end":15,"column_start":1,"column_end":53}},{"value":"/ use bio::data_structures::fmindex::{FMIndex, FMIndexable};","span":{"file_name":"/Users/shelwitz/.cargo/registry/src/github.com-1ecc6299db9ec823/bio-0.39.0/src/data_structures/fmindex.rs","byte_start":275047,"byte_end":275109,"line_start":16,"line_end":16,"column_start":1,"column_end":63}},{"value":"/ use bio::data_structures::suffix_array::suffix_array;","span":{"file_name":"/Users/shelwitz/.cargo/registry/src/github.com-1ecc6299db9ec823/bio-0.39.0/src/data_structures/fmindex.rs","byte_start":275110,"byte_end":275167,"line_start":17,"line_end":17,"column_start":1,"column_end":58}},{"value":"/","span":{"file_name":"/Users/shelwitz/.cargo/registry/src/github.com-1ecc6299db9ec823/bio-0.39.0/src/data_structures/fmindex.rs","byte_start":275168,"byte_end":275171,"line_start":18,"line_end":18,"column_start":1,"column_end":4}},{"value":"/ let text = b\"GCCTTAACATTATTACGCCTA$\";","span":{"file_name":"/Users/shelwitz/.cargo/registry/src/github.com-1ecc6299db9ec823/bio-0.39.0/src/data_structures/fmindex.rs","byte_start":275172,"byte_end":275213,"line_start":19,"line_end":19,"column_start":1,"column_end":42}},{"value":"/ let alphabet = dna::n_alphabet();","span":{"file_name":"/Users/shelwitz/.cargo/registry/src/github.com-1ecc6299db9ec823/bio-0.39.0/src/data_structures/fmindex.rs","byte_start":275214,"byte_end":275251,"line_start":20,"line_end":20,"column_start":1,"column_end":38}},{"value":"/ let sa = suffix_array(text);","span":{"file_name":"/Users/shelwitz/.cargo/registry/src/github.com-1ecc6299db9ec823/bio-0.39.0/src/data_structures/fmindex.rs","byte_start":275252,"byte_end":275284,"line_start":21,"line_end":21,"column_start":1,"column_end":33}},{"value":"/ let bwt = bwt(text, &sa);","span":{"file_name":"/Users/shelwitz/.cargo/registry/src/github.com-1ecc6299db9ec823/bio-0.39.0/src/data_structures/fmindex.rs","byte_start":275285,"byte_end":275314,"line_start":22,"line_end":22,"column_start":1,"column_end":30}},{"value":"/ let less = less(&bwt, &alphabet);","span":{"file_name":"/Users/shelwitz/.cargo/registry/src/github.com-1ecc6299db9ec823/bio-0.39.0/src/data_structures/fmindex.rs","byte_start":275315,"byte_end":275352,"line_start":23,"line_end":23,"column_start":1,"column_end":38}},{"value":"/ let occ = Occ::new(&bwt, 3, &alphabet);","span":{"file_name":"/Users/shelwitz/.cargo/registry/src/github.com-1ecc6299db9ec823/bio-0.39.0/src/data_structures/fmindex.rs","byte_start":275353,"byte_end":275396,"line_start":24,"line_end":24,"column_start":1,"column_end":44}},{"value":"/ let fm = FMIndex::new(&bwt, &less, &occ);","span":{"file_name":"/Users/shelwitz/.cargo/registry/src/github.com-1ecc6299db9ec823/bio-0.39.0/src/data_structures/fmindex.rs","byte_start":275397,"byte_end":275442,"line_start":25,"line_end":25,"column_start":1,"column_end":46}},{"value":"/ ```","span":{"file_name":"/Users/shelwitz/.cargo/registry/src/github.com-1ecc6299db9ec823/bio-0.39.0/src/data_structures/fmindex.rs","byte_start":275443,"byte_end":275450,"line_start":26,"line_end":26,"column_start":1,"column_end":8}},{"value":"/","span":{"file_name":"/Users/shelwitz/.cargo/registry/src/github.com-1ecc6299db9ec823/bio-0.39.0/src/data_structures/fmindex.rs","byte_start":275451,"byte_end":275454,"line_start":27,"line_end":27,"column_start":1,"column_end":4}},{"value":"/ ## Enclose in struct","span":{"file_name":"/Users/shelwitz/.cargo/registry/src/github.com-1ecc6299db9ec823/bio-0.39.0/src/data_structures/fmindex.rs","byte_start":275455,"byte_end":275479,"line_start":28,"line_end":28,"column_start":1,"column_end":25}},{"value":"/","span":{"file_name":"/Users/shelwitz/.cargo/registry/src/github.com-1ecc6299db9ec823/bio-0.39.0/src/data_structures/fmindex.rs","byte_start":275480,"byte_end":275483,"line_start":29,"line_end":29,"column_start":1,"column_end":4}},{"value":"/ `FMIndex` was designed to not forcibly own the BWT and auxiliary data structures.","span":{"file_name":"/Users/shelwitz/.cargo/registry/src/github.com-1ecc6299db9ec823/bio-0.39.0/src/data_structures/fmindex.rs","byte_start":275484,"byte_end":275569,"line_start":30,"line_end":30,"column_start":1,"column_end":86}},{"value":"/ It can take a reference (`&`), owned structs or any of the more complex pointer types.","span":{"file_name":"/Users/shelwitz/.cargo/registry/src/github.com-1ecc6299db9ec823/bio-0.39.0/src/data_structures/fmindex.rs","byte_start":275570,"byte_end":275660,"line_start":31,"line_end":31,"column_start":1,"column_end":91}},{"value":"/","span":{"file_name":"/Users/shelwitz/.cargo/registry/src/github.com-1ecc6299db9ec823/bio-0.39.0/src/data_structures/fmindex.rs","byte_start":275661,"byte_end":275664,"line_start":32,"line_end":32,"column_start":1,"column_end":4}},{"value":"/ ```","span":{"file_name":"/Users/shelwitz/.cargo/registry/src/github.com-1ecc6299db9ec823/bio-0.39.0/src/data_structures/fmindex.rs","byte_start":275665,"byte_end":275672,"line_start":33,"line_end":33,"column_start":1,"column_end":8}},{"value":"/ use bio::alphabets::dna;","span":{"file_name":"/Users/shelwitz/.cargo/registry/src/github.com-1ecc6299db9ec823/bio-0.39.0/src/data_structures/fmindex.rs","byte_start":275673,"byte_end":275701,"line_start":34,"line_end":34,"column_start":1,"column_end":29}},{"value":"/ use bio::data_structures::bwt::{bwt, less, Less, Occ, BWT};","span":{"file_name":"/Users/shelwitz/.cargo/registry/src/github.com-1ecc6299db9ec823/bio-0.39.0/src/data_structures/fmindex.rs","byte_start":275702,"byte_end":275765,"line_start":35,"line_end":35,"column_start":1,"column_end":64}},{"value":"/ use bio::data_structures::fmindex::{FMIndex, FMIndexable};","span":{"file_name":"/Users/shelwitz/.cargo/registry/src/github.com-1ecc6299db9ec823/bio-0.39.0/src/data_structures/fmindex.rs","byte_start":275766,"byte_end":275828,"line_start":36,"line_end":36,"column_start":1,"column_end":63}},{"value":"/ use bio::data_structures::suffix_array::suffix_array;","span":{"file_name":"/Users/shelwitz/.cargo/registry/src/github.com-1ecc6299db9ec823/bio-0.39.0/src/data_structures/fmindex.rs","byte_start":275829,"byte_end":275886,"line_start":37,"line_end":37,"column_start":1,"column_end":58}},{"value":"/ use bio::utils::TextSlice;","span":{"file_name":"/Users/shelwitz/.cargo/registry/src/github.com-1ecc6299db9ec823/bio-0.39.0/src/data_structures/fmindex.rs","byte_start":275887,"byte_end":275917,"line_start":38,"line_end":38,"column_start":1,"column_end":31}},{"value":"/","span":{"file_name":"/Users/shelwitz/.cargo/registry/src/github.com-1ecc6299db9ec823/bio-0.39.0/src/data_structures/fmindex.rs","byte_start":275918,"byte_end":275921,"line_start":39,"line_end":39,"column_start":1,"column_end":4}},{"value":"/ pub struct Example {","span":{"file_name":"/Users/shelwitz/.cargo/registry/src/github.com-1ecc6299db9ec823/bio-0.39.0/src/data_structures/fmindex.rs","byte_start":275922,"byte_end":275946,"line_start":40,"line_end":40,"column_start":1,"column_end":25}},{"value":"/     fmindex: FMIndex<BWT, Less, Occ>,","span":{"file_name":"/Users/shelwitz/.cargo/registry/src/github.com-1ecc6299db9ec823/bio-0.39.0/src/data_structures/fmindex.rs","byte_start":275947,"byte_end":275988,"line_start":41,"line_end":41,"column_start":1,"column_end":42}},{"value":"/ }","span":{"file_name":"/Users/shelwitz/.cargo/registry/src/github.com-1ecc6299db9ec823/bio-0.39.0/src/data_structures/fmindex.rs","byte_start":275989,"byte_end":275994,"line_start":42,"line_end":42,"column_start":1,"column_end":6}},{"value":"/","span":{"file_name":"/Users/shelwitz/.cargo/registry/src/github.com-1ecc6299db9ec823/bio-0.39.0/src/data_structures/fmindex.rs","byte_start":275995,"byte_end":275998,"line_start":43,"line_end":43,"column_start":1,"column_end":4}},{"value":"/ impl Example {","span":{"file_name":"/Users/shelwitz/.cargo/registry/src/github.com-1ecc6299db9ec823/bio-0.39.0/src/data_structures/fmindex.rs","byte_start":275999,"byte_end":276017,"line_start":44,"line_end":44,"column_start":1,"column_end":19}},{"value":"/     pub fn new(text: TextSlice) -> Self {","span":{"file_name":"/Users/shelwitz/.cargo/registry/src/github.com-1ecc6299db9ec823/bio-0.39.0/src/data_structures/fmindex.rs","byte_start":276018,"byte_end":276063,"line_start":45,"line_end":45,"column_start":1,"column_end":46}},{"value":"/         let alphabet = dna::n_alphabet();","span":{"file_name":"/Users/shelwitz/.cargo/registry/src/github.com-1ecc6299db9ec823/bio-0.39.0/src/data_structures/fmindex.rs","byte_start":276064,"byte_end":276109,"line_start":46,"line_end":46,"column_start":1,"column_end":46}},{"value":"/         let sa = suffix_array(text);","span":{"file_name":"/Users/shelwitz/.cargo/registry/src/github.com-1ecc6299db9ec823/bio-0.39.0/src/data_structures/fmindex.rs","byte_start":276110,"byte_end":276150,"line_start":47,"line_end":47,"column_start":1,"column_end":41}},{"value":"/         let bwt = bwt(text, &sa);","span":{"file_name":"/Users/shelwitz/.cargo/registry/src/github.com-1ecc6299db9ec823/bio-0.39.0/src/data_structures/fmindex.rs","byte_start":276151,"byte_end":276188,"line_start":48,"line_end":48,"column_start":1,"column_end":38}},{"value":"/         let less = less(&bwt, &alphabet);","span":{"file_name":"/Users/shelwitz/.cargo/registry/src/github.com-1ecc6299db9ec823/bio-0.39.0/src/data_structures/fmindex.rs","byte_start":276189,"byte_end":276234,"line_start":49,"line_end":49,"column_start":1,"column_end":46}},{"value":"/         let occ = Occ::new(&bwt, 3, &alphabet);","span":{"file_name":"/Users/shelwitz/.cargo/registry/src/github.com-1ecc6299db9ec823/bio-0.39.0/src/data_structures/fmindex.rs","byte_start":276235,"byte_end":276286,"line_start":50,"line_end":50,"column_start":1,"column_end":52}},{"value":"/         let fm = FMIndex::new(bwt, less, occ);","span":{"file_name":"/Users/shelwitz/.cargo/registry/src/github.com-1ecc6299db9ec823/bio-0.39.0/src/data_structures/fmindex.rs","byte_start":276287,"byte_end":276337,"line_start":51,"line_end":51,"column_start":1,"column_end":51}},{"value":"/         Example { fmindex: fm }","span":{"file_name":"/Users/shelwitz/.cargo/registry/src/github.com-1ecc6299db9ec823/bio-0.39.0/src/data_structures/fmindex.rs","byte_start":276338,"byte_end":276373,"line_start":52,"line_end":52,"column_start":1,"column_end":36}},{"value":"/     }","span":{"file_name":"/Users/shelwitz/.cargo/registry/src/github.com-1ecc6299db9ec823/bio-0.39.0/src/data_structures/fmindex.rs","byte_start":276374,"byte_end":276383,"line_start":53,"line_end":53,"column_start":1,"column_end":10}},{"value":"/ }","span":{"file_name":"/Users/shelwitz/.cargo/registry/src/github.com-1ecc6299db9ec823/bio-0.39.0/src/data_structures/fmindex.rs","byte_start":276384,"byte_end":276389,"line_start":54,"line_end":54,"column_start":1,"column_end":6}},{"value":"/ ```","span":{"file_name":"/Users/shelwitz/.cargo/registry/src/github.com-1ecc6299db9ec823/bio-0.39.0/src/data_structures/fmindex.rs","byte_start":276390,"byte_end":276397,"line_start":55,"line_end":55,"column_start":1,"column_end":8}}]},{"kind":"Struct","id":{"krate":0,"index":3659},"span":{"file_name":"/Users/shelwitz/.cargo/registry/src/github.com-1ecc6299db9ec823/bio-0.39.0/src/data_structures/fmindex.rs","byte_start":276706,"byte_end":276714,"line_start":67,"line_end":67,"column_start":12,"column_end":20},"name":"Interval","qualname":"::data_structures::fmindex::Interval","value":"Interval { lower, upper }","parent":null,"children":[{"krate":0,"index":3660},{"krate":0,"index":3661}],"decl_id":null,"docs":" A suffix array interval.\n","sig":null,"attributes":[{"value":"/ A suffix array interval.","span":{"file_name":"/Users/shelwitz/.cargo/registry/src/github.com-1ecc6299db9ec823/bio-0.39.0/src/data_structures/fmindex.rs","byte_start":276615,"byte_end":276643,"line_start":65,"line_end":65,"column_start":1,"column_end":29}}]},{"kind":"Field","id":{"krate":0,"index":3660},"span":{"file_name":"/Users/shelwitz/.cargo/registry/src/github.com-1ecc6299db9ec823/bio-0.39.0/src/data_structures/fmindex.rs","byte_start":276725,"byte_end":276730,"line_start":68,"line_end":68,"column_start":9,"column_end":14},"name":"lower","qualname":"::data_structures::fmindex::Interval::lower","value":"usize","parent":{"krate":0,"index":3659},"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Field","id":{"krate":0,"index":3661},"span":{"file_name":"/Users/shelwitz/.cargo/registry/src/github.com-1ecc6299db9ec823/bio-0.39.0/src/data_structures/fmindex.rs","byte_start":276747,"byte_end":276752,"line_start":69,"line_end":69,"column_start":9,"column_end":14},"name":"upper","qualname":"::data_structures::fmindex::Interval::upper","value":"usize","parent":{"krate":0,"index":3659},"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":624},"span":{"file_name":"/Users/shelwitz/.cargo/registry/src/github.com-1ecc6299db9ec823/bio-0.39.0/src/data_structures/fmindex.rs","byte_start":276791,"byte_end":276794,"line_start":73,"line_end":73,"column_start":12,"column_end":15},"name":"occ","qualname":"<Interval>::occ","value":"pub fn occ<SA: SuffixArray>(&Self, &SA) -> Vec<usize>","parent":null,"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"TupleVariant","id":{"krate":0,"index":3678},"span":{"file_name":"/Users/shelwitz/.cargo/registry/src/github.com-1ecc6299db9ec823/bio-0.39.0/src/data_structures/fmindex.rs","byte_start":277673,"byte_end":277681,"line_start":91,"line_end":91,"column_start":5,"column_end":13},"name":"Complete","qualname":"::data_structures::fmindex::BackwardSearchResult::Complete","value":"BackwardSearchResult::Complete(Interval)","parent":{"krate":0,"index":3677},"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"TupleVariant","id":{"krate":0,"index":3681},"span":{"file_name":"/Users/shelwitz/.cargo/registry/src/github.com-1ecc6299db9ec823/bio-0.39.0/src/data_structures/fmindex.rs","byte_start":277697,"byte_end":277704,"line_start":92,"line_end":92,"column_start":5,"column_end":12},"name":"Partial","qualname":"::data_structures::fmindex::BackwardSearchResult::Partial","value":"BackwardSearchResult::Partial(Interval, usize)","parent":{"krate":0,"index":3677},"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"TupleVariant","id":{"krate":0,"index":3685},"span":{"file_name":"/Users/shelwitz/.cargo/registry/src/github.com-1ecc6299db9ec823/bio-0.39.0/src/data_structures/fmindex.rs","byte_start":277727,"byte_end":277733,"line_start":93,"line_end":93,"column_start":5,"column_end":11},"name":"Absent","qualname":"::data_structures::fmindex::BackwardSearchResult::Absent","value":"BackwardSearchResult::Absent","parent":{"krate":0,"index":3677},"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Enum","id":{"krate":0,"index":3677},"span":{"file_name":"/Users/shelwitz/.cargo/registry/src/github.com-1ecc6299db9ec823/bio-0.39.0/src/data_structures/fmindex.rs","byte_start":277646,"byte_end":277666,"line_start":90,"line_end":90,"column_start":10,"column_end":30},"name":"BackwardSearchResult","qualname":"::data_structures::fmindex::BackwardSearchResult","value":"pub enum BackwardSearchResult {\n    Complete(Interval),\n    Partial(Interval, usize),\n    Absent,\n}","parent":null,"children":[{"krate":0,"index":3678},{"krate":0,"index":3681},{"krate":0,"index":3685}],"decl_id":null,"docs":" This enum represents the potential result states\n from a backward_search in the fm index.  The\n potential variants of the enum are:\n Complete(Interval) — the query matched completely. The interval is the\n range of suffix array indices matching the query string.\n Partial(Intarval, usize) - some suffix of the query matched, but not the whole query.\n The interval returned is the range of suffix array indices for the maximal\n matching suffix, and the `usize` is the length of the maximal matching suffix.\n Absent - None suffix of the pattern matched in the text.\n","sig":null,"attributes":[{"value":"/ This enum represents the potential result states","span":{"file_name":"/Users/shelwitz/.cargo/registry/src/github.com-1ecc6299db9ec823/bio-0.39.0/src/data_structures/fmindex.rs","byte_start":276993,"byte_end":277045,"line_start":80,"line_end":80,"column_start":1,"column_end":53}},{"value":"/ from a backward_search in the fm index.  The","span":{"file_name":"/Users/shelwitz/.cargo/registry/src/github.com-1ecc6299db9ec823/bio-0.39.0/src/data_structures/fmindex.rs","byte_start":277046,"byte_end":277094,"line_start":81,"line_end":81,"column_start":1,"column_end":49}},{"value":"/ potential variants of the enum are:","span":{"file_name":"/Users/shelwitz/.cargo/registry/src/github.com-1ecc6299db9ec823/bio-0.39.0/src/data_structures/fmindex.rs","byte_start":277095,"byte_end":277134,"line_start":82,"line_end":82,"column_start":1,"column_end":40}},{"value":"/ Complete(Interval) — the query matched completely. The interval is the","span":{"file_name":"/Users/shelwitz/.cargo/registry/src/github.com-1ecc6299db9ec823/bio-0.39.0/src/data_structures/fmindex.rs","byte_start":277135,"byte_end":277211,"line_start":83,"line_end":83,"column_start":1,"column_end":75}},{"value":"/ range of suffix array indices matching the query string.","span":{"file_name":"/Users/shelwitz/.cargo/registry/src/github.com-1ecc6299db9ec823/bio-0.39.0/src/data_structures/fmindex.rs","byte_start":277212,"byte_end":277272,"line_start":84,"line_end":84,"column_start":1,"column_end":61}},{"value":"/ Partial(Intarval, usize) - some suffix of the query matched, but not the whole query.","span":{"file_name":"/Users/shelwitz/.cargo/registry/src/github.com-1ecc6299db9ec823/bio-0.39.0/src/data_structures/fmindex.rs","byte_start":277273,"byte_end":277362,"line_start":85,"line_end":85,"column_start":1,"column_end":90}},{"value":"/ The interval returned is the range of suffix array indices for the maximal","span":{"file_name":"/Users/shelwitz/.cargo/registry/src/github.com-1ecc6299db9ec823/bio-0.39.0/src/data_structures/fmindex.rs","byte_start":277363,"byte_end":277441,"line_start":86,"line_end":86,"column_start":1,"column_end":79}},{"value":"/ matching suffix, and the `usize` is the length of the maximal matching suffix.","span":{"file_name":"/Users/shelwitz/.cargo/registry/src/github.com-1ecc6299db9ec823/bio-0.39.0/src/data_structures/fmindex.rs","byte_start":277442,"byte_end":277524,"line_start":87,"line_end":87,"column_start":1,"column_end":83}},{"value":"/ Absent - None suffix of the pattern matched in the text.","span":{"file_name":"/Users/shelwitz/.cargo/registry/src/github.com-1ecc6299db9ec823/bio-0.39.0/src/data_structures/fmindex.rs","byte_start":277525,"byte_end":277585,"line_start":88,"line_end":88,"column_start":1,"column_end":61}}]},{"kind":"Trait","id":{"krate":0,"index":627},"span":{"file_name":"/Users/shelwitz/.cargo/registry/src/github.com-1ecc6299db9ec823/bio-0.39.0/src/data_structures/fmindex.rs","byte_start":277748,"byte_end":277759,"line_start":96,"line_end":96,"column_start":11,"column_end":22},"name":"FMIndexable","qualname":"::data_structures::fmindex::FMIndexable","value":"FMIndexable","parent":null,"children":[{"krate":0,"index":628},{"krate":0,"index":629},{"krate":0,"index":630},{"krate":0,"index":631}],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":628},"span":{"file_name":"/Users/shelwitz/.cargo/registry/src/github.com-1ecc6299db9ec823/bio-0.39.0/src/data_structures/fmindex.rs","byte_start":277825,"byte_end":277828,"line_start":98,"line_end":98,"column_start":8,"column_end":11},"name":"occ","qualname":"::data_structures::fmindex::FMIndexable::occ","value":"pub fn occ(&Self, usize, u8) -> usize","parent":{"krate":0,"index":627},"children":[],"decl_id":null,"docs":" Get occurrence count of symbol a in BWT[..r+1].\n","sig":null,"attributes":[{"value":"/ Get occurrence count of symbol a in BWT[..r+1].","span":{"file_name":"/Users/shelwitz/.cargo/registry/src/github.com-1ecc6299db9ec823/bio-0.39.0/src/data_structures/fmindex.rs","byte_start":277766,"byte_end":277817,"line_start":97,"line_end":97,"column_start":5,"column_end":56}}]},{"kind":"Method","id":{"krate":0,"index":629},"span":{"file_name":"/Users/shelwitz/.cargo/registry/src/github.com-1ecc6299db9ec823/bio-0.39.0/src/data_structures/fmindex.rs","byte_start":277892,"byte_end":277896,"line_start":100,"line_end":100,"column_start":8,"column_end":12},"name":"less","qualname":"::data_structures::fmindex::FMIndexable::less","value":"pub fn less(&Self, u8) -> usize","parent":{"krate":0,"index":627},"children":[],"decl_id":null,"docs":" Also known as\n","sig":null,"attributes":[{"value":"/ Also known as","span":{"file_name":"/Users/shelwitz/.cargo/registry/src/github.com-1ecc6299db9ec823/bio-0.39.0/src/data_structures/fmindex.rs","byte_start":277867,"byte_end":277884,"line_start":99,"line_end":99,"column_start":5,"column_end":22}}]},{"kind":"Method","id":{"krate":0,"index":630},"span":{"file_name":"/Users/shelwitz/.cargo/registry/src/github.com-1ecc6299db9ec823/bio-0.39.0/src/data_structures/fmindex.rs","byte_start":277928,"byte_end":277931,"line_start":101,"line_end":101,"column_start":8,"column_end":11},"name":"bwt","qualname":"::data_structures::fmindex::FMIndexable::bwt","value":"pub fn bwt(&Self) -> &BWT","parent":{"krate":0,"index":627},"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":631},"span":{"file_name":"/Users/shelwitz/.cargo/registry/src/github.com-1ecc6299db9ec823/bio-0.39.0/src/data_structures/fmindex.rs","byte_start":279511,"byte_end":279526,"line_start":142,"line_end":142,"column_start":8,"column_end":23},"name":"backward_search","qualname":"::data_structures::fmindex::FMIndexable::backward_search","value":"pub fn backward_search<'b, P: Iterator<Item = &'b u8> +\n                       DoubleEndedIterator>(&Self, P) -> BackwardSearchResult","parent":{"krate":0,"index":627},"children":[],"decl_id":null,"docs":" Perform backward search, yielding `BackwardSearchResult` enum that\n contains the suffix array interval denoting exact occurrences of the given pattern\n of length m in the text if it exists, or the suffix array interval denoting the\n exact occurrences of a maximal matching suffix of the given pattern if it does\n not exist.  If none of the pattern can be matched, the `BackwardSearchResult` is\n `Absent`.\n Complexity: O(m).","sig":null,"attributes":[{"value":"/ Perform backward search, yielding `BackwardSearchResult` enum that","span":{"file_name":"/Users/shelwitz/.cargo/registry/src/github.com-1ecc6299db9ec823/bio-0.39.0/src/data_structures/fmindex.rs","byte_start":277953,"byte_end":278023,"line_start":103,"line_end":103,"column_start":5,"column_end":75}},{"value":"/ contains the suffix array interval denoting exact occurrences of the given pattern","span":{"file_name":"/Users/shelwitz/.cargo/registry/src/github.com-1ecc6299db9ec823/bio-0.39.0/src/data_structures/fmindex.rs","byte_start":278028,"byte_end":278114,"line_start":104,"line_end":104,"column_start":5,"column_end":91}},{"value":"/ of length m in the text if it exists, or the suffix array interval denoting the","span":{"file_name":"/Users/shelwitz/.cargo/registry/src/github.com-1ecc6299db9ec823/bio-0.39.0/src/data_structures/fmindex.rs","byte_start":278119,"byte_end":278202,"line_start":105,"line_end":105,"column_start":5,"column_end":88}},{"value":"/ exact occurrences of a maximal matching suffix of the given pattern if it does","span":{"file_name":"/Users/shelwitz/.cargo/registry/src/github.com-1ecc6299db9ec823/bio-0.39.0/src/data_structures/fmindex.rs","byte_start":278207,"byte_end":278289,"line_start":106,"line_end":106,"column_start":5,"column_end":87}},{"value":"/ not exist.  If none of the pattern can be matched, the `BackwardSearchResult` is","span":{"file_name":"/Users/shelwitz/.cargo/registry/src/github.com-1ecc6299db9ec823/bio-0.39.0/src/data_structures/fmindex.rs","byte_start":278294,"byte_end":278378,"line_start":107,"line_end":107,"column_start":5,"column_end":89}},{"value":"/ `Absent`.","span":{"file_name":"/Users/shelwitz/.cargo/registry/src/github.com-1ecc6299db9ec823/bio-0.39.0/src/data_structures/fmindex.rs","byte_start":278383,"byte_end":278396,"line_start":108,"line_end":108,"column_start":5,"column_end":18}},{"value":"/ Complexity: O(m).","span":{"file_name":"/Users/shelwitz/.cargo/registry/src/github.com-1ecc6299db9ec823/bio-0.39.0/src/data_structures/fmindex.rs","byte_start":278401,"byte_end":278422,"line_start":109,"line_end":109,"column_start":5,"column_end":26}},{"value":"/","span":{"file_name":"/Users/shelwitz/.cargo/registry/src/github.com-1ecc6299db9ec823/bio-0.39.0/src/data_structures/fmindex.rs","byte_start":278427,"byte_end":278430,"line_start":110,"line_end":110,"column_start":5,"column_end":8}},{"value":"/ # Arguments","span":{"file_name":"/Users/shelwitz/.cargo/registry/src/github.com-1ecc6299db9ec823/bio-0.39.0/src/data_structures/fmindex.rs","byte_start":278435,"byte_end":278450,"line_start":111,"line_end":111,"column_start":5,"column_end":20}},{"value":"/","span":{"file_name":"/Users/shelwitz/.cargo/registry/src/github.com-1ecc6299db9ec823/bio-0.39.0/src/data_structures/fmindex.rs","byte_start":278455,"byte_end":278458,"line_start":112,"line_end":112,"column_start":5,"column_end":8}},{"value":"/ * `pattern` - the pattern to search","span":{"file_name":"/Users/shelwitz/.cargo/registry/src/github.com-1ecc6299db9ec823/bio-0.39.0/src/data_structures/fmindex.rs","byte_start":278463,"byte_end":278502,"line_start":113,"line_end":113,"column_start":5,"column_end":44}},{"value":"/","span":{"file_name":"/Users/shelwitz/.cargo/registry/src/github.com-1ecc6299db9ec823/bio-0.39.0/src/data_structures/fmindex.rs","byte_start":278507,"byte_end":278510,"line_start":114,"line_end":114,"column_start":5,"column_end":8}},{"value":"/ # Example","span":{"file_name":"/Users/shelwitz/.cargo/registry/src/github.com-1ecc6299db9ec823/bio-0.39.0/src/data_structures/fmindex.rs","byte_start":278515,"byte_end":278528,"line_start":115,"line_end":115,"column_start":5,"column_end":18}},{"value":"/","span":{"file_name":"/Users/shelwitz/.cargo/registry/src/github.com-1ecc6299db9ec823/bio-0.39.0/src/data_structures/fmindex.rs","byte_start":278533,"byte_end":278536,"line_start":116,"line_end":116,"column_start":5,"column_end":8}},{"value":"/ ```","span":{"file_name":"/Users/shelwitz/.cargo/registry/src/github.com-1ecc6299db9ec823/bio-0.39.0/src/data_structures/fmindex.rs","byte_start":278541,"byte_end":278548,"line_start":117,"line_end":117,"column_start":5,"column_end":12}},{"value":"/ use bio::alphabets::dna;","span":{"file_name":"/Users/shelwitz/.cargo/registry/src/github.com-1ecc6299db9ec823/bio-0.39.0/src/data_structures/fmindex.rs","byte_start":278553,"byte_end":278581,"line_start":118,"line_end":118,"column_start":5,"column_end":33}},{"value":"/ use bio::data_structures::bwt::{bwt, less, Occ};","span":{"file_name":"/Users/shelwitz/.cargo/registry/src/github.com-1ecc6299db9ec823/bio-0.39.0/src/data_structures/fmindex.rs","byte_start":278586,"byte_end":278638,"line_start":119,"line_end":119,"column_start":5,"column_end":57}},{"value":"/ use bio::data_structures::fmindex::{BackwardSearchResult, FMIndex, FMIndexable};","span":{"file_name":"/Users/shelwitz/.cargo/registry/src/github.com-1ecc6299db9ec823/bio-0.39.0/src/data_structures/fmindex.rs","byte_start":278643,"byte_end":278727,"line_start":120,"line_end":120,"column_start":5,"column_end":89}},{"value":"/ use bio::data_structures::suffix_array::suffix_array;","span":{"file_name":"/Users/shelwitz/.cargo/registry/src/github.com-1ecc6299db9ec823/bio-0.39.0/src/data_structures/fmindex.rs","byte_start":278732,"byte_end":278789,"line_start":121,"line_end":121,"column_start":5,"column_end":62}},{"value":"/","span":{"file_name":"/Users/shelwitz/.cargo/registry/src/github.com-1ecc6299db9ec823/bio-0.39.0/src/data_structures/fmindex.rs","byte_start":278794,"byte_end":278797,"line_start":122,"line_end":122,"column_start":5,"column_end":8}},{"value":"/ let text = b\"GCCTTAACATTATTACGCCTA$\";","span":{"file_name":"/Users/shelwitz/.cargo/registry/src/github.com-1ecc6299db9ec823/bio-0.39.0/src/data_structures/fmindex.rs","byte_start":278802,"byte_end":278843,"line_start":123,"line_end":123,"column_start":5,"column_end":46}},{"value":"/ let alphabet = dna::n_alphabet();","span":{"file_name":"/Users/shelwitz/.cargo/registry/src/github.com-1ecc6299db9ec823/bio-0.39.0/src/data_structures/fmindex.rs","byte_start":278848,"byte_end":278885,"line_start":124,"line_end":124,"column_start":5,"column_end":42}},{"value":"/ let sa = suffix_array(text);","span":{"file_name":"/Users/shelwitz/.cargo/registry/src/github.com-1ecc6299db9ec823/bio-0.39.0/src/data_structures/fmindex.rs","byte_start":278890,"byte_end":278922,"line_start":125,"line_end":125,"column_start":5,"column_end":37}},{"value":"/ let bwt = bwt(text, &sa);","span":{"file_name":"/Users/shelwitz/.cargo/registry/src/github.com-1ecc6299db9ec823/bio-0.39.0/src/data_structures/fmindex.rs","byte_start":278927,"byte_end":278956,"line_start":126,"line_end":126,"column_start":5,"column_end":34}},{"value":"/ let less = less(&bwt, &alphabet);","span":{"file_name":"/Users/shelwitz/.cargo/registry/src/github.com-1ecc6299db9ec823/bio-0.39.0/src/data_structures/fmindex.rs","byte_start":278961,"byte_end":278998,"line_start":127,"line_end":127,"column_start":5,"column_end":42}},{"value":"/ let occ = Occ::new(&bwt, 3, &alphabet);","span":{"file_name":"/Users/shelwitz/.cargo/registry/src/github.com-1ecc6299db9ec823/bio-0.39.0/src/data_structures/fmindex.rs","byte_start":279003,"byte_end":279046,"line_start":128,"line_end":128,"column_start":5,"column_end":48}},{"value":"/ let fm = FMIndex::new(&bwt, &less, &occ);","span":{"file_name":"/Users/shelwitz/.cargo/registry/src/github.com-1ecc6299db9ec823/bio-0.39.0/src/data_structures/fmindex.rs","byte_start":279051,"byte_end":279096,"line_start":129,"line_end":129,"column_start":5,"column_end":50}},{"value":"/","span":{"file_name":"/Users/shelwitz/.cargo/registry/src/github.com-1ecc6299db9ec823/bio-0.39.0/src/data_structures/fmindex.rs","byte_start":279101,"byte_end":279104,"line_start":130,"line_end":130,"column_start":5,"column_end":8}},{"value":"/ let pattern = b\"TTA\";","span":{"file_name":"/Users/shelwitz/.cargo/registry/src/github.com-1ecc6299db9ec823/bio-0.39.0/src/data_structures/fmindex.rs","byte_start":279109,"byte_end":279134,"line_start":131,"line_end":131,"column_start":5,"column_end":30}},{"value":"/ let bsr = fm.backward_search(pattern.iter());","span":{"file_name":"/Users/shelwitz/.cargo/registry/src/github.com-1ecc6299db9ec823/bio-0.39.0/src/data_structures/fmindex.rs","byte_start":279139,"byte_end":279188,"line_start":132,"line_end":132,"column_start":5,"column_end":54}},{"value":"/","span":{"file_name":"/Users/shelwitz/.cargo/registry/src/github.com-1ecc6299db9ec823/bio-0.39.0/src/data_structures/fmindex.rs","byte_start":279193,"byte_end":279196,"line_start":133,"line_end":133,"column_start":5,"column_end":8}},{"value":"/ let positions = match bsr {","span":{"file_name":"/Users/shelwitz/.cargo/registry/src/github.com-1ecc6299db9ec823/bio-0.39.0/src/data_structures/fmindex.rs","byte_start":279201,"byte_end":279232,"line_start":134,"line_end":134,"column_start":5,"column_end":36}},{"value":"/     BackwardSearchResult::Complete(sai) => sai.occ(&sa),","span":{"file_name":"/Users/shelwitz/.cargo/registry/src/github.com-1ecc6299db9ec823/bio-0.39.0/src/data_structures/fmindex.rs","byte_start":279237,"byte_end":279297,"line_start":135,"line_end":135,"column_start":5,"column_end":65}},{"value":"/     BackwardSearchResult::Partial(sai, _l) => sai.occ(&sa),","span":{"file_name":"/Users/shelwitz/.cargo/registry/src/github.com-1ecc6299db9ec823/bio-0.39.0/src/data_structures/fmindex.rs","byte_start":279302,"byte_end":279365,"line_start":136,"line_end":136,"column_start":5,"column_end":68}},{"value":"/     BackwardSearchResult::Absent => Vec::<usize>::new()","span":{"file_name":"/Users/shelwitz/.cargo/registry/src/github.com-1ecc6299db9ec823/bio-0.39.0/src/data_structures/fmindex.rs","byte_start":279370,"byte_end":279429,"line_start":137,"line_end":137,"column_start":5,"column_end":64}},{"value":"/ };","span":{"file_name":"/Users/shelwitz/.cargo/registry/src/github.com-1ecc6299db9ec823/bio-0.39.0/src/data_structures/fmindex.rs","byte_start":279434,"byte_end":279440,"line_start":138,"line_end":138,"column_start":5,"column_end":11}},{"value":"/","span":{"file_name":"/Users/shelwitz/.cargo/registry/src/github.com-1ecc6299db9ec823/bio-0.39.0/src/data_structures/fmindex.rs","byte_start":279445,"byte_end":279448,"line_start":139,"line_end":139,"column_start":5,"column_end":8}},{"value":"/ assert_eq!(positions, [3, 12, 9]);","span":{"file_name":"/Users/shelwitz/.cargo/registry/src/github.com-1ecc6299db9ec823/bio-0.39.0/src/data_structures/fmindex.rs","byte_start":279453,"byte_end":279491,"line_start":140,"line_end":140,"column_start":5,"column_end":43}},{"value":"/ ```","span":{"file_name":"/Users/shelwitz/.cargo/registry/src/github.com-1ecc6299db9ec823/bio-0.39.0/src/data_structures/fmindex.rs","byte_start":279496,"byte_end":279503,"line_start":141,"line_end":141,"column_start":5,"column_end":12}}]},{"kind":"Struct","id":{"krate":0,"index":3702},"span":{"file_name":"/Users/shelwitz/.cargo/registry/src/github.com-1ecc6299db9ec823/bio-0.39.0/src/data_structures/fmindex.rs","byte_start":281732,"byte_end":281739,"line_start":205,"line_end":205,"column_start":12,"column_end":19},"name":"FMIndex","qualname":"::data_structures::fmindex::FMIndex","value":"FMIndex {  }","parent":null,"children":[{"krate":0,"index":3706},{"krate":0,"index":3707},{"krate":0,"index":3708}],"decl_id":null,"docs":" The Fast Index in Minute space (FM-Index, Ferragina and Manzini, 2000) for finding suffix array\n intervals matching a given pattern.\n","sig":null,"attributes":[{"value":"/ The Fast Index in Minute space (FM-Index, Ferragina and Manzini, 2000) for finding suffix array","span":{"file_name":"/Users/shelwitz/.cargo/registry/src/github.com-1ecc6299db9ec823/bio-0.39.0/src/data_structures/fmindex.rs","byte_start":281547,"byte_end":281646,"line_start":202,"line_end":202,"column_start":1,"column_end":100}},{"value":"/ intervals matching a given pattern.","span":{"file_name":"/Users/shelwitz/.cargo/registry/src/github.com-1ecc6299db9ec823/bio-0.39.0/src/data_structures/fmindex.rs","byte_start":281647,"byte_end":281686,"line_start":203,"line_end":203,"column_start":1,"column_end":40}}]},{"kind":"Method","id":{"krate":0,"index":645},"span":{"file_name":"/Users/shelwitz/.cargo/registry/src/github.com-1ecc6299db9ec823/bio-0.39.0/src/data_structures/fmindex.rs","byte_start":282577,"byte_end":282580,"line_start":234,"line_end":234,"column_start":12,"column_end":15},"name":"new","qualname":"<FMIndex<DBWT, DLess, DOcc>>::new","value":"pub fn new(DBWT, DLess, DOcc) -> Self","parent":null,"children":[],"decl_id":null,"docs":" Construct a new instance of the FM index.","sig":null,"attributes":[{"value":"/ Construct a new instance of the FM index.","span":{"file_name":"/Users/shelwitz/.cargo/registry/src/github.com-1ecc6299db9ec823/bio-0.39.0/src/data_structures/fmindex.rs","byte_start":282364,"byte_end":282409,"line_start":227,"line_end":227,"column_start":5,"column_end":50}},{"value":"/","span":{"file_name":"/Users/shelwitz/.cargo/registry/src/github.com-1ecc6299db9ec823/bio-0.39.0/src/data_structures/fmindex.rs","byte_start":282414,"byte_end":282417,"line_start":228,"line_end":228,"column_start":5,"column_end":8}},{"value":"/ # Arguments","span":{"file_name":"/Users/shelwitz/.cargo/registry/src/github.com-1ecc6299db9ec823/bio-0.39.0/src/data_structures/fmindex.rs","byte_start":282422,"byte_end":282437,"line_start":229,"line_end":229,"column_start":5,"column_end":20}},{"value":"/","span":{"file_name":"/Users/shelwitz/.cargo/registry/src/github.com-1ecc6299db9ec823/bio-0.39.0/src/data_structures/fmindex.rs","byte_start":282442,"byte_end":282445,"line_start":230,"line_end":230,"column_start":5,"column_end":8}},{"value":"/ * `bwt` - the BWT","span":{"file_name":"/Users/shelwitz/.cargo/registry/src/github.com-1ecc6299db9ec823/bio-0.39.0/src/data_structures/fmindex.rs","byte_start":282450,"byte_end":282471,"line_start":231,"line_end":231,"column_start":5,"column_end":26}},{"value":"/ * `less` - the less array of the BWT","span":{"file_name":"/Users/shelwitz/.cargo/registry/src/github.com-1ecc6299db9ec823/bio-0.39.0/src/data_structures/fmindex.rs","byte_start":282476,"byte_end":282516,"line_start":232,"line_end":232,"column_start":5,"column_end":45}},{"value":"/ * `occ` - the occurence array of the BWT","span":{"file_name":"/Users/shelwitz/.cargo/registry/src/github.com-1ecc6299db9ec823/bio-0.39.0/src/data_structures/fmindex.rs","byte_start":282521,"byte_end":282565,"line_start":233,"line_end":233,"column_start":5,"column_end":49}}]},{"kind":"Struct","id":{"krate":0,"index":3772},"span":{"file_name":"/Users/shelwitz/.cargo/registry/src/github.com-1ecc6299db9ec823/bio-0.39.0/src/data_structures/fmindex.rs","byte_start":282815,"byte_end":282825,"line_start":241,"line_end":241,"column_start":12,"column_end":22},"name":"BiInterval","qualname":"::data_structures::fmindex::BiInterval","value":"BiInterval {  }","parent":null,"children":[{"krate":0,"index":3773},{"krate":0,"index":3774},{"krate":0,"index":3775},{"krate":0,"index":3776}],"decl_id":null,"docs":" A bi-interval on suffix array of the forward and reverse strand of a DNA text.\n","sig":null,"attributes":[{"value":"/ A bi-interval on suffix array of the forward and reverse strand of a DNA text.","span":{"file_name":"/Users/shelwitz/.cargo/registry/src/github.com-1ecc6299db9ec823/bio-0.39.0/src/data_structures/fmindex.rs","byte_start":282670,"byte_end":282752,"line_start":239,"line_end":239,"column_start":1,"column_end":83}}]},{"kind":"Method","id":{"krate":0,"index":647},"span":{"file_name":"/Users/shelwitz/.cargo/registry/src/github.com-1ecc6299db9ec823/bio-0.39.0/src/data_structures/fmindex.rs","byte_start":282940,"byte_end":282947,"line_start":249,"line_end":249,"column_start":12,"column_end":19},"name":"forward","qualname":"<BiInterval>::forward","value":"pub fn forward(&Self) -> Interval","parent":null,"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":648},"span":{"file_name":"/Users/shelwitz/.cargo/registry/src/github.com-1ecc6299db9ec823/bio-0.39.0/src/data_structures/fmindex.rs","byte_start":283089,"byte_end":283096,"line_start":255,"line_end":255,"column_start":12,"column_end":19},"name":"revcomp","qualname":"<BiInterval>::revcomp","value":"pub fn revcomp(&Self) -> Interval","parent":null,"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Struct","id":{"krate":0,"index":3792},"span":{"file_name":"/Users/shelwitz/.cargo/registry/src/github.com-1ecc6299db9ec823/bio-0.39.0/src/data_structures/fmindex.rs","byte_start":283629,"byte_end":283637,"line_start":275,"line_end":275,"column_start":12,"column_end":20},"name":"FMDIndex","qualname":"::data_structures::fmindex::FMDIndex","value":"FMDIndex {  }","parent":null,"children":[{"krate":0,"index":3796}],"decl_id":null,"docs":" The FMD-Index for linear time search of supermaximal exact matches on forward and reverse\n strand of DNA texts (Li, 2012).\n","sig":null,"attributes":[{"value":"/ The FMD-Index for linear time search of supermaximal exact matches on forward and reverse","span":{"file_name":"/Users/shelwitz/.cargo/registry/src/github.com-1ecc6299db9ec823/bio-0.39.0/src/data_structures/fmindex.rs","byte_start":283454,"byte_end":283547,"line_start":272,"line_end":272,"column_start":1,"column_end":94}},{"value":"/ strand of DNA texts (Li, 2012).","span":{"file_name":"/Users/shelwitz/.cargo/registry/src/github.com-1ecc6299db9ec823/bio-0.39.0/src/data_structures/fmindex.rs","byte_start":283548,"byte_end":283583,"line_start":273,"line_end":273,"column_start":1,"column_end":36}}]},{"kind":"Method","id":{"krate":0,"index":666},"span":{"file_name":"/Users/shelwitz/.cargo/registry/src/github.com-1ecc6299db9ec823/bio-0.39.0/src/data_structures/fmindex.rs","byte_start":286510,"byte_end":286515,"line_start":352,"line_end":352,"column_start":12,"column_end":17},"name":"smems","qualname":"<FMDIndex<DBWT, DLess, DOcc>>::smems","value":"pub fn smems(&Self, &[u8], usize, usize) -> Vec<(BiInterval, usize, usize)>","parent":null,"children":[],"decl_id":null,"docs":" Find supermaximal exact matches (of length >= l) of given pattern that overlap position i in the pattern.\n Complexity O(m) with pattern of length m.","sig":null,"attributes":[{"value":"/ Find supermaximal exact matches (of length >= l) of given pattern that overlap position i in the pattern.","span":{"file_name":"/Users/shelwitz/.cargo/registry/src/github.com-1ecc6299db9ec823/bio-0.39.0/src/data_structures/fmindex.rs","byte_start":285236,"byte_end":285345,"line_start":319,"line_end":319,"column_start":5,"column_end":114}},{"value":"/ Complexity O(m) with pattern of length m.","span":{"file_name":"/Users/shelwitz/.cargo/registry/src/github.com-1ecc6299db9ec823/bio-0.39.0/src/data_structures/fmindex.rs","byte_start":285350,"byte_end":285395,"line_start":320,"line_end":320,"column_start":5,"column_end":50}},{"value":"/","span":{"file_name":"/Users/shelwitz/.cargo/registry/src/github.com-1ecc6299db9ec823/bio-0.39.0/src/data_structures/fmindex.rs","byte_start":285400,"byte_end":285403,"line_start":321,"line_end":321,"column_start":5,"column_end":8}},{"value":"/ # Example","span":{"file_name":"/Users/shelwitz/.cargo/registry/src/github.com-1ecc6299db9ec823/bio-0.39.0/src/data_structures/fmindex.rs","byte_start":285408,"byte_end":285421,"line_start":322,"line_end":322,"column_start":5,"column_end":18}},{"value":"/","span":{"file_name":"/Users/shelwitz/.cargo/registry/src/github.com-1ecc6299db9ec823/bio-0.39.0/src/data_structures/fmindex.rs","byte_start":285426,"byte_end":285429,"line_start":323,"line_end":323,"column_start":5,"column_end":8}},{"value":"/ ```","span":{"file_name":"/Users/shelwitz/.cargo/registry/src/github.com-1ecc6299db9ec823/bio-0.39.0/src/data_structures/fmindex.rs","byte_start":285434,"byte_end":285441,"line_start":324,"line_end":324,"column_start":5,"column_end":12}},{"value":"/ use bio::alphabets::dna;","span":{"file_name":"/Users/shelwitz/.cargo/registry/src/github.com-1ecc6299db9ec823/bio-0.39.0/src/data_structures/fmindex.rs","byte_start":285446,"byte_end":285474,"line_start":325,"line_end":325,"column_start":5,"column_end":33}},{"value":"/ use bio::data_structures::bwt::{bwt, less, Occ};","span":{"file_name":"/Users/shelwitz/.cargo/registry/src/github.com-1ecc6299db9ec823/bio-0.39.0/src/data_structures/fmindex.rs","byte_start":285479,"byte_end":285531,"line_start":326,"line_end":326,"column_start":5,"column_end":57}},{"value":"/ use bio::data_structures::fmindex::{FMDIndex, FMIndex};","span":{"file_name":"/Users/shelwitz/.cargo/registry/src/github.com-1ecc6299db9ec823/bio-0.39.0/src/data_structures/fmindex.rs","byte_start":285536,"byte_end":285595,"line_start":327,"line_end":327,"column_start":5,"column_end":64}},{"value":"/ use bio::data_structures::suffix_array::suffix_array;","span":{"file_name":"/Users/shelwitz/.cargo/registry/src/github.com-1ecc6299db9ec823/bio-0.39.0/src/data_structures/fmindex.rs","byte_start":285600,"byte_end":285657,"line_start":328,"line_end":328,"column_start":5,"column_end":62}},{"value":"/","span":{"file_name":"/Users/shelwitz/.cargo/registry/src/github.com-1ecc6299db9ec823/bio-0.39.0/src/data_structures/fmindex.rs","byte_start":285662,"byte_end":285665,"line_start":329,"line_end":329,"column_start":5,"column_end":8}},{"value":"/ let text = b\"ATTC$GAAT$\";","span":{"file_name":"/Users/shelwitz/.cargo/registry/src/github.com-1ecc6299db9ec823/bio-0.39.0/src/data_structures/fmindex.rs","byte_start":285670,"byte_end":285699,"line_start":330,"line_end":330,"column_start":5,"column_end":34}},{"value":"/ let alphabet = dna::n_alphabet();","span":{"file_name":"/Users/shelwitz/.cargo/registry/src/github.com-1ecc6299db9ec823/bio-0.39.0/src/data_structures/fmindex.rs","byte_start":285704,"byte_end":285741,"line_start":331,"line_end":331,"column_start":5,"column_end":42}},{"value":"/ let sa = suffix_array(text);","span":{"file_name":"/Users/shelwitz/.cargo/registry/src/github.com-1ecc6299db9ec823/bio-0.39.0/src/data_structures/fmindex.rs","byte_start":285746,"byte_end":285778,"line_start":332,"line_end":332,"column_start":5,"column_end":37}},{"value":"/ let bwt = bwt(text, &sa);","span":{"file_name":"/Users/shelwitz/.cargo/registry/src/github.com-1ecc6299db9ec823/bio-0.39.0/src/data_structures/fmindex.rs","byte_start":285783,"byte_end":285812,"line_start":333,"line_end":333,"column_start":5,"column_end":34}},{"value":"/ let less = less(&bwt, &alphabet);","span":{"file_name":"/Users/shelwitz/.cargo/registry/src/github.com-1ecc6299db9ec823/bio-0.39.0/src/data_structures/fmindex.rs","byte_start":285817,"byte_end":285854,"line_start":334,"line_end":334,"column_start":5,"column_end":42}},{"value":"/ let occ = Occ::new(&bwt, 3, &alphabet);","span":{"file_name":"/Users/shelwitz/.cargo/registry/src/github.com-1ecc6299db9ec823/bio-0.39.0/src/data_structures/fmindex.rs","byte_start":285859,"byte_end":285902,"line_start":335,"line_end":335,"column_start":5,"column_end":48}},{"value":"/ let fm = FMIndex::new(&bwt, &less, &occ);","span":{"file_name":"/Users/shelwitz/.cargo/registry/src/github.com-1ecc6299db9ec823/bio-0.39.0/src/data_structures/fmindex.rs","byte_start":285907,"byte_end":285952,"line_start":336,"line_end":336,"column_start":5,"column_end":50}},{"value":"/ let fmdindex = FMDIndex::from(fm);","span":{"file_name":"/Users/shelwitz/.cargo/registry/src/github.com-1ecc6299db9ec823/bio-0.39.0/src/data_structures/fmindex.rs","byte_start":285957,"byte_end":285995,"line_start":337,"line_end":337,"column_start":5,"column_end":43}},{"value":"/","span":{"file_name":"/Users/shelwitz/.cargo/registry/src/github.com-1ecc6299db9ec823/bio-0.39.0/src/data_structures/fmindex.rs","byte_start":286000,"byte_end":286003,"line_start":338,"line_end":338,"column_start":5,"column_end":8}},{"value":"/ let pattern = b\"ATT\";","span":{"file_name":"/Users/shelwitz/.cargo/registry/src/github.com-1ecc6299db9ec823/bio-0.39.0/src/data_structures/fmindex.rs","byte_start":286008,"byte_end":286033,"line_start":339,"line_end":339,"column_start":5,"column_end":30}},{"value":"/ let intervals = fmdindex.smems(pattern, 2, 0);","span":{"file_name":"/Users/shelwitz/.cargo/registry/src/github.com-1ecc6299db9ec823/bio-0.39.0/src/data_structures/fmindex.rs","byte_start":286038,"byte_end":286088,"line_start":340,"line_end":340,"column_start":5,"column_end":55}},{"value":"/","span":{"file_name":"/Users/shelwitz/.cargo/registry/src/github.com-1ecc6299db9ec823/bio-0.39.0/src/data_structures/fmindex.rs","byte_start":286093,"byte_end":286096,"line_start":341,"line_end":341,"column_start":5,"column_end":8}},{"value":"/ let forward_positions = intervals[0].0.forward().occ(&sa);","span":{"file_name":"/Users/shelwitz/.cargo/registry/src/github.com-1ecc6299db9ec823/bio-0.39.0/src/data_structures/fmindex.rs","byte_start":286101,"byte_end":286163,"line_start":342,"line_end":342,"column_start":5,"column_end":67}},{"value":"/ let revcomp_positions = intervals[0].0.revcomp().occ(&sa);","span":{"file_name":"/Users/shelwitz/.cargo/registry/src/github.com-1ecc6299db9ec823/bio-0.39.0/src/data_structures/fmindex.rs","byte_start":286168,"byte_end":286230,"line_start":343,"line_end":343,"column_start":5,"column_end":67}},{"value":"/ let pattern_position = intervals[0].1;","span":{"file_name":"/Users/shelwitz/.cargo/registry/src/github.com-1ecc6299db9ec823/bio-0.39.0/src/data_structures/fmindex.rs","byte_start":286235,"byte_end":286277,"line_start":344,"line_end":344,"column_start":5,"column_end":47}},{"value":"/ let smem_len = intervals[0].2;","span":{"file_name":"/Users/shelwitz/.cargo/registry/src/github.com-1ecc6299db9ec823/bio-0.39.0/src/data_structures/fmindex.rs","byte_start":286282,"byte_end":286316,"line_start":345,"line_end":345,"column_start":5,"column_end":39}},{"value":"/","span":{"file_name":"/Users/shelwitz/.cargo/registry/src/github.com-1ecc6299db9ec823/bio-0.39.0/src/data_structures/fmindex.rs","byte_start":286321,"byte_end":286324,"line_start":346,"line_end":346,"column_start":5,"column_end":8}},{"value":"/ assert_eq!(forward_positions, [0]);","span":{"file_name":"/Users/shelwitz/.cargo/registry/src/github.com-1ecc6299db9ec823/bio-0.39.0/src/data_structures/fmindex.rs","byte_start":286329,"byte_end":286368,"line_start":347,"line_end":347,"column_start":5,"column_end":44}},{"value":"/ assert_eq!(revcomp_positions, [6]);","span":{"file_name":"/Users/shelwitz/.cargo/registry/src/github.com-1ecc6299db9ec823/bio-0.39.0/src/data_structures/fmindex.rs","byte_start":286373,"byte_end":286412,"line_start":348,"line_end":348,"column_start":5,"column_end":44}},{"value":"/ assert_eq!(pattern_position, 0);","span":{"file_name":"/Users/shelwitz/.cargo/registry/src/github.com-1ecc6299db9ec823/bio-0.39.0/src/data_structures/fmindex.rs","byte_start":286417,"byte_end":286453,"line_start":349,"line_end":349,"column_start":5,"column_end":41}},{"value":"/ assert_eq!(smem_len, 3);","span":{"file_name":"/Users/shelwitz/.cargo/registry/src/github.com-1ecc6299db9ec823/bio-0.39.0/src/data_structures/fmindex.rs","byte_start":286458,"byte_end":286486,"line_start":350,"line_end":350,"column_start":5,"column_end":33}},{"value":"/ ```","span":{"file_name":"/Users/shelwitz/.cargo/registry/src/github.com-1ecc6299db9ec823/bio-0.39.0/src/data_structures/fmindex.rs","byte_start":286491,"byte_end":286498,"line_start":351,"line_end":351,"column_start":5,"column_end":12}}]},{"kind":"Method","id":{"krate":0,"index":667},"span":{"file_name":"/Users/shelwitz/.cargo/registry/src/github.com-1ecc6299db9ec823/bio-0.39.0/src/data_structures/fmindex.rs","byte_start":290704,"byte_end":290713,"line_start":462,"line_end":462,"column_start":12,"column_end":21},"name":"all_smems","qualname":"<FMDIndex<DBWT, DLess, DOcc>>::all_smems","value":"pub fn all_smems(&Self, &[u8], usize) -> Vec<(BiInterval, usize, usize)>","parent":null,"children":[],"decl_id":null,"docs":" Find all supermaximal exact matches (of length >= l) of given pattern.\n Complexity O(m^2) with pattern of length m.","sig":null,"attributes":[{"value":"/ Find all supermaximal exact matches (of length >= l) of given pattern.","span":{"file_name":"/Users/shelwitz/.cargo/registry/src/github.com-1ecc6299db9ec823/bio-0.39.0/src/data_structures/fmindex.rs","byte_start":289195,"byte_end":289269,"line_start":421,"line_end":421,"column_start":5,"column_end":79}},{"value":"/ Complexity O(m^2) with pattern of length m.","span":{"file_name":"/Users/shelwitz/.cargo/registry/src/github.com-1ecc6299db9ec823/bio-0.39.0/src/data_structures/fmindex.rs","byte_start":289274,"byte_end":289321,"line_start":422,"line_end":422,"column_start":5,"column_end":52}},{"value":"/","span":{"file_name":"/Users/shelwitz/.cargo/registry/src/github.com-1ecc6299db9ec823/bio-0.39.0/src/data_structures/fmindex.rs","byte_start":289326,"byte_end":289329,"line_start":423,"line_end":423,"column_start":5,"column_end":8}},{"value":"/ # Example","span":{"file_name":"/Users/shelwitz/.cargo/registry/src/github.com-1ecc6299db9ec823/bio-0.39.0/src/data_structures/fmindex.rs","byte_start":289334,"byte_end":289347,"line_start":424,"line_end":424,"column_start":5,"column_end":18}},{"value":"/","span":{"file_name":"/Users/shelwitz/.cargo/registry/src/github.com-1ecc6299db9ec823/bio-0.39.0/src/data_structures/fmindex.rs","byte_start":289352,"byte_end":289355,"line_start":425,"line_end":425,"column_start":5,"column_end":8}},{"value":"/ ```","span":{"file_name":"/Users/shelwitz/.cargo/registry/src/github.com-1ecc6299db9ec823/bio-0.39.0/src/data_structures/fmindex.rs","byte_start":289360,"byte_end":289367,"line_start":426,"line_end":426,"column_start":5,"column_end":12}},{"value":"/ use bio::alphabets::dna;","span":{"file_name":"/Users/shelwitz/.cargo/registry/src/github.com-1ecc6299db9ec823/bio-0.39.0/src/data_structures/fmindex.rs","byte_start":289372,"byte_end":289400,"line_start":427,"line_end":427,"column_start":5,"column_end":33}},{"value":"/ use bio::data_structures::bwt::{bwt, less, Occ};","span":{"file_name":"/Users/shelwitz/.cargo/registry/src/github.com-1ecc6299db9ec823/bio-0.39.0/src/data_structures/fmindex.rs","byte_start":289405,"byte_end":289457,"line_start":428,"line_end":428,"column_start":5,"column_end":57}},{"value":"/ use bio::data_structures::fmindex::{FMDIndex, FMIndex};","span":{"file_name":"/Users/shelwitz/.cargo/registry/src/github.com-1ecc6299db9ec823/bio-0.39.0/src/data_structures/fmindex.rs","byte_start":289462,"byte_end":289521,"line_start":429,"line_end":429,"column_start":5,"column_end":64}},{"value":"/ use bio::data_structures::suffix_array::suffix_array;","span":{"file_name":"/Users/shelwitz/.cargo/registry/src/github.com-1ecc6299db9ec823/bio-0.39.0/src/data_structures/fmindex.rs","byte_start":289526,"byte_end":289583,"line_start":430,"line_end":430,"column_start":5,"column_end":62}},{"value":"/","span":{"file_name":"/Users/shelwitz/.cargo/registry/src/github.com-1ecc6299db9ec823/bio-0.39.0/src/data_structures/fmindex.rs","byte_start":289588,"byte_end":289591,"line_start":431,"line_end":431,"column_start":5,"column_end":8}},{"value":"/ let text = b\"ATTCGGGG$CCCCGAAT$\";","span":{"file_name":"/Users/shelwitz/.cargo/registry/src/github.com-1ecc6299db9ec823/bio-0.39.0/src/data_structures/fmindex.rs","byte_start":289596,"byte_end":289633,"line_start":432,"line_end":432,"column_start":5,"column_end":42}},{"value":"/ let alphabet = dna::n_alphabet();","span":{"file_name":"/Users/shelwitz/.cargo/registry/src/github.com-1ecc6299db9ec823/bio-0.39.0/src/data_structures/fmindex.rs","byte_start":289638,"byte_end":289675,"line_start":433,"line_end":433,"column_start":5,"column_end":42}},{"value":"/ let sa = suffix_array(text);","span":{"file_name":"/Users/shelwitz/.cargo/registry/src/github.com-1ecc6299db9ec823/bio-0.39.0/src/data_structures/fmindex.rs","byte_start":289680,"byte_end":289712,"line_start":434,"line_end":434,"column_start":5,"column_end":37}},{"value":"/ let bwt = bwt(text, &sa);","span":{"file_name":"/Users/shelwitz/.cargo/registry/src/github.com-1ecc6299db9ec823/bio-0.39.0/src/data_structures/fmindex.rs","byte_start":289717,"byte_end":289746,"line_start":435,"line_end":435,"column_start":5,"column_end":34}},{"value":"/ let less = less(&bwt, &alphabet);","span":{"file_name":"/Users/shelwitz/.cargo/registry/src/github.com-1ecc6299db9ec823/bio-0.39.0/src/data_structures/fmindex.rs","byte_start":289751,"byte_end":289788,"line_start":436,"line_end":436,"column_start":5,"column_end":42}},{"value":"/ let occ = Occ::new(&bwt, 3, &alphabet);","span":{"file_name":"/Users/shelwitz/.cargo/registry/src/github.com-1ecc6299db9ec823/bio-0.39.0/src/data_structures/fmindex.rs","byte_start":289793,"byte_end":289836,"line_start":437,"line_end":437,"column_start":5,"column_end":48}},{"value":"/ let fm = FMIndex::new(&bwt, &less, &occ);","span":{"file_name":"/Users/shelwitz/.cargo/registry/src/github.com-1ecc6299db9ec823/bio-0.39.0/src/data_structures/fmindex.rs","byte_start":289841,"byte_end":289886,"line_start":438,"line_end":438,"column_start":5,"column_end":50}},{"value":"/ let fmdindex = FMDIndex::from(fm);","span":{"file_name":"/Users/shelwitz/.cargo/registry/src/github.com-1ecc6299db9ec823/bio-0.39.0/src/data_structures/fmindex.rs","byte_start":289891,"byte_end":289929,"line_start":439,"line_end":439,"column_start":5,"column_end":43}},{"value":"/","span":{"file_name":"/Users/shelwitz/.cargo/registry/src/github.com-1ecc6299db9ec823/bio-0.39.0/src/data_structures/fmindex.rs","byte_start":289934,"byte_end":289937,"line_start":440,"line_end":440,"column_start":5,"column_end":8}},{"value":"/ let pattern = b\"ATTGGGG\";","span":{"file_name":"/Users/shelwitz/.cargo/registry/src/github.com-1ecc6299db9ec823/bio-0.39.0/src/data_structures/fmindex.rs","byte_start":289942,"byte_end":289971,"line_start":441,"line_end":441,"column_start":5,"column_end":34}},{"value":"/ let intervals = fmdindex.all_smems(pattern, 0);","span":{"file_name":"/Users/shelwitz/.cargo/registry/src/github.com-1ecc6299db9ec823/bio-0.39.0/src/data_structures/fmindex.rs","byte_start":289976,"byte_end":290027,"line_start":442,"line_end":442,"column_start":5,"column_end":56}},{"value":"/ assert_eq!(intervals.len(), 2);","span":{"file_name":"/Users/shelwitz/.cargo/registry/src/github.com-1ecc6299db9ec823/bio-0.39.0/src/data_structures/fmindex.rs","byte_start":290032,"byte_end":290067,"line_start":443,"line_end":443,"column_start":5,"column_end":40}},{"value":"/","span":{"file_name":"/Users/shelwitz/.cargo/registry/src/github.com-1ecc6299db9ec823/bio-0.39.0/src/data_structures/fmindex.rs","byte_start":290072,"byte_end":290075,"line_start":444,"line_end":444,"column_start":5,"column_end":8}},{"value":"/ let solutions = vec![[0, 14, 0, 3], [4, 9, 3, 4]];","span":{"file_name":"/Users/shelwitz/.cargo/registry/src/github.com-1ecc6299db9ec823/bio-0.39.0/src/data_structures/fmindex.rs","byte_start":290080,"byte_end":290134,"line_start":445,"line_end":445,"column_start":5,"column_end":59}},{"value":"/ for (i, interval) in intervals.iter().enumerate() {","span":{"file_name":"/Users/shelwitz/.cargo/registry/src/github.com-1ecc6299db9ec823/bio-0.39.0/src/data_structures/fmindex.rs","byte_start":290139,"byte_end":290194,"line_start":446,"line_end":446,"column_start":5,"column_end":60}},{"value":"/     let forward_positions = interval.0.forward().occ(&sa);","span":{"file_name":"/Users/shelwitz/.cargo/registry/src/github.com-1ecc6299db9ec823/bio-0.39.0/src/data_structures/fmindex.rs","byte_start":290199,"byte_end":290261,"line_start":447,"line_end":447,"column_start":5,"column_end":67}},{"value":"/     let revcomp_positions = interval.0.revcomp().occ(&sa);","span":{"file_name":"/Users/shelwitz/.cargo/registry/src/github.com-1ecc6299db9ec823/bio-0.39.0/src/data_structures/fmindex.rs","byte_start":290266,"byte_end":290328,"line_start":448,"line_end":448,"column_start":5,"column_end":67}},{"value":"/     let pattern_position = interval.1;","span":{"file_name":"/Users/shelwitz/.cargo/registry/src/github.com-1ecc6299db9ec823/bio-0.39.0/src/data_structures/fmindex.rs","byte_start":290333,"byte_end":290375,"line_start":449,"line_end":449,"column_start":5,"column_end":47}},{"value":"/     let smem_len = interval.2;","span":{"file_name":"/Users/shelwitz/.cargo/registry/src/github.com-1ecc6299db9ec823/bio-0.39.0/src/data_structures/fmindex.rs","byte_start":290380,"byte_end":290414,"line_start":450,"line_end":450,"column_start":5,"column_end":39}},{"value":"/     assert_eq!(","span":{"file_name":"/Users/shelwitz/.cargo/registry/src/github.com-1ecc6299db9ec823/bio-0.39.0/src/data_structures/fmindex.rs","byte_start":290419,"byte_end":290438,"line_start":451,"line_end":451,"column_start":5,"column_end":24}},{"value":"/         [","span":{"file_name":"/Users/shelwitz/.cargo/registry/src/github.com-1ecc6299db9ec823/bio-0.39.0/src/data_structures/fmindex.rs","byte_start":290443,"byte_end":290456,"line_start":452,"line_end":452,"column_start":5,"column_end":18}},{"value":"/             forward_positions[0],","span":{"file_name":"/Users/shelwitz/.cargo/registry/src/github.com-1ecc6299db9ec823/bio-0.39.0/src/data_structures/fmindex.rs","byte_start":290461,"byte_end":290498,"line_start":453,"line_end":453,"column_start":5,"column_end":42}},{"value":"/             revcomp_positions[0],","span":{"file_name":"/Users/shelwitz/.cargo/registry/src/github.com-1ecc6299db9ec823/bio-0.39.0/src/data_structures/fmindex.rs","byte_start":290503,"byte_end":290540,"line_start":454,"line_end":454,"column_start":5,"column_end":42}},{"value":"/             pattern_position,","span":{"file_name":"/Users/shelwitz/.cargo/registry/src/github.com-1ecc6299db9ec823/bio-0.39.0/src/data_structures/fmindex.rs","byte_start":290545,"byte_end":290578,"line_start":455,"line_end":455,"column_start":5,"column_end":38}},{"value":"/             smem_len","span":{"file_name":"/Users/shelwitz/.cargo/registry/src/github.com-1ecc6299db9ec823/bio-0.39.0/src/data_structures/fmindex.rs","byte_start":290583,"byte_end":290607,"line_start":456,"line_end":456,"column_start":5,"column_end":29}},{"value":"/         ],","span":{"file_name":"/Users/shelwitz/.cargo/registry/src/github.com-1ecc6299db9ec823/bio-0.39.0/src/data_structures/fmindex.rs","byte_start":290612,"byte_end":290626,"line_start":457,"line_end":457,"column_start":5,"column_end":19}},{"value":"/         solutions[i]","span":{"file_name":"/Users/shelwitz/.cargo/registry/src/github.com-1ecc6299db9ec823/bio-0.39.0/src/data_structures/fmindex.rs","byte_start":290631,"byte_end":290655,"line_start":458,"line_end":458,"column_start":5,"column_end":29}},{"value":"/     );","span":{"file_name":"/Users/shelwitz/.cargo/registry/src/github.com-1ecc6299db9ec823/bio-0.39.0/src/data_structures/fmindex.rs","byte_start":290660,"byte_end":290670,"line_start":459,"line_end":459,"column_start":5,"column_end":15}},{"value":"/ }","span":{"file_name":"/Users/shelwitz/.cargo/registry/src/github.com-1ecc6299db9ec823/bio-0.39.0/src/data_structures/fmindex.rs","byte_start":290675,"byte_end":290680,"line_start":460,"line_end":460,"column_start":5,"column_end":10}},{"value":"/ ```","span":{"file_name":"/Users/shelwitz/.cargo/registry/src/github.com-1ecc6299db9ec823/bio-0.39.0/src/data_structures/fmindex.rs","byte_start":290685,"byte_end":290692,"line_start":461,"line_end":461,"column_start":5,"column_end":12}}]},{"kind":"Method","id":{"krate":0,"index":668},"span":{"file_name":"/Users/shelwitz/.cargo/registry/src/github.com-1ecc6299db9ec823/bio-0.39.0/src/data_structures/fmindex.rs","byte_start":291525,"byte_end":291543,"line_start":482,"line_end":482,"column_start":12,"column_end":30},"name":"init_interval_with","qualname":"<FMDIndex<DBWT, DLess, DOcc>>::init_interval_with","value":"pub fn init_interval_with(&Self, u8) -> BiInterval","parent":null,"children":[],"decl_id":null,"docs":" Initialize interval with given start character.\n","sig":null,"attributes":[{"value":"/ Initialize interval with given start character.","span":{"file_name":"/Users/shelwitz/.cargo/registry/src/github.com-1ecc6299db9ec823/bio-0.39.0/src/data_structures/fmindex.rs","byte_start":291462,"byte_end":291513,"line_start":481,"line_end":481,"column_start":5,"column_end":56}}]},{"kind":"Method","id":{"krate":0,"index":669},"span":{"file_name":"/Users/shelwitz/.cargo/registry/src/github.com-1ecc6299db9ec823/bio-0.39.0/src/data_structures/fmindex.rs","byte_start":291949,"byte_end":291962,"line_start":495,"line_end":495,"column_start":12,"column_end":25},"name":"init_interval","qualname":"<FMDIndex<DBWT, DLess, DOcc>>::init_interval","value":"pub fn init_interval(&Self) -> BiInterval","parent":null,"children":[],"decl_id":null,"docs":" Initialize interval for empty pattern. The interval points at the whole suffix array.\n","sig":null,"attributes":[{"value":"/ Initialize interval for empty pattern. The interval points at the whole suffix array.","span":{"file_name":"/Users/shelwitz/.cargo/registry/src/github.com-1ecc6299db9ec823/bio-0.39.0/src/data_structures/fmindex.rs","byte_start":291848,"byte_end":291937,"line_start":494,"line_end":494,"column_start":5,"column_end":94}}]},{"kind":"Method","id":{"krate":0,"index":670},"span":{"file_name":"/Users/shelwitz/.cargo/registry/src/github.com-1ecc6299db9ec823/bio-0.39.0/src/data_structures/fmindex.rs","byte_start":292228,"byte_end":292240,"line_start":505,"line_end":505,"column_start":12,"column_end":24},"name":"backward_ext","qualname":"<FMDIndex<DBWT, DLess, DOcc>>::backward_ext","value":"pub fn backward_ext(&Self, &BiInterval, u8) -> BiInterval","parent":null,"children":[],"decl_id":null,"docs":" Backward extension of given interval with given character.\n","sig":null,"attributes":[{"value":"/ Backward extension of given interval with given character.","span":{"file_name":"/Users/shelwitz/.cargo/registry/src/github.com-1ecc6299db9ec823/bio-0.39.0/src/data_structures/fmindex.rs","byte_start":292154,"byte_end":292216,"line_start":504,"line_end":504,"column_start":5,"column_end":67}}]},{"kind":"Method","id":{"krate":0,"index":671},"span":{"file_name":"/Users/shelwitz/.cargo/registry/src/github.com-1ecc6299db9ec823/bio-0.39.0/src/data_structures/fmindex.rs","byte_start":293351,"byte_end":293362,"line_start":538,"line_end":538,"column_start":12,"column_end":23},"name":"forward_ext","qualname":"<FMDIndex<DBWT, DLess, DOcc>>::forward_ext","value":"pub fn forward_ext(&Self, &BiInterval, u8) -> BiInterval","parent":null,"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":672},"span":{"file_name":"/Users/shelwitz/.cargo/registry/src/github.com-1ecc6299db9ec823/bio-0.39.0/src/data_structures/fmindex.rs","byte_start":294243,"byte_end":294265,"line_start":553,"line_end":553,"column_start":19,"column_end":41},"name":"from_fmindex_unchecked","qualname":"<FMDIndex<DBWT, DLess, DOcc>>::from_fmindex_unchecked","value":"pub unsafe fn from_fmindex_unchecked(FMIndex<DBWT, DLess, DOcc>)\n-> FMDIndex<DBWT, DLess, DOcc>","parent":null,"children":[],"decl_id":null,"docs":" Construct a new instance of the FMD index (see Heng Li (2012) Bioinformatics)\n without checking whether the text is over the DNA alphabet with N.\n This expects a BWT that was created from a text over the DNA alphabet with N\n (`alphabets::dna::n_alphabet()`) consisting of the\n concatenation with its reverse complement, separated by the sentinel symbol `$`.\n I.e., let T be the original text and R be its reverse complement.\n Then, the expected text is T$R$. Further, multiple concatenated texts are allowed, e.g.\n T1$R1$T2$R2$T3$R3$.\n It is unsafe to construct an FMD index from an FM index that is not built on the DNA alphabet.\n","sig":null,"attributes":[{"value":"/ Construct a new instance of the FMD index (see Heng Li (2012) Bioinformatics)","span":{"file_name":"/Users/shelwitz/.cargo/registry/src/github.com-1ecc6299db9ec823/bio-0.39.0/src/data_structures/fmindex.rs","byte_start":293534,"byte_end":293615,"line_start":544,"line_end":544,"column_start":5,"column_end":86}},{"value":"/ without checking whether the text is over the DNA alphabet with N.","span":{"file_name":"/Users/shelwitz/.cargo/registry/src/github.com-1ecc6299db9ec823/bio-0.39.0/src/data_structures/fmindex.rs","byte_start":293620,"byte_end":293690,"line_start":545,"line_end":545,"column_start":5,"column_end":75}},{"value":"/ This expects a BWT that was created from a text over the DNA alphabet with N","span":{"file_name":"/Users/shelwitz/.cargo/registry/src/github.com-1ecc6299db9ec823/bio-0.39.0/src/data_structures/fmindex.rs","byte_start":293695,"byte_end":293775,"line_start":546,"line_end":546,"column_start":5,"column_end":85}},{"value":"/ (`alphabets::dna::n_alphabet()`) consisting of the","span":{"file_name":"/Users/shelwitz/.cargo/registry/src/github.com-1ecc6299db9ec823/bio-0.39.0/src/data_structures/fmindex.rs","byte_start":293780,"byte_end":293834,"line_start":547,"line_end":547,"column_start":5,"column_end":59}},{"value":"/ concatenation with its reverse complement, separated by the sentinel symbol `$`.","span":{"file_name":"/Users/shelwitz/.cargo/registry/src/github.com-1ecc6299db9ec823/bio-0.39.0/src/data_structures/fmindex.rs","byte_start":293839,"byte_end":293923,"line_start":548,"line_end":548,"column_start":5,"column_end":89}},{"value":"/ I.e., let T be the original text and R be its reverse complement.","span":{"file_name":"/Users/shelwitz/.cargo/registry/src/github.com-1ecc6299db9ec823/bio-0.39.0/src/data_structures/fmindex.rs","byte_start":293928,"byte_end":293997,"line_start":549,"line_end":549,"column_start":5,"column_end":74}},{"value":"/ Then, the expected text is T$R$. Further, multiple concatenated texts are allowed, e.g.","span":{"file_name":"/Users/shelwitz/.cargo/registry/src/github.com-1ecc6299db9ec823/bio-0.39.0/src/data_structures/fmindex.rs","byte_start":294002,"byte_end":294093,"line_start":550,"line_end":550,"column_start":5,"column_end":96}},{"value":"/ T1$R1$T2$R2$T3$R3$.","span":{"file_name":"/Users/shelwitz/.cargo/registry/src/github.com-1ecc6299db9ec823/bio-0.39.0/src/data_structures/fmindex.rs","byte_start":294098,"byte_end":294121,"line_start":551,"line_end":551,"column_start":5,"column_end":28}},{"value":"/ It is unsafe to construct an FMD index from an FM index that is not built on the DNA alphabet.","span":{"file_name":"/Users/shelwitz/.cargo/registry/src/github.com-1ecc6299db9ec823/bio-0.39.0/src/data_structures/fmindex.rs","byte_start":294126,"byte_end":294224,"line_start":552,"line_end":552,"column_start":5,"column_end":103}}]},{"kind":"Mod","id":{"krate":0,"index":673},"span":{"file_name":"/Users/shelwitz/.cargo/registry/src/github.com-1ecc6299db9ec823/bio-0.39.0/src/data_structures/interpolation_table.rs","byte_start":0,"byte_end":0,"line_start":1,"line_end":1,"column_start":1,"column_end":1},"name":"interpolation_table","qualname":"::data_structures::interpolation_table","value":"/Users/shelwitz/.cargo/registry/src/github.com-1ecc6299db9ec823/bio-0.39.0/src/data_structures/interpolation_table.rs","parent":null,"children":[{"krate":0,"index":674},{"krate":0,"index":675},{"krate":0,"index":683}],"decl_id":null,"docs":" Fast lookup table for arbitrary floating point functions.\n # Examples\n ## Easy:\n ```\n use bio::data_structures::interpolation_table::*;","sig":null,"attributes":[{"value":"/ Fast lookup table for arbitrary floating point functions.","span":{"file_name":"/Users/shelwitz/.cargo/registry/src/github.com-1ecc6299db9ec823/bio-0.39.0/src/data_structures/interpolation_table.rs","byte_start":306482,"byte_end":306543,"line_start":6,"line_end":6,"column_start":1,"column_end":62}},{"value":"/ # Examples","span":{"file_name":"/Users/shelwitz/.cargo/registry/src/github.com-1ecc6299db9ec823/bio-0.39.0/src/data_structures/interpolation_table.rs","byte_start":306544,"byte_end":306558,"line_start":7,"line_end":7,"column_start":1,"column_end":15}},{"value":"/ ## Easy:","span":{"file_name":"/Users/shelwitz/.cargo/registry/src/github.com-1ecc6299db9ec823/bio-0.39.0/src/data_structures/interpolation_table.rs","byte_start":306559,"byte_end":306571,"line_start":8,"line_end":8,"column_start":1,"column_end":13}},{"value":"/ ```","span":{"file_name":"/Users/shelwitz/.cargo/registry/src/github.com-1ecc6299db9ec823/bio-0.39.0/src/data_structures/interpolation_table.rs","byte_start":306572,"byte_end":306579,"line_start":9,"line_end":9,"column_start":1,"column_end":8}},{"value":"/ use bio::data_structures::interpolation_table::*;","span":{"file_name":"/Users/shelwitz/.cargo/registry/src/github.com-1ecc6299db9ec823/bio-0.39.0/src/data_structures/interpolation_table.rs","byte_start":306580,"byte_end":306633,"line_start":10,"line_end":10,"column_start":1,"column_end":54}},{"value":"/","span":{"file_name":"/Users/shelwitz/.cargo/registry/src/github.com-1ecc6299db9ec823/bio-0.39.0/src/data_structures/interpolation_table.rs","byte_start":306634,"byte_end":306637,"line_start":11,"line_end":11,"column_start":1,"column_end":4}},{"value":"/ let table = InterpolationTable::new(0.0, 10.0, 5, |x| x.powf(2.0));","span":{"file_name":"/Users/shelwitz/.cargo/registry/src/github.com-1ecc6299db9ec823/bio-0.39.0/src/data_structures/interpolation_table.rs","byte_start":306638,"byte_end":306709,"line_start":12,"line_end":12,"column_start":1,"column_end":72}},{"value":"/ assert_eq!(table.get(3.0), 9.0);","span":{"file_name":"/Users/shelwitz/.cargo/registry/src/github.com-1ecc6299db9ec823/bio-0.39.0/src/data_structures/interpolation_table.rs","byte_start":306710,"byte_end":306746,"line_start":13,"line_end":13,"column_start":1,"column_end":37}},{"value":"/ assert_eq!(table.get(5.0), 25.0);","span":{"file_name":"/Users/shelwitz/.cargo/registry/src/github.com-1ecc6299db9ec823/bio-0.39.0/src/data_structures/interpolation_table.rs","byte_start":306747,"byte_end":306784,"line_start":14,"line_end":14,"column_start":1,"column_end":38}},{"value":"/ ```","span":{"file_name":"/Users/shelwitz/.cargo/registry/src/github.com-1ecc6299db9ec823/bio-0.39.0/src/data_structures/interpolation_table.rs","byte_start":306785,"byte_end":306792,"line_start":15,"line_end":15,"column_start":1,"column_end":8}},{"value":"/ ## More complicated:","span":{"file_name":"/Users/shelwitz/.cargo/registry/src/github.com-1ecc6299db9ec823/bio-0.39.0/src/data_structures/interpolation_table.rs","byte_start":306793,"byte_end":306817,"line_start":16,"line_end":16,"column_start":1,"column_end":25}},{"value":"/ ```","span":{"file_name":"/Users/shelwitz/.cargo/registry/src/github.com-1ecc6299db9ec823/bio-0.39.0/src/data_structures/interpolation_table.rs","byte_start":306818,"byte_end":306825,"line_start":17,"line_end":17,"column_start":1,"column_end":8}},{"value":"/ extern crate approx;","span":{"file_name":"/Users/shelwitz/.cargo/registry/src/github.com-1ecc6299db9ec823/bio-0.39.0/src/data_structures/interpolation_table.rs","byte_start":306826,"byte_end":306850,"line_start":18,"line_end":18,"column_start":1,"column_end":25}},{"value":"/ fn main() {","span":{"file_name":"/Users/shelwitz/.cargo/registry/src/github.com-1ecc6299db9ec823/bio-0.39.0/src/data_structures/interpolation_table.rs","byte_start":306851,"byte_end":306866,"line_start":19,"line_end":19,"column_start":1,"column_end":16}},{"value":"/     use bio::data_structures::interpolation_table::*;","span":{"file_name":"/Users/shelwitz/.cargo/registry/src/github.com-1ecc6299db9ec823/bio-0.39.0/src/data_structures/interpolation_table.rs","byte_start":306867,"byte_end":306924,"line_start":20,"line_end":20,"column_start":1,"column_end":58}},{"value":"/     use approx::assert_relative_eq;","span":{"file_name":"/Users/shelwitz/.cargo/registry/src/github.com-1ecc6299db9ec823/bio-0.39.0/src/data_structures/interpolation_table.rs","byte_start":306925,"byte_end":306964,"line_start":21,"line_end":21,"column_start":1,"column_end":40}},{"value":"/","span":{"file_name":"/Users/shelwitz/.cargo/registry/src/github.com-1ecc6299db9ec823/bio-0.39.0/src/data_structures/interpolation_table.rs","byte_start":306965,"byte_end":306968,"line_start":22,"line_end":22,"column_start":1,"column_end":4}},{"value":"/     let table = InterpolationTable::new(0.0, 10.0, 5, |x| x.ln_1p());","span":{"file_name":"/Users/shelwitz/.cargo/registry/src/github.com-1ecc6299db9ec823/bio-0.39.0/src/data_structures/interpolation_table.rs","byte_start":306969,"byte_end":307042,"line_start":23,"line_end":23,"column_start":1,"column_end":74}},{"value":"/     for &x in &[0.02, 0.04, 0.45678686, 0.23875, 1.45345e-6] {","span":{"file_name":"/Users/shelwitz/.cargo/registry/src/github.com-1ecc6299db9ec823/bio-0.39.0/src/data_structures/interpolation_table.rs","byte_start":307043,"byte_end":307109,"line_start":24,"line_end":24,"column_start":1,"column_end":67}},{"value":"/         assert_relative_eq!(table.get(x), x.ln_1p(), epsilon = 0.00001);","span":{"file_name":"/Users/shelwitz/.cargo/registry/src/github.com-1ecc6299db9ec823/bio-0.39.0/src/data_structures/interpolation_table.rs","byte_start":307110,"byte_end":307186,"line_start":25,"line_end":25,"column_start":1,"column_end":77}},{"value":"/     }","span":{"file_name":"/Users/shelwitz/.cargo/registry/src/github.com-1ecc6299db9ec823/bio-0.39.0/src/data_structures/interpolation_table.rs","byte_start":307187,"byte_end":307196,"line_start":26,"line_end":26,"column_start":1,"column_end":10}},{"value":"/ }","span":{"file_name":"/Users/shelwitz/.cargo/registry/src/github.com-1ecc6299db9ec823/bio-0.39.0/src/data_structures/interpolation_table.rs","byte_start":307197,"byte_end":307202,"line_start":27,"line_end":27,"column_start":1,"column_end":6}}]},{"kind":"Function","id":{"krate":0,"index":674},"span":{"file_name":"/Users/shelwitz/.cargo/registry/src/github.com-1ecc6299db9ec823/bio-0.39.0/src/data_structures/interpolation_table.rs","byte_start":307221,"byte_end":307232,"line_start":30,"line_end":30,"column_start":8,"column_end":19},"name":"interpolate","qualname":"::data_structures::interpolation_table::interpolate","value":"pub fn interpolate(f64, f64, f64) -> f64","parent":null,"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[{"value":"inline","span":{"file_name":"/Users/shelwitz/.cargo/registry/src/github.com-1ecc6299db9ec823/bio-0.39.0/src/data_structures/interpolation_table.rs","byte_start":307204,"byte_end":307213,"line_start":29,"line_end":29,"column_start":1,"column_end":10}}]},{"kind":"Struct","id":{"krate":0,"index":675},"span":{"file_name":"/Users/shelwitz/.cargo/registry/src/github.com-1ecc6299db9ec823/bio-0.39.0/src/data_structures/interpolation_table.rs","byte_start":307660,"byte_end":307678,"line_start":39,"line_end":39,"column_start":12,"column_end":30},"name":"InterpolationTable","qualname":"::data_structures::interpolation_table::InterpolationTable","value":"InterpolationTable {  }","parent":null,"children":[{"krate":0,"index":677},{"krate":0,"index":678},{"krate":0,"index":679},{"krate":0,"index":680},{"krate":0,"index":681},{"krate":0,"index":682}],"decl_id":null,"docs":" Fast lookup table for arbitrary floating point functions.\n This can be used to e.g., provide fast lookups of distribution values.\n Input values are sampled with a given precision and results are stored in a vector.\n During lookup, infimum and supremum of a given value are calculated and the result is\n interpolated.\n","sig":null,"attributes":[{"value":"/ Fast lookup table for arbitrary floating point functions.","span":{"file_name":"/Users/shelwitz/.cargo/registry/src/github.com-1ecc6299db9ec823/bio-0.39.0/src/data_structures/interpolation_table.rs","byte_start":307316,"byte_end":307377,"line_start":34,"line_end":34,"column_start":1,"column_end":62}},{"value":"/ This can be used to e.g., provide fast lookups of distribution values.","span":{"file_name":"/Users/shelwitz/.cargo/registry/src/github.com-1ecc6299db9ec823/bio-0.39.0/src/data_structures/interpolation_table.rs","byte_start":307378,"byte_end":307452,"line_start":35,"line_end":35,"column_start":1,"column_end":75}},{"value":"/ Input values are sampled with a given precision and results are stored in a vector.","span":{"file_name":"/Users/shelwitz/.cargo/registry/src/github.com-1ecc6299db9ec823/bio-0.39.0/src/data_structures/interpolation_table.rs","byte_start":307453,"byte_end":307540,"line_start":36,"line_end":36,"column_start":1,"column_end":88}},{"value":"/ During lookup, infimum and supremum of a given value are calculated and the result is","span":{"file_name":"/Users/shelwitz/.cargo/registry/src/github.com-1ecc6299db9ec823/bio-0.39.0/src/data_structures/interpolation_table.rs","byte_start":307541,"byte_end":307630,"line_start":37,"line_end":37,"column_start":1,"column_end":90}},{"value":"/ interpolated.","span":{"file_name":"/Users/shelwitz/.cargo/registry/src/github.com-1ecc6299db9ec823/bio-0.39.0/src/data_structures/interpolation_table.rs","byte_start":307631,"byte_end":307648,"line_start":38,"line_end":38,"column_start":1,"column_end":18}}]},{"kind":"Method","id":{"krate":0,"index":685},"span":{"file_name":"/Users/shelwitz/.cargo/registry/src/github.com-1ecc6299db9ec823/bio-0.39.0/src/data_structures/interpolation_table.rs","byte_start":308412,"byte_end":308415,"line_start":62,"line_end":62,"column_start":12,"column_end":15},"name":"new","qualname":"<InterpolationTable<F>>::new","value":"pub fn new(f64, f64, i32, F) -> Self","parent":null,"children":[],"decl_id":null,"docs":" Create a new `InterpolationTable`.","sig":null,"attributes":[{"value":"/ Create a new `InterpolationTable`.","span":{"file_name":"/Users/shelwitz/.cargo/registry/src/github.com-1ecc6299db9ec823/bio-0.39.0/src/data_structures/interpolation_table.rs","byte_start":307856,"byte_end":307894,"line_start":49,"line_end":49,"column_start":5,"column_end":43}},{"value":"/","span":{"file_name":"/Users/shelwitz/.cargo/registry/src/github.com-1ecc6299db9ec823/bio-0.39.0/src/data_structures/interpolation_table.rs","byte_start":307899,"byte_end":307902,"line_start":50,"line_end":50,"column_start":5,"column_end":8}},{"value":"/ # Arguments","span":{"file_name":"/Users/shelwitz/.cargo/registry/src/github.com-1ecc6299db9ec823/bio-0.39.0/src/data_structures/interpolation_table.rs","byte_start":307907,"byte_end":307922,"line_start":51,"line_end":51,"column_start":5,"column_end":20}},{"value":"/","span":{"file_name":"/Users/shelwitz/.cargo/registry/src/github.com-1ecc6299db9ec823/bio-0.39.0/src/data_structures/interpolation_table.rs","byte_start":307927,"byte_end":307930,"line_start":52,"line_end":52,"column_start":5,"column_end":8}},{"value":"/ * `min_x` - minimum sample value","span":{"file_name":"/Users/shelwitz/.cargo/registry/src/github.com-1ecc6299db9ec823/bio-0.39.0/src/data_structures/interpolation_table.rs","byte_start":307935,"byte_end":307971,"line_start":53,"line_end":53,"column_start":5,"column_end":41}},{"value":"/ * `max_x` - maximum sample value","span":{"file_name":"/Users/shelwitz/.cargo/registry/src/github.com-1ecc6299db9ec823/bio-0.39.0/src/data_structures/interpolation_table.rs","byte_start":307976,"byte_end":308012,"line_start":54,"line_end":54,"column_start":5,"column_end":41}},{"value":"/ * `frac_digits` - number of fraction digits to store in sample","span":{"file_name":"/Users/shelwitz/.cargo/registry/src/github.com-1ecc6299db9ec823/bio-0.39.0/src/data_structures/interpolation_table.rs","byte_start":308017,"byte_end":308083,"line_start":55,"line_end":55,"column_start":5,"column_end":71}},{"value":"/ * `func` - Function to emulate.","span":{"file_name":"/Users/shelwitz/.cargo/registry/src/github.com-1ecc6299db9ec823/bio-0.39.0/src/data_structures/interpolation_table.rs","byte_start":308088,"byte_end":308123,"line_start":56,"line_end":56,"column_start":5,"column_end":40}},{"value":"/","span":{"file_name":"/Users/shelwitz/.cargo/registry/src/github.com-1ecc6299db9ec823/bio-0.39.0/src/data_structures/interpolation_table.rs","byte_start":308128,"byte_end":308131,"line_start":57,"line_end":57,"column_start":5,"column_end":8}},{"value":"/ If given value is outside of min_x and max_x, the lookup falls back to applying the","span":{"file_name":"/Users/shelwitz/.cargo/registry/src/github.com-1ecc6299db9ec823/bio-0.39.0/src/data_structures/interpolation_table.rs","byte_start":308136,"byte_end":308223,"line_start":58,"line_end":58,"column_start":5,"column_end":92}},{"value":"/ function itself.","span":{"file_name":"/Users/shelwitz/.cargo/registry/src/github.com-1ecc6299db9ec823/bio-0.39.0/src/data_structures/interpolation_table.rs","byte_start":308228,"byte_end":308248,"line_start":59,"line_end":59,"column_start":5,"column_end":25}},{"value":"/ The table size grows with the number of fraction digits.","span":{"file_name":"/Users/shelwitz/.cargo/registry/src/github.com-1ecc6299db9ec823/bio-0.39.0/src/data_structures/interpolation_table.rs","byte_start":308253,"byte_end":308313,"line_start":60,"line_end":60,"column_start":5,"column_end":65}},{"value":"/ Space Complexity: O(m * 10^n), where `m = max_x - min_x` and `n = frac_digits`","span":{"file_name":"/Users/shelwitz/.cargo/registry/src/github.com-1ecc6299db9ec823/bio-0.39.0/src/data_structures/interpolation_table.rs","byte_start":308318,"byte_end":308400,"line_start":61,"line_end":61,"column_start":5,"column_end":87}}]},{"kind":"Method","id":{"krate":0,"index":687},"span":{"file_name":"/Users/shelwitz/.cargo/registry/src/github.com-1ecc6299db9ec823/bio-0.39.0/src/data_structures/interpolation_table.rs","byte_start":309454,"byte_end":309457,"line_start":94,"line_end":94,"column_start":12,"column_end":15},"name":"get","qualname":"<InterpolationTable<F>>::get","value":"pub fn get(&Self, f64) -> f64","parent":null,"children":[],"decl_id":null,"docs":" Lookup given value in table, and interpolate the result between the sampled values if\n necessary. This provides an approximation that is better the more fraction digits are\n used to generate this table.\n Time Complexity for lookup: O(1) if `min_x <= x < max_x` and O(func(x)) otherwise.\n","sig":null,"attributes":[{"value":"/ Lookup given value in table, and interpolate the result between the sampled values if","span":{"file_name":"/Users/shelwitz/.cargo/registry/src/github.com-1ecc6299db9ec823/bio-0.39.0/src/data_structures/interpolation_table.rs","byte_start":309131,"byte_end":309220,"line_start":90,"line_end":90,"column_start":5,"column_end":94}},{"value":"/ necessary. This provides an approximation that is better the more fraction digits are","span":{"file_name":"/Users/shelwitz/.cargo/registry/src/github.com-1ecc6299db9ec823/bio-0.39.0/src/data_structures/interpolation_table.rs","byte_start":309225,"byte_end":309314,"line_start":91,"line_end":91,"column_start":5,"column_end":94}},{"value":"/ used to generate this table.","span":{"file_name":"/Users/shelwitz/.cargo/registry/src/github.com-1ecc6299db9ec823/bio-0.39.0/src/data_structures/interpolation_table.rs","byte_start":309319,"byte_end":309351,"line_start":92,"line_end":92,"column_start":5,"column_end":37}},{"value":"/ Time Complexity for lookup: O(1) if `min_x <= x < max_x` and O(func(x)) otherwise.","span":{"file_name":"/Users/shelwitz/.cargo/registry/src/github.com-1ecc6299db9ec823/bio-0.39.0/src/data_structures/interpolation_table.rs","byte_start":309356,"byte_end":309442,"line_start":93,"line_end":93,"column_start":5,"column_end":91}}]},{"kind":"Mod","id":{"krate":0,"index":688},"span":{"file_name":"/Users/shelwitz/.cargo/registry/src/github.com-1ecc6299db9ec823/bio-0.39.0/src/data_structures/interval_tree/mod.rs","byte_start":0,"byte_end":0,"line_start":1,"line_end":1,"column_start":1,"column_end":1},"name":"interval_tree","qualname":"::data_structures::interval_tree","value":"/Users/shelwitz/.cargo/registry/src/github.com-1ecc6299db9ec823/bio-0.39.0/src/data_structures/interval_tree/mod.rs","parent":null,"children":[{"krate":0,"index":689},{"krate":0,"index":743},{"krate":0,"index":835},{"krate":0,"index":838},{"krate":0,"index":839},{"krate":0,"index":842},{"krate":0,"index":845},{"krate":0,"index":848},{"krate":0,"index":851}],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Struct","id":{"krate":0,"index":3885},"span":{"file_name":"/Users/shelwitz/.cargo/registry/src/github.com-1ecc6299db9ec823/bio-0.39.0/src/data_structures/interval_tree/array_backed_interval_tree.rs","byte_start":312375,"byte_end":312380,"line_start":52,"line_end":52,"column_start":12,"column_end":17},"name":"Entry","qualname":"::data_structures::interval_tree::array_backed_interval_tree::Entry","value":"Entry {  }","parent":null,"children":[{"krate":0,"index":3889},{"krate":0,"index":3890}],"decl_id":null,"docs":" A `find` query on the interval tree does not directly return references to the nodes in the tree, but\n wraps the fields `interval` and `data` in an `Entry`.\n","sig":null,"attributes":[{"value":"/ A `find` query on the interval tree does not directly return references to the nodes in the tree, but","span":{"file_name":"/Users/shelwitz/.cargo/registry/src/github.com-1ecc6299db9ec823/bio-0.39.0/src/data_structures/interval_tree/array_backed_interval_tree.rs","byte_start":312161,"byte_end":312266,"line_start":49,"line_end":49,"column_start":1,"column_end":106}},{"value":"/ wraps the fields `interval` and `data` in an `Entry`.","span":{"file_name":"/Users/shelwitz/.cargo/registry/src/github.com-1ecc6299db9ec823/bio-0.39.0/src/data_structures/interval_tree/array_backed_interval_tree.rs","byte_start":312267,"byte_end":312324,"line_start":50,"line_end":50,"column_start":1,"column_end":58}}]},{"kind":"Method","id":{"krate":0,"index":703},"span":{"file_name":"/Users/shelwitz/.cargo/registry/src/github.com-1ecc6299db9ec823/bio-0.39.0/src/data_structures/interval_tree/array_backed_interval_tree.rs","byte_start":312574,"byte_end":312578,"line_start":59,"line_end":59,"column_start":12,"column_end":16},"name":"data","qualname":"<Entry>::data","value":"pub fn data(&Self) -> &'a D","parent":null,"children":[],"decl_id":null,"docs":" Get a reference to the data for this entry\n","sig":null,"attributes":[{"value":"/ Get a reference to the data for this entry","span":{"file_name":"/Users/shelwitz/.cargo/registry/src/github.com-1ecc6299db9ec823/bio-0.39.0/src/data_structures/interval_tree/array_backed_interval_tree.rs","byte_start":312516,"byte_end":312562,"line_start":58,"line_end":58,"column_start":5,"column_end":51}}]},{"kind":"Method","id":{"krate":0,"index":704},"span":{"file_name":"/Users/shelwitz/.cargo/registry/src/github.com-1ecc6299db9ec823/bio-0.39.0/src/data_structures/interval_tree/array_backed_interval_tree.rs","byte_start":312688,"byte_end":312696,"line_start":64,"line_end":64,"column_start":12,"column_end":20},"name":"interval","qualname":"<Entry>::interval","value":"pub fn interval(&Self) -> &'a Interval<N>","parent":null,"children":[],"decl_id":null,"docs":" Get a reference to the interval for this entry\n","sig":null,"attributes":[{"value":"/ Get a reference to the interval for this entry","span":{"file_name":"/Users/shelwitz/.cargo/registry/src/github.com-1ecc6299db9ec823/bio-0.39.0/src/data_structures/interval_tree/array_backed_interval_tree.rs","byte_start":312626,"byte_end":312676,"line_start":63,"line_end":63,"column_start":5,"column_end":55}}]},{"kind":"Struct","id":{"krate":0,"index":709},"span":{"file_name":"/Users/shelwitz/.cargo/registry/src/github.com-1ecc6299db9ec823/bio-0.39.0/src/data_structures/interval_tree/array_backed_interval_tree.rs","byte_start":313005,"byte_end":313028,"line_start":79,"line_end":79,"column_start":12,"column_end":35},"name":"ArrayBackedIntervalTree","qualname":"::data_structures::interval_tree::array_backed_interval_tree::ArrayBackedIntervalTree","value":"ArrayBackedIntervalTree {  }","parent":null,"children":[{"krate":0,"index":712},{"krate":0,"index":713},{"krate":0,"index":714}],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":725},"span":{"file_name":"/Users/shelwitz/.cargo/registry/src/github.com-1ecc6299db9ec823/bio-0.39.0/src/data_structures/interval_tree/array_backed_interval_tree.rs","byte_start":313609,"byte_end":313612,"line_start":101,"line_end":101,"column_start":12,"column_end":15},"name":"new","qualname":"<ArrayBackedIntervalTree<N, D>>::new","value":"pub fn new() -> Self","parent":null,"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":726},"span":{"file_name":"/Users/shelwitz/.cargo/registry/src/github.com-1ecc6299db9ec823/bio-0.39.0/src/data_structures/interval_tree/array_backed_interval_tree.rs","byte_start":313670,"byte_end":313676,"line_start":105,"line_end":105,"column_start":12,"column_end":18},"name":"insert","qualname":"<ArrayBackedIntervalTree<N, D>>::insert","value":"pub fn insert<I: Into<Interval<N>>>(&mut Self, I, D)","parent":null,"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":728},"span":{"file_name":"/Users/shelwitz/.cargo/registry/src/github.com-1ecc6299db9ec823/bio-0.39.0/src/data_structures/interval_tree/array_backed_interval_tree.rs","byte_start":313965,"byte_end":313970,"line_start":116,"line_end":116,"column_start":12,"column_end":17},"name":"index","qualname":"<ArrayBackedIntervalTree<N, D>>::index","value":"pub fn index(&mut Self)","parent":null,"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":732},"span":{"file_name":"/Users/shelwitz/.cargo/registry/src/github.com-1ecc6299db9ec823/bio-0.39.0/src/data_structures/interval_tree/array_backed_interval_tree.rs","byte_start":315877,"byte_end":315881,"line_start":174,"line_end":174,"column_start":12,"column_end":16},"name":"find","qualname":"<ArrayBackedIntervalTree<N, D>>::find","value":"pub fn find<I: Into<Interval<N>>>(&Self, I) -> Vec<Entry<, N, D>>","parent":null,"children":[],"decl_id":null,"docs":" Find overlapping intervals in the index.\n Returns a vector of entries, consisting of the interval and its associated data.","sig":null,"attributes":[{"value":"/ Find overlapping intervals in the index.","span":{"file_name":"/Users/shelwitz/.cargo/registry/src/github.com-1ecc6299db9ec823/bio-0.39.0/src/data_structures/interval_tree/array_backed_interval_tree.rs","byte_start":315488,"byte_end":315532,"line_start":164,"line_end":164,"column_start":5,"column_end":49}},{"value":"/ Returns a vector of entries, consisting of the interval and its associated data.","span":{"file_name":"/Users/shelwitz/.cargo/registry/src/github.com-1ecc6299db9ec823/bio-0.39.0/src/data_structures/interval_tree/array_backed_interval_tree.rs","byte_start":315537,"byte_end":315621,"line_start":165,"line_end":165,"column_start":5,"column_end":89}},{"value":"/","span":{"file_name":"/Users/shelwitz/.cargo/registry/src/github.com-1ecc6299db9ec823/bio-0.39.0/src/data_structures/interval_tree/array_backed_interval_tree.rs","byte_start":315626,"byte_end":315629,"line_start":166,"line_end":166,"column_start":5,"column_end":8}},{"value":"/ # Arguments","span":{"file_name":"/Users/shelwitz/.cargo/registry/src/github.com-1ecc6299db9ec823/bio-0.39.0/src/data_structures/interval_tree/array_backed_interval_tree.rs","byte_start":315634,"byte_end":315649,"line_start":167,"line_end":167,"column_start":5,"column_end":20}},{"value":"/","span":{"file_name":"/Users/shelwitz/.cargo/registry/src/github.com-1ecc6299db9ec823/bio-0.39.0/src/data_structures/interval_tree/array_backed_interval_tree.rs","byte_start":315654,"byte_end":315657,"line_start":168,"line_end":168,"column_start":5,"column_end":8}},{"value":"/ * `interval` - The interval for which overlaps are to be found in the index. Can also be a `Range`.","span":{"file_name":"/Users/shelwitz/.cargo/registry/src/github.com-1ecc6299db9ec823/bio-0.39.0/src/data_structures/interval_tree/array_backed_interval_tree.rs","byte_start":315662,"byte_end":315765,"line_start":169,"line_end":169,"column_start":5,"column_end":108}},{"value":"/","span":{"file_name":"/Users/shelwitz/.cargo/registry/src/github.com-1ecc6299db9ec823/bio-0.39.0/src/data_structures/interval_tree/array_backed_interval_tree.rs","byte_start":315770,"byte_end":315773,"line_start":170,"line_end":170,"column_start":5,"column_end":8}},{"value":"/ # Panics","span":{"file_name":"/Users/shelwitz/.cargo/registry/src/github.com-1ecc6299db9ec823/bio-0.39.0/src/data_structures/interval_tree/array_backed_interval_tree.rs","byte_start":315778,"byte_end":315790,"line_start":171,"line_end":171,"column_start":5,"column_end":17}},{"value":"/","span":{"file_name":"/Users/shelwitz/.cargo/registry/src/github.com-1ecc6299db9ec823/bio-0.39.0/src/data_structures/interval_tree/array_backed_interval_tree.rs","byte_start":315795,"byte_end":315798,"line_start":172,"line_end":172,"column_start":5,"column_end":8}},{"value":"/ Panics if this `IITree` instance has not been indexed yet.","span":{"file_name":"/Users/shelwitz/.cargo/registry/src/github.com-1ecc6299db9ec823/bio-0.39.0/src/data_structures/interval_tree/array_backed_interval_tree.rs","byte_start":315803,"byte_end":315865,"line_start":173,"line_end":173,"column_start":5,"column_end":67}}]},{"kind":"Method","id":{"krate":0,"index":734},"span":{"file_name":"/Users/shelwitz/.cargo/registry/src/github.com-1ecc6299db9ec823/bio-0.39.0/src/data_structures/interval_tree/array_backed_interval_tree.rs","byte_start":316431,"byte_end":316440,"line_start":190,"line_end":190,"column_start":12,"column_end":21},"name":"find_into","qualname":"<ArrayBackedIntervalTree<N, D>>::find_into","value":"pub fn find_into<'b, 'a:'b,\n                 I: Into<Interval<N>>>(&'a Self, I, &'b mut Vec<Entry>)","parent":null,"children":[],"decl_id":null,"docs":" Find overlapping intervals in the index","sig":null,"attributes":[{"value":"/ Find overlapping intervals in the index","span":{"file_name":"/Users/shelwitz/.cargo/registry/src/github.com-1ecc6299db9ec823/bio-0.39.0/src/data_structures/interval_tree/array_backed_interval_tree.rs","byte_start":316060,"byte_end":316103,"line_start":180,"line_end":180,"column_start":5,"column_end":48}},{"value":"/","span":{"file_name":"/Users/shelwitz/.cargo/registry/src/github.com-1ecc6299db9ec823/bio-0.39.0/src/data_structures/interval_tree/array_backed_interval_tree.rs","byte_start":316108,"byte_end":316111,"line_start":181,"line_end":181,"column_start":5,"column_end":8}},{"value":"/ # Arguments","span":{"file_name":"/Users/shelwitz/.cargo/registry/src/github.com-1ecc6299db9ec823/bio-0.39.0/src/data_structures/interval_tree/array_backed_interval_tree.rs","byte_start":316116,"byte_end":316131,"line_start":182,"line_end":182,"column_start":5,"column_end":20}},{"value":"/","span":{"file_name":"/Users/shelwitz/.cargo/registry/src/github.com-1ecc6299db9ec823/bio-0.39.0/src/data_structures/interval_tree/array_backed_interval_tree.rs","byte_start":316136,"byte_end":316139,"line_start":183,"line_end":183,"column_start":5,"column_end":8}},{"value":"/ * `interval` - The interval for which overlaps are to be found in the index. Can also be a `Range`.","span":{"file_name":"/Users/shelwitz/.cargo/registry/src/github.com-1ecc6299db9ec823/bio-0.39.0/src/data_structures/interval_tree/array_backed_interval_tree.rs","byte_start":316144,"byte_end":316247,"line_start":184,"line_end":184,"column_start":5,"column_end":108}},{"value":"/ * `results` - A reusable buffer vector for storing the results.","span":{"file_name":"/Users/shelwitz/.cargo/registry/src/github.com-1ecc6299db9ec823/bio-0.39.0/src/data_structures/interval_tree/array_backed_interval_tree.rs","byte_start":316252,"byte_end":316319,"line_start":185,"line_end":185,"column_start":5,"column_end":72}},{"value":"/","span":{"file_name":"/Users/shelwitz/.cargo/registry/src/github.com-1ecc6299db9ec823/bio-0.39.0/src/data_structures/interval_tree/array_backed_interval_tree.rs","byte_start":316324,"byte_end":316327,"line_start":186,"line_end":186,"column_start":5,"column_end":8}},{"value":"/ # Panics","span":{"file_name":"/Users/shelwitz/.cargo/registry/src/github.com-1ecc6299db9ec823/bio-0.39.0/src/data_structures/interval_tree/array_backed_interval_tree.rs","byte_start":316332,"byte_end":316344,"line_start":187,"line_end":187,"column_start":5,"column_end":17}},{"value":"/","span":{"file_name":"/Users/shelwitz/.cargo/registry/src/github.com-1ecc6299db9ec823/bio-0.39.0/src/data_structures/interval_tree/array_backed_interval_tree.rs","byte_start":316349,"byte_end":316352,"line_start":188,"line_end":188,"column_start":5,"column_end":8}},{"value":"/ Panics if this `IITree` instance has not been indexed yet.","span":{"file_name":"/Users/shelwitz/.cargo/registry/src/github.com-1ecc6299db9ec823/bio-0.39.0/src/data_structures/interval_tree/array_backed_interval_tree.rs","byte_start":316357,"byte_end":316419,"line_start":189,"line_end":189,"column_start":5,"column_end":67}}]},{"kind":"Struct","id":{"krate":0,"index":3927},"span":{"file_name":"/Users/shelwitz/.cargo/registry/src/github.com-1ecc6299db9ec823/bio-0.39.0/src/data_structures/interval_tree/avl_interval_tree.rs","byte_start":323634,"byte_end":323646,"line_start":35,"line_end":35,"column_start":12,"column_end":24},"name":"IntervalTree","qualname":"::data_structures::interval_tree::avl_interval_tree::IntervalTree","value":"IntervalTree {  }","parent":null,"children":[{"krate":0,"index":3930}],"decl_id":null,"docs":" An interval tree for storing intervals with data\n","sig":null,"attributes":[{"value":"/ An interval tree for storing intervals with data","span":{"file_name":"/Users/shelwitz/.cargo/registry/src/github.com-1ecc6299db9ec823/bio-0.39.0/src/data_structures/interval_tree/avl_interval_tree.rs","byte_start":323522,"byte_end":323574,"line_start":33,"line_end":33,"column_start":1,"column_end":53}}]},{"kind":"Struct","id":{"krate":0,"index":3994},"span":{"file_name":"/Users/shelwitz/.cargo/registry/src/github.com-1ecc6299db9ec823/bio-0.39.0/src/data_structures/interval_tree/avl_interval_tree.rs","byte_start":324036,"byte_end":324041,"line_start":48,"line_end":48,"column_start":12,"column_end":17},"name":"Entry","qualname":"::data_structures::interval_tree::avl_interval_tree::Entry","value":"Entry {  }","parent":null,"children":[{"krate":0,"index":3998},{"krate":0,"index":3999}],"decl_id":null,"docs":" A `find` query on the interval tree does not directly return references to the nodes in the tree, but\n wraps the fields `interval` and `data` in an `Entry`.\n","sig":null,"attributes":[{"value":"/ A `find` query on the interval tree does not directly return references to the nodes in the tree, but","span":{"file_name":"/Users/shelwitz/.cargo/registry/src/github.com-1ecc6299db9ec823/bio-0.39.0/src/data_structures/interval_tree/avl_interval_tree.rs","byte_start":323822,"byte_end":323927,"line_start":45,"line_end":45,"column_start":1,"column_end":106}},{"value":"/ wraps the fields `interval` and `data` in an `Entry`.","span":{"file_name":"/Users/shelwitz/.cargo/registry/src/github.com-1ecc6299db9ec823/bio-0.39.0/src/data_structures/interval_tree/avl_interval_tree.rs","byte_start":323928,"byte_end":323985,"line_start":46,"line_end":46,"column_start":1,"column_end":58}}]},{"kind":"Method","id":{"krate":0,"index":764},"span":{"file_name":"/Users/shelwitz/.cargo/registry/src/github.com-1ecc6299db9ec823/bio-0.39.0/src/data_structures/interval_tree/avl_interval_tree.rs","byte_start":324235,"byte_end":324239,"line_start":55,"line_end":55,"column_start":12,"column_end":16},"name":"data","qualname":"<Entry>::data","value":"pub fn data(&Self) -> &'a D","parent":null,"children":[],"decl_id":null,"docs":" Get a reference to the data for this entry\n","sig":null,"attributes":[{"value":"/ Get a reference to the data for this entry","span":{"file_name":"/Users/shelwitz/.cargo/registry/src/github.com-1ecc6299db9ec823/bio-0.39.0/src/data_structures/interval_tree/avl_interval_tree.rs","byte_start":324177,"byte_end":324223,"line_start":54,"line_end":54,"column_start":5,"column_end":51}}]},{"kind":"Method","id":{"krate":0,"index":765},"span":{"file_name":"/Users/shelwitz/.cargo/registry/src/github.com-1ecc6299db9ec823/bio-0.39.0/src/data_structures/interval_tree/avl_interval_tree.rs","byte_start":324349,"byte_end":324357,"line_start":60,"line_end":60,"column_start":12,"column_end":20},"name":"interval","qualname":"<Entry>::interval","value":"pub fn interval(&Self) -> &'a Interval<N>","parent":null,"children":[],"decl_id":null,"docs":" Get a reference to the interval for this entry\n","sig":null,"attributes":[{"value":"/ Get a reference to the interval for this entry","span":{"file_name":"/Users/shelwitz/.cargo/registry/src/github.com-1ecc6299db9ec823/bio-0.39.0/src/data_structures/interval_tree/avl_interval_tree.rs","byte_start":324287,"byte_end":324337,"line_start":59,"line_end":59,"column_start":5,"column_end":55}}]},{"kind":"Struct","id":{"krate":0,"index":766},"span":{"file_name":"/Users/shelwitz/.cargo/registry/src/github.com-1ecc6299db9ec823/bio-0.39.0/src/data_structures/interval_tree/avl_interval_tree.rs","byte_start":324550,"byte_end":324570,"line_start":67,"line_end":67,"column_start":12,"column_end":32},"name":"IntervalTreeIterator","qualname":"::data_structures::interval_tree::avl_interval_tree::IntervalTreeIterator","value":"IntervalTreeIterator {  }","parent":null,"children":[{"krate":0,"index":770},{"krate":0,"index":771}],"decl_id":null,"docs":" An `IntervalTreeIterator` is returned by `Intervaltree::find` and iterates over the entries\n overlapping the query\n","sig":null,"attributes":[{"value":"/ An `IntervalTreeIterator` is returned by `Intervaltree::find` and iterates over the entries","span":{"file_name":"/Users/shelwitz/.cargo/registry/src/github.com-1ecc6299db9ec823/bio-0.39.0/src/data_structures/interval_tree/avl_interval_tree.rs","byte_start":324417,"byte_end":324512,"line_start":65,"line_end":65,"column_start":1,"column_end":96}},{"value":"/ overlapping the query","span":{"file_name":"/Users/shelwitz/.cargo/registry/src/github.com-1ecc6299db9ec823/bio-0.39.0/src/data_structures/interval_tree/avl_interval_tree.rs","byte_start":324513,"byte_end":324538,"line_start":66,"line_end":66,"column_start":1,"column_end":26}}]},{"kind":"Struct","id":{"krate":0,"index":4029},"span":{"file_name":"/Users/shelwitz/.cargo/registry/src/github.com-1ecc6299db9ec823/bio-0.39.0/src/data_structures/interval_tree/avl_interval_tree.rs","byte_start":326255,"byte_end":326263,"line_start":112,"line_end":112,"column_start":12,"column_end":20},"name":"EntryMut","qualname":"::data_structures::interval_tree::avl_interval_tree::EntryMut","value":"EntryMut {  }","parent":null,"children":[{"krate":0,"index":4033},{"krate":0,"index":4034}],"decl_id":null,"docs":" A `find_mut` query on the interval tree does not directly return references to the nodes in the tree, but\n wraps the fields `interval` and `data` in an `EntryMut`. Only the data part can be mutably accessed\n using the `data` method\n","sig":null,"attributes":[{"value":"/ A `find_mut` query on the interval tree does not directly return references to the nodes in the tree, but","span":{"file_name":"/Users/shelwitz/.cargo/registry/src/github.com-1ecc6299db9ec823/bio-0.39.0/src/data_structures/interval_tree/avl_interval_tree.rs","byte_start":325970,"byte_end":326079,"line_start":108,"line_end":108,"column_start":1,"column_end":110}},{"value":"/ wraps the fields `interval` and `data` in an `EntryMut`. Only the data part can be mutably accessed","span":{"file_name":"/Users/shelwitz/.cargo/registry/src/github.com-1ecc6299db9ec823/bio-0.39.0/src/data_structures/interval_tree/avl_interval_tree.rs","byte_start":326080,"byte_end":326183,"line_start":109,"line_end":109,"column_start":1,"column_end":104}},{"value":"/ using the `data` method","span":{"file_name":"/Users/shelwitz/.cargo/registry/src/github.com-1ecc6299db9ec823/bio-0.39.0/src/data_structures/interval_tree/avl_interval_tree.rs","byte_start":326184,"byte_end":326211,"line_start":110,"line_end":110,"column_start":1,"column_end":28}}]},{"kind":"Method","id":{"krate":0,"index":782},"span":{"file_name":"/Users/shelwitz/.cargo/registry/src/github.com-1ecc6299db9ec823/bio-0.39.0/src/data_structures/interval_tree/avl_interval_tree.rs","byte_start":326472,"byte_end":326476,"line_start":119,"line_end":119,"column_start":12,"column_end":16},"name":"data","qualname":"<EntryMut>::data","value":"pub fn data(&'a mut Self) -> &'a mut D","parent":null,"children":[],"decl_id":null,"docs":" Get a mutable reference to the data for this entry\n","sig":null,"attributes":[{"value":"/ Get a mutable reference to the data for this entry","span":{"file_name":"/Users/shelwitz/.cargo/registry/src/github.com-1ecc6299db9ec823/bio-0.39.0/src/data_structures/interval_tree/avl_interval_tree.rs","byte_start":326406,"byte_end":326460,"line_start":118,"line_end":118,"column_start":5,"column_end":59}}]},{"kind":"Method","id":{"krate":0,"index":783},"span":{"file_name":"/Users/shelwitz/.cargo/registry/src/github.com-1ecc6299db9ec823/bio-0.39.0/src/data_structures/interval_tree/avl_interval_tree.rs","byte_start":326597,"byte_end":326605,"line_start":124,"line_end":124,"column_start":12,"column_end":20},"name":"interval","qualname":"<EntryMut>::interval","value":"pub fn interval(&Self) -> &'a Interval<N>","parent":null,"children":[],"decl_id":null,"docs":" Get a reference to the interval for this entry\n","sig":null,"attributes":[{"value":"/ Get a reference to the interval for this entry","span":{"file_name":"/Users/shelwitz/.cargo/registry/src/github.com-1ecc6299db9ec823/bio-0.39.0/src/data_structures/interval_tree/avl_interval_tree.rs","byte_start":326535,"byte_end":326585,"line_start":123,"line_end":123,"column_start":5,"column_end":55}}]},{"kind":"Struct","id":{"krate":0,"index":784},"span":{"file_name":"/Users/shelwitz/.cargo/registry/src/github.com-1ecc6299db9ec823/bio-0.39.0/src/data_structures/interval_tree/avl_interval_tree.rs","byte_start":326866,"byte_end":326889,"line_start":131,"line_end":131,"column_start":12,"column_end":35},"name":"IntervalTreeIteratorMut","qualname":"::data_structures::interval_tree::avl_interval_tree::IntervalTreeIteratorMut","value":"IntervalTreeIteratorMut {  }","parent":null,"children":[{"krate":0,"index":788},{"krate":0,"index":789}],"decl_id":null,"docs":" An `IntervalTreeIteratorMut` is returned by `Intervaltree::find_mut` and iterates over the entries\n overlapping the query allowing mutable access to the data `D`, not the `Interval`.\n","sig":null,"attributes":[{"value":"/ An `IntervalTreeIteratorMut` is returned by `Intervaltree::find_mut` and iterates over the entries","span":{"file_name":"/Users/shelwitz/.cargo/registry/src/github.com-1ecc6299db9ec823/bio-0.39.0/src/data_structures/interval_tree/avl_interval_tree.rs","byte_start":326665,"byte_end":326767,"line_start":129,"line_end":129,"column_start":1,"column_end":103}},{"value":"/ overlapping the query allowing mutable access to the data `D`, not the `Interval`.","span":{"file_name":"/Users/shelwitz/.cargo/registry/src/github.com-1ecc6299db9ec823/bio-0.39.0/src/data_structures/interval_tree/avl_interval_tree.rs","byte_start":326768,"byte_end":326854,"line_start":130,"line_end":130,"column_start":1,"column_end":87}}]},{"kind":"Method","id":{"krate":0,"index":799},"span":{"file_name":"/Users/shelwitz/.cargo/registry/src/github.com-1ecc6299db9ec823/bio-0.39.0/src/data_structures/interval_tree/avl_interval_tree.rs","byte_start":328397,"byte_end":328400,"line_start":173,"line_end":173,"column_start":12,"column_end":15},"name":"new","qualname":"<IntervalTree<N, D>>::new","value":"pub fn new() -> Self","parent":null,"children":[],"decl_id":null,"docs":" Creates a new empty `IntervalTree`\n","sig":null,"attributes":[{"value":"/ Creates a new empty `IntervalTree`","span":{"file_name":"/Users/shelwitz/.cargo/registry/src/github.com-1ecc6299db9ec823/bio-0.39.0/src/data_structures/interval_tree/avl_interval_tree.rs","byte_start":328347,"byte_end":328385,"line_start":172,"line_end":172,"column_start":5,"column_end":43}}]},{"kind":"Method","id":{"krate":0,"index":800},"span":{"file_name":"/Users/shelwitz/.cargo/registry/src/github.com-1ecc6299db9ec823/bio-0.39.0/src/data_structures/interval_tree/avl_interval_tree.rs","byte_start":328532,"byte_end":328538,"line_start":178,"line_end":178,"column_start":12,"column_end":18},"name":"insert","qualname":"<IntervalTree<N, D>>::insert","value":"pub fn insert<I: Into<Interval<N>>>(&mut Self, I, D)","parent":null,"children":[],"decl_id":null,"docs":" Inserts an `Interval` into the tree and associates it with `data`\n","sig":null,"attributes":[{"value":"/ Inserts an `Interval` into the tree and associates it with `data`","span":{"file_name":"/Users/shelwitz/.cargo/registry/src/github.com-1ecc6299db9ec823/bio-0.39.0/src/data_structures/interval_tree/avl_interval_tree.rs","byte_start":328451,"byte_end":328520,"line_start":177,"line_end":177,"column_start":5,"column_end":74}}]},{"kind":"Method","id":{"krate":0,"index":802},"span":{"file_name":"/Users/shelwitz/.cargo/registry/src/github.com-1ecc6299db9ec823/bio-0.39.0/src/data_structures/interval_tree/avl_interval_tree.rs","byte_start":328938,"byte_end":328942,"line_start":188,"line_end":188,"column_start":12,"column_end":16},"name":"find","qualname":"<IntervalTree<N, D>>::find","value":"pub fn find<I: Into<Interval<N>>>(&Self, I) -> IntervalTreeIterator<, N, D>","parent":null,"children":[],"decl_id":null,"docs":" Uses the provided `Interval` to find overlapping intervals in the tree and returns an\n `IntervalTreeIterator`\n","sig":null,"attributes":[{"value":"/ Uses the provided `Interval` to find overlapping intervals in the tree and returns an","span":{"file_name":"/Users/shelwitz/.cargo/registry/src/github.com-1ecc6299db9ec823/bio-0.39.0/src/data_structures/interval_tree/avl_interval_tree.rs","byte_start":328806,"byte_end":328895,"line_start":186,"line_end":186,"column_start":5,"column_end":94}},{"value":"/ `IntervalTreeIterator`","span":{"file_name":"/Users/shelwitz/.cargo/registry/src/github.com-1ecc6299db9ec823/bio-0.39.0/src/data_structures/interval_tree/avl_interval_tree.rs","byte_start":328900,"byte_end":328926,"line_start":187,"line_end":187,"column_start":5,"column_end":31}}]},{"kind":"Method","id":{"krate":0,"index":804},"span":{"file_name":"/Users/shelwitz/.cargo/registry/src/github.com-1ecc6299db9ec823/bio-0.39.0/src/data_structures/interval_tree/avl_interval_tree.rs","byte_start":329536,"byte_end":329544,"line_start":204,"line_end":204,"column_start":12,"column_end":20},"name":"find_mut","qualname":"<IntervalTree<N, D>>::find_mut","value":"pub fn find_mut<I: Into<Interval<N>>>(&mut Self, I)\n-> IntervalTreeIteratorMut<, N, D>","parent":null,"children":[],"decl_id":null,"docs":" Uses the provided `Interval` to find overlapping intervals in the tree and returns an\n `IntervalTreeIteratorMut` that allows mutable access to the `data`\n","sig":null,"attributes":[{"value":"/ Uses the provided `Interval` to find overlapping intervals in the tree and returns an","span":{"file_name":"/Users/shelwitz/.cargo/registry/src/github.com-1ecc6299db9ec823/bio-0.39.0/src/data_structures/interval_tree/avl_interval_tree.rs","byte_start":329360,"byte_end":329449,"line_start":202,"line_end":202,"column_start":5,"column_end":94}},{"value":"/ `IntervalTreeIteratorMut` that allows mutable access to the `data`","span":{"file_name":"/Users/shelwitz/.cargo/registry/src/github.com-1ecc6299db9ec823/bio-0.39.0/src/data_structures/interval_tree/avl_interval_tree.rs","byte_start":329454,"byte_end":329524,"line_start":203,"line_end":203,"column_start":5,"column_end":75}}]},{"kind":"Mod","id":{"krate":0,"index":854},"span":{"file_name":"/Users/shelwitz/.cargo/registry/src/github.com-1ecc6299db9ec823/bio-0.39.0/src/data_structures/qgram_index.rs","byte_start":0,"byte_end":0,"line_start":1,"line_end":1,"column_start":1,"column_end":1},"name":"qgram_index","qualname":"::data_structures::qgram_index","value":"/Users/shelwitz/.cargo/registry/src/github.com-1ecc6299db9ec823/bio-0.39.0/src/data_structures/qgram_index.rs","parent":null,"children":[{"krate":0,"index":855},{"krate":0,"index":858},{"krate":0,"index":861},{"krate":0,"index":864},{"krate":0,"index":865},{"krate":0,"index":868},{"krate":0,"index":871},{"krate":0,"index":4141},{"krate":0,"index":4146},{"krate":0,"index":4152},{"krate":0,"index":874},{"krate":0,"index":4199},{"krate":0,"index":4202},{"krate":0,"index":4203},{"krate":0,"index":4206},{"krate":0,"index":4207},{"krate":0,"index":4209},{"krate":0,"index":4211},{"krate":0,"index":4212},{"krate":0,"index":889},{"krate":0,"index":4214},{"krate":0,"index":4218},{"krate":0,"index":4219},{"krate":0,"index":4222},{"krate":0,"index":4223},{"krate":0,"index":4225},{"krate":0,"index":4227},{"krate":0,"index":4228},{"krate":0,"index":892},{"krate":0,"index":894},{"krate":0,"index":4230},{"krate":0,"index":4233},{"krate":0,"index":4234},{"krate":0,"index":4237},{"krate":0,"index":4239},{"krate":0,"index":4240}],"decl_id":null,"docs":" A classical, flexible, q-gram index implementation.","sig":null,"attributes":[{"value":"/ A classical, flexible, q-gram index implementation.","span":{"file_name":"/Users/shelwitz/.cargo/registry/src/github.com-1ecc6299db9ec823/bio-0.39.0/src/data_structures/qgram_index.rs","byte_start":344329,"byte_end":344384,"line_start":6,"line_end":6,"column_start":1,"column_end":56}},{"value":"/","span":{"file_name":"/Users/shelwitz/.cargo/registry/src/github.com-1ecc6299db9ec823/bio-0.39.0/src/data_structures/qgram_index.rs","byte_start":344385,"byte_end":344388,"line_start":7,"line_end":7,"column_start":1,"column_end":4}},{"value":"/ # Example","span":{"file_name":"/Users/shelwitz/.cargo/registry/src/github.com-1ecc6299db9ec823/bio-0.39.0/src/data_structures/qgram_index.rs","byte_start":344389,"byte_end":344402,"line_start":8,"line_end":8,"column_start":1,"column_end":14}},{"value":"/","span":{"file_name":"/Users/shelwitz/.cargo/registry/src/github.com-1ecc6299db9ec823/bio-0.39.0/src/data_structures/qgram_index.rs","byte_start":344403,"byte_end":344406,"line_start":9,"line_end":9,"column_start":1,"column_end":4}},{"value":"/ ```","span":{"file_name":"/Users/shelwitz/.cargo/registry/src/github.com-1ecc6299db9ec823/bio-0.39.0/src/data_structures/qgram_index.rs","byte_start":344407,"byte_end":344414,"line_start":10,"line_end":10,"column_start":1,"column_end":8}},{"value":"/ use bio::alphabets;","span":{"file_name":"/Users/shelwitz/.cargo/registry/src/github.com-1ecc6299db9ec823/bio-0.39.0/src/data_structures/qgram_index.rs","byte_start":344415,"byte_end":344438,"line_start":11,"line_end":11,"column_start":1,"column_end":24}},{"value":"/ use bio::data_structures::qgram_index;","span":{"file_name":"/Users/shelwitz/.cargo/registry/src/github.com-1ecc6299db9ec823/bio-0.39.0/src/data_structures/qgram_index.rs","byte_start":344439,"byte_end":344481,"line_start":12,"line_end":12,"column_start":1,"column_end":43}},{"value":"/","span":{"file_name":"/Users/shelwitz/.cargo/registry/src/github.com-1ecc6299db9ec823/bio-0.39.0/src/data_structures/qgram_index.rs","byte_start":344482,"byte_end":344485,"line_start":13,"line_end":13,"column_start":1,"column_end":4}},{"value":"/ let text = b\"ACGGCTGAGATGAT\";","span":{"file_name":"/Users/shelwitz/.cargo/registry/src/github.com-1ecc6299db9ec823/bio-0.39.0/src/data_structures/qgram_index.rs","byte_start":344486,"byte_end":344519,"line_start":14,"line_end":14,"column_start":1,"column_end":34}},{"value":"/ let alphabet = alphabets::dna::alphabet();","span":{"file_name":"/Users/shelwitz/.cargo/registry/src/github.com-1ecc6299db9ec823/bio-0.39.0/src/data_structures/qgram_index.rs","byte_start":344520,"byte_end":344566,"line_start":15,"line_end":15,"column_start":1,"column_end":47}},{"value":"/ let q = 3;","span":{"file_name":"/Users/shelwitz/.cargo/registry/src/github.com-1ecc6299db9ec823/bio-0.39.0/src/data_structures/qgram_index.rs","byte_start":344567,"byte_end":344581,"line_start":16,"line_end":16,"column_start":1,"column_end":15}},{"value":"/ let qgram_index = qgram_index::QGramIndex::new(q, text, &alphabet);","span":{"file_name":"/Users/shelwitz/.cargo/registry/src/github.com-1ecc6299db9ec823/bio-0.39.0/src/data_structures/qgram_index.rs","byte_start":344582,"byte_end":344653,"line_start":17,"line_end":17,"column_start":1,"column_end":72}},{"value":"/","span":{"file_name":"/Users/shelwitz/.cargo/registry/src/github.com-1ecc6299db9ec823/bio-0.39.0/src/data_structures/qgram_index.rs","byte_start":344654,"byte_end":344657,"line_start":18,"line_end":18,"column_start":1,"column_end":4}},{"value":"/ let pattern = b\"GCTG\";","span":{"file_name":"/Users/shelwitz/.cargo/registry/src/github.com-1ecc6299db9ec823/bio-0.39.0/src/data_structures/qgram_index.rs","byte_start":344658,"byte_end":344684,"line_start":19,"line_end":19,"column_start":1,"column_end":27}},{"value":"/ let matches = qgram_index.matches(pattern, 1);","span":{"file_name":"/Users/shelwitz/.cargo/registry/src/github.com-1ecc6299db9ec823/bio-0.39.0/src/data_structures/qgram_index.rs","byte_start":344685,"byte_end":344735,"line_start":20,"line_end":20,"column_start":1,"column_end":51}},{"value":"/ assert_eq!(","span":{"file_name":"/Users/shelwitz/.cargo/registry/src/github.com-1ecc6299db9ec823/bio-0.39.0/src/data_structures/qgram_index.rs","byte_start":344736,"byte_end":344751,"line_start":21,"line_end":21,"column_start":1,"column_end":16}},{"value":"/     matches,","span":{"file_name":"/Users/shelwitz/.cargo/registry/src/github.com-1ecc6299db9ec823/bio-0.39.0/src/data_structures/qgram_index.rs","byte_start":344752,"byte_end":344768,"line_start":22,"line_end":22,"column_start":1,"column_end":17}},{"value":"/     [qgram_index::Match {","span":{"file_name":"/Users/shelwitz/.cargo/registry/src/github.com-1ecc6299db9ec823/bio-0.39.0/src/data_structures/qgram_index.rs","byte_start":344769,"byte_end":344798,"line_start":23,"line_end":23,"column_start":1,"column_end":30}},{"value":"/         pattern: qgram_index::Interval { start: 0, stop: 4 },","span":{"file_name":"/Users/shelwitz/.cargo/registry/src/github.com-1ecc6299db9ec823/bio-0.39.0/src/data_structures/qgram_index.rs","byte_start":344799,"byte_end":344864,"line_start":24,"line_end":24,"column_start":1,"column_end":66}},{"value":"/         text: qgram_index::Interval { start: 3, stop: 7 },","span":{"file_name":"/Users/shelwitz/.cargo/registry/src/github.com-1ecc6299db9ec823/bio-0.39.0/src/data_structures/qgram_index.rs","byte_start":344865,"byte_end":344927,"line_start":25,"line_end":25,"column_start":1,"column_end":63}},{"value":"/         count: 2","span":{"file_name":"/Users/shelwitz/.cargo/registry/src/github.com-1ecc6299db9ec823/bio-0.39.0/src/data_structures/qgram_index.rs","byte_start":344928,"byte_end":344948,"line_start":26,"line_end":26,"column_start":1,"column_end":21}},{"value":"/     }]","span":{"file_name":"/Users/shelwitz/.cargo/registry/src/github.com-1ecc6299db9ec823/bio-0.39.0/src/data_structures/qgram_index.rs","byte_start":344949,"byte_end":344959,"line_start":27,"line_end":27,"column_start":1,"column_end":11}},{"value":"/ );","span":{"file_name":"/Users/shelwitz/.cargo/registry/src/github.com-1ecc6299db9ec823/bio-0.39.0/src/data_structures/qgram_index.rs","byte_start":344960,"byte_end":344966,"line_start":28,"line_end":28,"column_start":1,"column_end":7}},{"value":"/ ```","span":{"file_name":"/Users/shelwitz/.cargo/registry/src/github.com-1ecc6299db9ec823/bio-0.39.0/src/data_structures/qgram_index.rs","byte_start":344967,"byte_end":344974,"line_start":29,"line_end":29,"column_start":1,"column_end":8}}]},{"kind":"Struct","id":{"krate":0,"index":4141},"span":{"file_name":"/Users/shelwitz/.cargo/registry/src/github.com-1ecc6299db9ec823/bio-0.39.0/src/data_structures/qgram_index.rs","byte_start":345221,"byte_end":345231,"line_start":40,"line_end":40,"column_start":12,"column_end":22},"name":"QGramIndex","qualname":"::data_structures::qgram_index::QGramIndex","value":"QGramIndex {  }","parent":null,"children":[{"krate":0,"index":4142},{"krate":0,"index":4143},{"krate":0,"index":4144},{"krate":0,"index":4145}],"decl_id":null,"docs":" A classical, flexible, q-gram index implementation.\n","sig":null,"attributes":[{"value":"/ A classical, flexible, q-gram index implementation.","span":{"file_name":"/Users/shelwitz/.cargo/registry/src/github.com-1ecc6299db9ec823/bio-0.39.0/src/data_structures/qgram_index.rs","byte_start":345120,"byte_end":345175,"line_start":38,"line_end":38,"column_start":1,"column_end":56}}]},{"kind":"Method","id":{"krate":0,"index":875},"span":{"file_name":"/Users/shelwitz/.cargo/registry/src/github.com-1ecc6299db9ec823/bio-0.39.0/src/data_structures/qgram_index.rs","byte_start":345527,"byte_end":345530,"line_start":51,"line_end":51,"column_start":12,"column_end":15},"name":"new","qualname":"<QGramIndex>::new","value":"pub fn new<'a, T, I>(u32, T, &Alphabet) -> Self where I: Iterator<Item =\n&'a u8> + ExactSizeIterator + Clone, T: IntoIterator<Item = &'a u8, IntoIter =\n&'a u8> + Sized","parent":null,"children":[],"decl_id":null,"docs":" Create a new q-gram index.\n The q has to be smaller than b / log2(|A|) with |A| being the alphabet size and b the number\n bits with the `usize` data type.\n","sig":null,"attributes":[{"value":"/ Create a new q-gram index.","span":{"file_name":"/Users/shelwitz/.cargo/registry/src/github.com-1ecc6299db9ec823/bio-0.39.0/src/data_structures/qgram_index.rs","byte_start":345343,"byte_end":345373,"line_start":48,"line_end":48,"column_start":5,"column_end":35}},{"value":"/ The q has to be smaller than b / log2(|A|) with |A| being the alphabet size and b the number","span":{"file_name":"/Users/shelwitz/.cargo/registry/src/github.com-1ecc6299db9ec823/bio-0.39.0/src/data_structures/qgram_index.rs","byte_start":345378,"byte_end":345474,"line_start":49,"line_end":49,"column_start":5,"column_end":101}},{"value":"/ bits with the `usize` data type.","span":{"file_name":"/Users/shelwitz/.cargo/registry/src/github.com-1ecc6299db9ec823/bio-0.39.0/src/data_structures/qgram_index.rs","byte_start":345479,"byte_end":345515,"line_start":50,"line_end":50,"column_start":5,"column_end":41}}]},{"kind":"Method","id":{"krate":0,"index":879},"span":{"file_name":"/Users/shelwitz/.cargo/registry/src/github.com-1ecc6299db9ec823/bio-0.39.0/src/data_structures/qgram_index.rs","byte_start":346058,"byte_end":346072,"line_start":62,"line_end":62,"column_start":12,"column_end":26},"name":"with_max_count","qualname":"<QGramIndex>::with_max_count","value":"pub fn with_max_count<'a, T, I>(u32, T, &Alphabet, usize) -> Self where\nI: Iterator<Item = &'a u8> + ExactSizeIterator + Clone, T: IntoIterator<Item =\n&'a u8, IntoIter = &'a u8> + Sized","parent":null,"children":[],"decl_id":null,"docs":" Create a new q-gram index, only considering q-grams that occur at most `max_count` times.\n The q has to be smaller than b / log2(|A|) with |A| being the alphabet size and b the number\n bits with the `usize` data type.\n","sig":null,"attributes":[{"value":"/ Create a new q-gram index, only considering q-grams that occur at most `max_count` times.","span":{"file_name":"/Users/shelwitz/.cargo/registry/src/github.com-1ecc6299db9ec823/bio-0.39.0/src/data_structures/qgram_index.rs","byte_start":345811,"byte_end":345904,"line_start":59,"line_end":59,"column_start":5,"column_end":98}},{"value":"/ The q has to be smaller than b / log2(|A|) with |A| being the alphabet size and b the number","span":{"file_name":"/Users/shelwitz/.cargo/registry/src/github.com-1ecc6299db9ec823/bio-0.39.0/src/data_structures/qgram_index.rs","byte_start":345909,"byte_end":346005,"line_start":60,"line_end":60,"column_start":5,"column_end":101}},{"value":"/ bits with the `usize` data type.","span":{"file_name":"/Users/shelwitz/.cargo/registry/src/github.com-1ecc6299db9ec823/bio-0.39.0/src/data_structures/qgram_index.rs","byte_start":346010,"byte_end":346046,"line_start":61,"line_end":61,"column_start":5,"column_end":41}}]},{"kind":"Method","id":{"krate":0,"index":884},"span":{"file_name":"/Users/shelwitz/.cargo/registry/src/github.com-1ecc6299db9ec823/bio-0.39.0/src/data_structures/qgram_index.rs","byte_start":347418,"byte_end":347419,"line_start":108,"line_end":108,"column_start":12,"column_end":13},"name":"q","qualname":"<QGramIndex>::q","value":"pub fn q(&Self) -> u32","parent":null,"children":[],"decl_id":null,"docs":" The used q.\n","sig":null,"attributes":[{"value":"/ The used q.","span":{"file_name":"/Users/shelwitz/.cargo/registry/src/github.com-1ecc6299db9ec823/bio-0.39.0/src/data_structures/qgram_index.rs","byte_start":347391,"byte_end":347406,"line_start":107,"line_end":107,"column_start":5,"column_end":20}}]},{"kind":"Method","id":{"krate":0,"index":885},"span":{"file_name":"/Users/shelwitz/.cargo/registry/src/github.com-1ecc6299db9ec823/bio-0.39.0/src/data_structures/qgram_index.rs","byte_start":347538,"byte_end":347551,"line_start":113,"line_end":113,"column_start":12,"column_end":25},"name":"qgram_matches","qualname":"<QGramIndex>::qgram_matches","value":"pub fn qgram_matches(&Self, usize) -> &[usize]","parent":null,"children":[],"decl_id":null,"docs":" Return text positions with matching q-gram. Complexity O(1).\n","sig":null,"attributes":[{"value":"/ Return text positions with matching q-gram. Complexity O(1).","span":{"file_name":"/Users/shelwitz/.cargo/registry/src/github.com-1ecc6299db9ec823/bio-0.39.0/src/data_structures/qgram_index.rs","byte_start":347462,"byte_end":347526,"line_start":112,"line_end":112,"column_start":5,"column_end":69}}]},{"kind":"Method","id":{"krate":0,"index":886},"span":{"file_name":"/Users/shelwitz/.cargo/registry/src/github.com-1ecc6299db9ec823/bio-0.39.0/src/data_structures/qgram_index.rs","byte_start":347810,"byte_end":347817,"line_start":119,"line_end":119,"column_start":12,"column_end":19},"name":"matches","qualname":"<QGramIndex>::matches","value":"pub fn matches(&Self, &[u8], usize) -> Vec<Match>","parent":null,"children":[],"decl_id":null,"docs":" Return matches of the given pattern.\n Complexity O(m + k) for pattern of length m and k being the number of matching q-grams.\n","sig":null,"attributes":[{"value":"/ Return matches of the given pattern.","span":{"file_name":"/Users/shelwitz/.cargo/registry/src/github.com-1ecc6299db9ec823/bio-0.39.0/src/data_structures/qgram_index.rs","byte_start":347662,"byte_end":347702,"line_start":117,"line_end":117,"column_start":5,"column_end":45}},{"value":"/ Complexity O(m + k) for pattern of length m and k being the number of matching q-grams.","span":{"file_name":"/Users/shelwitz/.cargo/registry/src/github.com-1ecc6299db9ec823/bio-0.39.0/src/data_structures/qgram_index.rs","byte_start":347707,"byte_end":347798,"line_start":118,"line_end":118,"column_start":5,"column_end":96}}]},{"kind":"Method","id":{"krate":0,"index":888},"span":{"file_name":"/Users/shelwitz/.cargo/registry/src/github.com-1ecc6299db9ec823/bio-0.39.0/src/data_structures/qgram_index.rs","byte_start":349294,"byte_end":349307,"line_start":156,"line_end":156,"column_start":12,"column_end":25},"name":"exact_matches","qualname":"<QGramIndex>::exact_matches","value":"pub fn exact_matches(&Self, &[u8]) -> Vec<ExactMatch>","parent":null,"children":[],"decl_id":null,"docs":" Return exact matches (substrings) of the given pattern.\n Complexity O(m + k) for pattern of length m and k being the number of matching q-grams.\n","sig":null,"attributes":[{"value":"/ Return exact matches (substrings) of the given pattern.","span":{"file_name":"/Users/shelwitz/.cargo/registry/src/github.com-1ecc6299db9ec823/bio-0.39.0/src/data_structures/qgram_index.rs","byte_start":349127,"byte_end":349186,"line_start":154,"line_end":154,"column_start":5,"column_end":64}},{"value":"/ Complexity O(m + k) for pattern of length m and k being the number of matching q-grams.","span":{"file_name":"/Users/shelwitz/.cargo/registry/src/github.com-1ecc6299db9ec823/bio-0.39.0/src/data_structures/qgram_index.rs","byte_start":349191,"byte_end":349282,"line_start":155,"line_end":155,"column_start":5,"column_end":96}}]},{"kind":"Struct","id":{"krate":0,"index":4199},"span":{"file_name":"/Users/shelwitz/.cargo/registry/src/github.com-1ecc6299db9ec823/bio-0.39.0/src/data_structures/qgram_index.rs","byte_start":350979,"byte_end":350987,"line_start":202,"line_end":202,"column_start":12,"column_end":20},"name":"Interval","qualname":"::data_structures::qgram_index::Interval","value":"Interval { start, stop }","parent":null,"children":[{"krate":0,"index":4200},{"krate":0,"index":4201}],"decl_id":null,"docs":" An interval, consisting of start and stop position (the latter exclusive).\n","sig":null,"attributes":[{"value":"/ An interval, consisting of start and stop position (the latter exclusive).","span":{"file_name":"/Users/shelwitz/.cargo/registry/src/github.com-1ecc6299db9ec823/bio-0.39.0/src/data_structures/qgram_index.rs","byte_start":350844,"byte_end":350922,"line_start":200,"line_end":200,"column_start":1,"column_end":79}}]},{"kind":"Field","id":{"krate":0,"index":4200},"span":{"file_name":"/Users/shelwitz/.cargo/registry/src/github.com-1ecc6299db9ec823/bio-0.39.0/src/data_structures/qgram_index.rs","byte_start":350998,"byte_end":351003,"line_start":203,"line_end":203,"column_start":9,"column_end":14},"name":"start","qualname":"::data_structures::qgram_index::Interval::start","value":"usize","parent":{"krate":0,"index":4199},"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Field","id":{"krate":0,"index":4201},"span":{"file_name":"/Users/shelwitz/.cargo/registry/src/github.com-1ecc6299db9ec823/bio-0.39.0/src/data_structures/qgram_index.rs","byte_start":351020,"byte_end":351024,"line_start":204,"line_end":204,"column_start":9,"column_end":13},"name":"stop","qualname":"::data_structures::qgram_index::Interval::stop","value":"usize","parent":{"krate":0,"index":4199},"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":890},"span":{"file_name":"/Users/shelwitz/.cargo/registry/src/github.com-1ecc6299db9ec823/bio-0.39.0/src/data_structures/qgram_index.rs","byte_start":351111,"byte_end":351114,"line_start":209,"line_end":209,"column_start":12,"column_end":15},"name":"get","qualname":"<Interval>::get","value":"pub fn get<'a>(&Self, &'a [u8]) -> &'a [u8]","parent":null,"children":[],"decl_id":null,"docs":" Get the text within the given interval.\n","sig":null,"attributes":[{"value":"/ Get the text within the given interval.","span":{"file_name":"/Users/shelwitz/.cargo/registry/src/github.com-1ecc6299db9ec823/bio-0.39.0/src/data_structures/qgram_index.rs","byte_start":351056,"byte_end":351099,"line_start":208,"line_end":208,"column_start":5,"column_end":48}}]},{"kind":"Struct","id":{"krate":0,"index":4214},"span":{"file_name":"/Users/shelwitz/.cargo/registry/src/github.com-1ecc6299db9ec823/bio-0.39.0/src/data_structures/qgram_index.rs","byte_start":351304,"byte_end":351309,"line_start":216,"line_end":216,"column_start":12,"column_end":17},"name":"Match","qualname":"::data_structures::qgram_index::Match","value":"Match { pattern, text, count }","parent":null,"children":[{"krate":0,"index":4215},{"krate":0,"index":4216},{"krate":0,"index":4217}],"decl_id":null,"docs":" A match between the pattern and the text.\n","sig":null,"attributes":[{"value":"/ A match between the pattern and the text.","span":{"file_name":"/Users/shelwitz/.cargo/registry/src/github.com-1ecc6299db9ec823/bio-0.39.0/src/data_structures/qgram_index.rs","byte_start":351202,"byte_end":351247,"line_start":214,"line_end":214,"column_start":1,"column_end":46}}]},{"kind":"Field","id":{"krate":0,"index":4215},"span":{"file_name":"/Users/shelwitz/.cargo/registry/src/github.com-1ecc6299db9ec823/bio-0.39.0/src/data_structures/qgram_index.rs","byte_start":351320,"byte_end":351327,"line_start":217,"line_end":217,"column_start":9,"column_end":16},"name":"pattern","qualname":"::data_structures::qgram_index::Match::pattern","value":"data_structures::qgram_index::Interval","parent":{"krate":0,"index":4214},"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Field","id":{"krate":0,"index":4216},"span":{"file_name":"/Users/shelwitz/.cargo/registry/src/github.com-1ecc6299db9ec823/bio-0.39.0/src/data_structures/qgram_index.rs","byte_start":351347,"byte_end":351351,"line_start":218,"line_end":218,"column_start":9,"column_end":13},"name":"text","qualname":"::data_structures::qgram_index::Match::text","value":"data_structures::qgram_index::Interval","parent":{"krate":0,"index":4214},"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Field","id":{"krate":0,"index":4217},"span":{"file_name":"/Users/shelwitz/.cargo/registry/src/github.com-1ecc6299db9ec823/bio-0.39.0/src/data_structures/qgram_index.rs","byte_start":351371,"byte_end":351376,"line_start":219,"line_end":219,"column_start":9,"column_end":14},"name":"count","qualname":"::data_structures::qgram_index::Match::count","value":"usize","parent":{"krate":0,"index":4214},"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Struct","id":{"krate":0,"index":4230},"span":{"file_name":"/Users/shelwitz/.cargo/registry/src/github.com-1ecc6299db9ec823/bio-0.39.0/src/data_structures/qgram_index.rs","byte_start":351755,"byte_end":351765,"line_start":236,"line_end":236,"column_start":12,"column_end":22},"name":"ExactMatch","qualname":"::data_structures::qgram_index::ExactMatch","value":"ExactMatch { pattern, text }","parent":null,"children":[{"krate":0,"index":4231},{"krate":0,"index":4232}],"decl_id":null,"docs":" An exact match between the pattern and the text.\n","sig":null,"attributes":[{"value":"/ An exact match between the pattern and the text.","span":{"file_name":"/Users/shelwitz/.cargo/registry/src/github.com-1ecc6299db9ec823/bio-0.39.0/src/data_structures/qgram_index.rs","byte_start":351650,"byte_end":351702,"line_start":234,"line_end":234,"column_start":1,"column_end":53}}]},{"kind":"Field","id":{"krate":0,"index":4231},"span":{"file_name":"/Users/shelwitz/.cargo/registry/src/github.com-1ecc6299db9ec823/bio-0.39.0/src/data_structures/qgram_index.rs","byte_start":351776,"byte_end":351783,"line_start":237,"line_end":237,"column_start":9,"column_end":16},"name":"pattern","qualname":"::data_structures::qgram_index::ExactMatch::pattern","value":"data_structures::qgram_index::Interval","parent":{"krate":0,"index":4230},"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Field","id":{"krate":0,"index":4232},"span":{"file_name":"/Users/shelwitz/.cargo/registry/src/github.com-1ecc6299db9ec823/bio-0.39.0/src/data_structures/qgram_index.rs","byte_start":351803,"byte_end":351807,"line_start":238,"line_end":238,"column_start":9,"column_end":13},"name":"text","qualname":"::data_structures::qgram_index::ExactMatch::text","value":"data_structures::qgram_index::Interval","parent":{"krate":0,"index":4230},"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Mod","id":{"krate":0,"index":896},"span":{"file_name":"/Users/shelwitz/.cargo/registry/src/github.com-1ecc6299db9ec823/bio-0.39.0/src/data_structures/rank_select.rs","byte_start":0,"byte_end":0,"line_start":1,"line_end":1,"column_start":1,"column_end":1},"name":"rank_select","qualname":"::data_structures::rank_select","value":"/Users/shelwitz/.cargo/registry/src/github.com-1ecc6299db9ec823/bio-0.39.0/src/data_structures/rank_select.rs","parent":null,"children":[{"krate":0,"index":897},{"krate":0,"index":900},{"krate":0,"index":903},{"krate":0,"index":906},{"krate":0,"index":4242},{"krate":0,"index":4249},{"krate":0,"index":4255},{"krate":0,"index":909},{"krate":0,"index":4306},{"krate":0,"index":4313},{"krate":0,"index":4352},{"krate":0,"index":4358},{"krate":0,"index":4360},{"krate":0,"index":4362},{"krate":0,"index":4363},{"krate":0,"index":4366},{"krate":0,"index":4367},{"krate":0,"index":928},{"krate":0,"index":931},{"krate":0,"index":933},{"krate":0,"index":935}],"decl_id":null,"docs":" Rank/Select data structure based on Gonzalez, Grabowski, Mäkinen, Navarro (2005).\n This implementation uses only a single level of blocks, and performs well for large n.","sig":null,"attributes":[{"value":"/ Rank/Select data structure based on Gonzalez, Grabowski, Mäkinen, Navarro (2005).","span":{"file_name":"/Users/shelwitz/.cargo/registry/src/github.com-1ecc6299db9ec823/bio-0.39.0/src/data_structures/rank_select.rs","byte_start":354353,"byte_end":354439,"line_start":6,"line_end":6,"column_start":1,"column_end":86}},{"value":"/ This implementation uses only a single level of blocks, and performs well for large n.","span":{"file_name":"/Users/shelwitz/.cargo/registry/src/github.com-1ecc6299db9ec823/bio-0.39.0/src/data_structures/rank_select.rs","byte_start":354440,"byte_end":354530,"line_start":7,"line_end":7,"column_start":1,"column_end":91}},{"value":"/","span":{"file_name":"/Users/shelwitz/.cargo/registry/src/github.com-1ecc6299db9ec823/bio-0.39.0/src/data_structures/rank_select.rs","byte_start":354531,"byte_end":354534,"line_start":8,"line_end":8,"column_start":1,"column_end":4}},{"value":"/ Example","span":{"file_name":"/Users/shelwitz/.cargo/registry/src/github.com-1ecc6299db9ec823/bio-0.39.0/src/data_structures/rank_select.rs","byte_start":354535,"byte_end":354546,"line_start":9,"line_end":9,"column_start":1,"column_end":12}},{"value":"/","span":{"file_name":"/Users/shelwitz/.cargo/registry/src/github.com-1ecc6299db9ec823/bio-0.39.0/src/data_structures/rank_select.rs","byte_start":354547,"byte_end":354550,"line_start":10,"line_end":10,"column_start":1,"column_end":4}},{"value":"/ ```","span":{"file_name":"/Users/shelwitz/.cargo/registry/src/github.com-1ecc6299db9ec823/bio-0.39.0/src/data_structures/rank_select.rs","byte_start":354551,"byte_end":354558,"line_start":11,"line_end":11,"column_start":1,"column_end":8}},{"value":"/ extern crate bv;","span":{"file_name":"/Users/shelwitz/.cargo/registry/src/github.com-1ecc6299db9ec823/bio-0.39.0/src/data_structures/rank_select.rs","byte_start":354559,"byte_end":354579,"line_start":12,"line_end":12,"column_start":1,"column_end":21}},{"value":"/ # extern crate bio;","span":{"file_name":"/Users/shelwitz/.cargo/registry/src/github.com-1ecc6299db9ec823/bio-0.39.0/src/data_structures/rank_select.rs","byte_start":354580,"byte_end":354603,"line_start":13,"line_end":13,"column_start":1,"column_end":24}},{"value":"/ # fn main() {","span":{"file_name":"/Users/shelwitz/.cargo/registry/src/github.com-1ecc6299db9ec823/bio-0.39.0/src/data_structures/rank_select.rs","byte_start":354604,"byte_end":354621,"line_start":14,"line_end":14,"column_start":1,"column_end":18}},{"value":"/ use bio::data_structures::rank_select::RankSelect;","span":{"file_name":"/Users/shelwitz/.cargo/registry/src/github.com-1ecc6299db9ec823/bio-0.39.0/src/data_structures/rank_select.rs","byte_start":354622,"byte_end":354676,"line_start":15,"line_end":15,"column_start":1,"column_end":55}},{"value":"/ use bv::BitVec;","span":{"file_name":"/Users/shelwitz/.cargo/registry/src/github.com-1ecc6299db9ec823/bio-0.39.0/src/data_structures/rank_select.rs","byte_start":354677,"byte_end":354696,"line_start":16,"line_end":16,"column_start":1,"column_end":20}},{"value":"/ use bv::BitsMut;","span":{"file_name":"/Users/shelwitz/.cargo/registry/src/github.com-1ecc6299db9ec823/bio-0.39.0/src/data_structures/rank_select.rs","byte_start":354697,"byte_end":354717,"line_start":17,"line_end":17,"column_start":1,"column_end":21}},{"value":"/","span":{"file_name":"/Users/shelwitz/.cargo/registry/src/github.com-1ecc6299db9ec823/bio-0.39.0/src/data_structures/rank_select.rs","byte_start":354718,"byte_end":354721,"line_start":18,"line_end":18,"column_start":1,"column_end":4}},{"value":"/ let mut bits: BitVec<u8> = BitVec::new_fill(false, 64);","span":{"file_name":"/Users/shelwitz/.cargo/registry/src/github.com-1ecc6299db9ec823/bio-0.39.0/src/data_structures/rank_select.rs","byte_start":354722,"byte_end":354781,"line_start":19,"line_end":19,"column_start":1,"column_end":60}},{"value":"/ bits.set_bit(5, true);","span":{"file_name":"/Users/shelwitz/.cargo/registry/src/github.com-1ecc6299db9ec823/bio-0.39.0/src/data_structures/rank_select.rs","byte_start":354782,"byte_end":354808,"line_start":20,"line_end":20,"column_start":1,"column_end":27}},{"value":"/ bits.set_bit(32, true);","span":{"file_name":"/Users/shelwitz/.cargo/registry/src/github.com-1ecc6299db9ec823/bio-0.39.0/src/data_structures/rank_select.rs","byte_start":354809,"byte_end":354836,"line_start":21,"line_end":21,"column_start":1,"column_end":28}},{"value":"/ let rs = RankSelect::new(bits, 1);","span":{"file_name":"/Users/shelwitz/.cargo/registry/src/github.com-1ecc6299db9ec823/bio-0.39.0/src/data_structures/rank_select.rs","byte_start":354837,"byte_end":354875,"line_start":22,"line_end":22,"column_start":1,"column_end":39}},{"value":"/ assert!(rs.rank(6).unwrap() == 1);","span":{"file_name":"/Users/shelwitz/.cargo/registry/src/github.com-1ecc6299db9ec823/bio-0.39.0/src/data_structures/rank_select.rs","byte_start":354876,"byte_end":354914,"line_start":23,"line_end":23,"column_start":1,"column_end":39}},{"value":"/ # }","span":{"file_name":"/Users/shelwitz/.cargo/registry/src/github.com-1ecc6299db9ec823/bio-0.39.0/src/data_structures/rank_select.rs","byte_start":354915,"byte_end":354922,"line_start":24,"line_end":24,"column_start":1,"column_end":8}},{"value":"/ ```","span":{"file_name":"/Users/shelwitz/.cargo/registry/src/github.com-1ecc6299db9ec823/bio-0.39.0/src/data_structures/rank_select.rs","byte_start":354923,"byte_end":354930,"line_start":25,"line_end":25,"column_start":1,"column_end":8}}]},{"kind":"Struct","id":{"krate":0,"index":4242},"span":{"file_name":"/Users/shelwitz/.cargo/registry/src/github.com-1ecc6299db9ec823/bio-0.39.0/src/data_structures/rank_select.rs","byte_start":355078,"byte_end":355088,"line_start":35,"line_end":35,"column_start":12,"column_end":22},"name":"RankSelect","qualname":"::data_structures::rank_select::RankSelect","value":"RankSelect {  }","parent":null,"children":[{"krate":0,"index":4243},{"krate":0,"index":4244},{"krate":0,"index":4245},{"krate":0,"index":4246},{"krate":0,"index":4247},{"krate":0,"index":4248}],"decl_id":null,"docs":" A rank/select data structure.\n","sig":null,"attributes":[{"value":"/ A rank/select data structure.","span":{"file_name":"/Users/shelwitz/.cargo/registry/src/github.com-1ecc6299db9ec823/bio-0.39.0/src/data_structures/rank_select.rs","byte_start":354999,"byte_end":355032,"line_start":33,"line_end":33,"column_start":1,"column_end":34}}]},{"kind":"Method","id":{"krate":0,"index":910},"span":{"file_name":"/Users/shelwitz/.cargo/registry/src/github.com-1ecc6299db9ec823/bio-0.39.0/src/data_structures/rank_select.rs","byte_start":355864,"byte_end":355867,"line_start":58,"line_end":58,"column_start":12,"column_end":15},"name":"new","qualname":"<RankSelect>::new","value":"pub fn new(BitVec<u8>, usize) -> RankSelect","parent":null,"children":[],"decl_id":null,"docs":" Create a new instance.","sig":null,"attributes":[{"value":"/ Create a new instance.","span":{"file_name":"/Users/shelwitz/.cargo/registry/src/github.com-1ecc6299db9ec823/bio-0.39.0/src/data_structures/rank_select.rs","byte_start":355327,"byte_end":355353,"line_start":47,"line_end":47,"column_start":5,"column_end":31}},{"value":"/","span":{"file_name":"/Users/shelwitz/.cargo/registry/src/github.com-1ecc6299db9ec823/bio-0.39.0/src/data_structures/rank_select.rs","byte_start":355358,"byte_end":355361,"line_start":48,"line_end":48,"column_start":5,"column_end":8}},{"value":"/ # Arguments","span":{"file_name":"/Users/shelwitz/.cargo/registry/src/github.com-1ecc6299db9ec823/bio-0.39.0/src/data_structures/rank_select.rs","byte_start":355366,"byte_end":355381,"line_start":49,"line_end":49,"column_start":5,"column_end":20}},{"value":"/","span":{"file_name":"/Users/shelwitz/.cargo/registry/src/github.com-1ecc6299db9ec823/bio-0.39.0/src/data_structures/rank_select.rs","byte_start":355386,"byte_end":355389,"line_start":50,"line_end":50,"column_start":5,"column_end":8}},{"value":"/ * `bits` - A bit vector.","span":{"file_name":"/Users/shelwitz/.cargo/registry/src/github.com-1ecc6299db9ec823/bio-0.39.0/src/data_structures/rank_select.rs","byte_start":355394,"byte_end":355422,"line_start":51,"line_end":51,"column_start":5,"column_end":33}},{"value":"/ * `k` - Determines the size (k * 32 bits) of the superblocks.","span":{"file_name":"/Users/shelwitz/.cargo/registry/src/github.com-1ecc6299db9ec823/bio-0.39.0/src/data_structures/rank_select.rs","byte_start":355427,"byte_end":355492,"line_start":52,"line_end":52,"column_start":5,"column_end":70}},{"value":"/   A small k means faster rank query times at the expense of using more","span":{"file_name":"/Users/shelwitz/.cargo/registry/src/github.com-1ecc6299db9ec823/bio-0.39.0/src/data_structures/rank_select.rs","byte_start":355497,"byte_end":355571,"line_start":53,"line_end":53,"column_start":5,"column_end":79}},{"value":"/   space and slower select query times.","span":{"file_name":"/Users/shelwitz/.cargo/registry/src/github.com-1ecc6299db9ec823/bio-0.39.0/src/data_structures/rank_select.rs","byte_start":355576,"byte_end":355618,"line_start":54,"line_end":54,"column_start":5,"column_end":47}},{"value":"/   The data structure needs O(n + n log n / (k * 32)) bits with n being the bits of the given bitvector.","span":{"file_name":"/Users/shelwitz/.cargo/registry/src/github.com-1ecc6299db9ec823/bio-0.39.0/src/data_structures/rank_select.rs","byte_start":355623,"byte_end":355730,"line_start":55,"line_end":55,"column_start":5,"column_end":112}},{"value":"/   The data structure is succinct if k is chosen as a sublinear function of n","span":{"file_name":"/Users/shelwitz/.cargo/registry/src/github.com-1ecc6299db9ec823/bio-0.39.0/src/data_structures/rank_select.rs","byte_start":355735,"byte_end":355815,"line_start":56,"line_end":56,"column_start":5,"column_end":85}},{"value":"/   (e.g. k = (log n)² / 32).","span":{"file_name":"/Users/shelwitz/.cargo/registry/src/github.com-1ecc6299db9ec823/bio-0.39.0/src/data_structures/rank_select.rs","byte_start":355820,"byte_end":355852,"line_start":57,"line_end":57,"column_start":5,"column_end":36}}]},{"kind":"Method","id":{"krate":0,"index":911},"span":{"file_name":"/Users/shelwitz/.cargo/registry/src/github.com-1ecc6299db9ec823/bio-0.39.0/src/data_structures/rank_select.rs","byte_start":356258,"byte_end":356259,"line_start":73,"line_end":73,"column_start":12,"column_end":13},"name":"k","qualname":"<RankSelect>::k","value":"pub fn k(&Self) -> usize","parent":null,"children":[],"decl_id":null,"docs":" Return the used k (see `RankSelect::new()`).\n","sig":null,"attributes":[{"value":"/ Return the used k (see `RankSelect::new()`).","span":{"file_name":"/Users/shelwitz/.cargo/registry/src/github.com-1ecc6299db9ec823/bio-0.39.0/src/data_structures/rank_select.rs","byte_start":356198,"byte_end":356246,"line_start":72,"line_end":72,"column_start":5,"column_end":53}}]},{"kind":"Method","id":{"krate":0,"index":912},"span":{"file_name":"/Users/shelwitz/.cargo/registry/src/github.com-1ecc6299db9ec823/bio-0.39.0/src/data_structures/rank_select.rs","byte_start":356362,"byte_end":356366,"line_start":78,"line_end":78,"column_start":12,"column_end":16},"name":"bits","qualname":"<RankSelect>::bits","value":"pub fn bits(&Self) -> &BitVec<u8>","parent":null,"children":[],"decl_id":null,"docs":" Get internal representation of bit vector.\n","sig":null,"attributes":[{"value":"/ Get internal representation of bit vector.","span":{"file_name":"/Users/shelwitz/.cargo/registry/src/github.com-1ecc6299db9ec823/bio-0.39.0/src/data_structures/rank_select.rs","byte_start":356304,"byte_end":356350,"line_start":77,"line_end":77,"column_start":5,"column_end":51}}]},{"kind":"Method","id":{"krate":0,"index":913},"span":{"file_name":"/Users/shelwitz/.cargo/registry/src/github.com-1ecc6299db9ec823/bio-0.39.0/src/data_structures/rank_select.rs","byte_start":356453,"byte_end":356456,"line_start":83,"line_end":83,"column_start":12,"column_end":15},"name":"get","qualname":"<RankSelect>::get","value":"pub fn get(&Self, u64) -> bool","parent":null,"children":[],"decl_id":null,"docs":" Return i-th bit.\n","sig":null,"attributes":[{"value":"/ Return i-th bit.","span":{"file_name":"/Users/shelwitz/.cargo/registry/src/github.com-1ecc6299db9ec823/bio-0.39.0/src/data_structures/rank_select.rs","byte_start":356421,"byte_end":356441,"line_start":82,"line_end":82,"column_start":5,"column_end":25}}]},{"kind":"Method","id":{"krate":0,"index":914},"span":{"file_name":"/Users/shelwitz/.cargo/registry/src/github.com-1ecc6299db9ec823/bio-0.39.0/src/data_structures/rank_select.rs","byte_start":356757,"byte_end":356763,"line_start":93,"line_end":93,"column_start":12,"column_end":18},"name":"rank_1","qualname":"<RankSelect>::rank_1","value":"pub fn rank_1(&Self, u64) -> Option<u64>","parent":null,"children":[],"decl_id":null,"docs":" Get the 1-rank of a given bit, i.e. the number of 1-bits in the bitvector up to i (inclusive).\n Complexity: O(k).","sig":null,"attributes":[{"value":"/ Get the 1-rank of a given bit, i.e. the number of 1-bits in the bitvector up to i (inclusive).","span":{"file_name":"/Users/shelwitz/.cargo/registry/src/github.com-1ecc6299db9ec823/bio-0.39.0/src/data_structures/rank_select.rs","byte_start":356522,"byte_end":356620,"line_start":87,"line_end":87,"column_start":5,"column_end":103}},{"value":"/ Complexity: O(k).","span":{"file_name":"/Users/shelwitz/.cargo/registry/src/github.com-1ecc6299db9ec823/bio-0.39.0/src/data_structures/rank_select.rs","byte_start":356625,"byte_end":356646,"line_start":88,"line_end":88,"column_start":5,"column_end":26}},{"value":"/","span":{"file_name":"/Users/shelwitz/.cargo/registry/src/github.com-1ecc6299db9ec823/bio-0.39.0/src/data_structures/rank_select.rs","byte_start":356651,"byte_end":356654,"line_start":89,"line_end":89,"column_start":5,"column_end":8}},{"value":"/ # Arguments","span":{"file_name":"/Users/shelwitz/.cargo/registry/src/github.com-1ecc6299db9ec823/bio-0.39.0/src/data_structures/rank_select.rs","byte_start":356659,"byte_end":356674,"line_start":90,"line_end":90,"column_start":5,"column_end":20}},{"value":"/","span":{"file_name":"/Users/shelwitz/.cargo/registry/src/github.com-1ecc6299db9ec823/bio-0.39.0/src/data_structures/rank_select.rs","byte_start":356679,"byte_end":356682,"line_start":91,"line_end":91,"column_start":5,"column_end":8}},{"value":"/ * `i` - Position of the bit to determine the rank for.","span":{"file_name":"/Users/shelwitz/.cargo/registry/src/github.com-1ecc6299db9ec823/bio-0.39.0/src/data_structures/rank_select.rs","byte_start":356687,"byte_end":356745,"line_start":92,"line_end":92,"column_start":5,"column_end":63}}]},{"kind":"Method","id":{"krate":0,"index":915},"span":{"file_name":"/Users/shelwitz/.cargo/registry/src/github.com-1ecc6299db9ec823/bio-0.39.0/src/data_structures/rank_select.rs","byte_start":357883,"byte_end":357889,"line_start":122,"line_end":122,"column_start":12,"column_end":18},"name":"rank_0","qualname":"<RankSelect>::rank_0","value":"pub fn rank_0(&Self, u64) -> Option<u64>","parent":null,"children":[],"decl_id":null,"docs":" Get the 0-rank of a given bit, i.e. the number of 0-bits in the bitvector up to i (inclusive).\n Complexity: O(k).","sig":null,"attributes":[{"value":"/ Get the 0-rank of a given bit, i.e. the number of 0-bits in the bitvector up to i (inclusive).","span":{"file_name":"/Users/shelwitz/.cargo/registry/src/github.com-1ecc6299db9ec823/bio-0.39.0/src/data_structures/rank_select.rs","byte_start":357648,"byte_end":357746,"line_start":116,"line_end":116,"column_start":5,"column_end":103}},{"value":"/ Complexity: O(k).","span":{"file_name":"/Users/shelwitz/.cargo/registry/src/github.com-1ecc6299db9ec823/bio-0.39.0/src/data_structures/rank_select.rs","byte_start":357751,"byte_end":357772,"line_start":117,"line_end":117,"column_start":5,"column_end":26}},{"value":"/","span":{"file_name":"/Users/shelwitz/.cargo/registry/src/github.com-1ecc6299db9ec823/bio-0.39.0/src/data_structures/rank_select.rs","byte_start":357777,"byte_end":357780,"line_start":118,"line_end":118,"column_start":5,"column_end":8}},{"value":"/ # Arguments","span":{"file_name":"/Users/shelwitz/.cargo/registry/src/github.com-1ecc6299db9ec823/bio-0.39.0/src/data_structures/rank_select.rs","byte_start":357785,"byte_end":357800,"line_start":119,"line_end":119,"column_start":5,"column_end":20}},{"value":"/","span":{"file_name":"/Users/shelwitz/.cargo/registry/src/github.com-1ecc6299db9ec823/bio-0.39.0/src/data_structures/rank_select.rs","byte_start":357805,"byte_end":357808,"line_start":120,"line_end":120,"column_start":5,"column_end":8}},{"value":"/ * `i` - Position of the bit to determine the rank for.","span":{"file_name":"/Users/shelwitz/.cargo/registry/src/github.com-1ecc6299db9ec823/bio-0.39.0/src/data_structures/rank_select.rs","byte_start":357813,"byte_end":357871,"line_start":121,"line_end":121,"column_start":5,"column_end":63}}]},{"kind":"Method","id":{"krate":0,"index":917},"span":{"file_name":"/Users/shelwitz/.cargo/registry/src/github.com-1ecc6299db9ec823/bio-0.39.0/src/data_structures/rank_select.rs","byte_start":358024,"byte_end":358028,"line_start":127,"line_end":127,"column_start":12,"column_end":16},"name":"rank","qualname":"<RankSelect>::rank","value":"pub fn rank(&Self, u64) -> Option<u64>","parent":null,"children":[],"decl_id":null,"docs":" Alias for `RankSelect::rank_1`.\n","sig":null,"attributes":[{"value":"/ Alias for `RankSelect::rank_1`.","span":{"file_name":"/Users/shelwitz/.cargo/registry/src/github.com-1ecc6299db9ec823/bio-0.39.0/src/data_structures/rank_select.rs","byte_start":357977,"byte_end":358012,"line_start":126,"line_end":126,"column_start":5,"column_end":40}}]},{"kind":"Method","id":{"krate":0,"index":918},"span":{"file_name":"/Users/shelwitz/.cargo/registry/src/github.com-1ecc6299db9ec823/bio-0.39.0/src/data_structures/rank_select.rs","byte_start":358283,"byte_end":358291,"line_start":137,"line_end":137,"column_start":12,"column_end":20},"name":"select_1","qualname":"<RankSelect>::select_1","value":"pub fn select_1(&Self, u64) -> Option<u64>","parent":null,"children":[],"decl_id":null,"docs":" Get the smallest bit with a given 1-rank.\n Complexity: O(log (n / k) + k).","sig":null,"attributes":[{"value":"/ Get the smallest bit with a given 1-rank.","span":{"file_name":"/Users/shelwitz/.cargo/registry/src/github.com-1ecc6299db9ec823/bio-0.39.0/src/data_structures/rank_select.rs","byte_start":358095,"byte_end":358140,"line_start":131,"line_end":131,"column_start":5,"column_end":50}},{"value":"/ Complexity: O(log (n / k) + k).","span":{"file_name":"/Users/shelwitz/.cargo/registry/src/github.com-1ecc6299db9ec823/bio-0.39.0/src/data_structures/rank_select.rs","byte_start":358145,"byte_end":358180,"line_start":132,"line_end":132,"column_start":5,"column_end":40}},{"value":"/","span":{"file_name":"/Users/shelwitz/.cargo/registry/src/github.com-1ecc6299db9ec823/bio-0.39.0/src/data_structures/rank_select.rs","byte_start":358185,"byte_end":358188,"line_start":133,"line_end":133,"column_start":5,"column_end":8}},{"value":"/ # Arguments","span":{"file_name":"/Users/shelwitz/.cargo/registry/src/github.com-1ecc6299db9ec823/bio-0.39.0/src/data_structures/rank_select.rs","byte_start":358193,"byte_end":358208,"line_start":134,"line_end":134,"column_start":5,"column_end":20}},{"value":"/","span":{"file_name":"/Users/shelwitz/.cargo/registry/src/github.com-1ecc6299db9ec823/bio-0.39.0/src/data_structures/rank_select.rs","byte_start":358213,"byte_end":358216,"line_start":135,"line_end":135,"column_start":5,"column_end":8}},{"value":"/ * `j` - The rank to find the smallest bit for.","span":{"file_name":"/Users/shelwitz/.cargo/registry/src/github.com-1ecc6299db9ec823/bio-0.39.0/src/data_structures/rank_select.rs","byte_start":358221,"byte_end":358271,"line_start":136,"line_end":136,"column_start":5,"column_end":55}}]},{"kind":"Method","id":{"krate":0,"index":921},"span":{"file_name":"/Users/shelwitz/.cargo/registry/src/github.com-1ecc6299db9ec823/bio-0.39.0/src/data_structures/rank_select.rs","byte_start":358672,"byte_end":358680,"line_start":152,"line_end":152,"column_start":12,"column_end":20},"name":"select_0","qualname":"<RankSelect>::select_0","value":"pub fn select_0(&Self, u64) -> Option<u64>","parent":null,"children":[],"decl_id":null,"docs":" Get the smallest bit with a given 0-rank.\n Complexity: O(log (n / k) + k).","sig":null,"attributes":[{"value":"/ Get the smallest bit with a given 0-rank.","span":{"file_name":"/Users/shelwitz/.cargo/registry/src/github.com-1ecc6299db9ec823/bio-0.39.0/src/data_structures/rank_select.rs","byte_start":358484,"byte_end":358529,"line_start":146,"line_end":146,"column_start":5,"column_end":50}},{"value":"/ Complexity: O(log (n / k) + k).","span":{"file_name":"/Users/shelwitz/.cargo/registry/src/github.com-1ecc6299db9ec823/bio-0.39.0/src/data_structures/rank_select.rs","byte_start":358534,"byte_end":358569,"line_start":147,"line_end":147,"column_start":5,"column_end":40}},{"value":"/","span":{"file_name":"/Users/shelwitz/.cargo/registry/src/github.com-1ecc6299db9ec823/bio-0.39.0/src/data_structures/rank_select.rs","byte_start":358574,"byte_end":358577,"line_start":148,"line_end":148,"column_start":5,"column_end":8}},{"value":"/ # Arguments","span":{"file_name":"/Users/shelwitz/.cargo/registry/src/github.com-1ecc6299db9ec823/bio-0.39.0/src/data_structures/rank_select.rs","byte_start":358582,"byte_end":358597,"line_start":149,"line_end":149,"column_start":5,"column_end":20}},{"value":"/","span":{"file_name":"/Users/shelwitz/.cargo/registry/src/github.com-1ecc6299db9ec823/bio-0.39.0/src/data_structures/rank_select.rs","byte_start":358602,"byte_end":358605,"line_start":150,"line_end":150,"column_start":5,"column_end":8}},{"value":"/ * `j` - The rank to find the smallest bit for.","span":{"file_name":"/Users/shelwitz/.cargo/registry/src/github.com-1ecc6299db9ec823/bio-0.39.0/src/data_structures/rank_select.rs","byte_start":358610,"byte_end":358660,"line_start":151,"line_end":151,"column_start":5,"column_end":55}}]},{"kind":"Method","id":{"krate":0,"index":927},"span":{"file_name":"/Users/shelwitz/.cargo/registry/src/github.com-1ecc6299db9ec823/bio-0.39.0/src/data_structures/rank_select.rs","byte_start":360224,"byte_end":360230,"line_start":202,"line_end":202,"column_start":12,"column_end":18},"name":"select","qualname":"<RankSelect>::select","value":"pub fn select(&Self, u64) -> Option<u64>","parent":null,"children":[],"decl_id":null,"docs":" Alias for `RankSelect::select_1`.\n","sig":null,"attributes":[{"value":"/ Alias for `RankSelect::select_1`.","span":{"file_name":"/Users/shelwitz/.cargo/registry/src/github.com-1ecc6299db9ec823/bio-0.39.0/src/data_structures/rank_select.rs","byte_start":360175,"byte_end":360212,"line_start":201,"line_end":201,"column_start":5,"column_end":42}}]},{"kind":"TupleVariant","id":{"krate":0,"index":4307},"span":{"file_name":"/Users/shelwitz/.cargo/registry/src/github.com-1ecc6299db9ec823/bio-0.39.0/src/data_structures/rank_select.rs","byte_start":360390,"byte_end":360395,"line_start":209,"line_end":209,"column_start":5,"column_end":10},"name":"First","qualname":"::data_structures::rank_select::SuperblockRank::First","value":"SuperblockRank::First(u64)","parent":{"krate":0,"index":4306},"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"TupleVariant","id":{"krate":0,"index":4310},"span":{"file_name":"/Users/shelwitz/.cargo/registry/src/github.com-1ecc6299db9ec823/bio-0.39.0/src/data_structures/rank_select.rs","byte_start":360406,"byte_end":360410,"line_start":210,"line_end":210,"column_start":5,"column_end":9},"name":"Some","qualname":"::data_structures::rank_select::SuperblockRank::Some","value":"SuperblockRank::Some(u64)","parent":{"krate":0,"index":4306},"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Enum","id":{"krate":0,"index":4306},"span":{"file_name":"/Users/shelwitz/.cargo/registry/src/github.com-1ecc6299db9ec823/bio-0.39.0/src/data_structures/rank_select.rs","byte_start":360369,"byte_end":360383,"line_start":208,"line_end":208,"column_start":10,"column_end":24},"name":"SuperblockRank","qualname":"::data_structures::rank_select::SuperblockRank","value":"pub enum SuperblockRank { First(u64), Some(u64), }","parent":null,"children":[{"krate":0,"index":4307},{"krate":0,"index":4310}],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Mod","id":{"krate":0,"index":936},"span":{"file_name":"/Users/shelwitz/.cargo/registry/src/github.com-1ecc6299db9ec823/bio-0.39.0/src/data_structures/smallints.rs","byte_start":0,"byte_end":0,"line_start":1,"line_end":1,"column_start":1,"column_end":1},"name":"smallints","qualname":"::data_structures::smallints","value":"/Users/shelwitz/.cargo/registry/src/github.com-1ecc6299db9ec823/bio-0.39.0/src/data_structures/smallints.rs","parent":null,"children":[{"krate":0,"index":937},{"krate":0,"index":940},{"krate":0,"index":941},{"krate":0,"index":944},{"krate":0,"index":947},{"krate":0,"index":950},{"krate":0,"index":953},{"krate":0,"index":956},{"krate":0,"index":957},{"krate":0,"index":958},{"krate":0,"index":960},{"krate":0,"index":963},{"krate":0,"index":966},{"krate":0,"index":4369},{"krate":0,"index":4374},{"krate":0,"index":4382},{"krate":0,"index":969},{"krate":0,"index":973},{"krate":0,"index":987},{"krate":0,"index":993}],"decl_id":null,"docs":" A data structure for a sequence of small integers with a few big integers.\n Small ints are stored in type S (e.g. a byte), big ints are stored separately (in type B) in a BTree.\n The implementation provides vector-like operations on the data structure (e.g. retrieve a position,\n add an integer, etc.).","sig":null,"attributes":[{"value":"/ A data structure for a sequence of small integers with a few big integers.","span":{"file_name":"/Users/shelwitz/.cargo/registry/src/github.com-1ecc6299db9ec823/bio-0.39.0/src/data_structures/smallints.rs","byte_start":365532,"byte_end":365610,"line_start":6,"line_end":6,"column_start":1,"column_end":79}},{"value":"/ Small ints are stored in type S (e.g. a byte), big ints are stored separately (in type B) in a BTree.","span":{"file_name":"/Users/shelwitz/.cargo/registry/src/github.com-1ecc6299db9ec823/bio-0.39.0/src/data_structures/smallints.rs","byte_start":365611,"byte_end":365716,"line_start":7,"line_end":7,"column_start":1,"column_end":106}},{"value":"/ The implementation provides vector-like operations on the data structure (e.g. retrieve a position,","span":{"file_name":"/Users/shelwitz/.cargo/registry/src/github.com-1ecc6299db9ec823/bio-0.39.0/src/data_structures/smallints.rs","byte_start":365717,"byte_end":365820,"line_start":8,"line_end":8,"column_start":1,"column_end":104}},{"value":"/ add an integer, etc.).","span":{"file_name":"/Users/shelwitz/.cargo/registry/src/github.com-1ecc6299db9ec823/bio-0.39.0/src/data_structures/smallints.rs","byte_start":365821,"byte_end":365847,"line_start":9,"line_end":9,"column_start":1,"column_end":27}},{"value":"/","span":{"file_name":"/Users/shelwitz/.cargo/registry/src/github.com-1ecc6299db9ec823/bio-0.39.0/src/data_structures/smallints.rs","byte_start":365848,"byte_end":365851,"line_start":10,"line_end":10,"column_start":1,"column_end":4}},{"value":"/ # Example","span":{"file_name":"/Users/shelwitz/.cargo/registry/src/github.com-1ecc6299db9ec823/bio-0.39.0/src/data_structures/smallints.rs","byte_start":365852,"byte_end":365865,"line_start":11,"line_end":11,"column_start":1,"column_end":14}},{"value":"/","span":{"file_name":"/Users/shelwitz/.cargo/registry/src/github.com-1ecc6299db9ec823/bio-0.39.0/src/data_structures/smallints.rs","byte_start":365866,"byte_end":365869,"line_start":12,"line_end":12,"column_start":1,"column_end":4}},{"value":"/ ```","span":{"file_name":"/Users/shelwitz/.cargo/registry/src/github.com-1ecc6299db9ec823/bio-0.39.0/src/data_structures/smallints.rs","byte_start":365870,"byte_end":365877,"line_start":13,"line_end":13,"column_start":1,"column_end":8}},{"value":"/ use bio::data_structures::smallints::SmallInts;","span":{"file_name":"/Users/shelwitz/.cargo/registry/src/github.com-1ecc6299db9ec823/bio-0.39.0/src/data_structures/smallints.rs","byte_start":365878,"byte_end":365929,"line_start":14,"line_end":14,"column_start":1,"column_end":52}},{"value":"/ let mut smallints: SmallInts<u8, usize> = SmallInts::new();","span":{"file_name":"/Users/shelwitz/.cargo/registry/src/github.com-1ecc6299db9ec823/bio-0.39.0/src/data_structures/smallints.rs","byte_start":365930,"byte_end":365993,"line_start":15,"line_end":15,"column_start":1,"column_end":64}},{"value":"/ smallints.push(3);","span":{"file_name":"/Users/shelwitz/.cargo/registry/src/github.com-1ecc6299db9ec823/bio-0.39.0/src/data_structures/smallints.rs","byte_start":365994,"byte_end":366016,"line_start":16,"line_end":16,"column_start":1,"column_end":23}},{"value":"/ smallints.push(4);","span":{"file_name":"/Users/shelwitz/.cargo/registry/src/github.com-1ecc6299db9ec823/bio-0.39.0/src/data_structures/smallints.rs","byte_start":366017,"byte_end":366039,"line_start":17,"line_end":17,"column_start":1,"column_end":23}},{"value":"/ smallints.push(255);","span":{"file_name":"/Users/shelwitz/.cargo/registry/src/github.com-1ecc6299db9ec823/bio-0.39.0/src/data_structures/smallints.rs","byte_start":366040,"byte_end":366064,"line_start":18,"line_end":18,"column_start":1,"column_end":25}},{"value":"/ smallints.push(305093);","span":{"file_name":"/Users/shelwitz/.cargo/registry/src/github.com-1ecc6299db9ec823/bio-0.39.0/src/data_structures/smallints.rs","byte_start":366065,"byte_end":366092,"line_start":19,"line_end":19,"column_start":1,"column_end":28}},{"value":"/ assert_eq!(smallints.get(0).unwrap(), 3);","span":{"file_name":"/Users/shelwitz/.cargo/registry/src/github.com-1ecc6299db9ec823/bio-0.39.0/src/data_structures/smallints.rs","byte_start":366093,"byte_end":366138,"line_start":20,"line_end":20,"column_start":1,"column_end":46}},{"value":"/ smallints.set(0, 50000);","span":{"file_name":"/Users/shelwitz/.cargo/registry/src/github.com-1ecc6299db9ec823/bio-0.39.0/src/data_structures/smallints.rs","byte_start":366139,"byte_end":366167,"line_start":21,"line_end":21,"column_start":1,"column_end":29}},{"value":"/ let values: Vec<usize> = smallints.iter().collect();","span":{"file_name":"/Users/shelwitz/.cargo/registry/src/github.com-1ecc6299db9ec823/bio-0.39.0/src/data_structures/smallints.rs","byte_start":366168,"byte_end":366224,"line_start":22,"line_end":22,"column_start":1,"column_end":57}},{"value":"/ assert_eq!(values, [50000, 4, 255, 305093]);","span":{"file_name":"/Users/shelwitz/.cargo/registry/src/github.com-1ecc6299db9ec823/bio-0.39.0/src/data_structures/smallints.rs","byte_start":366225,"byte_end":366273,"line_start":23,"line_end":23,"column_start":1,"column_end":49}},{"value":"/ ```","span":{"file_name":"/Users/shelwitz/.cargo/registry/src/github.com-1ecc6299db9ec823/bio-0.39.0/src/data_structures/smallints.rs","byte_start":366274,"byte_end":366281,"line_start":24,"line_end":24,"column_start":1,"column_end":8}}]},{"kind":"Struct","id":{"krate":0,"index":4369},"span":{"file_name":"/Users/shelwitz/.cargo/registry/src/github.com-1ecc6299db9ec823/bio-0.39.0/src/data_structures/smallints.rs","byte_start":366656,"byte_end":366665,"line_start":37,"line_end":37,"column_start":12,"column_end":21},"name":"SmallInts","qualname":"::data_structures::smallints::SmallInts","value":"SmallInts {  }","parent":null,"children":[{"krate":0,"index":4372},{"krate":0,"index":4373}],"decl_id":null,"docs":" Data structure for storing a sequence of small integers with few big ones space efficiently\n while supporting classical vector operations.\n","sig":null,"attributes":[{"value":"/ Data structure for storing a sequence of small integers with few big ones space efficiently","span":{"file_name":"/Users/shelwitz/.cargo/registry/src/github.com-1ecc6299db9ec823/bio-0.39.0/src/data_structures/smallints.rs","byte_start":366465,"byte_end":366560,"line_start":34,"line_end":34,"column_start":1,"column_end":96}},{"value":"/ while supporting classical vector operations.","span":{"file_name":"/Users/shelwitz/.cargo/registry/src/github.com-1ecc6299db9ec823/bio-0.39.0/src/data_structures/smallints.rs","byte_start":366561,"byte_end":366610,"line_start":35,"line_end":35,"column_start":1,"column_end":50}}]},{"kind":"Method","id":{"krate":0,"index":976},"span":{"file_name":"/Users/shelwitz/.cargo/registry/src/github.com-1ecc6299db9ec823/bio-0.39.0/src/data_structures/smallints.rs","byte_start":367288,"byte_end":367291,"line_start":59,"line_end":59,"column_start":12,"column_end":15},"name":"new","qualname":"<SmallInts<S, B>>::new","value":"pub fn new() -> Self","parent":null,"children":[],"decl_id":null,"docs":" Create a new instance.\n","sig":null,"attributes":[{"value":"/ Create a new instance.","span":{"file_name":"/Users/shelwitz/.cargo/registry/src/github.com-1ecc6299db9ec823/bio-0.39.0/src/data_structures/smallints.rs","byte_start":367250,"byte_end":367276,"line_start":58,"line_end":58,"column_start":5,"column_end":31}}]},{"kind":"Method","id":{"krate":0,"index":977},"span":{"file_name":"/Users/shelwitz/.cargo/registry/src/github.com-1ecc6299db9ec823/bio-0.39.0/src/data_structures/smallints.rs","byte_start":367402,"byte_end":367415,"line_start":64,"line_end":64,"column_start":12,"column_end":25},"name":"with_capacity","qualname":"<SmallInts<S, B>>::with_capacity","value":"pub fn with_capacity(usize) -> Self","parent":null,"children":[],"decl_id":null,"docs":" Create a new instance with a given capacity.\n","sig":null,"attributes":[{"value":"/ Create a new instance with a given capacity.","span":{"file_name":"/Users/shelwitz/.cargo/registry/src/github.com-1ecc6299db9ec823/bio-0.39.0/src/data_structures/smallints.rs","byte_start":367342,"byte_end":367390,"line_start":63,"line_end":63,"column_start":5,"column_end":53}}]},{"kind":"Method","id":{"krate":0,"index":978},"span":{"file_name":"/Users/shelwitz/.cargo/registry/src/github.com-1ecc6299db9ec823/bio-0.39.0/src/data_structures/smallints.rs","byte_start":367784,"byte_end":367793,"line_start":76,"line_end":76,"column_start":12,"column_end":21},"name":"from_elem","qualname":"<SmallInts<S, B>>::from_elem","value":"pub fn from_elem(S, usize) -> Self","parent":null,"children":[],"decl_id":null,"docs":" Create a new instance containing `n` times the integer `v` (and `v` is expected to be small).\n","sig":null,"attributes":[{"value":"/ Create a new instance containing `n` times the integer `v` (and `v` is expected to be small).","span":{"file_name":"/Users/shelwitz/.cargo/registry/src/github.com-1ecc6299db9ec823/bio-0.39.0/src/data_structures/smallints.rs","byte_start":367675,"byte_end":367772,"line_start":75,"line_end":75,"column_start":5,"column_end":102}}]},{"kind":"Method","id":{"krate":0,"index":979},"span":{"file_name":"/Users/shelwitz/.cargo/registry/src/github.com-1ecc6299db9ec823/bio-0.39.0/src/data_structures/smallints.rs","byte_start":368244,"byte_end":368247,"line_start":92,"line_end":92,"column_start":12,"column_end":15},"name":"get","qualname":"<SmallInts<S, B>>::get","value":"pub fn get(&Self, usize) -> Option<B>","parent":null,"children":[],"decl_id":null,"docs":" Return the integer at position `i`.\n","sig":null,"attributes":[{"value":"/ Return the integer at position `i`.","span":{"file_name":"/Users/shelwitz/.cargo/registry/src/github.com-1ecc6299db9ec823/bio-0.39.0/src/data_structures/smallints.rs","byte_start":368193,"byte_end":368232,"line_start":91,"line_end":91,"column_start":5,"column_end":44}}]},{"kind":"Method","id":{"krate":0,"index":980},"span":{"file_name":"/Users/shelwitz/.cargo/registry/src/github.com-1ecc6299db9ec823/bio-0.39.0/src/data_structures/smallints.rs","byte_start":368540,"byte_end":368544,"line_start":101,"line_end":101,"column_start":12,"column_end":16},"name":"push","qualname":"<SmallInts<S, B>>::push","value":"pub fn push(&mut Self, B)","parent":null,"children":[],"decl_id":null,"docs":" Append `v` to the sequence. This will determine whether `v` is big or small and store it accordingly.\n","sig":null,"attributes":[{"value":"/ Append `v` to the sequence. This will determine whether `v` is big or small and store it accordingly.","span":{"file_name":"/Users/shelwitz/.cargo/registry/src/github.com-1ecc6299db9ec823/bio-0.39.0/src/data_structures/smallints.rs","byte_start":368423,"byte_end":368528,"line_start":100,"line_end":100,"column_start":5,"column_end":110}}]},{"kind":"Method","id":{"krate":0,"index":981},"span":{"file_name":"/Users/shelwitz/.cargo/registry/src/github.com-1ecc6299db9ec823/bio-0.39.0/src/data_structures/smallints.rs","byte_start":368994,"byte_end":368997,"line_start":114,"line_end":114,"column_start":12,"column_end":15},"name":"set","qualname":"<SmallInts<S, B>>::set","value":"pub fn set(&mut Self, usize, B)","parent":null,"children":[],"decl_id":null,"docs":" Set value of position `i` to `v`. This will determine whether `v` is big or small and store it accordingly.\n","sig":null,"attributes":[{"value":"/ Set value of position `i` to `v`. This will determine whether `v` is big or small and store it accordingly.","span":{"file_name":"/Users/shelwitz/.cargo/registry/src/github.com-1ecc6299db9ec823/bio-0.39.0/src/data_structures/smallints.rs","byte_start":368871,"byte_end":368982,"line_start":113,"line_end":113,"column_start":5,"column_end":116}}]},{"kind":"Method","id":{"krate":0,"index":982},"span":{"file_name":"/Users/shelwitz/.cargo/registry/src/github.com-1ecc6299db9ec823/bio-0.39.0/src/data_structures/smallints.rs","byte_start":369379,"byte_end":369383,"line_start":126,"line_end":126,"column_start":12,"column_end":16},"name":"iter","qualname":"<SmallInts<S, B>>::iter","value":"pub fn iter(&Self) -> Iter<, S, B>","parent":null,"children":[],"decl_id":null,"docs":" Iterate over sequence. Values will be returned in the big integer type (`B`).\n","sig":null,"attributes":[{"value":"/ Iterate over sequence. Values will be returned in the big integer type (`B`).","span":{"file_name":"/Users/shelwitz/.cargo/registry/src/github.com-1ecc6299db9ec823/bio-0.39.0/src/data_structures/smallints.rs","byte_start":369286,"byte_end":369367,"line_start":125,"line_end":125,"column_start":5,"column_end":86}}]},{"kind":"Method","id":{"krate":0,"index":983},"span":{"file_name":"/Users/shelwitz/.cargo/registry/src/github.com-1ecc6299db9ec823/bio-0.39.0/src/data_structures/smallints.rs","byte_start":369605,"byte_end":369615,"line_start":134,"line_end":134,"column_start":12,"column_end":22},"name":"decompress","qualname":"<SmallInts<S, B>>::decompress","value":"pub fn decompress(&Self) -> Vec<B>","parent":null,"children":[],"decl_id":null,"docs":" Decompress into a normal vector of big integers (type `B`).\n","sig":null,"attributes":[{"value":"/ Decompress into a normal vector of big integers (type `B`).","span":{"file_name":"/Users/shelwitz/.cargo/registry/src/github.com-1ecc6299db9ec823/bio-0.39.0/src/data_structures/smallints.rs","byte_start":369530,"byte_end":369593,"line_start":133,"line_end":133,"column_start":5,"column_end":68}}]},{"kind":"Method","id":{"krate":0,"index":984},"span":{"file_name":"/Users/shelwitz/.cargo/registry/src/github.com-1ecc6299db9ec823/bio-0.39.0/src/data_structures/smallints.rs","byte_start":369715,"byte_end":369718,"line_start":139,"line_end":139,"column_start":12,"column_end":15},"name":"len","qualname":"<SmallInts<S, B>>::len","value":"pub fn len(&Self) -> usize","parent":null,"children":[],"decl_id":null,"docs":" Length of the sequence.\n","sig":null,"attributes":[{"value":"/ Length of the sequence.","span":{"file_name":"/Users/shelwitz/.cargo/registry/src/github.com-1ecc6299db9ec823/bio-0.39.0/src/data_structures/smallints.rs","byte_start":369676,"byte_end":369703,"line_start":138,"line_end":138,"column_start":5,"column_end":32}}]},{"kind":"Method","id":{"krate":0,"index":985},"span":{"file_name":"/Users/shelwitz/.cargo/registry/src/github.com-1ecc6299db9ec823/bio-0.39.0/src/data_structures/smallints.rs","byte_start":369815,"byte_end":369823,"line_start":144,"line_end":144,"column_start":12,"column_end":20},"name":"is_empty","qualname":"<SmallInts<S, B>>::is_empty","value":"pub fn is_empty(&Self) -> bool","parent":null,"children":[],"decl_id":null,"docs":" is the sequence empty?\n","sig":null,"attributes":[{"value":"/ is the sequence empty?","span":{"file_name":"/Users/shelwitz/.cargo/registry/src/github.com-1ecc6299db9ec823/bio-0.39.0/src/data_structures/smallints.rs","byte_start":369777,"byte_end":369803,"line_start":143,"line_end":143,"column_start":5,"column_end":31}}]},{"kind":"Struct","id":{"krate":0,"index":987},"span":{"file_name":"/Users/shelwitz/.cargo/registry/src/github.com-1ecc6299db9ec823/bio-0.39.0/src/data_structures/smallints.rs","byte_start":370137,"byte_end":370141,"line_start":158,"line_end":158,"column_start":12,"column_end":16},"name":"Iter","qualname":"::data_structures::smallints::Iter","value":"Iter {  }","parent":null,"children":[{"krate":0,"index":991},{"krate":0,"index":992}],"decl_id":null,"docs":" Iterator over the elements of a `SmallInts` sequence.\n","sig":null,"attributes":[{"value":"/ Iterator over the elements of a `SmallInts` sequence.","span":{"file_name":"/Users/shelwitz/.cargo/registry/src/github.com-1ecc6299db9ec823/bio-0.39.0/src/data_structures/smallints.rs","byte_start":370068,"byte_end":370125,"line_start":157,"line_end":157,"column_start":1,"column_end":58}}]},{"kind":"Mod","id":{"krate":0,"index":999},"span":{"file_name":"/Users/shelwitz/.cargo/registry/src/github.com-1ecc6299db9ec823/bio-0.39.0/src/data_structures/suffix_array.rs","byte_start":0,"byte_end":0,"line_start":1,"line_end":1,"column_start":1,"column_end":1},"name":"suffix_array","qualname":"::data_structures::suffix_array","value":"/Users/shelwitz/.cargo/registry/src/github.com-1ecc6299db9ec823/bio-0.39.0/src/data_structures/suffix_array.rs","parent":null,"children":[{"krate":0,"index":1000},{"krate":0,"index":1003},{"krate":0,"index":1006},{"krate":0,"index":1009},{"krate":0,"index":1010},{"krate":0,"index":1012},{"krate":0,"index":1015},{"krate":0,"index":1018},{"krate":0,"index":1021},{"krate":0,"index":1024},{"krate":0,"index":1025},{"krate":0,"index":1026},{"krate":0,"index":1028},{"krate":0,"index":1031},{"krate":0,"index":1034},{"krate":0,"index":1035},{"krate":0,"index":1038},{"krate":0,"index":1041},{"krate":0,"index":1044},{"krate":0,"index":1047},{"krate":0,"index":1050},{"krate":0,"index":1051},{"krate":0,"index":1052},{"krate":0,"index":1054},{"krate":0,"index":1055},{"krate":0,"index":1057},{"krate":0,"index":1058},{"krate":0,"index":1061},{"krate":0,"index":1064},{"krate":0,"index":1065},{"krate":0,"index":1068},{"krate":0,"index":1071},{"krate":0,"index":1074},{"krate":0,"index":1077},{"krate":0,"index":1078},{"krate":0,"index":1079},{"krate":0,"index":1081},{"krate":0,"index":1084},{"krate":0,"index":4431},{"krate":0,"index":4442},{"krate":0,"index":4447},{"krate":0,"index":4456},{"krate":0,"index":1092},{"krate":0,"index":1096},{"krate":0,"index":1103},{"krate":0,"index":1111},{"krate":0,"index":1112},{"krate":0,"index":1114},{"krate":0,"index":1116},{"krate":0,"index":1117},{"krate":0,"index":1119},{"krate":0,"index":1121},{"krate":0,"index":1128},{"krate":0,"index":4519},{"krate":0,"index":4521},{"krate":0,"index":1145}],"decl_id":null,"docs":" Suffix arrays and related algorithms.\n The implementation is based on the lecture notes\n \"Algorithmen auf Sequenzen\", Kopczynski, Marschall, Martin and Rahmann, 2008 - 2015.\n The original algorithm desciption can be found in:\n [Ge Nong, Sen Zhang, Wai Hong Chan: Two Efficient Algorithms for Linear Time Suffix Array Construction. IEEE Trans. Computers 60(10): 1471–1484 (2011)](https://doi.org/10.1109/TC.2010.188)","sig":null,"attributes":[{"value":"/ Suffix arrays and related algorithms.","span":{"file_name":"/Users/shelwitz/.cargo/registry/src/github.com-1ecc6299db9ec823/bio-0.39.0/src/data_structures/suffix_array.rs","byte_start":371254,"byte_end":371295,"line_start":6,"line_end":6,"column_start":1,"column_end":42}},{"value":"/ The implementation is based on the lecture notes","span":{"file_name":"/Users/shelwitz/.cargo/registry/src/github.com-1ecc6299db9ec823/bio-0.39.0/src/data_structures/suffix_array.rs","byte_start":371296,"byte_end":371348,"line_start":7,"line_end":7,"column_start":1,"column_end":53}},{"value":"/ \"Algorithmen auf Sequenzen\", Kopczynski, Marschall, Martin and Rahmann, 2008 - 2015.","span":{"file_name":"/Users/shelwitz/.cargo/registry/src/github.com-1ecc6299db9ec823/bio-0.39.0/src/data_structures/suffix_array.rs","byte_start":371349,"byte_end":371437,"line_start":8,"line_end":8,"column_start":1,"column_end":89}},{"value":"/ The original algorithm desciption can be found in:","span":{"file_name":"/Users/shelwitz/.cargo/registry/src/github.com-1ecc6299db9ec823/bio-0.39.0/src/data_structures/suffix_array.rs","byte_start":371438,"byte_end":371492,"line_start":9,"line_end":9,"column_start":1,"column_end":55}},{"value":"/ [Ge Nong, Sen Zhang, Wai Hong Chan: Two Efficient Algorithms for Linear Time Suffix Array Construction. IEEE Trans. Computers 60(10): 1471–1484 (2011)](https://doi.org/10.1109/TC.2010.188)","span":{"file_name":"/Users/shelwitz/.cargo/registry/src/github.com-1ecc6299db9ec823/bio-0.39.0/src/data_structures/suffix_array.rs","byte_start":371493,"byte_end":371687,"line_start":10,"line_end":10,"column_start":1,"column_end":193}},{"value":"/","span":{"file_name":"/Users/shelwitz/.cargo/registry/src/github.com-1ecc6299db9ec823/bio-0.39.0/src/data_structures/suffix_array.rs","byte_start":371688,"byte_end":371691,"line_start":11,"line_end":11,"column_start":1,"column_end":4}},{"value":"/ # Examples","span":{"file_name":"/Users/shelwitz/.cargo/registry/src/github.com-1ecc6299db9ec823/bio-0.39.0/src/data_structures/suffix_array.rs","byte_start":371692,"byte_end":371706,"line_start":12,"line_end":12,"column_start":1,"column_end":15}},{"value":"/","span":{"file_name":"/Users/shelwitz/.cargo/registry/src/github.com-1ecc6299db9ec823/bio-0.39.0/src/data_structures/suffix_array.rs","byte_start":371707,"byte_end":371710,"line_start":13,"line_end":13,"column_start":1,"column_end":4}},{"value":"/ ```","span":{"file_name":"/Users/shelwitz/.cargo/registry/src/github.com-1ecc6299db9ec823/bio-0.39.0/src/data_structures/suffix_array.rs","byte_start":371711,"byte_end":371718,"line_start":14,"line_end":14,"column_start":1,"column_end":8}},{"value":"/ use bio::data_structures::suffix_array::suffix_array;","span":{"file_name":"/Users/shelwitz/.cargo/registry/src/github.com-1ecc6299db9ec823/bio-0.39.0/src/data_structures/suffix_array.rs","byte_start":371719,"byte_end":371776,"line_start":15,"line_end":15,"column_start":1,"column_end":58}},{"value":"/ let text = b\"GCCTTAACATTATTACGCCTA$\";","span":{"file_name":"/Users/shelwitz/.cargo/registry/src/github.com-1ecc6299db9ec823/bio-0.39.0/src/data_structures/suffix_array.rs","byte_start":371777,"byte_end":371818,"line_start":16,"line_end":16,"column_start":1,"column_end":42}},{"value":"/ let pos = suffix_array(text);","span":{"file_name":"/Users/shelwitz/.cargo/registry/src/github.com-1ecc6299db9ec823/bio-0.39.0/src/data_structures/suffix_array.rs","byte_start":371819,"byte_end":371852,"line_start":17,"line_end":17,"column_start":1,"column_end":34}},{"value":"/ assert_eq!(","span":{"file_name":"/Users/shelwitz/.cargo/registry/src/github.com-1ecc6299db9ec823/bio-0.39.0/src/data_structures/suffix_array.rs","byte_start":371853,"byte_end":371868,"line_start":18,"line_end":18,"column_start":1,"column_end":16}},{"value":"/     pos,","span":{"file_name":"/Users/shelwitz/.cargo/registry/src/github.com-1ecc6299db9ec823/bio-0.39.0/src/data_structures/suffix_array.rs","byte_start":371869,"byte_end":371881,"line_start":19,"line_end":19,"column_start":1,"column_end":13}},{"value":"/     vec![21, 20, 5, 6, 14, 11, 8, 7, 17, 1, 15, 18, 2, 16, 0, 19, 4, 13, 10, 3, 12, 9]","span":{"file_name":"/Users/shelwitz/.cargo/registry/src/github.com-1ecc6299db9ec823/bio-0.39.0/src/data_structures/suffix_array.rs","byte_start":371882,"byte_end":371972,"line_start":20,"line_end":20,"column_start":1,"column_end":91}},{"value":"/ );","span":{"file_name":"/Users/shelwitz/.cargo/registry/src/github.com-1ecc6299db9ec823/bio-0.39.0/src/data_structures/suffix_array.rs","byte_start":371973,"byte_end":371979,"line_start":21,"line_end":21,"column_start":1,"column_end":7}},{"value":"/ ```","span":{"file_name":"/Users/shelwitz/.cargo/registry/src/github.com-1ecc6299db9ec823/bio-0.39.0/src/data_structures/suffix_array.rs","byte_start":371980,"byte_end":371987,"line_start":22,"line_end":22,"column_start":1,"column_end":8}}]},{"kind":"Type","id":{"krate":0,"index":1077},"span":{"file_name":"/Users/shelwitz/.cargo/registry/src/github.com-1ecc6299db9ec823/bio-0.39.0/src/data_structures/suffix_array.rs","byte_start":372498,"byte_end":372506,"line_start":46,"line_end":46,"column_start":10,"column_end":18},"name":"LCPArray","qualname":"::data_structures::suffix_array::LCPArray","value":"SmallInts<i8, isize>","parent":null,"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Type","id":{"krate":0,"index":1078},"span":{"file_name":"/Users/shelwitz/.cargo/registry/src/github.com-1ecc6299db9ec823/bio-0.39.0/src/data_structures/suffix_array.rs","byte_start":372540,"byte_end":372554,"line_start":47,"line_end":47,"column_start":10,"column_end":24},"name":"RawSuffixArray","qualname":"::data_structures::suffix_array::RawSuffixArray","value":"Vec<usize>","parent":null,"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Type","id":{"krate":0,"index":1079},"span":{"file_name":"/Users/shelwitz/.cargo/registry/src/github.com-1ecc6299db9ec823/bio-0.39.0/src/data_structures/suffix_array.rs","byte_start":372578,"byte_end":372597,"line_start":48,"line_end":48,"column_start":10,"column_end":29},"name":"RawSuffixArraySlice","qualname":"::data_structures::suffix_array::RawSuffixArraySlice","value":"&'a [usize]","parent":null,"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Trait","id":{"krate":0,"index":1084},"span":{"file_name":"/Users/shelwitz/.cargo/registry/src/github.com-1ecc6299db9ec823/bio-0.39.0/src/data_structures/suffix_array.rs","byte_start":372758,"byte_end":372769,"line_start":53,"line_end":53,"column_start":11,"column_end":22},"name":"SuffixArray","qualname":"::data_structures::suffix_array::SuffixArray","value":"SuffixArray","parent":null,"children":[{"krate":0,"index":1085},{"krate":0,"index":1086},{"krate":0,"index":1087},{"krate":0,"index":1088}],"decl_id":null,"docs":" A trait exposing general functionality of suffix arrays.\n","sig":null,"attributes":[{"value":"/ A trait exposing general functionality of suffix arrays.","span":{"file_name":"/Users/shelwitz/.cargo/registry/src/github.com-1ecc6299db9ec823/bio-0.39.0/src/data_structures/suffix_array.rs","byte_start":372687,"byte_end":372747,"line_start":52,"line_end":52,"column_start":1,"column_end":61}}]},{"kind":"Method","id":{"krate":0,"index":1085},"span":{"file_name":"/Users/shelwitz/.cargo/registry/src/github.com-1ecc6299db9ec823/bio-0.39.0/src/data_structures/suffix_array.rs","byte_start":372779,"byte_end":372782,"line_start":54,"line_end":54,"column_start":8,"column_end":11},"name":"get","qualname":"::data_structures::suffix_array::SuffixArray::get","value":"pub fn get(&Self, usize) -> Option<usize>","parent":{"krate":0,"index":1084},"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":1086},"span":{"file_name":"/Users/shelwitz/.cargo/registry/src/github.com-1ecc6299db9ec823/bio-0.39.0/src/data_structures/suffix_array.rs","byte_start":372829,"byte_end":372832,"line_start":55,"line_end":55,"column_start":8,"column_end":11},"name":"len","qualname":"::data_structures::suffix_array::SuffixArray::len","value":"pub fn len(&Self) -> usize","parent":{"krate":0,"index":1084},"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":1087},"span":{"file_name":"/Users/shelwitz/.cargo/registry/src/github.com-1ecc6299db9ec823/bio-0.39.0/src/data_structures/suffix_array.rs","byte_start":372857,"byte_end":372865,"line_start":56,"line_end":56,"column_start":8,"column_end":16},"name":"is_empty","qualname":"::data_structures::suffix_array::SuffixArray::is_empty","value":"pub fn is_empty(&Self) -> bool","parent":{"krate":0,"index":1084},"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":1088},"span":{"file_name":"/Users/shelwitz/.cargo/registry/src/github.com-1ecc6299db9ec823/bio-0.39.0/src/data_structures/suffix_array.rs","byte_start":373888,"byte_end":373894,"line_start":87,"line_end":87,"column_start":8,"column_end":14},"name":"sample","qualname":"::data_structures::suffix_array::SuffixArray::sample","value":"pub fn sample<DBWT: Borrow<BWT>, DLess: Borrow<Less>,\n              DOcc: Borrow<Occ>>(&Self, &[u8], DBWT, DLess, DOcc, usize)\n-> SampledSuffixArray<DBWT, DLess, DOcc>","parent":{"krate":0,"index":1084},"children":[],"decl_id":null,"docs":" Sample the suffix array with the given sample rate.","sig":null,"attributes":[{"value":"/ Sample the suffix array with the given sample rate.","span":{"file_name":"/Users/shelwitz/.cargo/registry/src/github.com-1ecc6299db9ec823/bio-0.39.0/src/data_structures/suffix_array.rs","byte_start":372887,"byte_end":372942,"line_start":58,"line_end":58,"column_start":5,"column_end":60}},{"value":"/","span":{"file_name":"/Users/shelwitz/.cargo/registry/src/github.com-1ecc6299db9ec823/bio-0.39.0/src/data_structures/suffix_array.rs","byte_start":372947,"byte_end":372950,"line_start":59,"line_end":59,"column_start":5,"column_end":8}},{"value":"/ # Arguments","span":{"file_name":"/Users/shelwitz/.cargo/registry/src/github.com-1ecc6299db9ec823/bio-0.39.0/src/data_structures/suffix_array.rs","byte_start":372955,"byte_end":372970,"line_start":60,"line_end":60,"column_start":5,"column_end":20}},{"value":"/","span":{"file_name":"/Users/shelwitz/.cargo/registry/src/github.com-1ecc6299db9ec823/bio-0.39.0/src/data_structures/suffix_array.rs","byte_start":372975,"byte_end":372978,"line_start":61,"line_end":61,"column_start":5,"column_end":8}},{"value":"/ * `text` - text that the suffix array is built on","span":{"file_name":"/Users/shelwitz/.cargo/registry/src/github.com-1ecc6299db9ec823/bio-0.39.0/src/data_structures/suffix_array.rs","byte_start":372983,"byte_end":373036,"line_start":62,"line_end":62,"column_start":5,"column_end":58}},{"value":"/ * `bwt` - the corresponding BWT","span":{"file_name":"/Users/shelwitz/.cargo/registry/src/github.com-1ecc6299db9ec823/bio-0.39.0/src/data_structures/suffix_array.rs","byte_start":373041,"byte_end":373076,"line_start":63,"line_end":63,"column_start":5,"column_end":40}},{"value":"/ * `less` - the corresponding less array","span":{"file_name":"/Users/shelwitz/.cargo/registry/src/github.com-1ecc6299db9ec823/bio-0.39.0/src/data_structures/suffix_array.rs","byte_start":373081,"byte_end":373124,"line_start":64,"line_end":64,"column_start":5,"column_end":48}},{"value":"/ * `occ` - the corresponding occ table","span":{"file_name":"/Users/shelwitz/.cargo/registry/src/github.com-1ecc6299db9ec823/bio-0.39.0/src/data_structures/suffix_array.rs","byte_start":373129,"byte_end":373170,"line_start":65,"line_end":65,"column_start":5,"column_end":46}},{"value":"/ * `sampling_rate` - if sampling rate is k, every k-th entry will be kept","span":{"file_name":"/Users/shelwitz/.cargo/registry/src/github.com-1ecc6299db9ec823/bio-0.39.0/src/data_structures/suffix_array.rs","byte_start":373175,"byte_end":373251,"line_start":66,"line_end":66,"column_start":5,"column_end":81}},{"value":"/","span":{"file_name":"/Users/shelwitz/.cargo/registry/src/github.com-1ecc6299db9ec823/bio-0.39.0/src/data_structures/suffix_array.rs","byte_start":373256,"byte_end":373259,"line_start":67,"line_end":67,"column_start":5,"column_end":8}},{"value":"/ # Example","span":{"file_name":"/Users/shelwitz/.cargo/registry/src/github.com-1ecc6299db9ec823/bio-0.39.0/src/data_structures/suffix_array.rs","byte_start":373264,"byte_end":373277,"line_start":68,"line_end":68,"column_start":5,"column_end":18}},{"value":"/","span":{"file_name":"/Users/shelwitz/.cargo/registry/src/github.com-1ecc6299db9ec823/bio-0.39.0/src/data_structures/suffix_array.rs","byte_start":373282,"byte_end":373285,"line_start":69,"line_end":69,"column_start":5,"column_end":8}},{"value":"/ ```","span":{"file_name":"/Users/shelwitz/.cargo/registry/src/github.com-1ecc6299db9ec823/bio-0.39.0/src/data_structures/suffix_array.rs","byte_start":373290,"byte_end":373297,"line_start":70,"line_end":70,"column_start":5,"column_end":12}},{"value":"/ use bio::alphabets::dna;","span":{"file_name":"/Users/shelwitz/.cargo/registry/src/github.com-1ecc6299db9ec823/bio-0.39.0/src/data_structures/suffix_array.rs","byte_start":373302,"byte_end":373330,"line_start":71,"line_end":71,"column_start":5,"column_end":33}},{"value":"/ use bio::data_structures::bwt::{bwt, less, Occ};","span":{"file_name":"/Users/shelwitz/.cargo/registry/src/github.com-1ecc6299db9ec823/bio-0.39.0/src/data_structures/suffix_array.rs","byte_start":373335,"byte_end":373387,"line_start":72,"line_end":72,"column_start":5,"column_end":57}},{"value":"/ use bio::data_structures::suffix_array::{suffix_array, SuffixArray};","span":{"file_name":"/Users/shelwitz/.cargo/registry/src/github.com-1ecc6299db9ec823/bio-0.39.0/src/data_structures/suffix_array.rs","byte_start":373392,"byte_end":373464,"line_start":73,"line_end":73,"column_start":5,"column_end":77}},{"value":"/","span":{"file_name":"/Users/shelwitz/.cargo/registry/src/github.com-1ecc6299db9ec823/bio-0.39.0/src/data_structures/suffix_array.rs","byte_start":373469,"byte_end":373472,"line_start":74,"line_end":74,"column_start":5,"column_end":8}},{"value":"/ let text = b\"ACGCGAT$\";","span":{"file_name":"/Users/shelwitz/.cargo/registry/src/github.com-1ecc6299db9ec823/bio-0.39.0/src/data_structures/suffix_array.rs","byte_start":373477,"byte_end":373504,"line_start":75,"line_end":75,"column_start":5,"column_end":32}},{"value":"/ let alphabet = dna::n_alphabet();","span":{"file_name":"/Users/shelwitz/.cargo/registry/src/github.com-1ecc6299db9ec823/bio-0.39.0/src/data_structures/suffix_array.rs","byte_start":373509,"byte_end":373546,"line_start":76,"line_end":76,"column_start":5,"column_end":42}},{"value":"/ let sa = suffix_array(text);","span":{"file_name":"/Users/shelwitz/.cargo/registry/src/github.com-1ecc6299db9ec823/bio-0.39.0/src/data_structures/suffix_array.rs","byte_start":373551,"byte_end":373583,"line_start":77,"line_end":77,"column_start":5,"column_end":37}},{"value":"/ let bwt = bwt(text, &sa);","span":{"file_name":"/Users/shelwitz/.cargo/registry/src/github.com-1ecc6299db9ec823/bio-0.39.0/src/data_structures/suffix_array.rs","byte_start":373588,"byte_end":373617,"line_start":78,"line_end":78,"column_start":5,"column_end":34}},{"value":"/ let less = less(&bwt, &alphabet);","span":{"file_name":"/Users/shelwitz/.cargo/registry/src/github.com-1ecc6299db9ec823/bio-0.39.0/src/data_structures/suffix_array.rs","byte_start":373622,"byte_end":373659,"line_start":79,"line_end":79,"column_start":5,"column_end":42}},{"value":"/ let occ = Occ::new(&bwt, 3, &alphabet);","span":{"file_name":"/Users/shelwitz/.cargo/registry/src/github.com-1ecc6299db9ec823/bio-0.39.0/src/data_structures/suffix_array.rs","byte_start":373664,"byte_end":373707,"line_start":80,"line_end":80,"column_start":5,"column_end":48}},{"value":"/ let sampled = sa.sample(text, &bwt, &less, &occ, 2);","span":{"file_name":"/Users/shelwitz/.cargo/registry/src/github.com-1ecc6299db9ec823/bio-0.39.0/src/data_structures/suffix_array.rs","byte_start":373712,"byte_end":373768,"line_start":81,"line_end":81,"column_start":5,"column_end":61}},{"value":"/","span":{"file_name":"/Users/shelwitz/.cargo/registry/src/github.com-1ecc6299db9ec823/bio-0.39.0/src/data_structures/suffix_array.rs","byte_start":373773,"byte_end":373776,"line_start":82,"line_end":82,"column_start":5,"column_end":8}},{"value":"/ for i in 0..sa.len() {","span":{"file_name":"/Users/shelwitz/.cargo/registry/src/github.com-1ecc6299db9ec823/bio-0.39.0/src/data_structures/suffix_array.rs","byte_start":373781,"byte_end":373807,"line_start":83,"line_end":83,"column_start":5,"column_end":31}},{"value":"/     assert_eq!(sa.get(i), sampled.get(i));","span":{"file_name":"/Users/shelwitz/.cargo/registry/src/github.com-1ecc6299db9ec823/bio-0.39.0/src/data_structures/suffix_array.rs","byte_start":373812,"byte_end":373858,"line_start":84,"line_end":84,"column_start":5,"column_end":51}},{"value":"/ }","span":{"file_name":"/Users/shelwitz/.cargo/registry/src/github.com-1ecc6299db9ec823/bio-0.39.0/src/data_structures/suffix_array.rs","byte_start":373863,"byte_end":373868,"line_start":85,"line_end":85,"column_start":5,"column_end":10}},{"value":"/ ```","span":{"file_name":"/Users/shelwitz/.cargo/registry/src/github.com-1ecc6299db9ec823/bio-0.39.0/src/data_structures/suffix_array.rs","byte_start":373873,"byte_end":373880,"line_start":86,"line_end":86,"column_start":5,"column_end":12}}]},{"kind":"Struct","id":{"krate":0,"index":4431},"span":{"file_name":"/Users/shelwitz/.cargo/registry/src/github.com-1ecc6299db9ec823/bio-0.39.0/src/data_structures/suffix_array.rs","byte_start":375141,"byte_end":375159,"line_start":126,"line_end":126,"column_start":12,"column_end":30},"name":"SampledSuffixArray","qualname":"::data_structures::suffix_array::SampledSuffixArray","value":"SampledSuffixArray {  }","parent":null,"children":[{"krate":0,"index":4435},{"krate":0,"index":4436},{"krate":0,"index":4437},{"krate":0,"index":4438},{"krate":0,"index":4439},{"krate":0,"index":4440},{"krate":0,"index":4441}],"decl_id":null,"docs":" A sampled suffix array.\n","sig":null,"attributes":[{"value":"/ A sampled suffix array.","span":{"file_name":"/Users/shelwitz/.cargo/registry/src/github.com-1ecc6299db9ec823/bio-0.39.0/src/data_structures/suffix_array.rs","byte_start":375061,"byte_end":375088,"line_start":124,"line_end":124,"column_start":1,"column_end":28}}]},{"kind":"Method","id":{"krate":0,"index":1107},"span":{"file_name":"/Users/shelwitz/.cargo/registry/src/github.com-1ecc6299db9ec823/bio-0.39.0/src/data_structures/suffix_array.rs","byte_start":377328,"byte_end":377341,"line_start":200,"line_end":200,"column_start":12,"column_end":25},"name":"sampling_rate","qualname":"<SampledSuffixArray<DBWT, DLess, DOcc>>::sampling_rate","value":"pub fn sampling_rate(&Self) -> usize","parent":null,"children":[],"decl_id":null,"docs":" Get the sampling rate of the suffix array.\n","sig":null,"attributes":[{"value":"/ Get the sampling rate of the suffix array.","span":{"file_name":"/Users/shelwitz/.cargo/registry/src/github.com-1ecc6299db9ec823/bio-0.39.0/src/data_structures/suffix_array.rs","byte_start":377270,"byte_end":377316,"line_start":199,"line_end":199,"column_start":5,"column_end":51}}]},{"kind":"Method","id":{"krate":0,"index":1108},"span":{"file_name":"/Users/shelwitz/.cargo/registry/src/github.com-1ecc6299db9ec823/bio-0.39.0/src/data_structures/suffix_array.rs","byte_start":377438,"byte_end":377441,"line_start":205,"line_end":205,"column_start":12,"column_end":15},"name":"bwt","qualname":"<SampledSuffixArray<DBWT, DLess, DOcc>>::bwt","value":"pub fn bwt(&Self) -> &BWT","parent":null,"children":[],"decl_id":null,"docs":" Get a reference to the internal BWT.\n","sig":null,"attributes":[{"value":"/ Get a reference to the internal BWT.","span":{"file_name":"/Users/shelwitz/.cargo/registry/src/github.com-1ecc6299db9ec823/bio-0.39.0/src/data_structures/suffix_array.rs","byte_start":377386,"byte_end":377426,"line_start":204,"line_end":204,"column_start":5,"column_end":45}}]},{"kind":"Method","id":{"krate":0,"index":1109},"span":{"file_name":"/Users/shelwitz/.cargo/registry/src/github.com-1ecc6299db9ec823/bio-0.39.0/src/data_structures/suffix_array.rs","byte_start":377549,"byte_end":377553,"line_start":210,"line_end":210,"column_start":12,"column_end":16},"name":"less","qualname":"<SampledSuffixArray<DBWT, DLess, DOcc>>::less","value":"pub fn less(&Self) -> &Less","parent":null,"children":[],"decl_id":null,"docs":" Get a reference to the internal Less.\n","sig":null,"attributes":[{"value":"/ Get a reference to the internal Less.","span":{"file_name":"/Users/shelwitz/.cargo/registry/src/github.com-1ecc6299db9ec823/bio-0.39.0/src/data_structures/suffix_array.rs","byte_start":377496,"byte_end":377537,"line_start":209,"line_end":209,"column_start":5,"column_end":46}}]},{"kind":"Method","id":{"krate":0,"index":1110},"span":{"file_name":"/Users/shelwitz/.cargo/registry/src/github.com-1ecc6299db9ec823/bio-0.39.0/src/data_structures/suffix_array.rs","byte_start":377662,"byte_end":377665,"line_start":215,"line_end":215,"column_start":12,"column_end":15},"name":"occ","qualname":"<SampledSuffixArray<DBWT, DLess, DOcc>>::occ","value":"pub fn occ(&Self) -> &Occ","parent":null,"children":[],"decl_id":null,"docs":" Get a reference to the internal Occ.\n","sig":null,"attributes":[{"value":"/ Get a reference to the internal Occ.","span":{"file_name":"/Users/shelwitz/.cargo/registry/src/github.com-1ecc6299db9ec823/bio-0.39.0/src/data_structures/suffix_array.rs","byte_start":377610,"byte_end":377650,"line_start":214,"line_end":214,"column_start":5,"column_end":45}}]},{"kind":"Function","id":{"krate":0,"index":1111},"span":{"file_name":"/Users/shelwitz/.cargo/registry/src/github.com-1ecc6299db9ec823/bio-0.39.0/src/data_structures/suffix_array.rs","byte_start":380049,"byte_end":380061,"line_start":265,"line_end":265,"column_start":8,"column_end":20},"name":"suffix_array","qualname":"::data_structures::suffix_array::suffix_array","value":"pub fn suffix_array(&[u8]) -> RawSuffixArray","parent":null,"children":[],"decl_id":null,"docs":" Construct suffix array for given text of length n.\n Complexity: O(n).\n This is an implementation of the induced sorting as presented by\n Ge Nong, Sen Zhang und Wai Hong Chan (2009), also known as SAIS.\n The implementation is based on the following lecture notes:\n http://ls11-www.cs.tu-dortmund.de/people/rahmann/algoseq.pdf","sig":null,"attributes":[{"value":"/ Construct suffix array for given text of length n.","span":{"file_name":"/Users/shelwitz/.cargo/registry/src/github.com-1ecc6299db9ec823/bio-0.39.0/src/data_structures/suffix_array.rs","byte_start":377718,"byte_end":377772,"line_start":220,"line_end":220,"column_start":1,"column_end":55}},{"value":"/ Complexity: O(n).","span":{"file_name":"/Users/shelwitz/.cargo/registry/src/github.com-1ecc6299db9ec823/bio-0.39.0/src/data_structures/suffix_array.rs","byte_start":377773,"byte_end":377794,"line_start":221,"line_end":221,"column_start":1,"column_end":22}},{"value":"/ This is an implementation of the induced sorting as presented by","span":{"file_name":"/Users/shelwitz/.cargo/registry/src/github.com-1ecc6299db9ec823/bio-0.39.0/src/data_structures/suffix_array.rs","byte_start":377795,"byte_end":377863,"line_start":222,"line_end":222,"column_start":1,"column_end":69}},{"value":"/ Ge Nong, Sen Zhang und Wai Hong Chan (2009), also known as SAIS.","span":{"file_name":"/Users/shelwitz/.cargo/registry/src/github.com-1ecc6299db9ec823/bio-0.39.0/src/data_structures/suffix_array.rs","byte_start":377864,"byte_end":377932,"line_start":223,"line_end":223,"column_start":1,"column_end":69}},{"value":"/ The implementation is based on the following lecture notes:","span":{"file_name":"/Users/shelwitz/.cargo/registry/src/github.com-1ecc6299db9ec823/bio-0.39.0/src/data_structures/suffix_array.rs","byte_start":377933,"byte_end":377996,"line_start":224,"line_end":224,"column_start":1,"column_end":64}},{"value":"/ http://ls11-www.cs.tu-dortmund.de/people/rahmann/algoseq.pdf","span":{"file_name":"/Users/shelwitz/.cargo/registry/src/github.com-1ecc6299db9ec823/bio-0.39.0/src/data_structures/suffix_array.rs","byte_start":377997,"byte_end":378061,"line_start":225,"line_end":225,"column_start":1,"column_end":65}},{"value":"/","span":{"file_name":"/Users/shelwitz/.cargo/registry/src/github.com-1ecc6299db9ec823/bio-0.39.0/src/data_structures/suffix_array.rs","byte_start":378062,"byte_end":378065,"line_start":226,"line_end":226,"column_start":1,"column_end":4}},{"value":"/ The idea is to first mark positions as L or S, with L being a position","span":{"file_name":"/Users/shelwitz/.cargo/registry/src/github.com-1ecc6299db9ec823/bio-0.39.0/src/data_structures/suffix_array.rs","byte_start":378066,"byte_end":378140,"line_start":227,"line_end":227,"column_start":1,"column_end":75}},{"value":"/ the suffix of which is lexicographically larger than that of the next position.","span":{"file_name":"/Users/shelwitz/.cargo/registry/src/github.com-1ecc6299db9ec823/bio-0.39.0/src/data_structures/suffix_array.rs","byte_start":378141,"byte_end":378224,"line_start":228,"line_end":228,"column_start":1,"column_end":84}},{"value":"/ Then, LMS-positions (leftmost S) are S-positions right to an L-position.","span":{"file_name":"/Users/shelwitz/.cargo/registry/src/github.com-1ecc6299db9ec823/bio-0.39.0/src/data_structures/suffix_array.rs","byte_start":378225,"byte_end":378301,"line_start":229,"line_end":229,"column_start":1,"column_end":77}},{"value":"/ An LMS substring is the substring from one LMS position to the next (inclusive).","span":{"file_name":"/Users/shelwitz/.cargo/registry/src/github.com-1ecc6299db9ec823/bio-0.39.0/src/data_structures/suffix_array.rs","byte_start":378302,"byte_end":378386,"line_start":230,"line_end":230,"column_start":1,"column_end":85}},{"value":"/ The algorithm works as follows:","span":{"file_name":"/Users/shelwitz/.cargo/registry/src/github.com-1ecc6299db9ec823/bio-0.39.0/src/data_structures/suffix_array.rs","byte_start":378387,"byte_end":378422,"line_start":231,"line_end":231,"column_start":1,"column_end":36}},{"value":"/","span":{"file_name":"/Users/shelwitz/.cargo/registry/src/github.com-1ecc6299db9ec823/bio-0.39.0/src/data_structures/suffix_array.rs","byte_start":378423,"byte_end":378426,"line_start":232,"line_end":232,"column_start":1,"column_end":4}},{"value":"/ 1. Sort LMS positions: first step 2 is applied to the unsorted sequence","span":{"file_name":"/Users/shelwitz/.cargo/registry/src/github.com-1ecc6299db9ec823/bio-0.39.0/src/data_structures/suffix_array.rs","byte_start":378427,"byte_end":378502,"line_start":233,"line_end":233,"column_start":1,"column_end":76}},{"value":"/    of positions. Surprisingly, this sorts the LMS substrings. If all substrings","span":{"file_name":"/Users/shelwitz/.cargo/registry/src/github.com-1ecc6299db9ec823/bio-0.39.0/src/data_structures/suffix_array.rs","byte_start":378503,"byte_end":378586,"line_start":234,"line_end":234,"column_start":1,"column_end":84}},{"value":"/    are different, LMS positions (and their suffixes) are sorted. Else, a reduced","span":{"file_name":"/Users/shelwitz/.cargo/registry/src/github.com-1ecc6299db9ec823/bio-0.39.0/src/data_structures/suffix_array.rs","byte_start":378587,"byte_end":378671,"line_start":235,"line_end":235,"column_start":1,"column_end":85}},{"value":"/    text is build (at most half the size of the original text) and we recurse into","span":{"file_name":"/Users/shelwitz/.cargo/registry/src/github.com-1ecc6299db9ec823/bio-0.39.0/src/data_structures/suffix_array.rs","byte_start":378672,"byte_end":378757,"line_start":236,"line_end":236,"column_start":1,"column_end":86}},{"value":"/    suffix array construction on the reduced text, yielding the sorted LMS positions.","span":{"file_name":"/Users/shelwitz/.cargo/registry/src/github.com-1ecc6299db9ec823/bio-0.39.0/src/data_structures/suffix_array.rs","byte_start":378758,"byte_end":378846,"line_start":237,"line_end":237,"column_start":1,"column_end":89}},{"value":"/ 2. Derive the order of the other positions/suffixes from the (sorted) LMS positions.","span":{"file_name":"/Users/shelwitz/.cargo/registry/src/github.com-1ecc6299db9ec823/bio-0.39.0/src/data_structures/suffix_array.rs","byte_start":378847,"byte_end":378935,"line_start":238,"line_end":238,"column_start":1,"column_end":89}},{"value":"/    For this, the (still empty) suffix array is partitioned into buckets.","span":{"file_name":"/Users/shelwitz/.cargo/registry/src/github.com-1ecc6299db9ec823/bio-0.39.0/src/data_structures/suffix_array.rs","byte_start":378936,"byte_end":379012,"line_start":239,"line_end":239,"column_start":1,"column_end":77}},{"value":"/    Each bucket denotes an interval of suffixes with the same first symbol.","span":{"file_name":"/Users/shelwitz/.cargo/registry/src/github.com-1ecc6299db9ec823/bio-0.39.0/src/data_structures/suffix_array.rs","byte_start":379013,"byte_end":379091,"line_start":240,"line_end":240,"column_start":1,"column_end":79}},{"value":"/    We know that the L-suffixes have to occur first in the buckets, because they","span":{"file_name":"/Users/shelwitz/.cargo/registry/src/github.com-1ecc6299db9ec823/bio-0.39.0/src/data_structures/suffix_array.rs","byte_start":379092,"byte_end":379175,"line_start":241,"line_end":241,"column_start":1,"column_end":84}},{"value":"/    have to be lexicographically smaller than the S-suffixes with the same first letter.","span":{"file_name":"/Users/shelwitz/.cargo/registry/src/github.com-1ecc6299db9ec823/bio-0.39.0/src/data_structures/suffix_array.rs","byte_start":379176,"byte_end":379267,"line_start":242,"line_end":242,"column_start":1,"column_end":92}},{"value":"/    The LMS-positions can now be used to insert the L-positions in the correct order","span":{"file_name":"/Users/shelwitz/.cargo/registry/src/github.com-1ecc6299db9ec823/bio-0.39.0/src/data_structures/suffix_array.rs","byte_start":379268,"byte_end":379355,"line_start":243,"line_end":243,"column_start":1,"column_end":88}},{"value":"/    into the buckets.","span":{"file_name":"/Users/shelwitz/.cargo/registry/src/github.com-1ecc6299db9ec823/bio-0.39.0/src/data_structures/suffix_array.rs","byte_start":379356,"byte_end":379380,"line_start":244,"line_end":244,"column_start":1,"column_end":25}},{"value":"/    Then, the S-positions can be inserted, again using the already existing entries","span":{"file_name":"/Users/shelwitz/.cargo/registry/src/github.com-1ecc6299db9ec823/bio-0.39.0/src/data_structures/suffix_array.rs","byte_start":379381,"byte_end":379467,"line_start":245,"line_end":245,"column_start":1,"column_end":87}},{"value":"/    in the array.","span":{"file_name":"/Users/shelwitz/.cargo/registry/src/github.com-1ecc6299db9ec823/bio-0.39.0/src/data_structures/suffix_array.rs","byte_start":379468,"byte_end":379488,"line_start":246,"line_end":246,"column_start":1,"column_end":21}},{"value":"/","span":{"file_name":"/Users/shelwitz/.cargo/registry/src/github.com-1ecc6299db9ec823/bio-0.39.0/src/data_structures/suffix_array.rs","byte_start":379489,"byte_end":379492,"line_start":247,"line_end":247,"column_start":1,"column_end":4}},{"value":"/ # Arguments","span":{"file_name":"/Users/shelwitz/.cargo/registry/src/github.com-1ecc6299db9ec823/bio-0.39.0/src/data_structures/suffix_array.rs","byte_start":379493,"byte_end":379508,"line_start":248,"line_end":248,"column_start":1,"column_end":16}},{"value":"/","span":{"file_name":"/Users/shelwitz/.cargo/registry/src/github.com-1ecc6299db9ec823/bio-0.39.0/src/data_structures/suffix_array.rs","byte_start":379509,"byte_end":379512,"line_start":249,"line_end":249,"column_start":1,"column_end":4}},{"value":"/ * `text` - the text, ended by sentinel symbol (being lexicographically smallest). The text may","span":{"file_name":"/Users/shelwitz/.cargo/registry/src/github.com-1ecc6299db9ec823/bio-0.39.0/src/data_structures/suffix_array.rs","byte_start":379513,"byte_end":379611,"line_start":250,"line_end":250,"column_start":1,"column_end":99}},{"value":"/   also contain multiple sentinel symbols, used to concatenate multiple sequences without mixing","span":{"file_name":"/Users/shelwitz/.cargo/registry/src/github.com-1ecc6299db9ec823/bio-0.39.0/src/data_structures/suffix_array.rs","byte_start":379612,"byte_end":379711,"line_start":251,"line_end":251,"column_start":1,"column_end":100}},{"value":"/   their suffixes together.","span":{"file_name":"/Users/shelwitz/.cargo/registry/src/github.com-1ecc6299db9ec823/bio-0.39.0/src/data_structures/suffix_array.rs","byte_start":379712,"byte_end":379742,"line_start":252,"line_end":252,"column_start":1,"column_end":31}},{"value":"/","span":{"file_name":"/Users/shelwitz/.cargo/registry/src/github.com-1ecc6299db9ec823/bio-0.39.0/src/data_structures/suffix_array.rs","byte_start":379743,"byte_end":379746,"line_start":253,"line_end":253,"column_start":1,"column_end":4}},{"value":"/ # Example","span":{"file_name":"/Users/shelwitz/.cargo/registry/src/github.com-1ecc6299db9ec823/bio-0.39.0/src/data_structures/suffix_array.rs","byte_start":379747,"byte_end":379760,"line_start":254,"line_end":254,"column_start":1,"column_end":14}},{"value":"/","span":{"file_name":"/Users/shelwitz/.cargo/registry/src/github.com-1ecc6299db9ec823/bio-0.39.0/src/data_structures/suffix_array.rs","byte_start":379761,"byte_end":379764,"line_start":255,"line_end":255,"column_start":1,"column_end":4}},{"value":"/ ```","span":{"file_name":"/Users/shelwitz/.cargo/registry/src/github.com-1ecc6299db9ec823/bio-0.39.0/src/data_structures/suffix_array.rs","byte_start":379765,"byte_end":379772,"line_start":256,"line_end":256,"column_start":1,"column_end":8}},{"value":"/ use bio::data_structures::suffix_array::suffix_array;","span":{"file_name":"/Users/shelwitz/.cargo/registry/src/github.com-1ecc6299db9ec823/bio-0.39.0/src/data_structures/suffix_array.rs","byte_start":379773,"byte_end":379830,"line_start":257,"line_end":257,"column_start":1,"column_end":58}},{"value":"/ let text = b\"GCCTTAACATTATTACGCCTA$\";","span":{"file_name":"/Users/shelwitz/.cargo/registry/src/github.com-1ecc6299db9ec823/bio-0.39.0/src/data_structures/suffix_array.rs","byte_start":379831,"byte_end":379872,"line_start":258,"line_end":258,"column_start":1,"column_end":42}},{"value":"/ let pos = suffix_array(text);","span":{"file_name":"/Users/shelwitz/.cargo/registry/src/github.com-1ecc6299db9ec823/bio-0.39.0/src/data_structures/suffix_array.rs","byte_start":379873,"byte_end":379906,"line_start":259,"line_end":259,"column_start":1,"column_end":34}},{"value":"/ assert_eq!(","span":{"file_name":"/Users/shelwitz/.cargo/registry/src/github.com-1ecc6299db9ec823/bio-0.39.0/src/data_structures/suffix_array.rs","byte_start":379907,"byte_end":379922,"line_start":260,"line_end":260,"column_start":1,"column_end":16}},{"value":"/     pos,","span":{"file_name":"/Users/shelwitz/.cargo/registry/src/github.com-1ecc6299db9ec823/bio-0.39.0/src/data_structures/suffix_array.rs","byte_start":379923,"byte_end":379935,"line_start":261,"line_end":261,"column_start":1,"column_end":13}},{"value":"/     vec![21, 20, 5, 6, 14, 11, 8, 7, 17, 1, 15, 18, 2, 16, 0, 19, 4, 13, 10, 3, 12, 9]","span":{"file_name":"/Users/shelwitz/.cargo/registry/src/github.com-1ecc6299db9ec823/bio-0.39.0/src/data_structures/suffix_array.rs","byte_start":379936,"byte_end":380026,"line_start":262,"line_end":262,"column_start":1,"column_end":91}},{"value":"/ );","span":{"file_name":"/Users/shelwitz/.cargo/registry/src/github.com-1ecc6299db9ec823/bio-0.39.0/src/data_structures/suffix_array.rs","byte_start":380027,"byte_end":380033,"line_start":263,"line_end":263,"column_start":1,"column_end":7}},{"value":"/ ```","span":{"file_name":"/Users/shelwitz/.cargo/registry/src/github.com-1ecc6299db9ec823/bio-0.39.0/src/data_structures/suffix_array.rs","byte_start":380034,"byte_end":380041,"line_start":264,"line_end":264,"column_start":1,"column_end":8}}]},{"kind":"Function","id":{"krate":0,"index":1112},"span":{"file_name":"/Users/shelwitz/.cargo/registry/src/github.com-1ecc6299db9ec823/bio-0.39.0/src/data_structures/suffix_array.rs","byte_start":381593,"byte_end":381596,"line_start":315,"line_end":315,"column_start":8,"column_end":11},"name":"lcp","qualname":"::data_structures::suffix_array::lcp","value":"pub fn lcp<SA: Deref<Target = RawSuffixArray>>(&[u8], SA) -> LCPArray","parent":null,"children":[],"decl_id":null,"docs":" Construct lcp array for given text and suffix array of length n.\n Complexity: O(n).","sig":null,"attributes":[{"value":"/ Construct lcp array for given text and suffix array of length n.","span":{"file_name":"/Users/shelwitz/.cargo/registry/src/github.com-1ecc6299db9ec823/bio-0.39.0/src/data_structures/suffix_array.rs","byte_start":380811,"byte_end":380879,"line_start":287,"line_end":287,"column_start":1,"column_end":69}},{"value":"/ Complexity: O(n).","span":{"file_name":"/Users/shelwitz/.cargo/registry/src/github.com-1ecc6299db9ec823/bio-0.39.0/src/data_structures/suffix_array.rs","byte_start":380880,"byte_end":380901,"line_start":288,"line_end":288,"column_start":1,"column_end":22}},{"value":"/","span":{"file_name":"/Users/shelwitz/.cargo/registry/src/github.com-1ecc6299db9ec823/bio-0.39.0/src/data_structures/suffix_array.rs","byte_start":380902,"byte_end":380905,"line_start":289,"line_end":289,"column_start":1,"column_end":4}},{"value":"/ # Arguments","span":{"file_name":"/Users/shelwitz/.cargo/registry/src/github.com-1ecc6299db9ec823/bio-0.39.0/src/data_structures/suffix_array.rs","byte_start":380906,"byte_end":380921,"line_start":290,"line_end":290,"column_start":1,"column_end":16}},{"value":"/","span":{"file_name":"/Users/shelwitz/.cargo/registry/src/github.com-1ecc6299db9ec823/bio-0.39.0/src/data_structures/suffix_array.rs","byte_start":380922,"byte_end":380925,"line_start":291,"line_end":291,"column_start":1,"column_end":4}},{"value":"/ * `text` - the text ended by sentinel symbol (being lexicographically smallest)","span":{"file_name":"/Users/shelwitz/.cargo/registry/src/github.com-1ecc6299db9ec823/bio-0.39.0/src/data_structures/suffix_array.rs","byte_start":380926,"byte_end":381009,"line_start":292,"line_end":292,"column_start":1,"column_end":84}},{"value":"/ * `pos` - the suffix array for the text","span":{"file_name":"/Users/shelwitz/.cargo/registry/src/github.com-1ecc6299db9ec823/bio-0.39.0/src/data_structures/suffix_array.rs","byte_start":381010,"byte_end":381053,"line_start":293,"line_end":293,"column_start":1,"column_end":44}},{"value":"/","span":{"file_name":"/Users/shelwitz/.cargo/registry/src/github.com-1ecc6299db9ec823/bio-0.39.0/src/data_structures/suffix_array.rs","byte_start":381054,"byte_end":381057,"line_start":294,"line_end":294,"column_start":1,"column_end":4}},{"value":"/ # Example","span":{"file_name":"/Users/shelwitz/.cargo/registry/src/github.com-1ecc6299db9ec823/bio-0.39.0/src/data_structures/suffix_array.rs","byte_start":381058,"byte_end":381071,"line_start":295,"line_end":295,"column_start":1,"column_end":14}},{"value":"/","span":{"file_name":"/Users/shelwitz/.cargo/registry/src/github.com-1ecc6299db9ec823/bio-0.39.0/src/data_structures/suffix_array.rs","byte_start":381072,"byte_end":381075,"line_start":296,"line_end":296,"column_start":1,"column_end":4}},{"value":"/ ```","span":{"file_name":"/Users/shelwitz/.cargo/registry/src/github.com-1ecc6299db9ec823/bio-0.39.0/src/data_structures/suffix_array.rs","byte_start":381076,"byte_end":381083,"line_start":297,"line_end":297,"column_start":1,"column_end":8}},{"value":"/ use bio::data_structures::suffix_array::{lcp, suffix_array};","span":{"file_name":"/Users/shelwitz/.cargo/registry/src/github.com-1ecc6299db9ec823/bio-0.39.0/src/data_structures/suffix_array.rs","byte_start":381084,"byte_end":381148,"line_start":298,"line_end":298,"column_start":1,"column_end":65}},{"value":"/ let text = b\"GCCTTAACATTATTACGCCTA$\";","span":{"file_name":"/Users/shelwitz/.cargo/registry/src/github.com-1ecc6299db9ec823/bio-0.39.0/src/data_structures/suffix_array.rs","byte_start":381149,"byte_end":381190,"line_start":299,"line_end":299,"column_start":1,"column_end":42}},{"value":"/ let pos = suffix_array(text);","span":{"file_name":"/Users/shelwitz/.cargo/registry/src/github.com-1ecc6299db9ec823/bio-0.39.0/src/data_structures/suffix_array.rs","byte_start":381191,"byte_end":381224,"line_start":300,"line_end":300,"column_start":1,"column_end":34}},{"value":"/","span":{"file_name":"/Users/shelwitz/.cargo/registry/src/github.com-1ecc6299db9ec823/bio-0.39.0/src/data_structures/suffix_array.rs","byte_start":381225,"byte_end":381228,"line_start":301,"line_end":301,"column_start":1,"column_end":4}},{"value":"/ // obtain compressed LCP array","span":{"file_name":"/Users/shelwitz/.cargo/registry/src/github.com-1ecc6299db9ec823/bio-0.39.0/src/data_structures/suffix_array.rs","byte_start":381229,"byte_end":381263,"line_start":302,"line_end":302,"column_start":1,"column_end":35}},{"value":"/ let lcp = lcp(text, &pos);","span":{"file_name":"/Users/shelwitz/.cargo/registry/src/github.com-1ecc6299db9ec823/bio-0.39.0/src/data_structures/suffix_array.rs","byte_start":381264,"byte_end":381294,"line_start":303,"line_end":303,"column_start":1,"column_end":31}},{"value":"/","span":{"file_name":"/Users/shelwitz/.cargo/registry/src/github.com-1ecc6299db9ec823/bio-0.39.0/src/data_structures/suffix_array.rs","byte_start":381295,"byte_end":381298,"line_start":304,"line_end":304,"column_start":1,"column_end":4}},{"value":"/ // get most values in O(1).","span":{"file_name":"/Users/shelwitz/.cargo/registry/src/github.com-1ecc6299db9ec823/bio-0.39.0/src/data_structures/suffix_array.rs","byte_start":381299,"byte_end":381330,"line_start":305,"line_end":305,"column_start":1,"column_end":32}},{"value":"/ assert_eq!(lcp.get(6).unwrap(), 4);","span":{"file_name":"/Users/shelwitz/.cargo/registry/src/github.com-1ecc6299db9ec823/bio-0.39.0/src/data_structures/suffix_array.rs","byte_start":381331,"byte_end":381370,"line_start":306,"line_end":306,"column_start":1,"column_end":40}},{"value":"/","span":{"file_name":"/Users/shelwitz/.cargo/registry/src/github.com-1ecc6299db9ec823/bio-0.39.0/src/data_structures/suffix_array.rs","byte_start":381371,"byte_end":381374,"line_start":307,"line_end":307,"column_start":1,"column_end":4}},{"value":"/ // obtain uncompressed LCP array.","span":{"file_name":"/Users/shelwitz/.cargo/registry/src/github.com-1ecc6299db9ec823/bio-0.39.0/src/data_structures/suffix_array.rs","byte_start":381375,"byte_end":381412,"line_start":308,"line_end":308,"column_start":1,"column_end":38}},{"value":"/ let uncompressed = lcp.decompress();","span":{"file_name":"/Users/shelwitz/.cargo/registry/src/github.com-1ecc6299db9ec823/bio-0.39.0/src/data_structures/suffix_array.rs","byte_start":381413,"byte_end":381453,"line_start":309,"line_end":309,"column_start":1,"column_end":41}},{"value":"/ assert_eq!(","span":{"file_name":"/Users/shelwitz/.cargo/registry/src/github.com-1ecc6299db9ec823/bio-0.39.0/src/data_structures/suffix_array.rs","byte_start":381454,"byte_end":381469,"line_start":310,"line_end":310,"column_start":1,"column_end":16}},{"value":"/     uncompressed,","span":{"file_name":"/Users/shelwitz/.cargo/registry/src/github.com-1ecc6299db9ec823/bio-0.39.0/src/data_structures/suffix_array.rs","byte_start":381470,"byte_end":381491,"line_start":311,"line_end":311,"column_start":1,"column_end":22}},{"value":"/     [-1, 0, 1, 1, 2, 1, 4, 0, 1, 3, 1, 1, 2, 0, 4, 0, 2, 2, 2, 1, 3, 3, -1]","span":{"file_name":"/Users/shelwitz/.cargo/registry/src/github.com-1ecc6299db9ec823/bio-0.39.0/src/data_structures/suffix_array.rs","byte_start":381492,"byte_end":381571,"line_start":312,"line_end":312,"column_start":1,"column_end":80}},{"value":"/ )","span":{"file_name":"/Users/shelwitz/.cargo/registry/src/github.com-1ecc6299db9ec823/bio-0.39.0/src/data_structures/suffix_array.rs","byte_start":381572,"byte_end":381577,"line_start":313,"line_end":313,"column_start":1,"column_end":6}},{"value":"/ ```","span":{"file_name":"/Users/shelwitz/.cargo/registry/src/github.com-1ecc6299db9ec823/bio-0.39.0/src/data_structures/suffix_array.rs","byte_start":381578,"byte_end":381585,"line_start":314,"line_end":314,"column_start":1,"column_end":8}}]},{"kind":"Function","id":{"krate":0,"index":1114},"span":{"file_name":"/Users/shelwitz/.cargo/registry/src/github.com-1ecc6299db9ec823/bio-0.39.0/src/data_structures/suffix_array.rs","byte_start":383481,"byte_end":383507,"line_start":381,"line_end":381,"column_start":8,"column_end":34},"name":"shortest_unique_substrings","qualname":"::data_structures::suffix_array::shortest_unique_substrings","value":"pub fn shortest_unique_substrings<SA: SuffixArray>(&SA, &LCPArray)\n-> Vec<Option<usize>>","parent":null,"children":[],"decl_id":null,"docs":" Calculate all locally shortest unique substrings from a given suffix and lcp array\n (Ohlebusch (2013). \"Bioinformatics Algorithms\". ISBN 978-3-00-041316-2).\n Complexity: O(n)","sig":null,"attributes":[{"value":"/ Calculate all locally shortest unique substrings from a given suffix and lcp array","span":{"file_name":"/Users/shelwitz/.cargo/registry/src/github.com-1ecc6299db9ec823/bio-0.39.0/src/data_structures/suffix_array.rs","byte_start":382405,"byte_end":382491,"line_start":341,"line_end":341,"column_start":1,"column_end":87}},{"value":"/ (Ohlebusch (2013). \"Bioinformatics Algorithms\". ISBN 978-3-00-041316-2).","span":{"file_name":"/Users/shelwitz/.cargo/registry/src/github.com-1ecc6299db9ec823/bio-0.39.0/src/data_structures/suffix_array.rs","byte_start":382492,"byte_end":382568,"line_start":342,"line_end":342,"column_start":1,"column_end":77}},{"value":"/ Complexity: O(n)","span":{"file_name":"/Users/shelwitz/.cargo/registry/src/github.com-1ecc6299db9ec823/bio-0.39.0/src/data_structures/suffix_array.rs","byte_start":382569,"byte_end":382589,"line_start":343,"line_end":343,"column_start":1,"column_end":21}},{"value":"/","span":{"file_name":"/Users/shelwitz/.cargo/registry/src/github.com-1ecc6299db9ec823/bio-0.39.0/src/data_structures/suffix_array.rs","byte_start":382590,"byte_end":382593,"line_start":344,"line_end":344,"column_start":1,"column_end":4}},{"value":"/ # Arguments","span":{"file_name":"/Users/shelwitz/.cargo/registry/src/github.com-1ecc6299db9ec823/bio-0.39.0/src/data_structures/suffix_array.rs","byte_start":382594,"byte_end":382609,"line_start":345,"line_end":345,"column_start":1,"column_end":16}},{"value":"/","span":{"file_name":"/Users/shelwitz/.cargo/registry/src/github.com-1ecc6299db9ec823/bio-0.39.0/src/data_structures/suffix_array.rs","byte_start":382610,"byte_end":382613,"line_start":346,"line_end":346,"column_start":1,"column_end":4}},{"value":"/ * `pos` - the suffix array","span":{"file_name":"/Users/shelwitz/.cargo/registry/src/github.com-1ecc6299db9ec823/bio-0.39.0/src/data_structures/suffix_array.rs","byte_start":382614,"byte_end":382644,"line_start":347,"line_end":347,"column_start":1,"column_end":31}},{"value":"/ * `lcp` - the lcp array","span":{"file_name":"/Users/shelwitz/.cargo/registry/src/github.com-1ecc6299db9ec823/bio-0.39.0/src/data_structures/suffix_array.rs","byte_start":382645,"byte_end":382672,"line_start":348,"line_end":348,"column_start":1,"column_end":28}},{"value":"/","span":{"file_name":"/Users/shelwitz/.cargo/registry/src/github.com-1ecc6299db9ec823/bio-0.39.0/src/data_structures/suffix_array.rs","byte_start":382673,"byte_end":382676,"line_start":349,"line_end":349,"column_start":1,"column_end":4}},{"value":"/ # Returns","span":{"file_name":"/Users/shelwitz/.cargo/registry/src/github.com-1ecc6299db9ec823/bio-0.39.0/src/data_structures/suffix_array.rs","byte_start":382677,"byte_end":382690,"line_start":350,"line_end":350,"column_start":1,"column_end":14}},{"value":"/","span":{"file_name":"/Users/shelwitz/.cargo/registry/src/github.com-1ecc6299db9ec823/bio-0.39.0/src/data_structures/suffix_array.rs","byte_start":382691,"byte_end":382694,"line_start":351,"line_end":351,"column_start":1,"column_end":4}},{"value":"/ An vector of the length of the shortest unique substring for each position of the text.","span":{"file_name":"/Users/shelwitz/.cargo/registry/src/github.com-1ecc6299db9ec823/bio-0.39.0/src/data_structures/suffix_array.rs","byte_start":382695,"byte_end":382786,"line_start":352,"line_end":352,"column_start":1,"column_end":92}},{"value":"/ Suffixes are excluded. If no unique substring starts at a given position, the entry is `None`.","span":{"file_name":"/Users/shelwitz/.cargo/registry/src/github.com-1ecc6299db9ec823/bio-0.39.0/src/data_structures/suffix_array.rs","byte_start":382787,"byte_end":382885,"line_start":353,"line_end":353,"column_start":1,"column_end":99}},{"value":"/","span":{"file_name":"/Users/shelwitz/.cargo/registry/src/github.com-1ecc6299db9ec823/bio-0.39.0/src/data_structures/suffix_array.rs","byte_start":382886,"byte_end":382889,"line_start":354,"line_end":354,"column_start":1,"column_end":4}},{"value":"/ # Example","span":{"file_name":"/Users/shelwitz/.cargo/registry/src/github.com-1ecc6299db9ec823/bio-0.39.0/src/data_structures/suffix_array.rs","byte_start":382890,"byte_end":382903,"line_start":355,"line_end":355,"column_start":1,"column_end":14}},{"value":"/","span":{"file_name":"/Users/shelwitz/.cargo/registry/src/github.com-1ecc6299db9ec823/bio-0.39.0/src/data_structures/suffix_array.rs","byte_start":382904,"byte_end":382907,"line_start":356,"line_end":356,"column_start":1,"column_end":4}},{"value":"/ ```","span":{"file_name":"/Users/shelwitz/.cargo/registry/src/github.com-1ecc6299db9ec823/bio-0.39.0/src/data_structures/suffix_array.rs","byte_start":382908,"byte_end":382915,"line_start":357,"line_end":357,"column_start":1,"column_end":8}},{"value":"/ use bio::data_structures::suffix_array::{lcp, shortest_unique_substrings, suffix_array};","span":{"file_name":"/Users/shelwitz/.cargo/registry/src/github.com-1ecc6299db9ec823/bio-0.39.0/src/data_structures/suffix_array.rs","byte_start":382916,"byte_end":383008,"line_start":358,"line_end":358,"column_start":1,"column_end":93}},{"value":"/ let text = b\"GCTGCTA$\";","span":{"file_name":"/Users/shelwitz/.cargo/registry/src/github.com-1ecc6299db9ec823/bio-0.39.0/src/data_structures/suffix_array.rs","byte_start":383009,"byte_end":383036,"line_start":359,"line_end":359,"column_start":1,"column_end":28}},{"value":"/ let pos = suffix_array(text);","span":{"file_name":"/Users/shelwitz/.cargo/registry/src/github.com-1ecc6299db9ec823/bio-0.39.0/src/data_structures/suffix_array.rs","byte_start":383037,"byte_end":383070,"line_start":360,"line_end":360,"column_start":1,"column_end":34}},{"value":"/","span":{"file_name":"/Users/shelwitz/.cargo/registry/src/github.com-1ecc6299db9ec823/bio-0.39.0/src/data_structures/suffix_array.rs","byte_start":383071,"byte_end":383074,"line_start":361,"line_end":361,"column_start":1,"column_end":4}},{"value":"/ // obtain compressed LCP array","span":{"file_name":"/Users/shelwitz/.cargo/registry/src/github.com-1ecc6299db9ec823/bio-0.39.0/src/data_structures/suffix_array.rs","byte_start":383075,"byte_end":383109,"line_start":362,"line_end":362,"column_start":1,"column_end":35}},{"value":"/ let lcp = lcp(text, &pos);","span":{"file_name":"/Users/shelwitz/.cargo/registry/src/github.com-1ecc6299db9ec823/bio-0.39.0/src/data_structures/suffix_array.rs","byte_start":383110,"byte_end":383140,"line_start":363,"line_end":363,"column_start":1,"column_end":31}},{"value":"/","span":{"file_name":"/Users/shelwitz/.cargo/registry/src/github.com-1ecc6299db9ec823/bio-0.39.0/src/data_structures/suffix_array.rs","byte_start":383141,"byte_end":383144,"line_start":364,"line_end":364,"column_start":1,"column_end":4}},{"value":"/ // calculate shortest unique substrings","span":{"file_name":"/Users/shelwitz/.cargo/registry/src/github.com-1ecc6299db9ec823/bio-0.39.0/src/data_structures/suffix_array.rs","byte_start":383145,"byte_end":383188,"line_start":365,"line_end":365,"column_start":1,"column_end":44}},{"value":"/ let sus = shortest_unique_substrings(&pos, &lcp);","span":{"file_name":"/Users/shelwitz/.cargo/registry/src/github.com-1ecc6299db9ec823/bio-0.39.0/src/data_structures/suffix_array.rs","byte_start":383189,"byte_end":383242,"line_start":366,"line_end":366,"column_start":1,"column_end":54}},{"value":"/ assert_eq!(","span":{"file_name":"/Users/shelwitz/.cargo/registry/src/github.com-1ecc6299db9ec823/bio-0.39.0/src/data_structures/suffix_array.rs","byte_start":383243,"byte_end":383258,"line_start":367,"line_end":367,"column_start":1,"column_end":16}},{"value":"/     sus,","span":{"file_name":"/Users/shelwitz/.cargo/registry/src/github.com-1ecc6299db9ec823/bio-0.39.0/src/data_structures/suffix_array.rs","byte_start":383259,"byte_end":383271,"line_start":368,"line_end":368,"column_start":1,"column_end":13}},{"value":"/     [","span":{"file_name":"/Users/shelwitz/.cargo/registry/src/github.com-1ecc6299db9ec823/bio-0.39.0/src/data_structures/suffix_array.rs","byte_start":383272,"byte_end":383281,"line_start":369,"line_end":369,"column_start":1,"column_end":10}},{"value":"/         Some(4),","span":{"file_name":"/Users/shelwitz/.cargo/registry/src/github.com-1ecc6299db9ec823/bio-0.39.0/src/data_structures/suffix_array.rs","byte_start":383282,"byte_end":383302,"line_start":370,"line_end":370,"column_start":1,"column_end":21}},{"value":"/         Some(3),","span":{"file_name":"/Users/shelwitz/.cargo/registry/src/github.com-1ecc6299db9ec823/bio-0.39.0/src/data_structures/suffix_array.rs","byte_start":383303,"byte_end":383323,"line_start":371,"line_end":371,"column_start":1,"column_end":21}},{"value":"/         Some(2),","span":{"file_name":"/Users/shelwitz/.cargo/registry/src/github.com-1ecc6299db9ec823/bio-0.39.0/src/data_structures/suffix_array.rs","byte_start":383324,"byte_end":383344,"line_start":372,"line_end":372,"column_start":1,"column_end":21}},{"value":"/         Some(4),","span":{"file_name":"/Users/shelwitz/.cargo/registry/src/github.com-1ecc6299db9ec823/bio-0.39.0/src/data_structures/suffix_array.rs","byte_start":383345,"byte_end":383365,"line_start":373,"line_end":373,"column_start":1,"column_end":21}},{"value":"/         Some(3),","span":{"file_name":"/Users/shelwitz/.cargo/registry/src/github.com-1ecc6299db9ec823/bio-0.39.0/src/data_structures/suffix_array.rs","byte_start":383366,"byte_end":383386,"line_start":374,"line_end":374,"column_start":1,"column_end":21}},{"value":"/         Some(2),","span":{"file_name":"/Users/shelwitz/.cargo/registry/src/github.com-1ecc6299db9ec823/bio-0.39.0/src/data_structures/suffix_array.rs","byte_start":383387,"byte_end":383407,"line_start":375,"line_end":375,"column_start":1,"column_end":21}},{"value":"/         Some(1),","span":{"file_name":"/Users/shelwitz/.cargo/registry/src/github.com-1ecc6299db9ec823/bio-0.39.0/src/data_structures/suffix_array.rs","byte_start":383408,"byte_end":383428,"line_start":376,"line_end":376,"column_start":1,"column_end":21}},{"value":"/         Some(1)","span":{"file_name":"/Users/shelwitz/.cargo/registry/src/github.com-1ecc6299db9ec823/bio-0.39.0/src/data_structures/suffix_array.rs","byte_start":383429,"byte_end":383448,"line_start":377,"line_end":377,"column_start":1,"column_end":20}},{"value":"/     ]","span":{"file_name":"/Users/shelwitz/.cargo/registry/src/github.com-1ecc6299db9ec823/bio-0.39.0/src/data_structures/suffix_array.rs","byte_start":383449,"byte_end":383458,"line_start":378,"line_end":378,"column_start":1,"column_end":10}},{"value":"/ );","span":{"file_name":"/Users/shelwitz/.cargo/registry/src/github.com-1ecc6299db9ec823/bio-0.39.0/src/data_structures/suffix_array.rs","byte_start":383459,"byte_end":383465,"line_start":379,"line_end":379,"column_start":1,"column_end":7}},{"value":"/ ```","span":{"file_name":"/Users/shelwitz/.cargo/registry/src/github.com-1ecc6299db9ec823/bio-0.39.0/src/data_structures/suffix_array.rs","byte_start":383466,"byte_end":383473,"line_start":380,"line_end":380,"column_start":1,"column_end":8}}]},{"kind":"Mod","id":{"krate":0,"index":1151},"span":{"file_name":"/Users/shelwitz/.cargo/registry/src/github.com-1ecc6299db9ec823/bio-0.39.0/src/data_structures/wavelet_matrix.rs","byte_start":0,"byte_end":0,"line_start":1,"line_end":1,"column_start":1,"column_end":1},"name":"wavelet_matrix","qualname":"::data_structures::wavelet_matrix","value":"/Users/shelwitz/.cargo/registry/src/github.com-1ecc6299db9ec823/bio-0.39.0/src/data_structures/wavelet_matrix.rs","parent":null,"children":[{"krate":0,"index":1152},{"krate":0,"index":1155},{"krate":0,"index":1158},{"krate":0,"index":1161},{"krate":0,"index":4523},{"krate":0,"index":4528},{"krate":0,"index":4534},{"krate":0,"index":1163},{"krate":0,"index":1164}],"decl_id":null,"docs":" Wavelet Matrix data structure for DNA alphabet.\n The implementation is based on the paper\n [Claude Francisco and Gonzalo Navarro. The wavelet matrix. SPIRE (2012)](https://doi.org/10.1007/978-3-642-34109-0_18)","sig":null,"attributes":[{"value":"/ Wavelet Matrix data structure for DNA alphabet.","span":{"file_name":"/Users/shelwitz/.cargo/registry/src/github.com-1ecc6299db9ec823/bio-0.39.0/src/data_structures/wavelet_matrix.rs","byte_start":404691,"byte_end":404742,"line_start":1,"line_end":1,"column_start":1,"column_end":52}},{"value":"/ The implementation is based on the paper","span":{"file_name":"/Users/shelwitz/.cargo/registry/src/github.com-1ecc6299db9ec823/bio-0.39.0/src/data_structures/wavelet_matrix.rs","byte_start":404743,"byte_end":404787,"line_start":2,"line_end":2,"column_start":1,"column_end":45}},{"value":"/ [Claude Francisco and Gonzalo Navarro. The wavelet matrix. SPIRE (2012)](https://doi.org/10.1007/978-3-642-34109-0_18)","span":{"file_name":"/Users/shelwitz/.cargo/registry/src/github.com-1ecc6299db9ec823/bio-0.39.0/src/data_structures/wavelet_matrix.rs","byte_start":404788,"byte_end":404910,"line_start":3,"line_end":3,"column_start":1,"column_end":123}},{"value":"/","span":{"file_name":"/Users/shelwitz/.cargo/registry/src/github.com-1ecc6299db9ec823/bio-0.39.0/src/data_structures/wavelet_matrix.rs","byte_start":404911,"byte_end":404914,"line_start":4,"line_end":4,"column_start":1,"column_end":4}},{"value":"/ # Example","span":{"file_name":"/Users/shelwitz/.cargo/registry/src/github.com-1ecc6299db9ec823/bio-0.39.0/src/data_structures/wavelet_matrix.rs","byte_start":404915,"byte_end":404928,"line_start":5,"line_end":5,"column_start":1,"column_end":14}},{"value":"/","span":{"file_name":"/Users/shelwitz/.cargo/registry/src/github.com-1ecc6299db9ec823/bio-0.39.0/src/data_structures/wavelet_matrix.rs","byte_start":404929,"byte_end":404932,"line_start":6,"line_end":6,"column_start":1,"column_end":4}},{"value":"/ ```","span":{"file_name":"/Users/shelwitz/.cargo/registry/src/github.com-1ecc6299db9ec823/bio-0.39.0/src/data_structures/wavelet_matrix.rs","byte_start":404933,"byte_end":404940,"line_start":7,"line_end":7,"column_start":1,"column_end":8}},{"value":"/ use bio::data_structures::wavelet_matrix::WaveletMatrix;","span":{"file_name":"/Users/shelwitz/.cargo/registry/src/github.com-1ecc6299db9ec823/bio-0.39.0/src/data_structures/wavelet_matrix.rs","byte_start":404941,"byte_end":405001,"line_start":8,"line_end":8,"column_start":1,"column_end":61}},{"value":"/ let text = b\"AANGGT$ACCNTT$\";","span":{"file_name":"/Users/shelwitz/.cargo/registry/src/github.com-1ecc6299db9ec823/bio-0.39.0/src/data_structures/wavelet_matrix.rs","byte_start":405002,"byte_end":405035,"line_start":9,"line_end":9,"column_start":1,"column_end":34}},{"value":"/ let wm = WaveletMatrix::new(text);","span":{"file_name":"/Users/shelwitz/.cargo/registry/src/github.com-1ecc6299db9ec823/bio-0.39.0/src/data_structures/wavelet_matrix.rs","byte_start":405036,"byte_end":405074,"line_start":10,"line_end":10,"column_start":1,"column_end":39}},{"value":"/ assert_eq!(wm.rank(b'A', 0), 1);","span":{"file_name":"/Users/shelwitz/.cargo/registry/src/github.com-1ecc6299db9ec823/bio-0.39.0/src/data_structures/wavelet_matrix.rs","byte_start":405075,"byte_end":405111,"line_start":11,"line_end":11,"column_start":1,"column_end":37}},{"value":"/ assert_eq!(wm.rank(b'G', 9), 2);","span":{"file_name":"/Users/shelwitz/.cargo/registry/src/github.com-1ecc6299db9ec823/bio-0.39.0/src/data_structures/wavelet_matrix.rs","byte_start":405112,"byte_end":405148,"line_start":12,"line_end":12,"column_start":1,"column_end":37}},{"value":"/ assert_eq!(wm.rank(b'T', 13), 3);","span":{"file_name":"/Users/shelwitz/.cargo/registry/src/github.com-1ecc6299db9ec823/bio-0.39.0/src/data_structures/wavelet_matrix.rs","byte_start":405149,"byte_end":405186,"line_start":13,"line_end":13,"column_start":1,"column_end":38}},{"value":"/ ```","span":{"file_name":"/Users/shelwitz/.cargo/registry/src/github.com-1ecc6299db9ec823/bio-0.39.0/src/data_structures/wavelet_matrix.rs","byte_start":405187,"byte_end":405194,"line_start":14,"line_end":14,"column_start":1,"column_end":8}}]},{"kind":"Struct","id":{"krate":0,"index":4523},"span":{"file_name":"/Users/shelwitz/.cargo/registry/src/github.com-1ecc6299db9ec823/bio-0.39.0/src/data_structures/wavelet_matrix.rs","byte_start":405878,"byte_end":405891,"line_start":37,"line_end":37,"column_start":12,"column_end":25},"name":"WaveletMatrix","qualname":"::data_structures::wavelet_matrix::WaveletMatrix","value":"WaveletMatrix {  }","parent":null,"children":[{"krate":0,"index":4524},{"krate":0,"index":4525},{"krate":0,"index":4526},{"krate":0,"index":4527}],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":1165},"span":{"file_name":"/Users/shelwitz/.cargo/registry/src/github.com-1ecc6299db9ec823/bio-0.39.0/src/data_structures/wavelet_matrix.rs","byte_start":406677,"byte_end":406680,"line_start":68,"line_end":68,"column_start":12,"column_end":15},"name":"new","qualname":"<WaveletMatrix>::new","value":"pub fn new(&[u8]) -> Self","parent":null,"children":[],"decl_id":null,"docs":" Construct a new instance of the wavelet matrix of given text of length n (DNA alphabet plus sentinel symbol).\n Complexity: O(n).\n","sig":null,"attributes":[{"value":"/ Construct a new instance of the wavelet matrix of given text of length n (DNA alphabet plus sentinel symbol).","span":{"file_name":"/Users/shelwitz/.cargo/registry/src/github.com-1ecc6299db9ec823/bio-0.39.0/src/data_structures/wavelet_matrix.rs","byte_start":406526,"byte_end":406639,"line_start":66,"line_end":66,"column_start":5,"column_end":118}},{"value":"/ Complexity: O(n).","span":{"file_name":"/Users/shelwitz/.cargo/registry/src/github.com-1ecc6299db9ec823/bio-0.39.0/src/data_structures/wavelet_matrix.rs","byte_start":406644,"byte_end":406665,"line_start":67,"line_end":67,"column_start":5,"column_end":26}}]},{"kind":"Method","id":{"krate":0,"index":1168},"span":{"file_name":"/Users/shelwitz/.cargo/registry/src/github.com-1ecc6299db9ec823/bio-0.39.0/src/data_structures/wavelet_matrix.rs","byte_start":408600,"byte_end":408604,"line_start":132,"line_end":132,"column_start":12,"column_end":16},"name":"rank","qualname":"<WaveletMatrix>::rank","value":"pub fn rank(&Self, u8, u64) -> u64","parent":null,"children":[],"decl_id":null,"docs":" Compute the number of occurrences of symbol val in the original text up to position p (inclusive).\n Complexity O(1).\n","sig":null,"attributes":[{"value":"/ Compute the number of occurrences of symbol val in the original text up to position p (inclusive).","span":{"file_name":"/Users/shelwitz/.cargo/registry/src/github.com-1ecc6299db9ec823/bio-0.39.0/src/data_structures/wavelet_matrix.rs","byte_start":408461,"byte_end":408563,"line_start":130,"line_end":130,"column_start":5,"column_end":107}},{"value":"/ Complexity O(1).","span":{"file_name":"/Users/shelwitz/.cargo/registry/src/github.com-1ecc6299db9ec823/bio-0.39.0/src/data_structures/wavelet_matrix.rs","byte_start":408568,"byte_end":408588,"line_start":131,"line_end":131,"column_start":5,"column_end":25}}]},{"kind":"Mod","id":{"krate":0,"index":1169},"span":{"file_name":"/Users/shelwitz/.cargo/registry/src/github.com-1ecc6299db9ec823/bio-0.39.0/src/io/mod.rs","byte_start":0,"byte_end":0,"line_start":1,"line_end":1,"column_start":1,"column_end":1},"name":"io","qualname":"::io","value":"/Users/shelwitz/.cargo/registry/src/github.com-1ecc6299db9ec823/bio-0.39.0/src/io/mod.rs","parent":null,"children":[{"krate":0,"index":1170},{"krate":0,"index":1258},{"krate":0,"index":1400},{"krate":0,"index":1491}],"decl_id":null,"docs":" Readers and writers for common bioinformatics file formats.\n","sig":null,"attributes":[{"value":"/ Readers and writers for common bioinformatics file formats.","span":{"file_name":"/Users/shelwitz/.cargo/registry/src/github.com-1ecc6299db9ec823/bio-0.39.0/src/io/mod.rs","byte_start":413926,"byte_end":413989,"line_start":1,"line_end":1,"column_start":1,"column_end":64}}]},{"kind":"Mod","id":{"krate":0,"index":1170},"span":{"file_name":"/Users/shelwitz/.cargo/registry/src/github.com-1ecc6299db9ec823/bio-0.39.0/src/io/bed.rs","byte_start":0,"byte_end":0,"line_start":1,"line_end":1,"column_start":1,"column_end":1},"name":"bed","qualname":"::io::bed","value":"/Users/shelwitz/.cargo/registry/src/github.com-1ecc6299db9ec823/bio-0.39.0/src/io/bed.rs","parent":null,"children":[{"krate":0,"index":1171},{"krate":0,"index":1174},{"krate":0,"index":1177},{"krate":0,"index":1180},{"krate":0,"index":1183},{"krate":0,"index":1184},{"krate":0,"index":1186},{"krate":0,"index":1189},{"krate":0,"index":1192},{"krate":0,"index":1195},{"krate":0,"index":1198},{"krate":0,"index":1201},{"krate":0,"index":4581},{"krate":0,"index":4584},{"krate":0,"index":1204},{"krate":0,"index":1208},{"krate":0,"index":1212},{"krate":0,"index":1216},{"krate":0,"index":4587},{"krate":0,"index":4590},{"krate":0,"index":1221},{"krate":0,"index":1224},{"krate":0,"index":4593},{"krate":0,"index":4597},{"krate":0,"index":4599},{"krate":0,"index":4605},{"krate":0,"index":4607},{"krate":0,"index":4654},{"krate":0,"index":1228},{"krate":0,"index":1243},{"krate":0,"index":1246},{"krate":0,"index":1250},{"krate":0,"index":1254}],"decl_id":null,"docs":" BED format reading and writing.","sig":null,"attributes":[{"value":"/ BED format reading and writing.","span":{"file_name":"/Users/shelwitz/.cargo/registry/src/github.com-1ecc6299db9ec823/bio-0.39.0/src/io/bed.rs","byte_start":414300,"byte_end":414335,"line_start":6,"line_end":6,"column_start":1,"column_end":36}},{"value":"/","span":{"file_name":"/Users/shelwitz/.cargo/registry/src/github.com-1ecc6299db9ec823/bio-0.39.0/src/io/bed.rs","byte_start":414336,"byte_end":414339,"line_start":7,"line_end":7,"column_start":1,"column_end":4}},{"value":"/ # Example","span":{"file_name":"/Users/shelwitz/.cargo/registry/src/github.com-1ecc6299db9ec823/bio-0.39.0/src/io/bed.rs","byte_start":414340,"byte_end":414353,"line_start":8,"line_end":8,"column_start":1,"column_end":14}},{"value":"/","span":{"file_name":"/Users/shelwitz/.cargo/registry/src/github.com-1ecc6299db9ec823/bio-0.39.0/src/io/bed.rs","byte_start":414354,"byte_end":414357,"line_start":9,"line_end":9,"column_start":1,"column_end":4}},{"value":"/ ```","span":{"file_name":"/Users/shelwitz/.cargo/registry/src/github.com-1ecc6299db9ec823/bio-0.39.0/src/io/bed.rs","byte_start":414358,"byte_end":414365,"line_start":10,"line_end":10,"column_start":1,"column_end":8}},{"value":"/ use bio::io::bed;","span":{"file_name":"/Users/shelwitz/.cargo/registry/src/github.com-1ecc6299db9ec823/bio-0.39.0/src/io/bed.rs","byte_start":414366,"byte_end":414387,"line_start":11,"line_end":11,"column_start":1,"column_end":22}},{"value":"/ let example = b\"1\\t5\\t5000\\tname1\\t0.5\";","span":{"file_name":"/Users/shelwitz/.cargo/registry/src/github.com-1ecc6299db9ec823/bio-0.39.0/src/io/bed.rs","byte_start":414388,"byte_end":414432,"line_start":12,"line_end":12,"column_start":1,"column_end":45}},{"value":"/ let mut reader = bed::Reader::new(&example[..]);","span":{"file_name":"/Users/shelwitz/.cargo/registry/src/github.com-1ecc6299db9ec823/bio-0.39.0/src/io/bed.rs","byte_start":414433,"byte_end":414485,"line_start":13,"line_end":13,"column_start":1,"column_end":53}},{"value":"/ let mut writer = bed::Writer::new(vec![]);","span":{"file_name":"/Users/shelwitz/.cargo/registry/src/github.com-1ecc6299db9ec823/bio-0.39.0/src/io/bed.rs","byte_start":414486,"byte_end":414532,"line_start":14,"line_end":14,"column_start":1,"column_end":47}},{"value":"/ for record in reader.records() {","span":{"file_name":"/Users/shelwitz/.cargo/registry/src/github.com-1ecc6299db9ec823/bio-0.39.0/src/io/bed.rs","byte_start":414533,"byte_end":414569,"line_start":15,"line_end":15,"column_start":1,"column_end":37}},{"value":"/     let rec = record.expect(\"Error reading record.\");","span":{"file_name":"/Users/shelwitz/.cargo/registry/src/github.com-1ecc6299db9ec823/bio-0.39.0/src/io/bed.rs","byte_start":414570,"byte_end":414627,"line_start":16,"line_end":16,"column_start":1,"column_end":58}},{"value":"/     println!(\"{}\", rec.chrom());","span":{"file_name":"/Users/shelwitz/.cargo/registry/src/github.com-1ecc6299db9ec823/bio-0.39.0/src/io/bed.rs","byte_start":414628,"byte_end":414664,"line_start":17,"line_end":17,"column_start":1,"column_end":37}},{"value":"/     writer.write(&rec).expect(\"Error writing record.\");","span":{"file_name":"/Users/shelwitz/.cargo/registry/src/github.com-1ecc6299db9ec823/bio-0.39.0/src/io/bed.rs","byte_start":414665,"byte_end":414724,"line_start":18,"line_end":18,"column_start":1,"column_end":60}},{"value":"/ }","span":{"file_name":"/Users/shelwitz/.cargo/registry/src/github.com-1ecc6299db9ec823/bio-0.39.0/src/io/bed.rs","byte_start":414725,"byte_end":414730,"line_start":19,"line_end":19,"column_start":1,"column_end":6}},{"value":"/ ```","span":{"file_name":"/Users/shelwitz/.cargo/registry/src/github.com-1ecc6299db9ec823/bio-0.39.0/src/io/bed.rs","byte_start":414731,"byte_end":414738,"line_start":20,"line_end":20,"column_start":1,"column_end":8}}]},{"kind":"Struct","id":{"krate":0,"index":4581},"span":{"file_name":"/Users/shelwitz/.cargo/registry/src/github.com-1ecc6299db9ec823/bio-0.39.0/src/io/bed.rs","byte_start":415023,"byte_end":415029,"line_start":37,"line_end":37,"column_start":12,"column_end":18},"name":"Reader","qualname":"::io::bed::Reader","value":"Reader {  }","parent":null,"children":[{"krate":0,"index":4583}],"decl_id":null,"docs":" A BED reader.\n","sig":null,"attributes":[{"value":"/ A BED reader.","span":{"file_name":"/Users/shelwitz/.cargo/registry/src/github.com-1ecc6299db9ec823/bio-0.39.0/src/io/bed.rs","byte_start":414977,"byte_end":414994,"line_start":35,"line_end":35,"column_start":1,"column_end":18}}]},{"kind":"Method","id":{"krate":0,"index":1205},"span":{"file_name":"/Users/shelwitz/.cargo/registry/src/github.com-1ecc6299db9ec823/bio-0.39.0/src/io/bed.rs","byte_start":415147,"byte_end":415156,"line_start":43,"line_end":43,"column_start":12,"column_end":21},"name":"from_file","qualname":"<Reader<fs::File>>::from_file","value":"pub fn from_file<P: AsRef<Path> + std::fmt::Debug>(P) -> anyhow::Result<Self>","parent":null,"children":[],"decl_id":null,"docs":" Read from a given file path.\n","sig":null,"attributes":[{"value":"/ Read from a given file path.","span":{"file_name":"/Users/shelwitz/.cargo/registry/src/github.com-1ecc6299db9ec823/bio-0.39.0/src/io/bed.rs","byte_start":415103,"byte_end":415135,"line_start":42,"line_end":42,"column_start":5,"column_end":37}}]},{"kind":"Method","id":{"krate":0,"index":1210},"span":{"file_name":"/Users/shelwitz/.cargo/registry/src/github.com-1ecc6299db9ec823/bio-0.39.0/src/io/bed.rs","byte_start":415447,"byte_end":415450,"line_start":52,"line_end":52,"column_start":12,"column_end":15},"name":"new","qualname":"<Reader<R>>::new","value":"pub fn new(R) -> Self","parent":null,"children":[],"decl_id":null,"docs":" Read from a given reader.\n","sig":null,"attributes":[{"value":"/ Read from a given reader.","span":{"file_name":"/Users/shelwitz/.cargo/registry/src/github.com-1ecc6299db9ec823/bio-0.39.0/src/io/bed.rs","byte_start":415406,"byte_end":415435,"line_start":51,"line_end":51,"column_start":5,"column_end":34}}]},{"kind":"Method","id":{"krate":0,"index":1211},"span":{"file_name":"/Users/shelwitz/.cargo/registry/src/github.com-1ecc6299db9ec823/bio-0.39.0/src/io/bed.rs","byte_start":415704,"byte_end":415711,"line_start":62,"line_end":62,"column_start":12,"column_end":19},"name":"records","qualname":"<Reader<R>>::records","value":"pub fn records(&mut Self) -> Records<, R>","parent":null,"children":[],"decl_id":null,"docs":" Iterate over all records.\n","sig":null,"attributes":[{"value":"/ Iterate over all records.","span":{"file_name":"/Users/shelwitz/.cargo/registry/src/github.com-1ecc6299db9ec823/bio-0.39.0/src/io/bed.rs","byte_start":415663,"byte_end":415692,"line_start":61,"line_end":61,"column_start":5,"column_end":34}}]},{"kind":"Struct","id":{"krate":0,"index":1212},"span":{"file_name":"/Users/shelwitz/.cargo/registry/src/github.com-1ecc6299db9ec823/bio-0.39.0/src/io/bed.rs","byte_start":415884,"byte_end":415891,"line_start":70,"line_end":70,"column_start":12,"column_end":19},"name":"Records","qualname":"::io::bed::Records","value":"Records {  }","parent":null,"children":[{"krate":0,"index":1215}],"decl_id":null,"docs":" An iterator over the records of a BED file.\n","sig":null,"attributes":[{"value":"/ An iterator over the records of a BED file.","span":{"file_name":"/Users/shelwitz/.cargo/registry/src/github.com-1ecc6299db9ec823/bio-0.39.0/src/io/bed.rs","byte_start":415825,"byte_end":415872,"line_start":69,"line_end":69,"column_start":1,"column_end":48}}]},{"kind":"Struct","id":{"krate":0,"index":4587},"span":{"file_name":"/Users/shelwitz/.cargo/registry/src/github.com-1ecc6299db9ec823/bio-0.39.0/src/io/bed.rs","byte_start":416196,"byte_end":416202,"line_start":84,"line_end":84,"column_start":12,"column_end":18},"name":"Writer","qualname":"::io::bed::Writer","value":"Writer {  }","parent":null,"children":[{"krate":0,"index":4589}],"decl_id":null,"docs":" A BED writer.\n","sig":null,"attributes":[{"value":"/ A BED writer.","span":{"file_name":"/Users/shelwitz/.cargo/registry/src/github.com-1ecc6299db9ec823/bio-0.39.0/src/io/bed.rs","byte_start":416150,"byte_end":416167,"line_start":82,"line_end":82,"column_start":1,"column_end":18}}]},{"kind":"Method","id":{"krate":0,"index":1222},"span":{"file_name":"/Users/shelwitz/.cargo/registry/src/github.com-1ecc6299db9ec823/bio-0.39.0/src/io/bed.rs","byte_start":416364,"byte_end":416371,"line_start":91,"line_end":91,"column_start":12,"column_end":19},"name":"to_file","qualname":"<Writer<fs::File>>::to_file","value":"pub fn to_file<P: AsRef<Path>>(P) -> io::Result<Self>","parent":null,"children":[],"decl_id":null,"docs":" Write to a given file path.\n","sig":null,"attributes":[{"value":"/ Write to a given file path.","span":{"file_name":"/Users/shelwitz/.cargo/registry/src/github.com-1ecc6299db9ec823/bio-0.39.0/src/io/bed.rs","byte_start":416277,"byte_end":416308,"line_start":89,"line_end":89,"column_start":5,"column_end":36}},{"value":"allow(clippy :: wrong_self_convention)","span":{"file_name":"/Users/shelwitz/.cargo/registry/src/github.com-1ecc6299db9ec823/bio-0.39.0/src/io/bed.rs","byte_start":416313,"byte_end":416352,"line_start":90,"line_end":90,"column_start":5,"column_end":44}}]},{"kind":"Method","id":{"krate":0,"index":1226},"span":{"file_name":"/Users/shelwitz/.cargo/registry/src/github.com-1ecc6299db9ec823/bio-0.39.0/src/io/bed.rs","byte_start":416551,"byte_end":416554,"line_start":98,"line_end":98,"column_start":12,"column_end":15},"name":"new","qualname":"<Writer<W>>::new","value":"pub fn new(W) -> Self","parent":null,"children":[],"decl_id":null,"docs":" Write to a given writer.\n","sig":null,"attributes":[{"value":"/ Write to a given writer.","span":{"file_name":"/Users/shelwitz/.cargo/registry/src/github.com-1ecc6299db9ec823/bio-0.39.0/src/io/bed.rs","byte_start":416511,"byte_end":416539,"line_start":97,"line_end":97,"column_start":5,"column_end":33}}]},{"kind":"Method","id":{"krate":0,"index":1227},"span":{"file_name":"/Users/shelwitz/.cargo/registry/src/github.com-1ecc6299db9ec823/bio-0.39.0/src/io/bed.rs","byte_start":416804,"byte_end":416809,"line_start":108,"line_end":108,"column_start":12,"column_end":17},"name":"write","qualname":"<Writer<W>>::write","value":"pub fn write(&mut Self, &Record) -> csv::Result<()>","parent":null,"children":[],"decl_id":null,"docs":" Write a given BED record.\n","sig":null,"attributes":[{"value":"/ Write a given BED record.","span":{"file_name":"/Users/shelwitz/.cargo/registry/src/github.com-1ecc6299db9ec823/bio-0.39.0/src/io/bed.rs","byte_start":416763,"byte_end":416792,"line_start":107,"line_end":107,"column_start":5,"column_end":34}}]},{"kind":"Struct","id":{"krate":0,"index":4593},"span":{"file_name":"/Users/shelwitz/.cargo/registry/src/github.com-1ecc6299db9ec823/bio-0.39.0/src/io/bed.rs","byte_start":417314,"byte_end":417320,"line_start":122,"line_end":122,"column_start":12,"column_end":18},"name":"Record","qualname":"::io::bed::Record","value":"Record {  }","parent":null,"children":[{"krate":0,"index":4594},{"krate":0,"index":4595},{"krate":0,"index":4596},{"krate":0,"index":4656}],"decl_id":null,"docs":" A BED record as defined by BEDtools\n (http://bedtools.readthedocs.org/en/latest/content/general-usage.html)\n","sig":null,"attributes":[{"value":"/ A BED record as defined by BEDtools","span":{"file_name":"/Users/shelwitz/.cargo/registry/src/github.com-1ecc6299db9ec823/bio-0.39.0/src/io/bed.rs","byte_start":417131,"byte_end":417170,"line_start":119,"line_end":119,"column_start":1,"column_end":40}},{"value":"/ (http://bedtools.readthedocs.org/en/latest/content/general-usage.html)","span":{"file_name":"/Users/shelwitz/.cargo/registry/src/github.com-1ecc6299db9ec823/bio-0.39.0/src/io/bed.rs","byte_start":417171,"byte_end":417245,"line_start":120,"line_end":120,"column_start":1,"column_end":75}}]},{"kind":"Method","id":{"krate":0,"index":1229},"span":{"file_name":"/Users/shelwitz/.cargo/registry/src/github.com-1ecc6299db9ec823/bio-0.39.0/src/io/bed.rs","byte_start":417477,"byte_end":417480,"line_start":132,"line_end":132,"column_start":12,"column_end":15},"name":"new","qualname":"<Record>::new","value":"pub fn new() -> Self","parent":null,"children":[],"decl_id":null,"docs":" Create a new BED record.\n","sig":null,"attributes":[{"value":"/ Create a new BED record.","span":{"file_name":"/Users/shelwitz/.cargo/registry/src/github.com-1ecc6299db9ec823/bio-0.39.0/src/io/bed.rs","byte_start":417437,"byte_end":417465,"line_start":131,"line_end":131,"column_start":5,"column_end":33}}]},{"kind":"Method","id":{"krate":0,"index":1230},"span":{"file_name":"/Users/shelwitz/.cargo/registry/src/github.com-1ecc6299db9ec823/bio-0.39.0/src/io/bed.rs","byte_start":417674,"byte_end":417679,"line_start":142,"line_end":142,"column_start":12,"column_end":17},"name":"chrom","qualname":"<Record>::chrom","value":"pub fn chrom(&Self) -> &str","parent":null,"children":[],"decl_id":null,"docs":" Chromosome of the feature.\n","sig":null,"attributes":[{"value":"/ Chromosome of the feature.","span":{"file_name":"/Users/shelwitz/.cargo/registry/src/github.com-1ecc6299db9ec823/bio-0.39.0/src/io/bed.rs","byte_start":417632,"byte_end":417662,"line_start":141,"line_end":141,"column_start":5,"column_end":35}}]},{"kind":"Method","id":{"krate":0,"index":1231},"span":{"file_name":"/Users/shelwitz/.cargo/registry/src/github.com-1ecc6299db9ec823/bio-0.39.0/src/io/bed.rs","byte_start":417780,"byte_end":417785,"line_start":147,"line_end":147,"column_start":12,"column_end":17},"name":"start","qualname":"<Record>::start","value":"pub fn start(&Self) -> u64","parent":null,"children":[],"decl_id":null,"docs":" Start position of feature (0-based).\n","sig":null,"attributes":[{"value":"/ Start position of feature (0-based).","span":{"file_name":"/Users/shelwitz/.cargo/registry/src/github.com-1ecc6299db9ec823/bio-0.39.0/src/io/bed.rs","byte_start":417728,"byte_end":417768,"line_start":146,"line_end":146,"column_start":5,"column_end":45}}]},{"kind":"Method","id":{"krate":0,"index":1232},"span":{"file_name":"/Users/shelwitz/.cargo/registry/src/github.com-1ecc6299db9ec823/bio-0.39.0/src/io/bed.rs","byte_start":417896,"byte_end":417899,"line_start":152,"line_end":152,"column_start":12,"column_end":15},"name":"end","qualname":"<Record>::end","value":"pub fn end(&Self) -> u64","parent":null,"children":[],"decl_id":null,"docs":" End position of feature (0-based, not included).\n","sig":null,"attributes":[{"value":"/ End position of feature (0-based, not included).","span":{"file_name":"/Users/shelwitz/.cargo/registry/src/github.com-1ecc6299db9ec823/bio-0.39.0/src/io/bed.rs","byte_start":417832,"byte_end":417884,"line_start":151,"line_end":151,"column_start":5,"column_end":57}}]},{"kind":"Method","id":{"krate":0,"index":1233},"span":{"file_name":"/Users/shelwitz/.cargo/registry/src/github.com-1ecc6299db9ec823/bio-0.39.0/src/io/bed.rs","byte_start":417980,"byte_end":417984,"line_start":157,"line_end":157,"column_start":12,"column_end":16},"name":"name","qualname":"<Record>::name","value":"pub fn name(&Self) -> Option<&str>","parent":null,"children":[],"decl_id":null,"docs":" Name of the feature.\n","sig":null,"attributes":[{"value":"/ Name of the feature.","span":{"file_name":"/Users/shelwitz/.cargo/registry/src/github.com-1ecc6299db9ec823/bio-0.39.0/src/io/bed.rs","byte_start":417944,"byte_end":417968,"line_start":156,"line_end":156,"column_start":5,"column_end":29}}]},{"kind":"Method","id":{"krate":0,"index":1234},"span":{"file_name":"/Users/shelwitz/.cargo/registry/src/github.com-1ecc6299db9ec823/bio-0.39.0/src/io/bed.rs","byte_start":418078,"byte_end":418083,"line_start":162,"line_end":162,"column_start":12,"column_end":17},"name":"score","qualname":"<Record>::score","value":"pub fn score(&Self) -> Option<&str>","parent":null,"children":[],"decl_id":null,"docs":" Score of the feature.\n","sig":null,"attributes":[{"value":"/ Score of the feature.","span":{"file_name":"/Users/shelwitz/.cargo/registry/src/github.com-1ecc6299db9ec823/bio-0.39.0/src/io/bed.rs","byte_start":418041,"byte_end":418066,"line_start":161,"line_end":161,"column_start":5,"column_end":30}}]},{"kind":"Method","id":{"krate":0,"index":1235},"span":{"file_name":"/Users/shelwitz/.cargo/registry/src/github.com-1ecc6299db9ec823/bio-0.39.0/src/io/bed.rs","byte_start":418178,"byte_end":418184,"line_start":167,"line_end":167,"column_start":12,"column_end":18},"name":"strand","qualname":"<Record>::strand","value":"pub fn strand(&Self) -> Option<strand::Strand>","parent":null,"children":[],"decl_id":null,"docs":" Strand of the feature.\n","sig":null,"attributes":[{"value":"/ Strand of the feature.","span":{"file_name":"/Users/shelwitz/.cargo/registry/src/github.com-1ecc6299db9ec823/bio-0.39.0/src/io/bed.rs","byte_start":418140,"byte_end":418166,"line_start":166,"line_end":166,"column_start":5,"column_end":31}}]},{"kind":"Method","id":{"krate":0,"index":1236},"span":{"file_name":"/Users/shelwitz/.cargo/registry/src/github.com-1ecc6299db9ec823/bio-0.39.0/src/io/bed.rs","byte_start":418526,"byte_end":418529,"line_start":177,"line_end":177,"column_start":12,"column_end":15},"name":"aux","qualname":"<Record>::aux","value":"pub fn aux(&Self, usize) -> Option<&str>","parent":null,"children":[],"decl_id":null,"docs":" Access auxilliary fields after the strand field by index\n (counting first field (chromosome) as 0).\n","sig":null,"attributes":[{"value":"/ Access auxilliary fields after the strand field by index","span":{"file_name":"/Users/shelwitz/.cargo/registry/src/github.com-1ecc6299db9ec823/bio-0.39.0/src/io/bed.rs","byte_start":418404,"byte_end":418464,"line_start":175,"line_end":175,"column_start":5,"column_end":65}},{"value":"/ (counting first field (chromosome) as 0).","span":{"file_name":"/Users/shelwitz/.cargo/registry/src/github.com-1ecc6299db9ec823/bio-0.39.0/src/io/bed.rs","byte_start":418469,"byte_end":418514,"line_start":176,"line_end":176,"column_start":5,"column_end":50}}]},{"kind":"Method","id":{"krate":0,"index":1237},"span":{"file_name":"/Users/shelwitz/.cargo/registry/src/github.com-1ecc6299db9ec823/bio-0.39.0/src/io/bed.rs","byte_start":418737,"byte_end":418746,"line_start":187,"line_end":187,"column_start":12,"column_end":21},"name":"set_chrom","qualname":"<Record>::set_chrom","value":"pub fn set_chrom(&mut Self, &str)","parent":null,"children":[],"decl_id":null,"docs":" Set chromosome.\n","sig":null,"attributes":[{"value":"/ Set chromosome.","span":{"file_name":"/Users/shelwitz/.cargo/registry/src/github.com-1ecc6299db9ec823/bio-0.39.0/src/io/bed.rs","byte_start":418706,"byte_end":418725,"line_start":186,"line_end":186,"column_start":5,"column_end":24}}]},{"kind":"Method","id":{"krate":0,"index":1238},"span":{"file_name":"/Users/shelwitz/.cargo/registry/src/github.com-1ecc6299db9ec823/bio-0.39.0/src/io/bed.rs","byte_start":418860,"byte_end":418869,"line_start":192,"line_end":192,"column_start":12,"column_end":21},"name":"set_start","qualname":"<Record>::set_start","value":"pub fn set_start(&mut Self, u64)","parent":null,"children":[],"decl_id":null,"docs":" Set start of feature.\n","sig":null,"attributes":[{"value":"/ Set start of feature.","span":{"file_name":"/Users/shelwitz/.cargo/registry/src/github.com-1ecc6299db9ec823/bio-0.39.0/src/io/bed.rs","byte_start":418823,"byte_end":418848,"line_start":191,"line_end":191,"column_start":5,"column_end":30}}]},{"kind":"Method","id":{"krate":0,"index":1239},"span":{"file_name":"/Users/shelwitz/.cargo/registry/src/github.com-1ecc6299db9ec823/bio-0.39.0/src/io/bed.rs","byte_start":418969,"byte_end":418976,"line_start":197,"line_end":197,"column_start":12,"column_end":19},"name":"set_end","qualname":"<Record>::set_end","value":"pub fn set_end(&mut Self, u64)","parent":null,"children":[],"decl_id":null,"docs":" Set end of feature.\n","sig":null,"attributes":[{"value":"/ Set end of feature.","span":{"file_name":"/Users/shelwitz/.cargo/registry/src/github.com-1ecc6299db9ec823/bio-0.39.0/src/io/bed.rs","byte_start":418934,"byte_end":418957,"line_start":196,"line_end":196,"column_start":5,"column_end":28}}]},{"kind":"Method","id":{"krate":0,"index":1240},"span":{"file_name":"/Users/shelwitz/.cargo/registry/src/github.com-1ecc6299db9ec823/bio-0.39.0/src/io/bed.rs","byte_start":419060,"byte_end":419068,"line_start":202,"line_end":202,"column_start":12,"column_end":20},"name":"set_name","qualname":"<Record>::set_name","value":"pub fn set_name(&mut Self, &str)","parent":null,"children":[],"decl_id":null,"docs":" Set name.\n","sig":null,"attributes":[{"value":"/ Set name.","span":{"file_name":"/Users/shelwitz/.cargo/registry/src/github.com-1ecc6299db9ec823/bio-0.39.0/src/io/bed.rs","byte_start":419035,"byte_end":419048,"line_start":201,"line_end":201,"column_start":5,"column_end":18}}]},{"kind":"Method","id":{"krate":0,"index":1241},"span":{"file_name":"/Users/shelwitz/.cargo/registry/src/github.com-1ecc6299db9ec823/bio-0.39.0/src/io/bed.rs","byte_start":419278,"byte_end":419287,"line_start":211,"line_end":211,"column_start":12,"column_end":21},"name":"set_score","qualname":"<Record>::set_score","value":"pub fn set_score(&mut Self, &str)","parent":null,"children":[],"decl_id":null,"docs":" Set score.\n","sig":null,"attributes":[{"value":"/ Set score.","span":{"file_name":"/Users/shelwitz/.cargo/registry/src/github.com-1ecc6299db9ec823/bio-0.39.0/src/io/bed.rs","byte_start":419252,"byte_end":419266,"line_start":210,"line_end":210,"column_start":5,"column_end":19}}]},{"kind":"Method","id":{"krate":0,"index":1242},"span":{"file_name":"/Users/shelwitz/.cargo/registry/src/github.com-1ecc6299db9ec823/bio-0.39.0/src/io/bed.rs","byte_start":419650,"byte_end":419658,"line_start":223,"line_end":223,"column_start":12,"column_end":20},"name":"push_aux","qualname":"<Record>::push_aux","value":"pub fn push_aux(&mut Self, &str)","parent":null,"children":[],"decl_id":null,"docs":" Add auxilliary field. This has to happen after name and score have been set.\n","sig":null,"attributes":[{"value":"/ Add auxilliary field. This has to happen after name and score have been set.","span":{"file_name":"/Users/shelwitz/.cargo/registry/src/github.com-1ecc6299db9ec823/bio-0.39.0/src/io/bed.rs","byte_start":419558,"byte_end":419638,"line_start":222,"line_end":222,"column_start":5,"column_end":85}}]},{"kind":"Mod","id":{"krate":0,"index":1258},"span":{"file_name":"/Users/shelwitz/.cargo/registry/src/github.com-1ecc6299db9ec823/bio-0.39.0/src/io/fasta.rs","byte_start":0,"byte_end":0,"line_start":1,"line_end":1,"column_start":1,"column_end":1},"name":"fasta","qualname":"::io::fasta","value":"/Users/shelwitz/.cargo/registry/src/github.com-1ecc6299db9ec823/bio-0.39.0/src/io/fasta.rs","parent":null,"children":[{"krate":0,"index":1259},{"krate":0,"index":1262},{"krate":0,"index":1265},{"krate":0,"index":1268},{"krate":0,"index":1271},{"krate":0,"index":1274},{"krate":0,"index":1275},{"krate":0,"index":1278},{"krate":0,"index":1279},{"krate":0,"index":1282},{"krate":0,"index":1285},{"krate":0,"index":1288},{"krate":0,"index":1291},{"krate":0,"index":1292},{"krate":0,"index":4657},{"krate":0,"index":4661},{"krate":0,"index":1294},{"krate":0,"index":1302},{"krate":0,"index":1306},{"krate":0,"index":1310},{"krate":0,"index":4664},{"krate":0,"index":4667},{"krate":0,"index":4669},{"krate":0,"index":1315},{"krate":0,"index":4671},{"krate":0,"index":4678},{"krate":0,"index":1325},{"krate":0,"index":1330},{"krate":0,"index":4681},{"krate":0,"index":4687},{"krate":0,"index":4689},{"krate":0,"index":4691},{"krate":0,"index":4697},{"krate":0,"index":4746},{"krate":0,"index":4747},{"krate":0,"index":4750},{"krate":0,"index":4753},{"krate":0,"index":4755},{"krate":0,"index":4756},{"krate":0,"index":1347},{"krate":0,"index":1356},{"krate":0,"index":1360},{"krate":0,"index":4759},{"krate":0,"index":4762},{"krate":0,"index":1366},{"krate":0,"index":1372},{"krate":0,"index":4765},{"krate":0,"index":4769},{"krate":0,"index":4771},{"krate":0,"index":4773},{"krate":0,"index":4775},{"krate":0,"index":4781},{"krate":0,"index":1380},{"krate":0,"index":1390},{"krate":0,"index":1392},{"krate":0,"index":1396}],"decl_id":null,"docs":" Structs and trait to read and write files in FASTA format.","sig":null,"attributes":[{"value":"/ Structs and trait to read and write files in FASTA format.","span":{"file_name":"/Users/shelwitz/.cargo/registry/src/github.com-1ecc6299db9ec823/bio-0.39.0/src/io/fasta.rs","byte_start":430798,"byte_end":430860,"line_start":6,"line_end":6,"column_start":1,"column_end":63}},{"value":"/","span":{"file_name":"/Users/shelwitz/.cargo/registry/src/github.com-1ecc6299db9ec823/bio-0.39.0/src/io/fasta.rs","byte_start":430861,"byte_end":430864,"line_start":7,"line_end":7,"column_start":1,"column_end":4}},{"value":"/ # Example","span":{"file_name":"/Users/shelwitz/.cargo/registry/src/github.com-1ecc6299db9ec823/bio-0.39.0/src/io/fasta.rs","byte_start":430865,"byte_end":430878,"line_start":8,"line_end":8,"column_start":1,"column_end":14}},{"value":"/","span":{"file_name":"/Users/shelwitz/.cargo/registry/src/github.com-1ecc6299db9ec823/bio-0.39.0/src/io/fasta.rs","byte_start":430879,"byte_end":430882,"line_start":9,"line_end":9,"column_start":1,"column_end":4}},{"value":"/ ## Read","span":{"file_name":"/Users/shelwitz/.cargo/registry/src/github.com-1ecc6299db9ec823/bio-0.39.0/src/io/fasta.rs","byte_start":430883,"byte_end":430894,"line_start":10,"line_end":10,"column_start":1,"column_end":12}},{"value":"/","span":{"file_name":"/Users/shelwitz/.cargo/registry/src/github.com-1ecc6299db9ec823/bio-0.39.0/src/io/fasta.rs","byte_start":430895,"byte_end":430898,"line_start":11,"line_end":11,"column_start":1,"column_end":4}},{"value":"/ In this example, we parse a fasta file from stdin and compute some statistics","span":{"file_name":"/Users/shelwitz/.cargo/registry/src/github.com-1ecc6299db9ec823/bio-0.39.0/src/io/fasta.rs","byte_start":430899,"byte_end":430980,"line_start":12,"line_end":12,"column_start":1,"column_end":82}},{"value":"/","span":{"file_name":"/Users/shelwitz/.cargo/registry/src/github.com-1ecc6299db9ec823/bio-0.39.0/src/io/fasta.rs","byte_start":430981,"byte_end":430984,"line_start":13,"line_end":13,"column_start":1,"column_end":4}},{"value":"/ ```","span":{"file_name":"/Users/shelwitz/.cargo/registry/src/github.com-1ecc6299db9ec823/bio-0.39.0/src/io/fasta.rs","byte_start":430985,"byte_end":430992,"line_start":14,"line_end":14,"column_start":1,"column_end":8}},{"value":"/ use bio::io::fasta;","span":{"file_name":"/Users/shelwitz/.cargo/registry/src/github.com-1ecc6299db9ec823/bio-0.39.0/src/io/fasta.rs","byte_start":430993,"byte_end":431016,"line_start":15,"line_end":15,"column_start":1,"column_end":24}},{"value":"/ use std::io;","span":{"file_name":"/Users/shelwitz/.cargo/registry/src/github.com-1ecc6299db9ec823/bio-0.39.0/src/io/fasta.rs","byte_start":431017,"byte_end":431033,"line_start":16,"line_end":16,"column_start":1,"column_end":17}},{"value":"/","span":{"file_name":"/Users/shelwitz/.cargo/registry/src/github.com-1ecc6299db9ec823/bio-0.39.0/src/io/fasta.rs","byte_start":431034,"byte_end":431037,"line_start":17,"line_end":17,"column_start":1,"column_end":4}},{"value":"/ let mut reader = fasta::Reader::new(io::stdin());","span":{"file_name":"/Users/shelwitz/.cargo/registry/src/github.com-1ecc6299db9ec823/bio-0.39.0/src/io/fasta.rs","byte_start":431038,"byte_end":431091,"line_start":18,"line_end":18,"column_start":1,"column_end":54}},{"value":"/","span":{"file_name":"/Users/shelwitz/.cargo/registry/src/github.com-1ecc6299db9ec823/bio-0.39.0/src/io/fasta.rs","byte_start":431092,"byte_end":431095,"line_start":19,"line_end":19,"column_start":1,"column_end":4}},{"value":"/ let mut nb_reads = 0;","span":{"file_name":"/Users/shelwitz/.cargo/registry/src/github.com-1ecc6299db9ec823/bio-0.39.0/src/io/fasta.rs","byte_start":431096,"byte_end":431121,"line_start":20,"line_end":20,"column_start":1,"column_end":26}},{"value":"/ let mut nb_bases = 0;","span":{"file_name":"/Users/shelwitz/.cargo/registry/src/github.com-1ecc6299db9ec823/bio-0.39.0/src/io/fasta.rs","byte_start":431122,"byte_end":431147,"line_start":21,"line_end":21,"column_start":1,"column_end":26}},{"value":"/","span":{"file_name":"/Users/shelwitz/.cargo/registry/src/github.com-1ecc6299db9ec823/bio-0.39.0/src/io/fasta.rs","byte_start":431148,"byte_end":431151,"line_start":22,"line_end":22,"column_start":1,"column_end":4}},{"value":"/ for result in reader.records() {","span":{"file_name":"/Users/shelwitz/.cargo/registry/src/github.com-1ecc6299db9ec823/bio-0.39.0/src/io/fasta.rs","byte_start":431152,"byte_end":431188,"line_start":23,"line_end":23,"column_start":1,"column_end":37}},{"value":"/     let record = result.expect(\"Error during fasta record parsing\");","span":{"file_name":"/Users/shelwitz/.cargo/registry/src/github.com-1ecc6299db9ec823/bio-0.39.0/src/io/fasta.rs","byte_start":431189,"byte_end":431261,"line_start":24,"line_end":24,"column_start":1,"column_end":73}},{"value":"/     println!(\"{}\", record.id());","span":{"file_name":"/Users/shelwitz/.cargo/registry/src/github.com-1ecc6299db9ec823/bio-0.39.0/src/io/fasta.rs","byte_start":431262,"byte_end":431298,"line_start":25,"line_end":25,"column_start":1,"column_end":37}},{"value":"/","span":{"file_name":"/Users/shelwitz/.cargo/registry/src/github.com-1ecc6299db9ec823/bio-0.39.0/src/io/fasta.rs","byte_start":431299,"byte_end":431302,"line_start":26,"line_end":26,"column_start":1,"column_end":4}},{"value":"/     nb_reads += 1;","span":{"file_name":"/Users/shelwitz/.cargo/registry/src/github.com-1ecc6299db9ec823/bio-0.39.0/src/io/fasta.rs","byte_start":431303,"byte_end":431325,"line_start":27,"line_end":27,"column_start":1,"column_end":23}},{"value":"/     nb_bases += record.seq().len();","span":{"file_name":"/Users/shelwitz/.cargo/registry/src/github.com-1ecc6299db9ec823/bio-0.39.0/src/io/fasta.rs","byte_start":431326,"byte_end":431365,"line_start":28,"line_end":28,"column_start":1,"column_end":40}},{"value":"/ }","span":{"file_name":"/Users/shelwitz/.cargo/registry/src/github.com-1ecc6299db9ec823/bio-0.39.0/src/io/fasta.rs","byte_start":431366,"byte_end":431371,"line_start":29,"line_end":29,"column_start":1,"column_end":6}},{"value":"/","span":{"file_name":"/Users/shelwitz/.cargo/registry/src/github.com-1ecc6299db9ec823/bio-0.39.0/src/io/fasta.rs","byte_start":431372,"byte_end":431375,"line_start":30,"line_end":30,"column_start":1,"column_end":4}},{"value":"/ println!(\"Number of reads: {}\", nb_reads);","span":{"file_name":"/Users/shelwitz/.cargo/registry/src/github.com-1ecc6299db9ec823/bio-0.39.0/src/io/fasta.rs","byte_start":431376,"byte_end":431422,"line_start":31,"line_end":31,"column_start":1,"column_end":47}},{"value":"/ println!(\"Number of bases: {}\", nb_bases);","span":{"file_name":"/Users/shelwitz/.cargo/registry/src/github.com-1ecc6299db9ec823/bio-0.39.0/src/io/fasta.rs","byte_start":431423,"byte_end":431469,"line_start":32,"line_end":32,"column_start":1,"column_end":47}},{"value":"/ ```","span":{"file_name":"/Users/shelwitz/.cargo/registry/src/github.com-1ecc6299db9ec823/bio-0.39.0/src/io/fasta.rs","byte_start":431470,"byte_end":431477,"line_start":33,"line_end":33,"column_start":1,"column_end":8}},{"value":"/","span":{"file_name":"/Users/shelwitz/.cargo/registry/src/github.com-1ecc6299db9ec823/bio-0.39.0/src/io/fasta.rs","byte_start":431478,"byte_end":431481,"line_start":34,"line_end":34,"column_start":1,"column_end":4}},{"value":"/ We can also use a `while` loop to iterate over records.","span":{"file_name":"/Users/shelwitz/.cargo/registry/src/github.com-1ecc6299db9ec823/bio-0.39.0/src/io/fasta.rs","byte_start":431482,"byte_end":431541,"line_start":35,"line_end":35,"column_start":1,"column_end":60}},{"value":"/ This is slightly faster than the `for` loop.","span":{"file_name":"/Users/shelwitz/.cargo/registry/src/github.com-1ecc6299db9ec823/bio-0.39.0/src/io/fasta.rs","byte_start":431542,"byte_end":431590,"line_start":36,"line_end":36,"column_start":1,"column_end":49}},{"value":"/ ```","span":{"file_name":"/Users/shelwitz/.cargo/registry/src/github.com-1ecc6299db9ec823/bio-0.39.0/src/io/fasta.rs","byte_start":431591,"byte_end":431598,"line_start":37,"line_end":37,"column_start":1,"column_end":8}},{"value":"/ use bio::io::fasta;","span":{"file_name":"/Users/shelwitz/.cargo/registry/src/github.com-1ecc6299db9ec823/bio-0.39.0/src/io/fasta.rs","byte_start":431599,"byte_end":431622,"line_start":38,"line_end":38,"column_start":1,"column_end":24}},{"value":"/ use std::io;","span":{"file_name":"/Users/shelwitz/.cargo/registry/src/github.com-1ecc6299db9ec823/bio-0.39.0/src/io/fasta.rs","byte_start":431623,"byte_end":431639,"line_start":39,"line_end":39,"column_start":1,"column_end":17}},{"value":"/ let mut records = fasta::Reader::new(io::stdin()).records();","span":{"file_name":"/Users/shelwitz/.cargo/registry/src/github.com-1ecc6299db9ec823/bio-0.39.0/src/io/fasta.rs","byte_start":431640,"byte_end":431704,"line_start":40,"line_end":40,"column_start":1,"column_end":65}},{"value":"/","span":{"file_name":"/Users/shelwitz/.cargo/registry/src/github.com-1ecc6299db9ec823/bio-0.39.0/src/io/fasta.rs","byte_start":431705,"byte_end":431708,"line_start":41,"line_end":41,"column_start":1,"column_end":4}},{"value":"/ let mut nb_reads = 0;","span":{"file_name":"/Users/shelwitz/.cargo/registry/src/github.com-1ecc6299db9ec823/bio-0.39.0/src/io/fasta.rs","byte_start":431709,"byte_end":431734,"line_start":42,"line_end":42,"column_start":1,"column_end":26}},{"value":"/ let mut nb_bases = 0;","span":{"file_name":"/Users/shelwitz/.cargo/registry/src/github.com-1ecc6299db9ec823/bio-0.39.0/src/io/fasta.rs","byte_start":431735,"byte_end":431760,"line_start":43,"line_end":43,"column_start":1,"column_end":26}},{"value":"/","span":{"file_name":"/Users/shelwitz/.cargo/registry/src/github.com-1ecc6299db9ec823/bio-0.39.0/src/io/fasta.rs","byte_start":431761,"byte_end":431764,"line_start":44,"line_end":44,"column_start":1,"column_end":4}},{"value":"/ while let Some(Ok(record)) = records.next() {","span":{"file_name":"/Users/shelwitz/.cargo/registry/src/github.com-1ecc6299db9ec823/bio-0.39.0/src/io/fasta.rs","byte_start":431765,"byte_end":431814,"line_start":45,"line_end":45,"column_start":1,"column_end":50}},{"value":"/     nb_reads += 1;","span":{"file_name":"/Users/shelwitz/.cargo/registry/src/github.com-1ecc6299db9ec823/bio-0.39.0/src/io/fasta.rs","byte_start":431815,"byte_end":431837,"line_start":46,"line_end":46,"column_start":1,"column_end":23}},{"value":"/     nb_bases += record.seq().len();","span":{"file_name":"/Users/shelwitz/.cargo/registry/src/github.com-1ecc6299db9ec823/bio-0.39.0/src/io/fasta.rs","byte_start":431838,"byte_end":431877,"line_start":47,"line_end":47,"column_start":1,"column_end":40}},{"value":"/ }","span":{"file_name":"/Users/shelwitz/.cargo/registry/src/github.com-1ecc6299db9ec823/bio-0.39.0/src/io/fasta.rs","byte_start":431878,"byte_end":431883,"line_start":48,"line_end":48,"column_start":1,"column_end":6}},{"value":"/","span":{"file_name":"/Users/shelwitz/.cargo/registry/src/github.com-1ecc6299db9ec823/bio-0.39.0/src/io/fasta.rs","byte_start":431884,"byte_end":431887,"line_start":49,"line_end":49,"column_start":1,"column_end":4}},{"value":"/ println!(\"Number of reads: {}\", nb_reads);","span":{"file_name":"/Users/shelwitz/.cargo/registry/src/github.com-1ecc6299db9ec823/bio-0.39.0/src/io/fasta.rs","byte_start":431888,"byte_end":431934,"line_start":50,"line_end":50,"column_start":1,"column_end":47}},{"value":"/ println!(\"Number of bases: {}\", nb_bases);","span":{"file_name":"/Users/shelwitz/.cargo/registry/src/github.com-1ecc6299db9ec823/bio-0.39.0/src/io/fasta.rs","byte_start":431935,"byte_end":431981,"line_start":51,"line_end":51,"column_start":1,"column_end":47}},{"value":"/ ```","span":{"file_name":"/Users/shelwitz/.cargo/registry/src/github.com-1ecc6299db9ec823/bio-0.39.0/src/io/fasta.rs","byte_start":431982,"byte_end":431989,"line_start":52,"line_end":52,"column_start":1,"column_end":8}},{"value":"/","span":{"file_name":"/Users/shelwitz/.cargo/registry/src/github.com-1ecc6299db9ec823/bio-0.39.0/src/io/fasta.rs","byte_start":431990,"byte_end":431993,"line_start":53,"line_end":53,"column_start":1,"column_end":4}},{"value":"/ ## Write","span":{"file_name":"/Users/shelwitz/.cargo/registry/src/github.com-1ecc6299db9ec823/bio-0.39.0/src/io/fasta.rs","byte_start":431994,"byte_end":432006,"line_start":54,"line_end":54,"column_start":1,"column_end":13}},{"value":"/","span":{"file_name":"/Users/shelwitz/.cargo/registry/src/github.com-1ecc6299db9ec823/bio-0.39.0/src/io/fasta.rs","byte_start":432007,"byte_end":432010,"line_start":55,"line_end":55,"column_start":1,"column_end":4}},{"value":"/ In this example we generate 10 random sequences with length 100 and write them to stdout.","span":{"file_name":"/Users/shelwitz/.cargo/registry/src/github.com-1ecc6299db9ec823/bio-0.39.0/src/io/fasta.rs","byte_start":432011,"byte_end":432104,"line_start":56,"line_end":56,"column_start":1,"column_end":94}},{"value":"/","span":{"file_name":"/Users/shelwitz/.cargo/registry/src/github.com-1ecc6299db9ec823/bio-0.39.0/src/io/fasta.rs","byte_start":432105,"byte_end":432108,"line_start":57,"line_end":57,"column_start":1,"column_end":4}},{"value":"/ ```","span":{"file_name":"/Users/shelwitz/.cargo/registry/src/github.com-1ecc6299db9ec823/bio-0.39.0/src/io/fasta.rs","byte_start":432109,"byte_end":432116,"line_start":58,"line_end":58,"column_start":1,"column_end":8}},{"value":"/ use std::io;","span":{"file_name":"/Users/shelwitz/.cargo/registry/src/github.com-1ecc6299db9ec823/bio-0.39.0/src/io/fasta.rs","byte_start":432117,"byte_end":432133,"line_start":59,"line_end":59,"column_start":1,"column_end":17}},{"value":"/ use bio::io::fasta;","span":{"file_name":"/Users/shelwitz/.cargo/registry/src/github.com-1ecc6299db9ec823/bio-0.39.0/src/io/fasta.rs","byte_start":432134,"byte_end":432157,"line_start":60,"line_end":60,"column_start":1,"column_end":24}},{"value":"/","span":{"file_name":"/Users/shelwitz/.cargo/registry/src/github.com-1ecc6299db9ec823/bio-0.39.0/src/io/fasta.rs","byte_start":432158,"byte_end":432161,"line_start":61,"line_end":61,"column_start":1,"column_end":4}},{"value":"/ let mut seed = 42;","span":{"file_name":"/Users/shelwitz/.cargo/registry/src/github.com-1ecc6299db9ec823/bio-0.39.0/src/io/fasta.rs","byte_start":432162,"byte_end":432184,"line_start":62,"line_end":62,"column_start":1,"column_end":23}},{"value":"/","span":{"file_name":"/Users/shelwitz/.cargo/registry/src/github.com-1ecc6299db9ec823/bio-0.39.0/src/io/fasta.rs","byte_start":432185,"byte_end":432188,"line_start":63,"line_end":63,"column_start":1,"column_end":4}},{"value":"/ let nucleotides = [b'A', b'C', b'G', b'T'];","span":{"file_name":"/Users/shelwitz/.cargo/registry/src/github.com-1ecc6299db9ec823/bio-0.39.0/src/io/fasta.rs","byte_start":432189,"byte_end":432236,"line_start":64,"line_end":64,"column_start":1,"column_end":48}},{"value":"/","span":{"file_name":"/Users/shelwitz/.cargo/registry/src/github.com-1ecc6299db9ec823/bio-0.39.0/src/io/fasta.rs","byte_start":432237,"byte_end":432240,"line_start":65,"line_end":65,"column_start":1,"column_end":4}},{"value":"/ let mut writer = fasta::Writer::new(io::stdout());","span":{"file_name":"/Users/shelwitz/.cargo/registry/src/github.com-1ecc6299db9ec823/bio-0.39.0/src/io/fasta.rs","byte_start":432241,"byte_end":432295,"line_start":66,"line_end":66,"column_start":1,"column_end":55}},{"value":"/","span":{"file_name":"/Users/shelwitz/.cargo/registry/src/github.com-1ecc6299db9ec823/bio-0.39.0/src/io/fasta.rs","byte_start":432296,"byte_end":432299,"line_start":67,"line_end":67,"column_start":1,"column_end":4}},{"value":"/ for _ in 0..10 {","span":{"file_name":"/Users/shelwitz/.cargo/registry/src/github.com-1ecc6299db9ec823/bio-0.39.0/src/io/fasta.rs","byte_start":432300,"byte_end":432320,"line_start":68,"line_end":68,"column_start":1,"column_end":21}},{"value":"/     let seq = (0..100).map(|_| {","span":{"file_name":"/Users/shelwitz/.cargo/registry/src/github.com-1ecc6299db9ec823/bio-0.39.0/src/io/fasta.rs","byte_start":432321,"byte_end":432357,"line_start":69,"line_end":69,"column_start":1,"column_end":37}},{"value":"/         seed = ((seed ^ seed << 13) ^ seed >> 7) ^ seed << 17; // don't use this random generator","span":{"file_name":"/Users/shelwitz/.cargo/registry/src/github.com-1ecc6299db9ec823/bio-0.39.0/src/io/fasta.rs","byte_start":432358,"byte_end":432459,"line_start":70,"line_end":70,"column_start":1,"column_end":102}},{"value":"/         nucleotides[seed % 4]","span":{"file_name":"/Users/shelwitz/.cargo/registry/src/github.com-1ecc6299db9ec823/bio-0.39.0/src/io/fasta.rs","byte_start":432460,"byte_end":432493,"line_start":71,"line_end":71,"column_start":1,"column_end":34}},{"value":"/     }).collect::<Vec<u8>>();","span":{"file_name":"/Users/shelwitz/.cargo/registry/src/github.com-1ecc6299db9ec823/bio-0.39.0/src/io/fasta.rs","byte_start":432494,"byte_end":432526,"line_start":72,"line_end":72,"column_start":1,"column_end":33}},{"value":"/","span":{"file_name":"/Users/shelwitz/.cargo/registry/src/github.com-1ecc6299db9ec823/bio-0.39.0/src/io/fasta.rs","byte_start":432527,"byte_end":432530,"line_start":73,"line_end":73,"column_start":1,"column_end":4}},{"value":"/    writer.write(\"random\", None, seq.as_slice()).expect(\"Error writing record.\");","span":{"file_name":"/Users/shelwitz/.cargo/registry/src/github.com-1ecc6299db9ec823/bio-0.39.0/src/io/fasta.rs","byte_start":432531,"byte_end":432615,"line_start":74,"line_end":74,"column_start":1,"column_end":85}},{"value":"/ }","span":{"file_name":"/Users/shelwitz/.cargo/registry/src/github.com-1ecc6299db9ec823/bio-0.39.0/src/io/fasta.rs","byte_start":432616,"byte_end":432621,"line_start":75,"line_end":75,"column_start":1,"column_end":6}},{"value":"/ ```","span":{"file_name":"/Users/shelwitz/.cargo/registry/src/github.com-1ecc6299db9ec823/bio-0.39.0/src/io/fasta.rs","byte_start":432622,"byte_end":432629,"line_start":76,"line_end":76,"column_start":1,"column_end":8}},{"value":"/","span":{"file_name":"/Users/shelwitz/.cargo/registry/src/github.com-1ecc6299db9ec823/bio-0.39.0/src/io/fasta.rs","byte_start":432630,"byte_end":432633,"line_start":77,"line_end":77,"column_start":1,"column_end":4}},{"value":"/ ## Read and Write","span":{"file_name":"/Users/shelwitz/.cargo/registry/src/github.com-1ecc6299db9ec823/bio-0.39.0/src/io/fasta.rs","byte_start":432634,"byte_end":432655,"line_start":78,"line_end":78,"column_start":1,"column_end":22}},{"value":"/","span":{"file_name":"/Users/shelwitz/.cargo/registry/src/github.com-1ecc6299db9ec823/bio-0.39.0/src/io/fasta.rs","byte_start":432656,"byte_end":432659,"line_start":79,"line_end":79,"column_start":1,"column_end":4}},{"value":"/ In this example we filter reads from stdin on sequence length and write them to stdout","span":{"file_name":"/Users/shelwitz/.cargo/registry/src/github.com-1ecc6299db9ec823/bio-0.39.0/src/io/fasta.rs","byte_start":432660,"byte_end":432750,"line_start":80,"line_end":80,"column_start":1,"column_end":91}},{"value":"/","span":{"file_name":"/Users/shelwitz/.cargo/registry/src/github.com-1ecc6299db9ec823/bio-0.39.0/src/io/fasta.rs","byte_start":432751,"byte_end":432754,"line_start":81,"line_end":81,"column_start":1,"column_end":4}},{"value":"/ ```","span":{"file_name":"/Users/shelwitz/.cargo/registry/src/github.com-1ecc6299db9ec823/bio-0.39.0/src/io/fasta.rs","byte_start":432755,"byte_end":432762,"line_start":82,"line_end":82,"column_start":1,"column_end":8}},{"value":"/ use bio::io::fasta;","span":{"file_name":"/Users/shelwitz/.cargo/registry/src/github.com-1ecc6299db9ec823/bio-0.39.0/src/io/fasta.rs","byte_start":432763,"byte_end":432786,"line_start":83,"line_end":83,"column_start":1,"column_end":24}},{"value":"/ use bio::io::fasta::FastaRead;","span":{"file_name":"/Users/shelwitz/.cargo/registry/src/github.com-1ecc6299db9ec823/bio-0.39.0/src/io/fasta.rs","byte_start":432787,"byte_end":432821,"line_start":84,"line_end":84,"column_start":1,"column_end":35}},{"value":"/ use std::io;","span":{"file_name":"/Users/shelwitz/.cargo/registry/src/github.com-1ecc6299db9ec823/bio-0.39.0/src/io/fasta.rs","byte_start":432822,"byte_end":432838,"line_start":85,"line_end":85,"column_start":1,"column_end":17}},{"value":"/","span":{"file_name":"/Users/shelwitz/.cargo/registry/src/github.com-1ecc6299db9ec823/bio-0.39.0/src/io/fasta.rs","byte_start":432839,"byte_end":432842,"line_start":86,"line_end":86,"column_start":1,"column_end":4}},{"value":"/ let mut reader = fasta::Reader::new(io::stdin());","span":{"file_name":"/Users/shelwitz/.cargo/registry/src/github.com-1ecc6299db9ec823/bio-0.39.0/src/io/fasta.rs","byte_start":432843,"byte_end":432896,"line_start":87,"line_end":87,"column_start":1,"column_end":54}},{"value":"/ let mut writer = fasta::Writer::new(io::stdout());","span":{"file_name":"/Users/shelwitz/.cargo/registry/src/github.com-1ecc6299db9ec823/bio-0.39.0/src/io/fasta.rs","byte_start":432897,"byte_end":432951,"line_start":88,"line_end":88,"column_start":1,"column_end":55}},{"value":"/ let mut record = fasta::Record::new();","span":{"file_name":"/Users/shelwitz/.cargo/registry/src/github.com-1ecc6299db9ec823/bio-0.39.0/src/io/fasta.rs","byte_start":432952,"byte_end":432994,"line_start":89,"line_end":89,"column_start":1,"column_end":43}},{"value":"/","span":{"file_name":"/Users/shelwitz/.cargo/registry/src/github.com-1ecc6299db9ec823/bio-0.39.0/src/io/fasta.rs","byte_start":432995,"byte_end":432998,"line_start":90,"line_end":90,"column_start":1,"column_end":4}},{"value":"/ while let Ok(()) = reader.read(&mut record) {","span":{"file_name":"/Users/shelwitz/.cargo/registry/src/github.com-1ecc6299db9ec823/bio-0.39.0/src/io/fasta.rs","byte_start":432999,"byte_end":433048,"line_start":91,"line_end":91,"column_start":1,"column_end":50}},{"value":"/     if record.is_empty() {","span":{"file_name":"/Users/shelwitz/.cargo/registry/src/github.com-1ecc6299db9ec823/bio-0.39.0/src/io/fasta.rs","byte_start":433049,"byte_end":433079,"line_start":92,"line_end":92,"column_start":1,"column_end":31}},{"value":"/         break;","span":{"file_name":"/Users/shelwitz/.cargo/registry/src/github.com-1ecc6299db9ec823/bio-0.39.0/src/io/fasta.rs","byte_start":433080,"byte_end":433098,"line_start":93,"line_end":93,"column_start":1,"column_end":19}},{"value":"/     }","span":{"file_name":"/Users/shelwitz/.cargo/registry/src/github.com-1ecc6299db9ec823/bio-0.39.0/src/io/fasta.rs","byte_start":433099,"byte_end":433108,"line_start":94,"line_end":94,"column_start":1,"column_end":10}},{"value":"/","span":{"file_name":"/Users/shelwitz/.cargo/registry/src/github.com-1ecc6299db9ec823/bio-0.39.0/src/io/fasta.rs","byte_start":433109,"byte_end":433112,"line_start":95,"line_end":95,"column_start":1,"column_end":4}},{"value":"/     if record.seq().len() > 100 {","span":{"file_name":"/Users/shelwitz/.cargo/registry/src/github.com-1ecc6299db9ec823/bio-0.39.0/src/io/fasta.rs","byte_start":433113,"byte_end":433150,"line_start":96,"line_end":96,"column_start":1,"column_end":38}},{"value":"/         writer","span":{"file_name":"/Users/shelwitz/.cargo/registry/src/github.com-1ecc6299db9ec823/bio-0.39.0/src/io/fasta.rs","byte_start":433151,"byte_end":433169,"line_start":97,"line_end":97,"column_start":1,"column_end":19}},{"value":"/             .write_record(&record)","span":{"file_name":"/Users/shelwitz/.cargo/registry/src/github.com-1ecc6299db9ec823/bio-0.39.0/src/io/fasta.rs","byte_start":433170,"byte_end":433208,"line_start":98,"line_end":98,"column_start":1,"column_end":39}},{"value":"/             .ok()","span":{"file_name":"/Users/shelwitz/.cargo/registry/src/github.com-1ecc6299db9ec823/bio-0.39.0/src/io/fasta.rs","byte_start":433209,"byte_end":433230,"line_start":99,"line_end":99,"column_start":1,"column_end":22}},{"value":"/             .expect(\"Error writing record.\");","span":{"file_name":"/Users/shelwitz/.cargo/registry/src/github.com-1ecc6299db9ec823/bio-0.39.0/src/io/fasta.rs","byte_start":433231,"byte_end":433280,"line_start":100,"line_end":100,"column_start":1,"column_end":50}},{"value":"/     }","span":{"file_name":"/Users/shelwitz/.cargo/registry/src/github.com-1ecc6299db9ec823/bio-0.39.0/src/io/fasta.rs","byte_start":433281,"byte_end":433290,"line_start":101,"line_end":101,"column_start":1,"column_end":10}},{"value":"/ }","span":{"file_name":"/Users/shelwitz/.cargo/registry/src/github.com-1ecc6299db9ec823/bio-0.39.0/src/io/fasta.rs","byte_start":433291,"byte_end":433296,"line_start":102,"line_end":102,"column_start":1,"column_end":6}},{"value":"/ ```","span":{"file_name":"/Users/shelwitz/.cargo/registry/src/github.com-1ecc6299db9ec823/bio-0.39.0/src/io/fasta.rs","byte_start":433297,"byte_end":433304,"line_start":103,"line_end":103,"column_start":1,"column_end":8}},{"value":"/","span":{"file_name":"/Users/shelwitz/.cargo/registry/src/github.com-1ecc6299db9ec823/bio-0.39.0/src/io/fasta.rs","byte_start":433305,"byte_end":433308,"line_start":104,"line_end":104,"column_start":1,"column_end":4}},{"value":"/ ## Index","span":{"file_name":"/Users/shelwitz/.cargo/registry/src/github.com-1ecc6299db9ec823/bio-0.39.0/src/io/fasta.rs","byte_start":433309,"byte_end":433321,"line_start":105,"line_end":105,"column_start":1,"column_end":13}},{"value":"/","span":{"file_name":"/Users/shelwitz/.cargo/registry/src/github.com-1ecc6299db9ec823/bio-0.39.0/src/io/fasta.rs","byte_start":433322,"byte_end":433325,"line_start":106,"line_end":106,"column_start":1,"column_end":4}},{"value":"/ Random access to FASTA files is facilitated by [`Index`] and [`IndexedReader`]. The FASTA files","span":{"file_name":"/Users/shelwitz/.cargo/registry/src/github.com-1ecc6299db9ec823/bio-0.39.0/src/io/fasta.rs","byte_start":433326,"byte_end":433425,"line_start":107,"line_end":107,"column_start":1,"column_end":100}},{"value":"/ must already be indexed with [`samtools faidx`](https://www.htslib.org/doc/faidx.html).","span":{"file_name":"/Users/shelwitz/.cargo/registry/src/github.com-1ecc6299db9ec823/bio-0.39.0/src/io/fasta.rs","byte_start":433426,"byte_end":433517,"line_start":108,"line_end":108,"column_start":1,"column_end":92}},{"value":"/","span":{"file_name":"/Users/shelwitz/.cargo/registry/src/github.com-1ecc6299db9ec823/bio-0.39.0/src/io/fasta.rs","byte_start":433518,"byte_end":433521,"line_start":109,"line_end":109,"column_start":1,"column_end":4}},{"value":"/ In this example, we read in the first 10 bases of the sequence named \"chr1\".","span":{"file_name":"/Users/shelwitz/.cargo/registry/src/github.com-1ecc6299db9ec823/bio-0.39.0/src/io/fasta.rs","byte_start":433522,"byte_end":433602,"line_start":110,"line_end":110,"column_start":1,"column_end":81}},{"value":"/","span":{"file_name":"/Users/shelwitz/.cargo/registry/src/github.com-1ecc6299db9ec823/bio-0.39.0/src/io/fasta.rs","byte_start":433603,"byte_end":433606,"line_start":111,"line_end":111,"column_start":1,"column_end":4}},{"value":"/ ```rust","span":{"file_name":"/Users/shelwitz/.cargo/registry/src/github.com-1ecc6299db9ec823/bio-0.39.0/src/io/fasta.rs","byte_start":433607,"byte_end":433618,"line_start":112,"line_end":112,"column_start":1,"column_end":12}},{"value":"/ use bio::io::fasta::IndexedReader;","span":{"file_name":"/Users/shelwitz/.cargo/registry/src/github.com-1ecc6299db9ec823/bio-0.39.0/src/io/fasta.rs","byte_start":433619,"byte_end":433657,"line_start":113,"line_end":113,"column_start":1,"column_end":39}},{"value":"/ // create dummy files","span":{"file_name":"/Users/shelwitz/.cargo/registry/src/github.com-1ecc6299db9ec823/bio-0.39.0/src/io/fasta.rs","byte_start":433658,"byte_end":433683,"line_start":114,"line_end":114,"column_start":1,"column_end":26}},{"value":"/ const FASTA_FILE: &[u8] = b\">chr1\\nGTAGGCTGAAAA\\nCCCC\";","span":{"file_name":"/Users/shelwitz/.cargo/registry/src/github.com-1ecc6299db9ec823/bio-0.39.0/src/io/fasta.rs","byte_start":433684,"byte_end":433743,"line_start":115,"line_end":115,"column_start":1,"column_end":60}},{"value":"/ const FAI_FILE: &[u8] = b\"chr1\\t16\\t6\\t12\\t13\";","span":{"file_name":"/Users/shelwitz/.cargo/registry/src/github.com-1ecc6299db9ec823/bio-0.39.0/src/io/fasta.rs","byte_start":433744,"byte_end":433795,"line_start":116,"line_end":116,"column_start":1,"column_end":52}},{"value":"/","span":{"file_name":"/Users/shelwitz/.cargo/registry/src/github.com-1ecc6299db9ec823/bio-0.39.0/src/io/fasta.rs","byte_start":433796,"byte_end":433799,"line_start":117,"line_end":117,"column_start":1,"column_end":4}},{"value":"/ let seq_name = \"chr1\";","span":{"file_name":"/Users/shelwitz/.cargo/registry/src/github.com-1ecc6299db9ec823/bio-0.39.0/src/io/fasta.rs","byte_start":433800,"byte_end":433826,"line_start":118,"line_end":118,"column_start":1,"column_end":27}},{"value":"/ let start: u64 = 0; // start is 0-based, inclusive","span":{"file_name":"/Users/shelwitz/.cargo/registry/src/github.com-1ecc6299db9ec823/bio-0.39.0/src/io/fasta.rs","byte_start":433827,"byte_end":433881,"line_start":119,"line_end":119,"column_start":1,"column_end":55}},{"value":"/ let stop: u64 = 10; // stop is 0-based, exclusive","span":{"file_name":"/Users/shelwitz/.cargo/registry/src/github.com-1ecc6299db9ec823/bio-0.39.0/src/io/fasta.rs","byte_start":433882,"byte_end":433935,"line_start":120,"line_end":120,"column_start":1,"column_end":54}},{"value":"/                     // load the index","span":{"file_name":"/Users/shelwitz/.cargo/registry/src/github.com-1ecc6299db9ec823/bio-0.39.0/src/io/fasta.rs","byte_start":433936,"byte_end":433977,"line_start":121,"line_end":121,"column_start":1,"column_end":42}},{"value":"/ let mut faidx = IndexedReader::new(std::io::Cursor::new(FASTA_FILE), FAI_FILE).unwrap();","span":{"file_name":"/Users/shelwitz/.cargo/registry/src/github.com-1ecc6299db9ec823/bio-0.39.0/src/io/fasta.rs","byte_start":433978,"byte_end":434070,"line_start":122,"line_end":122,"column_start":1,"column_end":93}},{"value":"/ // move the pointer in the index to the desired sequence and interval","span":{"file_name":"/Users/shelwitz/.cargo/registry/src/github.com-1ecc6299db9ec823/bio-0.39.0/src/io/fasta.rs","byte_start":434071,"byte_end":434144,"line_start":123,"line_end":123,"column_start":1,"column_end":74}},{"value":"/ faidx","span":{"file_name":"/Users/shelwitz/.cargo/registry/src/github.com-1ecc6299db9ec823/bio-0.39.0/src/io/fasta.rs","byte_start":434145,"byte_end":434154,"line_start":124,"line_end":124,"column_start":1,"column_end":10}},{"value":"/     .fetch(seq_name, start, stop)","span":{"file_name":"/Users/shelwitz/.cargo/registry/src/github.com-1ecc6299db9ec823/bio-0.39.0/src/io/fasta.rs","byte_start":434155,"byte_end":434192,"line_start":125,"line_end":125,"column_start":1,"column_end":38}},{"value":"/     .expect(\"Couldn't fetch interval\");","span":{"file_name":"/Users/shelwitz/.cargo/registry/src/github.com-1ecc6299db9ec823/bio-0.39.0/src/io/fasta.rs","byte_start":434193,"byte_end":434236,"line_start":126,"line_end":126,"column_start":1,"column_end":44}},{"value":"/ // read the subsequence defined by the interval into a vector","span":{"file_name":"/Users/shelwitz/.cargo/registry/src/github.com-1ecc6299db9ec823/bio-0.39.0/src/io/fasta.rs","byte_start":434237,"byte_end":434302,"line_start":127,"line_end":127,"column_start":1,"column_end":66}},{"value":"/ let mut seq = Vec::new();","span":{"file_name":"/Users/shelwitz/.cargo/registry/src/github.com-1ecc6299db9ec823/bio-0.39.0/src/io/fasta.rs","byte_start":434303,"byte_end":434332,"line_start":128,"line_end":128,"column_start":1,"column_end":30}},{"value":"/ faidx.read(&mut seq).expect(\"Couldn't read the interval\");","span":{"file_name":"/Users/shelwitz/.cargo/registry/src/github.com-1ecc6299db9ec823/bio-0.39.0/src/io/fasta.rs","byte_start":434333,"byte_end":434395,"line_start":129,"line_end":129,"column_start":1,"column_end":63}},{"value":"/ assert_eq!(seq, b\"GTAGGCTGAA\");","span":{"file_name":"/Users/shelwitz/.cargo/registry/src/github.com-1ecc6299db9ec823/bio-0.39.0/src/io/fasta.rs","byte_start":434396,"byte_end":434431,"line_start":130,"line_end":130,"column_start":1,"column_end":36}},{"value":"/ ```","span":{"file_name":"/Users/shelwitz/.cargo/registry/src/github.com-1ecc6299db9ec823/bio-0.39.0/src/io/fasta.rs","byte_start":434432,"byte_end":434439,"line_start":131,"line_end":131,"column_start":1,"column_end":8}}]},{"kind":"Trait","id":{"krate":0,"index":1292},"span":{"file_name":"/Users/shelwitz/.cargo/registry/src/github.com-1ecc6299db9ec823/bio-0.39.0/src/io/fasta.rs","byte_start":434810,"byte_end":434819,"line_start":149,"line_end":149,"column_start":11,"column_end":20},"name":"FastaRead","qualname":"::io::fasta::FastaRead","value":"FastaRead","parent":null,"children":[{"krate":0,"index":1293}],"decl_id":null,"docs":" Trait for FASTA readers.\n","sig":null,"attributes":[{"value":"/ Trait for FASTA readers.","span":{"file_name":"/Users/shelwitz/.cargo/registry/src/github.com-1ecc6299db9ec823/bio-0.39.0/src/io/fasta.rs","byte_start":434771,"byte_end":434799,"line_start":148,"line_end":148,"column_start":1,"column_end":29}}]},{"kind":"Method","id":{"krate":0,"index":1293},"span":{"file_name":"/Users/shelwitz/.cargo/registry/src/github.com-1ecc6299db9ec823/bio-0.39.0/src/io/fasta.rs","byte_start":434829,"byte_end":434833,"line_start":150,"line_end":150,"column_start":8,"column_end":12},"name":"read","qualname":"::io::fasta::FastaRead::read","value":"pub fn read(&mut Self, &mut Record) -> io::Result<()>","parent":{"krate":0,"index":1292},"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Struct","id":{"krate":0,"index":4657},"span":{"file_name":"/Users/shelwitz/.cargo/registry/src/github.com-1ecc6299db9ec823/bio-0.39.0/src/io/fasta.rs","byte_start":434936,"byte_end":434942,"line_start":155,"line_end":155,"column_start":12,"column_end":18},"name":"Reader","qualname":"::io::fasta::Reader","value":"Reader {  }","parent":null,"children":[{"krate":0,"index":4659},{"krate":0,"index":4660}],"decl_id":null,"docs":" A FASTA reader.\n","sig":null,"attributes":[{"value":"/ A FASTA reader.","span":{"file_name":"/Users/shelwitz/.cargo/registry/src/github.com-1ecc6299db9ec823/bio-0.39.0/src/io/fasta.rs","byte_start":434888,"byte_end":434907,"line_start":153,"line_end":153,"column_start":1,"column_end":20}}]},{"kind":"Method","id":{"krate":0,"index":1295},"span":{"file_name":"/Users/shelwitz/.cargo/registry/src/github.com-1ecc6299db9ec823/bio-0.39.0/src/io/fasta.rs","byte_start":435075,"byte_end":435084,"line_start":162,"line_end":162,"column_start":12,"column_end":21},"name":"from_file","qualname":"<Reader<io::BufReader<fs::File>>>::from_file","value":"pub fn from_file<P: AsRef<Path> + std::fmt::Debug>(P) -> anyhow::Result<Self>","parent":null,"children":[],"decl_id":null,"docs":" Read FASTA from given file path.\n","sig":null,"attributes":[{"value":"/ Read FASTA from given file path.","span":{"file_name":"/Users/shelwitz/.cargo/registry/src/github.com-1ecc6299db9ec823/bio-0.39.0/src/io/fasta.rs","byte_start":435027,"byte_end":435063,"line_start":161,"line_end":161,"column_start":5,"column_end":41}}]},{"kind":"Method","id":{"krate":0,"index":1298},"span":{"file_name":"/Users/shelwitz/.cargo/registry/src/github.com-1ecc6299db9ec823/bio-0.39.0/src/io/fasta.rs","byte_start":435365,"byte_end":435388,"line_start":169,"line_end":169,"column_start":12,"column_end":35},"name":"from_file_with_capacity","qualname":"<Reader<io::BufReader<fs::File>>>::from_file_with_capacity","value":"pub fn from_file_with_capacity<P: AsRef<Path> + std::fmt::Debug>(usize, P)\n-> anyhow::Result<Self>","parent":null,"children":[],"decl_id":null,"docs":" Read FASTA from give file path and a capacity\n","sig":null,"attributes":[{"value":"/ Read FASTA from give file path and a capacity","span":{"file_name":"/Users/shelwitz/.cargo/registry/src/github.com-1ecc6299db9ec823/bio-0.39.0/src/io/fasta.rs","byte_start":435304,"byte_end":435353,"line_start":168,"line_end":168,"column_start":5,"column_end":54}}]},{"kind":"Method","id":{"krate":0,"index":1304},"span":{"file_name":"/Users/shelwitz/.cargo/registry/src/github.com-1ecc6299db9ec823/bio-0.39.0/src/io/fasta.rs","byte_start":436093,"byte_end":436096,"line_start":196,"line_end":196,"column_start":12,"column_end":15},"name":"new","qualname":"<Reader<io::BufReader<R>>>::new","value":"pub fn new(R) -> Self","parent":null,"children":[],"decl_id":null,"docs":" Create a new Fasta reader given an instance of `io::Read`.","sig":null,"attributes":[{"value":"/ Create a new Fasta reader given an instance of `io::Read`.","span":{"file_name":"/Users/shelwitz/.cargo/registry/src/github.com-1ecc6299db9ec823/bio-0.39.0/src/io/fasta.rs","byte_start":435741,"byte_end":435803,"line_start":183,"line_end":183,"column_start":5,"column_end":67}},{"value":"/","span":{"file_name":"/Users/shelwitz/.cargo/registry/src/github.com-1ecc6299db9ec823/bio-0.39.0/src/io/fasta.rs","byte_start":435808,"byte_end":435811,"line_start":184,"line_end":184,"column_start":5,"column_end":8}},{"value":"/ # Example","span":{"file_name":"/Users/shelwitz/.cargo/registry/src/github.com-1ecc6299db9ec823/bio-0.39.0/src/io/fasta.rs","byte_start":435816,"byte_end":435829,"line_start":185,"line_end":185,"column_start":5,"column_end":18}},{"value":"/ ```rust","span":{"file_name":"/Users/shelwitz/.cargo/registry/src/github.com-1ecc6299db9ec823/bio-0.39.0/src/io/fasta.rs","byte_start":435834,"byte_end":435845,"line_start":186,"line_end":186,"column_start":5,"column_end":16}},{"value":"/ # use std::io;","span":{"file_name":"/Users/shelwitz/.cargo/registry/src/github.com-1ecc6299db9ec823/bio-0.39.0/src/io/fasta.rs","byte_start":435850,"byte_end":435868,"line_start":187,"line_end":187,"column_start":5,"column_end":23}},{"value":"/ # use bio::io::fasta::Reader;","span":{"file_name":"/Users/shelwitz/.cargo/registry/src/github.com-1ecc6299db9ec823/bio-0.39.0/src/io/fasta.rs","byte_start":435873,"byte_end":435906,"line_start":188,"line_end":188,"column_start":5,"column_end":38}},{"value":"/ # fn main() {","span":{"file_name":"/Users/shelwitz/.cargo/registry/src/github.com-1ecc6299db9ec823/bio-0.39.0/src/io/fasta.rs","byte_start":435911,"byte_end":435928,"line_start":189,"line_end":189,"column_start":5,"column_end":22}},{"value":"/ # const fasta_file: &'static [u8] = b\">id desc","span":{"file_name":"/Users/shelwitz/.cargo/registry/src/github.com-1ecc6299db9ec823/bio-0.39.0/src/io/fasta.rs","byte_start":435933,"byte_end":435983,"line_start":190,"line_end":190,"column_start":5,"column_end":55}},{"value":"/ # AAAA","span":{"file_name":"/Users/shelwitz/.cargo/registry/src/github.com-1ecc6299db9ec823/bio-0.39.0/src/io/fasta.rs","byte_start":435988,"byte_end":435998,"line_start":191,"line_end":191,"column_start":5,"column_end":15}},{"value":"/ # \";","span":{"file_name":"/Users/shelwitz/.cargo/registry/src/github.com-1ecc6299db9ec823/bio-0.39.0/src/io/fasta.rs","byte_start":436003,"byte_end":436011,"line_start":192,"line_end":192,"column_start":5,"column_end":13}},{"value":"/ let reader = Reader::new(fasta_file);","span":{"file_name":"/Users/shelwitz/.cargo/registry/src/github.com-1ecc6299db9ec823/bio-0.39.0/src/io/fasta.rs","byte_start":436016,"byte_end":436057,"line_start":193,"line_end":193,"column_start":5,"column_end":46}},{"value":"/ # }","span":{"file_name":"/Users/shelwitz/.cargo/registry/src/github.com-1ecc6299db9ec823/bio-0.39.0/src/io/fasta.rs","byte_start":436062,"byte_end":436069,"line_start":194,"line_end":194,"column_start":5,"column_end":12}},{"value":"/ ```","span":{"file_name":"/Users/shelwitz/.cargo/registry/src/github.com-1ecc6299db9ec823/bio-0.39.0/src/io/fasta.rs","byte_start":436074,"byte_end":436081,"line_start":195,"line_end":195,"column_start":5,"column_end":12}}]},{"kind":"Method","id":{"krate":0,"index":1305},"span":{"file_name":"/Users/shelwitz/.cargo/registry/src/github.com-1ecc6299db9ec823/bio-0.39.0/src/io/fasta.rs","byte_start":436621,"byte_end":436634,"line_start":216,"line_end":216,"column_start":12,"column_end":25},"name":"with_capacity","qualname":"<Reader<io::BufReader<R>>>::with_capacity","value":"pub fn with_capacity(usize, R) -> Self","parent":null,"children":[],"decl_id":null,"docs":" Create a new Fasta reader given a capacity and an instance of `io::Read`.","sig":null,"attributes":[{"value":"/ Create a new Fasta reader given a capacity and an instance of `io::Read`.","span":{"file_name":"/Users/shelwitz/.cargo/registry/src/github.com-1ecc6299db9ec823/bio-0.39.0/src/io/fasta.rs","byte_start":436237,"byte_end":436314,"line_start":203,"line_end":203,"column_start":5,"column_end":82}},{"value":"/","span":{"file_name":"/Users/shelwitz/.cargo/registry/src/github.com-1ecc6299db9ec823/bio-0.39.0/src/io/fasta.rs","byte_start":436319,"byte_end":436322,"line_start":204,"line_end":204,"column_start":5,"column_end":8}},{"value":"/ # Example","span":{"file_name":"/Users/shelwitz/.cargo/registry/src/github.com-1ecc6299db9ec823/bio-0.39.0/src/io/fasta.rs","byte_start":436327,"byte_end":436340,"line_start":205,"line_end":205,"column_start":5,"column_end":18}},{"value":"/ ```rust","span":{"file_name":"/Users/shelwitz/.cargo/registry/src/github.com-1ecc6299db9ec823/bio-0.39.0/src/io/fasta.rs","byte_start":436345,"byte_end":436356,"line_start":206,"line_end":206,"column_start":5,"column_end":16}},{"value":"/ # use std::io;","span":{"file_name":"/Users/shelwitz/.cargo/registry/src/github.com-1ecc6299db9ec823/bio-0.39.0/src/io/fasta.rs","byte_start":436361,"byte_end":436379,"line_start":207,"line_end":207,"column_start":5,"column_end":23}},{"value":"/ # use bio::io::fasta::Reader;","span":{"file_name":"/Users/shelwitz/.cargo/registry/src/github.com-1ecc6299db9ec823/bio-0.39.0/src/io/fasta.rs","byte_start":436384,"byte_end":436417,"line_start":208,"line_end":208,"column_start":5,"column_end":38}},{"value":"/ # fn main() {","span":{"file_name":"/Users/shelwitz/.cargo/registry/src/github.com-1ecc6299db9ec823/bio-0.39.0/src/io/fasta.rs","byte_start":436422,"byte_end":436439,"line_start":209,"line_end":209,"column_start":5,"column_end":22}},{"value":"/ # const fasta_file: &'static [u8] = b\">id desc","span":{"file_name":"/Users/shelwitz/.cargo/registry/src/github.com-1ecc6299db9ec823/bio-0.39.0/src/io/fasta.rs","byte_start":436444,"byte_end":436494,"line_start":210,"line_end":210,"column_start":5,"column_end":55}},{"value":"/ # AAAA","span":{"file_name":"/Users/shelwitz/.cargo/registry/src/github.com-1ecc6299db9ec823/bio-0.39.0/src/io/fasta.rs","byte_start":436499,"byte_end":436509,"line_start":211,"line_end":211,"column_start":5,"column_end":15}},{"value":"/ # \";","span":{"file_name":"/Users/shelwitz/.cargo/registry/src/github.com-1ecc6299db9ec823/bio-0.39.0/src/io/fasta.rs","byte_start":436514,"byte_end":436522,"line_start":212,"line_end":212,"column_start":5,"column_end":13}},{"value":"/ let reader = Reader::with_capacity(16384, fasta_file);","span":{"file_name":"/Users/shelwitz/.cargo/registry/src/github.com-1ecc6299db9ec823/bio-0.39.0/src/io/fasta.rs","byte_start":436527,"byte_end":436585,"line_start":213,"line_end":213,"column_start":5,"column_end":63}},{"value":"/ # }","span":{"file_name":"/Users/shelwitz/.cargo/registry/src/github.com-1ecc6299db9ec823/bio-0.39.0/src/io/fasta.rs","byte_start":436590,"byte_end":436597,"line_start":214,"line_end":214,"column_start":5,"column_end":12}},{"value":"/ ```","span":{"file_name":"/Users/shelwitz/.cargo/registry/src/github.com-1ecc6299db9ec823/bio-0.39.0/src/io/fasta.rs","byte_start":436602,"byte_end":436609,"line_start":215,"line_end":215,"column_start":5,"column_end":12}}]},{"kind":"Method","id":{"krate":0,"index":1308},"span":{"file_name":"/Users/shelwitz/.cargo/registry/src/github.com-1ecc6299db9ec823/bio-0.39.0/src/io/fasta.rs","byte_start":437300,"byte_end":437312,"line_start":242,"line_end":242,"column_start":12,"column_end":24},"name":"from_bufread","qualname":"<Reader<B>>::from_bufread","value":"pub fn from_bufread(B) -> Self","parent":null,"children":[],"decl_id":null,"docs":" Create a new Fasta reader with an object that implements `io::BufRead`.","sig":null,"attributes":[{"value":"/ Create a new Fasta reader with an object that implements `io::BufRead`.","span":{"file_name":"/Users/shelwitz/.cargo/registry/src/github.com-1ecc6299db9ec823/bio-0.39.0/src/io/fasta.rs","byte_start":436860,"byte_end":436935,"line_start":228,"line_end":228,"column_start":5,"column_end":80}},{"value":"/","span":{"file_name":"/Users/shelwitz/.cargo/registry/src/github.com-1ecc6299db9ec823/bio-0.39.0/src/io/fasta.rs","byte_start":436940,"byte_end":436943,"line_start":229,"line_end":229,"column_start":5,"column_end":8}},{"value":"/ # Example","span":{"file_name":"/Users/shelwitz/.cargo/registry/src/github.com-1ecc6299db9ec823/bio-0.39.0/src/io/fasta.rs","byte_start":436948,"byte_end":436961,"line_start":230,"line_end":230,"column_start":5,"column_end":18}},{"value":"/ ```rust","span":{"file_name":"/Users/shelwitz/.cargo/registry/src/github.com-1ecc6299db9ec823/bio-0.39.0/src/io/fasta.rs","byte_start":436966,"byte_end":436977,"line_start":231,"line_end":231,"column_start":5,"column_end":16}},{"value":"/ # use std::io;","span":{"file_name":"/Users/shelwitz/.cargo/registry/src/github.com-1ecc6299db9ec823/bio-0.39.0/src/io/fasta.rs","byte_start":436982,"byte_end":437000,"line_start":232,"line_end":232,"column_start":5,"column_end":23}},{"value":"/ # use bio::io::fasta::Reader;","span":{"file_name":"/Users/shelwitz/.cargo/registry/src/github.com-1ecc6299db9ec823/bio-0.39.0/src/io/fasta.rs","byte_start":437005,"byte_end":437038,"line_start":233,"line_end":233,"column_start":5,"column_end":38}},{"value":"/ # fn main() {","span":{"file_name":"/Users/shelwitz/.cargo/registry/src/github.com-1ecc6299db9ec823/bio-0.39.0/src/io/fasta.rs","byte_start":437043,"byte_end":437060,"line_start":234,"line_end":234,"column_start":5,"column_end":22}},{"value":"/ # const fasta_file: &'static [u8] = b\">id desc","span":{"file_name":"/Users/shelwitz/.cargo/registry/src/github.com-1ecc6299db9ec823/bio-0.39.0/src/io/fasta.rs","byte_start":437065,"byte_end":437115,"line_start":235,"line_end":235,"column_start":5,"column_end":55}},{"value":"/ # AAAA","span":{"file_name":"/Users/shelwitz/.cargo/registry/src/github.com-1ecc6299db9ec823/bio-0.39.0/src/io/fasta.rs","byte_start":437120,"byte_end":437130,"line_start":236,"line_end":236,"column_start":5,"column_end":15}},{"value":"/ # \";","span":{"file_name":"/Users/shelwitz/.cargo/registry/src/github.com-1ecc6299db9ec823/bio-0.39.0/src/io/fasta.rs","byte_start":437135,"byte_end":437143,"line_start":237,"line_end":237,"column_start":5,"column_end":13}},{"value":"/ let buffer = io::BufReader::with_capacity(16384, fasta_file);","span":{"file_name":"/Users/shelwitz/.cargo/registry/src/github.com-1ecc6299db9ec823/bio-0.39.0/src/io/fasta.rs","byte_start":437148,"byte_end":437213,"line_start":238,"line_end":238,"column_start":5,"column_end":70}},{"value":"/ let reader = Reader::from_bufread(buffer);","span":{"file_name":"/Users/shelwitz/.cargo/registry/src/github.com-1ecc6299db9ec823/bio-0.39.0/src/io/fasta.rs","byte_start":437218,"byte_end":437264,"line_start":239,"line_end":239,"column_start":5,"column_end":51}},{"value":"/ # }","span":{"file_name":"/Users/shelwitz/.cargo/registry/src/github.com-1ecc6299db9ec823/bio-0.39.0/src/io/fasta.rs","byte_start":437269,"byte_end":437276,"line_start":240,"line_end":240,"column_start":5,"column_end":12}},{"value":"/ ```","span":{"file_name":"/Users/shelwitz/.cargo/registry/src/github.com-1ecc6299db9ec823/bio-0.39.0/src/io/fasta.rs","byte_start":437281,"byte_end":437288,"line_start":241,"line_end":241,"column_start":5,"column_end":12}}]},{"kind":"Method","id":{"krate":0,"index":1309},"span":{"file_name":"/Users/shelwitz/.cargo/registry/src/github.com-1ecc6299db9ec823/bio-0.39.0/src/io/fasta.rs","byte_start":438076,"byte_end":438083,"line_start":269,"line_end":269,"column_start":12,"column_end":19},"name":"records","qualname":"<Reader<B>>::records","value":"pub fn records(Self) -> Records<B>","parent":null,"children":[],"decl_id":null,"docs":" Return an iterator over the records of this Fasta file.","sig":null,"attributes":[{"value":"/ Return an iterator over the records of this Fasta file.","span":{"file_name":"/Users/shelwitz/.cargo/registry/src/github.com-1ecc6299db9ec823/bio-0.39.0/src/io/fasta.rs","byte_start":437439,"byte_end":437498,"line_start":249,"line_end":249,"column_start":5,"column_end":64}},{"value":"/","span":{"file_name":"/Users/shelwitz/.cargo/registry/src/github.com-1ecc6299db9ec823/bio-0.39.0/src/io/fasta.rs","byte_start":437503,"byte_end":437506,"line_start":250,"line_end":250,"column_start":5,"column_end":8}},{"value":"/ # Example","span":{"file_name":"/Users/shelwitz/.cargo/registry/src/github.com-1ecc6299db9ec823/bio-0.39.0/src/io/fasta.rs","byte_start":437511,"byte_end":437524,"line_start":251,"line_end":251,"column_start":5,"column_end":18}},{"value":"/ ```rust","span":{"file_name":"/Users/shelwitz/.cargo/registry/src/github.com-1ecc6299db9ec823/bio-0.39.0/src/io/fasta.rs","byte_start":437529,"byte_end":437540,"line_start":252,"line_end":252,"column_start":5,"column_end":16}},{"value":"/ # use std::io;","span":{"file_name":"/Users/shelwitz/.cargo/registry/src/github.com-1ecc6299db9ec823/bio-0.39.0/src/io/fasta.rs","byte_start":437545,"byte_end":437563,"line_start":253,"line_end":253,"column_start":5,"column_end":23}},{"value":"/ # use bio::io::fasta::Reader;","span":{"file_name":"/Users/shelwitz/.cargo/registry/src/github.com-1ecc6299db9ec823/bio-0.39.0/src/io/fasta.rs","byte_start":437568,"byte_end":437601,"line_start":254,"line_end":254,"column_start":5,"column_end":38}},{"value":"/ # use bio::io::fasta::Record;","span":{"file_name":"/Users/shelwitz/.cargo/registry/src/github.com-1ecc6299db9ec823/bio-0.39.0/src/io/fasta.rs","byte_start":437606,"byte_end":437639,"line_start":255,"line_end":255,"column_start":5,"column_end":38}},{"value":"/ # fn main() {","span":{"file_name":"/Users/shelwitz/.cargo/registry/src/github.com-1ecc6299db9ec823/bio-0.39.0/src/io/fasta.rs","byte_start":437644,"byte_end":437661,"line_start":256,"line_end":256,"column_start":5,"column_end":22}},{"value":"/ # const fasta_file: &'static [u8] = b\">id desc","span":{"file_name":"/Users/shelwitz/.cargo/registry/src/github.com-1ecc6299db9ec823/bio-0.39.0/src/io/fasta.rs","byte_start":437666,"byte_end":437716,"line_start":257,"line_end":257,"column_start":5,"column_end":55}},{"value":"/ # AAAA","span":{"file_name":"/Users/shelwitz/.cargo/registry/src/github.com-1ecc6299db9ec823/bio-0.39.0/src/io/fasta.rs","byte_start":437721,"byte_end":437731,"line_start":258,"line_end":258,"column_start":5,"column_end":15}},{"value":"/ # \";","span":{"file_name":"/Users/shelwitz/.cargo/registry/src/github.com-1ecc6299db9ec823/bio-0.39.0/src/io/fasta.rs","byte_start":437736,"byte_end":437744,"line_start":259,"line_end":259,"column_start":5,"column_end":13}},{"value":"/ # let reader = Reader::new(fasta_file);","span":{"file_name":"/Users/shelwitz/.cargo/registry/src/github.com-1ecc6299db9ec823/bio-0.39.0/src/io/fasta.rs","byte_start":437749,"byte_end":437792,"line_start":260,"line_end":260,"column_start":5,"column_end":48}},{"value":"/ for record in reader.records() {","span":{"file_name":"/Users/shelwitz/.cargo/registry/src/github.com-1ecc6299db9ec823/bio-0.39.0/src/io/fasta.rs","byte_start":437797,"byte_end":437833,"line_start":261,"line_end":261,"column_start":5,"column_end":41}},{"value":"/     let record = record.unwrap();","span":{"file_name":"/Users/shelwitz/.cargo/registry/src/github.com-1ecc6299db9ec823/bio-0.39.0/src/io/fasta.rs","byte_start":437838,"byte_end":437875,"line_start":262,"line_end":262,"column_start":5,"column_end":42}},{"value":"/     assert_eq!(record.id(), \"id\");","span":{"file_name":"/Users/shelwitz/.cargo/registry/src/github.com-1ecc6299db9ec823/bio-0.39.0/src/io/fasta.rs","byte_start":437880,"byte_end":437918,"line_start":263,"line_end":263,"column_start":5,"column_end":43}},{"value":"/     assert_eq!(record.desc().unwrap(), \"desc\");","span":{"file_name":"/Users/shelwitz/.cargo/registry/src/github.com-1ecc6299db9ec823/bio-0.39.0/src/io/fasta.rs","byte_start":437923,"byte_end":437974,"line_start":264,"line_end":264,"column_start":5,"column_end":56}},{"value":"/     assert_eq!(record.seq().to_vec(), b\"AAAA\");","span":{"file_name":"/Users/shelwitz/.cargo/registry/src/github.com-1ecc6299db9ec823/bio-0.39.0/src/io/fasta.rs","byte_start":437979,"byte_end":438030,"line_start":265,"line_end":265,"column_start":5,"column_end":56}},{"value":"/ }","span":{"file_name":"/Users/shelwitz/.cargo/registry/src/github.com-1ecc6299db9ec823/bio-0.39.0/src/io/fasta.rs","byte_start":438035,"byte_end":438040,"line_start":266,"line_end":266,"column_start":5,"column_end":10}},{"value":"/ # }","span":{"file_name":"/Users/shelwitz/.cargo/registry/src/github.com-1ecc6299db9ec823/bio-0.39.0/src/io/fasta.rs","byte_start":438045,"byte_end":438052,"line_start":267,"line_end":267,"column_start":5,"column_end":12}},{"value":"/ ```","span":{"file_name":"/Users/shelwitz/.cargo/registry/src/github.com-1ecc6299db9ec823/bio-0.39.0/src/io/fasta.rs","byte_start":438057,"byte_end":438064,"line_start":268,"line_end":268,"column_start":5,"column_end":12}}]},{"kind":"Struct","id":{"krate":0,"index":4664},"span":{"file_name":"/Users/shelwitz/.cargo/registry/src/github.com-1ecc6299db9ec823/bio-0.39.0/src/io/fasta.rs","byte_start":440558,"byte_end":440563,"line_start":349,"line_end":349,"column_start":12,"column_end":17},"name":"Index","qualname":"::io::fasta::Index","value":"Index {  }","parent":null,"children":[{"krate":0,"index":4665},{"krate":0,"index":4666}],"decl_id":null,"docs":" A FASTA index as created by SAMtools (.fai).\n","sig":null,"attributes":[{"value":"/ A FASTA index as created by SAMtools (.fai).","span":{"file_name":"/Users/shelwitz/.cargo/registry/src/github.com-1ecc6299db9ec823/bio-0.39.0/src/io/fasta.rs","byte_start":440474,"byte_end":440522,"line_start":347,"line_end":347,"column_start":1,"column_end":49}}]},{"kind":"Method","id":{"krate":0,"index":1316},"span":{"file_name":"/Users/shelwitz/.cargo/registry/src/github.com-1ecc6299db9ec823/bio-0.39.0/src/io/fasta.rs","byte_start":440737,"byte_end":440740,"line_start":356,"line_end":356,"column_start":12,"column_end":15},"name":"new","qualname":"<Index>::new","value":"pub fn new<R: io::Read>(R) -> csv::Result<Self>","parent":null,"children":[],"decl_id":null,"docs":" Open a FASTA index from a given `io::Read` instance.\n","sig":null,"attributes":[{"value":"/ Open a FASTA index from a given `io::Read` instance.","span":{"file_name":"/Users/shelwitz/.cargo/registry/src/github.com-1ecc6299db9ec823/bio-0.39.0/src/io/fasta.rs","byte_start":440669,"byte_end":440725,"line_start":355,"line_end":355,"column_start":5,"column_end":61}}]},{"kind":"Method","id":{"krate":0,"index":1318},"span":{"file_name":"/Users/shelwitz/.cargo/registry/src/github.com-1ecc6299db9ec823/bio-0.39.0/src/io/fasta.rs","byte_start":441344,"byte_end":441353,"line_start":373,"line_end":373,"column_start":12,"column_end":21},"name":"from_file","qualname":"<Index>::from_file","value":"pub fn from_file<P: AsRef<Path> + std::fmt::Debug>(&P) -> anyhow::Result<Self>","parent":null,"children":[],"decl_id":null,"docs":" Open a FASTA index from a given file path.\n","sig":null,"attributes":[{"value":"/ Open a FASTA index from a given file path.","span":{"file_name":"/Users/shelwitz/.cargo/registry/src/github.com-1ecc6299db9ec823/bio-0.39.0/src/io/fasta.rs","byte_start":441286,"byte_end":441332,"line_start":372,"line_end":372,"column_start":5,"column_end":51}}]},{"kind":"Method","id":{"krate":0,"index":1321},"span":{"file_name":"/Users/shelwitz/.cargo/registry/src/github.com-1ecc6299db9ec823/bio-0.39.0/src/io/fasta.rs","byte_start":441753,"byte_end":441768,"line_start":382,"line_end":382,"column_start":12,"column_end":27},"name":"with_fasta_file","qualname":"<Index>::with_fasta_file","value":"pub fn with_fasta_file<P: AsRef<Path>>(&P) -> anyhow::Result<Self>","parent":null,"children":[],"decl_id":null,"docs":" Open a FASTA index given the corresponding FASTA file path.\n That is, for ref.fasta we expect ref.fasta.fai.\n","sig":null,"attributes":[{"value":"/ Open a FASTA index given the corresponding FASTA file path.","span":{"file_name":"/Users/shelwitz/.cargo/registry/src/github.com-1ecc6299db9ec823/bio-0.39.0/src/io/fasta.rs","byte_start":441622,"byte_end":441685,"line_start":380,"line_end":380,"column_start":5,"column_end":68}},{"value":"/ That is, for ref.fasta we expect ref.fasta.fai.","span":{"file_name":"/Users/shelwitz/.cargo/registry/src/github.com-1ecc6299db9ec823/bio-0.39.0/src/io/fasta.rs","byte_start":441690,"byte_end":441741,"line_start":381,"line_end":381,"column_start":5,"column_end":56}}]},{"kind":"Method","id":{"krate":0,"index":1323},"span":{"file_name":"/Users/shelwitz/.cargo/registry/src/github.com-1ecc6299db9ec823/bio-0.39.0/src/io/fasta.rs","byte_start":442044,"byte_end":442053,"line_start":390,"line_end":390,"column_start":12,"column_end":21},"name":"sequences","qualname":"<Index>::sequences","value":"pub fn sequences(&Self) -> Vec<Sequence>","parent":null,"children":[],"decl_id":null,"docs":" Return a vector of sequences described in the index.\n","sig":null,"attributes":[{"value":"/ Return a vector of sequences described in the index.","span":{"file_name":"/Users/shelwitz/.cargo/registry/src/github.com-1ecc6299db9ec823/bio-0.39.0/src/io/fasta.rs","byte_start":441976,"byte_end":442032,"line_start":389,"line_end":389,"column_start":5,"column_end":61}}]},{"kind":"Struct","id":{"krate":0,"index":4671},"span":{"file_name":"/Users/shelwitz/.cargo/registry/src/github.com-1ecc6299db9ec823/bio-0.39.0/src/io/fasta.rs","byte_start":442421,"byte_end":442434,"line_start":404,"line_end":404,"column_start":12,"column_end":25},"name":"IndexedReader","qualname":"::io::fasta::IndexedReader","value":"IndexedReader { index }","parent":null,"children":[{"krate":0,"index":4673},{"krate":0,"index":4674},{"krate":0,"index":4675},{"krate":0,"index":4676},{"krate":0,"index":4677}],"decl_id":null,"docs":" A FASTA reader with an index as created by SAMtools (.fai).\n","sig":null,"attributes":[{"value":"/ A FASTA reader with an index as created by SAMtools (.fai).","span":{"file_name":"/Users/shelwitz/.cargo/registry/src/github.com-1ecc6299db9ec823/bio-0.39.0/src/io/fasta.rs","byte_start":442329,"byte_end":442392,"line_start":402,"line_end":402,"column_start":1,"column_end":64}}]},{"kind":"Field","id":{"krate":0,"index":4674},"span":{"file_name":"/Users/shelwitz/.cargo/registry/src/github.com-1ecc6299db9ec823/bio-0.39.0/src/io/fasta.rs","byte_start":442499,"byte_end":442504,"line_start":406,"line_end":406,"column_start":9,"column_end":14},"name":"index","qualname":"::io::fasta::IndexedReader::index","value":"io::fasta::Index","parent":{"krate":0,"index":4671},"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":1326},"span":{"file_name":"/Users/shelwitz/.cargo/registry/src/github.com-1ecc6299db9ec823/bio-0.39.0/src/io/fasta.rs","byte_start":442760,"byte_end":442769,"line_start":415,"line_end":415,"column_start":12,"column_end":21},"name":"from_file","qualname":"<IndexedReader<fs::File>>::from_file","value":"pub fn from_file<P: AsRef<Path> + std::fmt::Debug>(&P) -> anyhow::Result<Self>","parent":null,"children":[],"decl_id":null,"docs":" Read from a given file path. This assumes the index ref.fasta.fai to be\n present for FASTA ref.fasta.\n","sig":null,"attributes":[{"value":"/ Read from a given file path. This assumes the index ref.fasta.fai to be","span":{"file_name":"/Users/shelwitz/.cargo/registry/src/github.com-1ecc6299db9ec823/bio-0.39.0/src/io/fasta.rs","byte_start":442636,"byte_end":442711,"line_start":413,"line_end":413,"column_start":5,"column_end":80}},{"value":"/ present for FASTA ref.fasta.","span":{"file_name":"/Users/shelwitz/.cargo/registry/src/github.com-1ecc6299db9ec823/bio-0.39.0/src/io/fasta.rs","byte_start":442716,"byte_end":442748,"line_start":414,"line_end":414,"column_start":5,"column_end":37}}]},{"kind":"Method","id":{"krate":0,"index":1332},"span":{"file_name":"/Users/shelwitz/.cargo/registry/src/github.com-1ecc6299db9ec823/bio-0.39.0/src/io/fasta.rs","byte_start":443271,"byte_end":443274,"line_start":427,"line_end":427,"column_start":12,"column_end":15},"name":"new","qualname":"<IndexedReader<R>>::new","value":"pub fn new<I: io::Read>(R, I) -> csv::Result<Self>","parent":null,"children":[],"decl_id":null,"docs":" Read from a FASTA and its index, both given as `io::Read`. FASTA has to\n be `io::Seek` in addition.\n","sig":null,"attributes":[{"value":"/ Read from a FASTA and its index, both given as `io::Read`. FASTA has to","span":{"file_name":"/Users/shelwitz/.cargo/registry/src/github.com-1ecc6299db9ec823/bio-0.39.0/src/io/fasta.rs","byte_start":443149,"byte_end":443224,"line_start":425,"line_end":425,"column_start":5,"column_end":80}},{"value":"/ be `io::Seek` in addition.","span":{"file_name":"/Users/shelwitz/.cargo/registry/src/github.com-1ecc6299db9ec823/bio-0.39.0/src/io/fasta.rs","byte_start":443229,"byte_end":443259,"line_start":426,"line_end":426,"column_start":5,"column_end":35}}]},{"kind":"Method","id":{"krate":0,"index":1334},"span":{"file_name":"/Users/shelwitz/.cargo/registry/src/github.com-1ecc6299db9ec823/bio-0.39.0/src/io/fasta.rs","byte_start":443683,"byte_end":443693,"line_start":440,"line_end":440,"column_start":12,"column_end":22},"name":"with_index","qualname":"<IndexedReader<R>>::with_index","value":"pub fn with_index(R, Index) -> Self","parent":null,"children":[],"decl_id":null,"docs":" Read from a FASTA and its index, the first given as `io::Read`, the\n second given as index object.\n","sig":null,"attributes":[{"value":"/ Read from a FASTA and its index, the first given as `io::Read`, the","span":{"file_name":"/Users/shelwitz/.cargo/registry/src/github.com-1ecc6299db9ec823/bio-0.39.0/src/io/fasta.rs","byte_start":443562,"byte_end":443633,"line_start":438,"line_end":438,"column_start":5,"column_end":76}},{"value":"/ second given as index object.","span":{"file_name":"/Users/shelwitz/.cargo/registry/src/github.com-1ecc6299db9ec823/bio-0.39.0/src/io/fasta.rs","byte_start":443638,"byte_end":443671,"line_start":439,"line_end":439,"column_start":5,"column_end":38}}]},{"kind":"Method","id":{"krate":0,"index":1335},"span":{"file_name":"/Users/shelwitz/.cargo/registry/src/github.com-1ecc6299db9ec823/bio-0.39.0/src/io/fasta.rs","byte_start":445128,"byte_end":445133,"line_start":479,"line_end":479,"column_start":12,"column_end":17},"name":"fetch","qualname":"<IndexedReader<R>>::fetch","value":"pub fn fetch(&mut Self, &str, u64, u64) -> io::Result<()>","parent":null,"children":[],"decl_id":null,"docs":" Fetch an interval from the sequence with the given name for reading.","sig":null,"attributes":[{"value":"/ Fetch an interval from the sequence with the given name for reading.","span":{"file_name":"/Users/shelwitz/.cargo/registry/src/github.com-1ecc6299db9ec823/bio-0.39.0/src/io/fasta.rs","byte_start":443919,"byte_end":443991,"line_start":450,"line_end":450,"column_start":5,"column_end":77}},{"value":"/","span":{"file_name":"/Users/shelwitz/.cargo/registry/src/github.com-1ecc6299db9ec823/bio-0.39.0/src/io/fasta.rs","byte_start":443996,"byte_end":443999,"line_start":451,"line_end":451,"column_start":5,"column_end":8}},{"value":"/ `start` and `stop` are 0-based and `stop` is exclusive - i.e. `[start, stop)`","span":{"file_name":"/Users/shelwitz/.cargo/registry/src/github.com-1ecc6299db9ec823/bio-0.39.0/src/io/fasta.rs","byte_start":444004,"byte_end":444085,"line_start":452,"line_end":452,"column_start":5,"column_end":86}},{"value":"/","span":{"file_name":"/Users/shelwitz/.cargo/registry/src/github.com-1ecc6299db9ec823/bio-0.39.0/src/io/fasta.rs","byte_start":444090,"byte_end":444093,"line_start":453,"line_end":453,"column_start":5,"column_end":8}},{"value":"/ # Example","span":{"file_name":"/Users/shelwitz/.cargo/registry/src/github.com-1ecc6299db9ec823/bio-0.39.0/src/io/fasta.rs","byte_start":444098,"byte_end":444111,"line_start":454,"line_end":454,"column_start":5,"column_end":18}},{"value":"/","span":{"file_name":"/Users/shelwitz/.cargo/registry/src/github.com-1ecc6299db9ec823/bio-0.39.0/src/io/fasta.rs","byte_start":444116,"byte_end":444119,"line_start":455,"line_end":455,"column_start":5,"column_end":8}},{"value":"/ ```rust","span":{"file_name":"/Users/shelwitz/.cargo/registry/src/github.com-1ecc6299db9ec823/bio-0.39.0/src/io/fasta.rs","byte_start":444124,"byte_end":444135,"line_start":456,"line_end":456,"column_start":5,"column_end":16}},{"value":"/ use bio::io::fasta::IndexedReader;","span":{"file_name":"/Users/shelwitz/.cargo/registry/src/github.com-1ecc6299db9ec823/bio-0.39.0/src/io/fasta.rs","byte_start":444140,"byte_end":444178,"line_start":457,"line_end":457,"column_start":5,"column_end":43}},{"value":"/ // create dummy files","span":{"file_name":"/Users/shelwitz/.cargo/registry/src/github.com-1ecc6299db9ec823/bio-0.39.0/src/io/fasta.rs","byte_start":444183,"byte_end":444208,"line_start":458,"line_end":458,"column_start":5,"column_end":30}},{"value":"/ const FASTA_FILE: &[u8] = b\">chr1\\nGTAGGCTGAAAA\\nCCCC\";","span":{"file_name":"/Users/shelwitz/.cargo/registry/src/github.com-1ecc6299db9ec823/bio-0.39.0/src/io/fasta.rs","byte_start":444213,"byte_end":444272,"line_start":459,"line_end":459,"column_start":5,"column_end":64}},{"value":"/ const FAI_FILE: &[u8] = b\"chr1\\t16\\t6\\t12\\t13\";","span":{"file_name":"/Users/shelwitz/.cargo/registry/src/github.com-1ecc6299db9ec823/bio-0.39.0/src/io/fasta.rs","byte_start":444277,"byte_end":444328,"line_start":460,"line_end":460,"column_start":5,"column_end":56}},{"value":"/","span":{"file_name":"/Users/shelwitz/.cargo/registry/src/github.com-1ecc6299db9ec823/bio-0.39.0/src/io/fasta.rs","byte_start":444333,"byte_end":444336,"line_start":461,"line_end":461,"column_start":5,"column_end":8}},{"value":"/ let seq_name = \"chr1\";","span":{"file_name":"/Users/shelwitz/.cargo/registry/src/github.com-1ecc6299db9ec823/bio-0.39.0/src/io/fasta.rs","byte_start":444341,"byte_end":444367,"line_start":462,"line_end":462,"column_start":5,"column_end":31}},{"value":"/ let start: u64 = 0; // start is 0-based, inclusive","span":{"file_name":"/Users/shelwitz/.cargo/registry/src/github.com-1ecc6299db9ec823/bio-0.39.0/src/io/fasta.rs","byte_start":444372,"byte_end":444426,"line_start":463,"line_end":463,"column_start":5,"column_end":59}},{"value":"/ let stop: u64 = 10; // stop is 0-based, exclusive","span":{"file_name":"/Users/shelwitz/.cargo/registry/src/github.com-1ecc6299db9ec823/bio-0.39.0/src/io/fasta.rs","byte_start":444431,"byte_end":444484,"line_start":464,"line_end":464,"column_start":5,"column_end":58}},{"value":"/                     // load the index","span":{"file_name":"/Users/shelwitz/.cargo/registry/src/github.com-1ecc6299db9ec823/bio-0.39.0/src/io/fasta.rs","byte_start":444489,"byte_end":444530,"line_start":465,"line_end":465,"column_start":5,"column_end":46}},{"value":"/ let mut faidx = IndexedReader::new(std::io::Cursor::new(FASTA_FILE), FAI_FILE).unwrap();","span":{"file_name":"/Users/shelwitz/.cargo/registry/src/github.com-1ecc6299db9ec823/bio-0.39.0/src/io/fasta.rs","byte_start":444535,"byte_end":444627,"line_start":466,"line_end":466,"column_start":5,"column_end":97}},{"value":"/ // move the pointer in the index to the desired sequence and interval","span":{"file_name":"/Users/shelwitz/.cargo/registry/src/github.com-1ecc6299db9ec823/bio-0.39.0/src/io/fasta.rs","byte_start":444632,"byte_end":444705,"line_start":467,"line_end":467,"column_start":5,"column_end":78}},{"value":"/ faidx","span":{"file_name":"/Users/shelwitz/.cargo/registry/src/github.com-1ecc6299db9ec823/bio-0.39.0/src/io/fasta.rs","byte_start":444710,"byte_end":444719,"line_start":468,"line_end":468,"column_start":5,"column_end":14}},{"value":"/     .fetch(seq_name, start, stop)","span":{"file_name":"/Users/shelwitz/.cargo/registry/src/github.com-1ecc6299db9ec823/bio-0.39.0/src/io/fasta.rs","byte_start":444724,"byte_end":444761,"line_start":469,"line_end":469,"column_start":5,"column_end":42}},{"value":"/     .expect(\"Couldn't fetch interval\");","span":{"file_name":"/Users/shelwitz/.cargo/registry/src/github.com-1ecc6299db9ec823/bio-0.39.0/src/io/fasta.rs","byte_start":444766,"byte_end":444809,"line_start":470,"line_end":470,"column_start":5,"column_end":48}},{"value":"/ // read the subsequence defined by the interval into a vector","span":{"file_name":"/Users/shelwitz/.cargo/registry/src/github.com-1ecc6299db9ec823/bio-0.39.0/src/io/fasta.rs","byte_start":444814,"byte_end":444879,"line_start":471,"line_end":471,"column_start":5,"column_end":70}},{"value":"/ let mut seq = Vec::new();","span":{"file_name":"/Users/shelwitz/.cargo/registry/src/github.com-1ecc6299db9ec823/bio-0.39.0/src/io/fasta.rs","byte_start":444884,"byte_end":444913,"line_start":472,"line_end":472,"column_start":5,"column_end":34}},{"value":"/ faidx.read(&mut seq).expect(\"Couldn't read the interval\");","span":{"file_name":"/Users/shelwitz/.cargo/registry/src/github.com-1ecc6299db9ec823/bio-0.39.0/src/io/fasta.rs","byte_start":444918,"byte_end":444980,"line_start":473,"line_end":473,"column_start":5,"column_end":67}},{"value":"/ assert_eq!(seq, b\"GTAGGCTGAA\");","span":{"file_name":"/Users/shelwitz/.cargo/registry/src/github.com-1ecc6299db9ec823/bio-0.39.0/src/io/fasta.rs","byte_start":444985,"byte_end":445020,"line_start":474,"line_end":474,"column_start":5,"column_end":40}},{"value":"/ ```","span":{"file_name":"/Users/shelwitz/.cargo/registry/src/github.com-1ecc6299db9ec823/bio-0.39.0/src/io/fasta.rs","byte_start":445025,"byte_end":445032,"line_start":475,"line_end":475,"column_start":5,"column_end":12}},{"value":"/","span":{"file_name":"/Users/shelwitz/.cargo/registry/src/github.com-1ecc6299db9ec823/bio-0.39.0/src/io/fasta.rs","byte_start":445037,"byte_end":445040,"line_start":476,"line_end":476,"column_start":5,"column_end":8}},{"value":"/ # Errors","span":{"file_name":"/Users/shelwitz/.cargo/registry/src/github.com-1ecc6299db9ec823/bio-0.39.0/src/io/fasta.rs","byte_start":445045,"byte_end":445057,"line_start":477,"line_end":477,"column_start":5,"column_end":17}},{"value":"/ If the `seq_name` does not exist within the index.","span":{"file_name":"/Users/shelwitz/.cargo/registry/src/github.com-1ecc6299db9ec823/bio-0.39.0/src/io/fasta.rs","byte_start":445062,"byte_end":445116,"line_start":478,"line_end":478,"column_start":5,"column_end":59}}]},{"kind":"Method","id":{"krate":0,"index":1336},"span":{"file_name":"/Users/shelwitz/.cargo/registry/src/github.com-1ecc6299db9ec823/bio-0.39.0/src/io/fasta.rs","byte_start":446580,"byte_end":446592,"line_start":516,"line_end":516,"column_start":12,"column_end":24},"name":"fetch_by_rid","qualname":"<IndexedReader<R>>::fetch_by_rid","value":"pub fn fetch_by_rid(&mut Self, usize, u64, u64) -> io::Result<()>","parent":null,"children":[],"decl_id":null,"docs":" Fetch an interval from the sequence with the given record index for reading.","sig":null,"attributes":[{"value":"/ Fetch an interval from the sequence with the given record index for reading.","span":{"file_name":"/Users/shelwitz/.cargo/registry/src/github.com-1ecc6299db9ec823/bio-0.39.0/src/io/fasta.rs","byte_start":445373,"byte_end":445453,"line_start":487,"line_end":487,"column_start":5,"column_end":85}},{"value":"/","span":{"file_name":"/Users/shelwitz/.cargo/registry/src/github.com-1ecc6299db9ec823/bio-0.39.0/src/io/fasta.rs","byte_start":445458,"byte_end":445461,"line_start":488,"line_end":488,"column_start":5,"column_end":8}},{"value":"/ `start` and `stop` are 0-based and `stop` is exclusive - i.e. `[start, stop)`","span":{"file_name":"/Users/shelwitz/.cargo/registry/src/github.com-1ecc6299db9ec823/bio-0.39.0/src/io/fasta.rs","byte_start":445466,"byte_end":445547,"line_start":489,"line_end":489,"column_start":5,"column_end":86}},{"value":"/","span":{"file_name":"/Users/shelwitz/.cargo/registry/src/github.com-1ecc6299db9ec823/bio-0.39.0/src/io/fasta.rs","byte_start":445552,"byte_end":445555,"line_start":490,"line_end":490,"column_start":5,"column_end":8}},{"value":"/ # Example","span":{"file_name":"/Users/shelwitz/.cargo/registry/src/github.com-1ecc6299db9ec823/bio-0.39.0/src/io/fasta.rs","byte_start":445560,"byte_end":445573,"line_start":491,"line_end":491,"column_start":5,"column_end":18}},{"value":"/","span":{"file_name":"/Users/shelwitz/.cargo/registry/src/github.com-1ecc6299db9ec823/bio-0.39.0/src/io/fasta.rs","byte_start":445578,"byte_end":445581,"line_start":492,"line_end":492,"column_start":5,"column_end":8}},{"value":"/ ```rust","span":{"file_name":"/Users/shelwitz/.cargo/registry/src/github.com-1ecc6299db9ec823/bio-0.39.0/src/io/fasta.rs","byte_start":445586,"byte_end":445597,"line_start":493,"line_end":493,"column_start":5,"column_end":16}},{"value":"/ use bio::io::fasta::IndexedReader;","span":{"file_name":"/Users/shelwitz/.cargo/registry/src/github.com-1ecc6299db9ec823/bio-0.39.0/src/io/fasta.rs","byte_start":445602,"byte_end":445640,"line_start":494,"line_end":494,"column_start":5,"column_end":43}},{"value":"/ // create dummy files","span":{"file_name":"/Users/shelwitz/.cargo/registry/src/github.com-1ecc6299db9ec823/bio-0.39.0/src/io/fasta.rs","byte_start":445645,"byte_end":445670,"line_start":495,"line_end":495,"column_start":5,"column_end":30}},{"value":"/ const FASTA_FILE: &[u8] = b\">chr1\\nGTAGGCTGAAAA\\nCCCC\";","span":{"file_name":"/Users/shelwitz/.cargo/registry/src/github.com-1ecc6299db9ec823/bio-0.39.0/src/io/fasta.rs","byte_start":445675,"byte_end":445734,"line_start":496,"line_end":496,"column_start":5,"column_end":64}},{"value":"/ const FAI_FILE: &[u8] = b\"chr1\\t16\\t6\\t12\\t13\";","span":{"file_name":"/Users/shelwitz/.cargo/registry/src/github.com-1ecc6299db9ec823/bio-0.39.0/src/io/fasta.rs","byte_start":445739,"byte_end":445790,"line_start":497,"line_end":497,"column_start":5,"column_end":56}},{"value":"/","span":{"file_name":"/Users/shelwitz/.cargo/registry/src/github.com-1ecc6299db9ec823/bio-0.39.0/src/io/fasta.rs","byte_start":445795,"byte_end":445798,"line_start":498,"line_end":498,"column_start":5,"column_end":8}},{"value":"/ let rid: usize = 0;","span":{"file_name":"/Users/shelwitz/.cargo/registry/src/github.com-1ecc6299db9ec823/bio-0.39.0/src/io/fasta.rs","byte_start":445803,"byte_end":445826,"line_start":499,"line_end":499,"column_start":5,"column_end":28}},{"value":"/ let start: u64 = 0; // start is 0-based, inclusive","span":{"file_name":"/Users/shelwitz/.cargo/registry/src/github.com-1ecc6299db9ec823/bio-0.39.0/src/io/fasta.rs","byte_start":445831,"byte_end":445885,"line_start":500,"line_end":500,"column_start":5,"column_end":59}},{"value":"/ let stop: u64 = 10; // stop is 0-based, exclusive","span":{"file_name":"/Users/shelwitz/.cargo/registry/src/github.com-1ecc6299db9ec823/bio-0.39.0/src/io/fasta.rs","byte_start":445890,"byte_end":445943,"line_start":501,"line_end":501,"column_start":5,"column_end":58}},{"value":"/                     // load the index","span":{"file_name":"/Users/shelwitz/.cargo/registry/src/github.com-1ecc6299db9ec823/bio-0.39.0/src/io/fasta.rs","byte_start":445948,"byte_end":445989,"line_start":502,"line_end":502,"column_start":5,"column_end":46}},{"value":"/ let mut faidx = IndexedReader::new(std::io::Cursor::new(FASTA_FILE), FAI_FILE).unwrap();","span":{"file_name":"/Users/shelwitz/.cargo/registry/src/github.com-1ecc6299db9ec823/bio-0.39.0/src/io/fasta.rs","byte_start":445994,"byte_end":446086,"line_start":503,"line_end":503,"column_start":5,"column_end":97}},{"value":"/ // move the pointer in the index to the desired sequence and interval","span":{"file_name":"/Users/shelwitz/.cargo/registry/src/github.com-1ecc6299db9ec823/bio-0.39.0/src/io/fasta.rs","byte_start":446091,"byte_end":446164,"line_start":504,"line_end":504,"column_start":5,"column_end":78}},{"value":"/ faidx","span":{"file_name":"/Users/shelwitz/.cargo/registry/src/github.com-1ecc6299db9ec823/bio-0.39.0/src/io/fasta.rs","byte_start":446169,"byte_end":446178,"line_start":505,"line_end":505,"column_start":5,"column_end":14}},{"value":"/     .fetch_by_rid(rid, start, stop)","span":{"file_name":"/Users/shelwitz/.cargo/registry/src/github.com-1ecc6299db9ec823/bio-0.39.0/src/io/fasta.rs","byte_start":446183,"byte_end":446222,"line_start":506,"line_end":506,"column_start":5,"column_end":44}},{"value":"/     .expect(\"Couldn't fetch interval\");","span":{"file_name":"/Users/shelwitz/.cargo/registry/src/github.com-1ecc6299db9ec823/bio-0.39.0/src/io/fasta.rs","byte_start":446227,"byte_end":446270,"line_start":507,"line_end":507,"column_start":5,"column_end":48}},{"value":"/ // read the subsequence defined by the interval into a vector","span":{"file_name":"/Users/shelwitz/.cargo/registry/src/github.com-1ecc6299db9ec823/bio-0.39.0/src/io/fasta.rs","byte_start":446275,"byte_end":446340,"line_start":508,"line_end":508,"column_start":5,"column_end":70}},{"value":"/ let mut seq = Vec::new();","span":{"file_name":"/Users/shelwitz/.cargo/registry/src/github.com-1ecc6299db9ec823/bio-0.39.0/src/io/fasta.rs","byte_start":446345,"byte_end":446374,"line_start":509,"line_end":509,"column_start":5,"column_end":34}},{"value":"/ faidx.read(&mut seq).expect(\"Couldn't read the interval\");","span":{"file_name":"/Users/shelwitz/.cargo/registry/src/github.com-1ecc6299db9ec823/bio-0.39.0/src/io/fasta.rs","byte_start":446379,"byte_end":446441,"line_start":510,"line_end":510,"column_start":5,"column_end":67}},{"value":"/ assert_eq!(seq, b\"GTAGGCTGAA\");","span":{"file_name":"/Users/shelwitz/.cargo/registry/src/github.com-1ecc6299db9ec823/bio-0.39.0/src/io/fasta.rs","byte_start":446446,"byte_end":446481,"line_start":511,"line_end":511,"column_start":5,"column_end":40}},{"value":"/ ```","span":{"file_name":"/Users/shelwitz/.cargo/registry/src/github.com-1ecc6299db9ec823/bio-0.39.0/src/io/fasta.rs","byte_start":446486,"byte_end":446493,"line_start":512,"line_end":512,"column_start":5,"column_end":12}},{"value":"/","span":{"file_name":"/Users/shelwitz/.cargo/registry/src/github.com-1ecc6299db9ec823/bio-0.39.0/src/io/fasta.rs","byte_start":446498,"byte_end":446501,"line_start":513,"line_end":513,"column_start":5,"column_end":8}},{"value":"/ # Errors","span":{"file_name":"/Users/shelwitz/.cargo/registry/src/github.com-1ecc6299db9ec823/bio-0.39.0/src/io/fasta.rs","byte_start":446506,"byte_end":446518,"line_start":514,"line_end":514,"column_start":5,"column_end":17}},{"value":"/ If `rid` does not exist within the index.","span":{"file_name":"/Users/shelwitz/.cargo/registry/src/github.com-1ecc6299db9ec823/bio-0.39.0/src/io/fasta.rs","byte_start":446523,"byte_end":446568,"line_start":515,"line_end":515,"column_start":5,"column_end":50}}]},{"kind":"Method","id":{"krate":0,"index":1337},"span":{"file_name":"/Users/shelwitz/.cargo/registry/src/github.com-1ecc6299db9ec823/bio-0.39.0/src/io/fasta.rs","byte_start":446903,"byte_end":446912,"line_start":525,"line_end":525,"column_start":12,"column_end":21},"name":"fetch_all","qualname":"<IndexedReader<R>>::fetch_all","value":"pub fn fetch_all(&mut Self, &str) -> io::Result<()>","parent":null,"children":[],"decl_id":null,"docs":" Fetch the whole sequence with the given name for reading.\n","sig":null,"attributes":[{"value":"/ Fetch the whole sequence with the given name for reading.","span":{"file_name":"/Users/shelwitz/.cargo/registry/src/github.com-1ecc6299db9ec823/bio-0.39.0/src/io/fasta.rs","byte_start":446830,"byte_end":446891,"line_start":524,"line_end":524,"column_start":5,"column_end":66}}]},{"kind":"Method","id":{"krate":0,"index":1338},"span":{"file_name":"/Users/shelwitz/.cargo/registry/src/github.com-1ecc6299db9ec823/bio-0.39.0/src/io/fasta.rs","byte_start":447209,"byte_end":447225,"line_start":534,"line_end":534,"column_start":12,"column_end":28},"name":"fetch_all_by_rid","qualname":"<IndexedReader<R>>::fetch_all_by_rid","value":"pub fn fetch_all_by_rid(&mut Self, usize) -> io::Result<()>","parent":null,"children":[],"decl_id":null,"docs":" Fetch the whole sequence with the given record index for reading.\n","sig":null,"attributes":[{"value":"/ Fetch the whole sequence with the given record index for reading.","span":{"file_name":"/Users/shelwitz/.cargo/registry/src/github.com-1ecc6299db9ec823/bio-0.39.0/src/io/fasta.rs","byte_start":447128,"byte_end":447197,"line_start":533,"line_end":533,"column_start":5,"column_end":74}}]},{"kind":"Method","id":{"krate":0,"index":1339},"span":{"file_name":"/Users/shelwitz/.cargo/registry/src/github.com-1ecc6299db9ec823/bio-0.39.0/src/io/fasta.rs","byte_start":447503,"byte_end":447507,"line_start":543,"line_end":543,"column_start":12,"column_end":16},"name":"read","qualname":"<IndexedReader<R>>::read","value":"pub fn read(&mut Self, &mut Text) -> io::Result<()>","parent":null,"children":[],"decl_id":null,"docs":" Read the fetched sequence into the given vector.\n","sig":null,"attributes":[{"value":"/ Read the fetched sequence into the given vector.","span":{"file_name":"/Users/shelwitz/.cargo/registry/src/github.com-1ecc6299db9ec823/bio-0.39.0/src/io/fasta.rs","byte_start":447439,"byte_end":447491,"line_start":542,"line_end":542,"column_start":5,"column_end":57}}]},{"kind":"Method","id":{"krate":0,"index":1340},"span":{"file_name":"/Users/shelwitz/.cargo/registry/src/github.com-1ecc6299db9ec823/bio-0.39.0/src/io/fasta.rs","byte_start":447971,"byte_end":447980,"line_start":555,"line_end":555,"column_start":12,"column_end":21},"name":"read_iter","qualname":"<IndexedReader<R>>::read_iter","value":"pub fn read_iter(&mut Self) -> io::Result<IndexedReaderIterator<, R>>","parent":null,"children":[],"decl_id":null,"docs":" Return an iterator yielding the fetched sequence.\n","sig":null,"attributes":[{"value":"/ Return an iterator yielding the fetched sequence.","span":{"file_name":"/Users/shelwitz/.cargo/registry/src/github.com-1ecc6299db9ec823/bio-0.39.0/src/io/fasta.rs","byte_start":447906,"byte_end":447959,"line_start":554,"line_end":554,"column_start":5,"column_end":58}}]},{"kind":"Struct","id":{"krate":0,"index":4750},"span":{"file_name":"/Users/shelwitz/.cargo/registry/src/github.com-1ecc6299db9ec823/bio-0.39.0/src/io/fasta.rs","byte_start":453415,"byte_end":453423,"line_start":726,"line_end":726,"column_start":12,"column_end":20},"name":"Sequence","qualname":"::io::fasta::Sequence","value":"Sequence { name, len }","parent":null,"children":[{"krate":0,"index":4751},{"krate":0,"index":4752}],"decl_id":null,"docs":" A sequence record returned by the FASTA index.\n","sig":null,"attributes":[{"value":"/ A sequence record returned by the FASTA index.","span":{"file_name":"/Users/shelwitz/.cargo/registry/src/github.com-1ecc6299db9ec823/bio-0.39.0/src/io/fasta.rs","byte_start":453325,"byte_end":453375,"line_start":724,"line_end":724,"column_start":1,"column_end":51}}]},{"kind":"Field","id":{"krate":0,"index":4751},"span":{"file_name":"/Users/shelwitz/.cargo/registry/src/github.com-1ecc6299db9ec823/bio-0.39.0/src/io/fasta.rs","byte_start":453434,"byte_end":453438,"line_start":727,"line_end":727,"column_start":9,"column_end":13},"name":"name","qualname":"::io::fasta::Sequence::name","value":"std::string::String","parent":{"krate":0,"index":4750},"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Field","id":{"krate":0,"index":4752},"span":{"file_name":"/Users/shelwitz/.cargo/registry/src/github.com-1ecc6299db9ec823/bio-0.39.0/src/io/fasta.rs","byte_start":453456,"byte_end":453459,"line_start":728,"line_end":728,"column_start":9,"column_end":12},"name":"len","qualname":"::io::fasta::Sequence::len","value":"u64","parent":{"krate":0,"index":4750},"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Struct","id":{"krate":0,"index":1347},"span":{"file_name":"/Users/shelwitz/.cargo/registry/src/github.com-1ecc6299db9ec823/bio-0.39.0/src/io/fasta.rs","byte_start":453480,"byte_end":453501,"line_start":731,"line_end":731,"column_start":12,"column_end":33},"name":"IndexedReaderIterator","qualname":"::io::fasta::IndexedReaderIterator","value":"IndexedReaderIterator {  }","parent":null,"children":[{"krate":0,"index":1350},{"krate":0,"index":1351},{"krate":0,"index":1352},{"krate":0,"index":1353},{"krate":0,"index":1354},{"krate":0,"index":1355}],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Struct","id":{"krate":0,"index":4759},"span":{"file_name":"/Users/shelwitz/.cargo/registry/src/github.com-1ecc6299db9ec823/bio-0.39.0/src/io/fasta.rs","byte_start":455176,"byte_end":455182,"line_start":794,"line_end":794,"column_start":12,"column_end":18},"name":"Writer","qualname":"::io::fasta::Writer","value":"Writer {  }","parent":null,"children":[{"krate":0,"index":4761}],"decl_id":null,"docs":" A Fasta writer.\n","sig":null,"attributes":[{"value":"/ A Fasta writer.","span":{"file_name":"/Users/shelwitz/.cargo/registry/src/github.com-1ecc6299db9ec823/bio-0.39.0/src/io/fasta.rs","byte_start":455128,"byte_end":455147,"line_start":792,"line_end":792,"column_start":1,"column_end":20}}]},{"kind":"Method","id":{"krate":0,"index":1367},"span":{"file_name":"/Users/shelwitz/.cargo/registry/src/github.com-1ecc6299db9ec823/bio-0.39.0/src/io/fasta.rs","byte_start":455349,"byte_end":455356,"line_start":801,"line_end":801,"column_start":12,"column_end":19},"name":"to_file","qualname":"<Writer<fs::File>>::to_file","value":"pub fn to_file<P: AsRef<Path>>(P) -> io::Result<Self>","parent":null,"children":[],"decl_id":null,"docs":" Write to the given file path.\n","sig":null,"attributes":[{"value":"/ Write to the given file path.","span":{"file_name":"/Users/shelwitz/.cargo/registry/src/github.com-1ecc6299db9ec823/bio-0.39.0/src/io/fasta.rs","byte_start":455260,"byte_end":455293,"line_start":799,"line_end":799,"column_start":5,"column_end":38}},{"value":"allow(clippy :: wrong_self_convention)","span":{"file_name":"/Users/shelwitz/.cargo/registry/src/github.com-1ecc6299db9ec823/bio-0.39.0/src/io/fasta.rs","byte_start":455298,"byte_end":455337,"line_start":800,"line_end":800,"column_start":5,"column_end":44}}]},{"kind":"Method","id":{"krate":0,"index":1369},"span":{"file_name":"/Users/shelwitz/.cargo/registry/src/github.com-1ecc6299db9ec823/bio-0.39.0/src/io/fasta.rs","byte_start":455529,"byte_end":455550,"line_start":806,"line_end":806,"column_start":12,"column_end":33},"name":"to_file_with_capacity","qualname":"<Writer<fs::File>>::to_file_with_capacity","value":"pub fn to_file_with_capacity<P: AsRef<Path>>(usize, P) -> io::Result<Self>","parent":null,"children":[],"decl_id":null,"docs":" Write to the given file path and a buffer capacity\n","sig":null,"attributes":[{"value":"/ Write to the given file path and a buffer capacity","span":{"file_name":"/Users/shelwitz/.cargo/registry/src/github.com-1ecc6299db9ec823/bio-0.39.0/src/io/fasta.rs","byte_start":455463,"byte_end":455517,"line_start":805,"line_end":805,"column_start":5,"column_end":59}}]},{"kind":"Method","id":{"krate":0,"index":1374},"span":{"file_name":"/Users/shelwitz/.cargo/registry/src/github.com-1ecc6299db9ec823/bio-0.39.0/src/io/fasta.rs","byte_start":455782,"byte_end":455785,"line_start":813,"line_end":813,"column_start":12,"column_end":15},"name":"new","qualname":"<Writer<W>>::new","value":"pub fn new(W) -> Self","parent":null,"children":[],"decl_id":null,"docs":" Create a new Fasta writer.\n","sig":null,"attributes":[{"value":"/ Create a new Fasta writer.","span":{"file_name":"/Users/shelwitz/.cargo/registry/src/github.com-1ecc6299db9ec823/bio-0.39.0/src/io/fasta.rs","byte_start":455740,"byte_end":455770,"line_start":812,"line_end":812,"column_start":5,"column_end":35}}]},{"kind":"Method","id":{"krate":0,"index":1375},"span":{"file_name":"/Users/shelwitz/.cargo/registry/src/github.com-1ecc6299db9ec823/bio-0.39.0/src/io/fasta.rs","byte_start":455966,"byte_end":455979,"line_start":820,"line_end":820,"column_start":12,"column_end":25},"name":"with_capacity","qualname":"<Writer<W>>::with_capacity","value":"pub fn with_capacity(usize, W) -> Self","parent":null,"children":[],"decl_id":null,"docs":" Create a new Fasta writer with a capacity of write buffer\n","sig":null,"attributes":[{"value":"/ Create a new Fasta writer with a capacity of write buffer","span":{"file_name":"/Users/shelwitz/.cargo/registry/src/github.com-1ecc6299db9ec823/bio-0.39.0/src/io/fasta.rs","byte_start":455893,"byte_end":455954,"line_start":819,"line_end":819,"column_start":5,"column_end":66}}]},{"kind":"Method","id":{"krate":0,"index":1376},"span":{"file_name":"/Users/shelwitz/.cargo/registry/src/github.com-1ecc6299db9ec823/bio-0.39.0/src/io/fasta.rs","byte_start":456188,"byte_end":456202,"line_start":827,"line_end":827,"column_start":12,"column_end":26},"name":"from_bufwriter","qualname":"<Writer<W>>::from_bufwriter","value":"pub fn from_bufwriter(io::BufWriter<W>) -> Self","parent":null,"children":[],"decl_id":null,"docs":" Create a new Fasta writer with a given BufWriter\n","sig":null,"attributes":[{"value":"/ Create a new Fasta writer with a given BufWriter","span":{"file_name":"/Users/shelwitz/.cargo/registry/src/github.com-1ecc6299db9ec823/bio-0.39.0/src/io/fasta.rs","byte_start":456124,"byte_end":456176,"line_start":826,"line_end":826,"column_start":5,"column_end":57}}]},{"kind":"Method","id":{"krate":0,"index":1377},"span":{"file_name":"/Users/shelwitz/.cargo/registry/src/github.com-1ecc6299db9ec823/bio-0.39.0/src/io/fasta.rs","byte_start":457220,"byte_end":457232,"line_start":860,"line_end":860,"column_start":12,"column_end":24},"name":"write_record","qualname":"<Writer<W>>::write_record","value":"pub fn write_record(&mut Self, &Record) -> io::Result<()>","parent":null,"children":[],"decl_id":null,"docs":" Directly write a [`fasta::Record`](struct.Record.html).","sig":null,"attributes":[{"value":"/ Directly write a [`fasta::Record`](struct.Record.html).","span":{"file_name":"/Users/shelwitz/.cargo/registry/src/github.com-1ecc6299db9ec823/bio-0.39.0/src/io/fasta.rs","byte_start":456290,"byte_end":456349,"line_start":831,"line_end":831,"column_start":5,"column_end":64}},{"value":"/","span":{"file_name":"/Users/shelwitz/.cargo/registry/src/github.com-1ecc6299db9ec823/bio-0.39.0/src/io/fasta.rs","byte_start":456354,"byte_end":456357,"line_start":832,"line_end":832,"column_start":5,"column_end":8}},{"value":"/ # Errors","span":{"file_name":"/Users/shelwitz/.cargo/registry/src/github.com-1ecc6299db9ec823/bio-0.39.0/src/io/fasta.rs","byte_start":456362,"byte_end":456374,"line_start":833,"line_end":833,"column_start":5,"column_end":17}},{"value":"/ If there is an issue writing to the `Writer`.","span":{"file_name":"/Users/shelwitz/.cargo/registry/src/github.com-1ecc6299db9ec823/bio-0.39.0/src/io/fasta.rs","byte_start":456379,"byte_end":456428,"line_start":834,"line_end":834,"column_start":5,"column_end":54}},{"value":"/","span":{"file_name":"/Users/shelwitz/.cargo/registry/src/github.com-1ecc6299db9ec823/bio-0.39.0/src/io/fasta.rs","byte_start":456433,"byte_end":456436,"line_start":835,"line_end":835,"column_start":5,"column_end":8}},{"value":"/ # Examples","span":{"file_name":"/Users/shelwitz/.cargo/registry/src/github.com-1ecc6299db9ec823/bio-0.39.0/src/io/fasta.rs","byte_start":456441,"byte_end":456455,"line_start":836,"line_end":836,"column_start":5,"column_end":19}},{"value":"/ ```rust","span":{"file_name":"/Users/shelwitz/.cargo/registry/src/github.com-1ecc6299db9ec823/bio-0.39.0/src/io/fasta.rs","byte_start":456460,"byte_end":456471,"line_start":837,"line_end":837,"column_start":5,"column_end":16}},{"value":"/ use bio::io::fasta::{Record, Writer};","span":{"file_name":"/Users/shelwitz/.cargo/registry/src/github.com-1ecc6299db9ec823/bio-0.39.0/src/io/fasta.rs","byte_start":456476,"byte_end":456517,"line_start":838,"line_end":838,"column_start":5,"column_end":46}},{"value":"/ use std::fs;","span":{"file_name":"/Users/shelwitz/.cargo/registry/src/github.com-1ecc6299db9ec823/bio-0.39.0/src/io/fasta.rs","byte_start":456522,"byte_end":456538,"line_start":839,"line_end":839,"column_start":5,"column_end":21}},{"value":"/ use std::io;","span":{"file_name":"/Users/shelwitz/.cargo/registry/src/github.com-1ecc6299db9ec823/bio-0.39.0/src/io/fasta.rs","byte_start":456543,"byte_end":456559,"line_start":840,"line_end":840,"column_start":5,"column_end":21}},{"value":"/ use std::path::Path;","span":{"file_name":"/Users/shelwitz/.cargo/registry/src/github.com-1ecc6299db9ec823/bio-0.39.0/src/io/fasta.rs","byte_start":456564,"byte_end":456588,"line_start":841,"line_end":841,"column_start":5,"column_end":29}},{"value":"/","span":{"file_name":"/Users/shelwitz/.cargo/registry/src/github.com-1ecc6299db9ec823/bio-0.39.0/src/io/fasta.rs","byte_start":456593,"byte_end":456596,"line_start":842,"line_end":842,"column_start":5,"column_end":8}},{"value":"/ let path = Path::new(\"test.fa\");","span":{"file_name":"/Users/shelwitz/.cargo/registry/src/github.com-1ecc6299db9ec823/bio-0.39.0/src/io/fasta.rs","byte_start":456601,"byte_end":456637,"line_start":843,"line_end":843,"column_start":5,"column_end":41}},{"value":"/ let file = fs::File::create(path).unwrap();","span":{"file_name":"/Users/shelwitz/.cargo/registry/src/github.com-1ecc6299db9ec823/bio-0.39.0/src/io/fasta.rs","byte_start":456642,"byte_end":456689,"line_start":844,"line_end":844,"column_start":5,"column_end":52}},{"value":"/ {","span":{"file_name":"/Users/shelwitz/.cargo/registry/src/github.com-1ecc6299db9ec823/bio-0.39.0/src/io/fasta.rs","byte_start":456694,"byte_end":456699,"line_start":845,"line_end":845,"column_start":5,"column_end":10}},{"value":"/     let handle = io::BufWriter::new(file);","span":{"file_name":"/Users/shelwitz/.cargo/registry/src/github.com-1ecc6299db9ec823/bio-0.39.0/src/io/fasta.rs","byte_start":456704,"byte_end":456750,"line_start":846,"line_end":846,"column_start":5,"column_end":51}},{"value":"/     let mut writer = Writer::new(handle);","span":{"file_name":"/Users/shelwitz/.cargo/registry/src/github.com-1ecc6299db9ec823/bio-0.39.0/src/io/fasta.rs","byte_start":456755,"byte_end":456800,"line_start":847,"line_end":847,"column_start":5,"column_end":50}},{"value":"/     let record = Record::with_attrs(\"id\", Some(\"desc\"), b\"ACGT\");","span":{"file_name":"/Users/shelwitz/.cargo/registry/src/github.com-1ecc6299db9ec823/bio-0.39.0/src/io/fasta.rs","byte_start":456805,"byte_end":456874,"line_start":848,"line_end":848,"column_start":5,"column_end":74}},{"value":"/","span":{"file_name":"/Users/shelwitz/.cargo/registry/src/github.com-1ecc6299db9ec823/bio-0.39.0/src/io/fasta.rs","byte_start":456879,"byte_end":456882,"line_start":849,"line_end":849,"column_start":5,"column_end":8}},{"value":"/     let write_result = writer.write_record(&record);","span":{"file_name":"/Users/shelwitz/.cargo/registry/src/github.com-1ecc6299db9ec823/bio-0.39.0/src/io/fasta.rs","byte_start":456887,"byte_end":456943,"line_start":850,"line_end":850,"column_start":5,"column_end":61}},{"value":"/     assert!(write_result.is_ok());","span":{"file_name":"/Users/shelwitz/.cargo/registry/src/github.com-1ecc6299db9ec823/bio-0.39.0/src/io/fasta.rs","byte_start":456948,"byte_end":456986,"line_start":851,"line_end":851,"column_start":5,"column_end":43}},{"value":"/ }","span":{"file_name":"/Users/shelwitz/.cargo/registry/src/github.com-1ecc6299db9ec823/bio-0.39.0/src/io/fasta.rs","byte_start":456991,"byte_end":456996,"line_start":852,"line_end":852,"column_start":5,"column_end":10}},{"value":"/","span":{"file_name":"/Users/shelwitz/.cargo/registry/src/github.com-1ecc6299db9ec823/bio-0.39.0/src/io/fasta.rs","byte_start":457001,"byte_end":457004,"line_start":853,"line_end":853,"column_start":5,"column_end":8}},{"value":"/ let actual = fs::read_to_string(path).unwrap();","span":{"file_name":"/Users/shelwitz/.cargo/registry/src/github.com-1ecc6299db9ec823/bio-0.39.0/src/io/fasta.rs","byte_start":457009,"byte_end":457060,"line_start":854,"line_end":854,"column_start":5,"column_end":56}},{"value":"/ let expected = \">id desc\\nACGT\\n\";","span":{"file_name":"/Users/shelwitz/.cargo/registry/src/github.com-1ecc6299db9ec823/bio-0.39.0/src/io/fasta.rs","byte_start":457065,"byte_end":457103,"line_start":855,"line_end":855,"column_start":5,"column_end":43}},{"value":"/","span":{"file_name":"/Users/shelwitz/.cargo/registry/src/github.com-1ecc6299db9ec823/bio-0.39.0/src/io/fasta.rs","byte_start":457108,"byte_end":457111,"line_start":856,"line_end":856,"column_start":5,"column_end":8}},{"value":"/ assert!(fs::remove_file(path).is_ok());","span":{"file_name":"/Users/shelwitz/.cargo/registry/src/github.com-1ecc6299db9ec823/bio-0.39.0/src/io/fasta.rs","byte_start":457116,"byte_end":457159,"line_start":857,"line_end":857,"column_start":5,"column_end":48}},{"value":"/ assert_eq!(actual, expected)","span":{"file_name":"/Users/shelwitz/.cargo/registry/src/github.com-1ecc6299db9ec823/bio-0.39.0/src/io/fasta.rs","byte_start":457164,"byte_end":457196,"line_start":858,"line_end":858,"column_start":5,"column_end":37}},{"value":"/ ```","span":{"file_name":"/Users/shelwitz/.cargo/registry/src/github.com-1ecc6299db9ec823/bio-0.39.0/src/io/fasta.rs","byte_start":457201,"byte_end":457208,"line_start":859,"line_end":859,"column_start":5,"column_end":12}}]},{"kind":"Method","id":{"krate":0,"index":1378},"span":{"file_name":"/Users/shelwitz/.cargo/registry/src/github.com-1ecc6299db9ec823/bio-0.39.0/src/io/fasta.rs","byte_start":457439,"byte_end":457444,"line_start":865,"line_end":865,"column_start":12,"column_end":17},"name":"write","qualname":"<Writer<W>>::write","value":"pub fn write(&mut Self, &str, Option<&str>, TextSlice) -> io::Result<()>","parent":null,"children":[],"decl_id":null,"docs":" Write a Fasta record with given id, optional description and sequence.\n","sig":null,"attributes":[{"value":"/ Write a Fasta record with given id, optional description and sequence.","span":{"file_name":"/Users/shelwitz/.cargo/registry/src/github.com-1ecc6299db9ec823/bio-0.39.0/src/io/fasta.rs","byte_start":457353,"byte_end":457427,"line_start":864,"line_end":864,"column_start":5,"column_end":79}}]},{"kind":"Method","id":{"krate":0,"index":1379},"span":{"file_name":"/Users/shelwitz/.cargo/registry/src/github.com-1ecc6299db9ec823/bio-0.39.0/src/io/fasta.rs","byte_start":457963,"byte_end":457968,"line_start":880,"line_end":880,"column_start":12,"column_end":17},"name":"flush","qualname":"<Writer<W>>::flush","value":"pub fn flush(&mut Self) -> io::Result<()>","parent":null,"children":[],"decl_id":null,"docs":" Flush the writer, ensuring that everything is written.\n","sig":null,"attributes":[{"value":"/ Flush the writer, ensuring that everything is written.","span":{"file_name":"/Users/shelwitz/.cargo/registry/src/github.com-1ecc6299db9ec823/bio-0.39.0/src/io/fasta.rs","byte_start":457893,"byte_end":457951,"line_start":879,"line_end":879,"column_start":5,"column_end":63}}]},{"kind":"Struct","id":{"krate":0,"index":4765},"span":{"file_name":"/Users/shelwitz/.cargo/registry/src/github.com-1ecc6299db9ec823/bio-0.39.0/src/io/fasta.rs","byte_start":458125,"byte_end":458131,"line_start":887,"line_end":887,"column_start":12,"column_end":18},"name":"Record","qualname":"::io::fasta::Record","value":"Record {  }","parent":null,"children":[{"krate":0,"index":4766},{"krate":0,"index":4767},{"krate":0,"index":4768}],"decl_id":null,"docs":" A FASTA record.\n","sig":null,"attributes":[{"value":"/ A FASTA record.","span":{"file_name":"/Users/shelwitz/.cargo/registry/src/github.com-1ecc6299db9ec823/bio-0.39.0/src/io/fasta.rs","byte_start":458037,"byte_end":458056,"line_start":885,"line_end":885,"column_start":1,"column_end":20}}]},{"kind":"Method","id":{"krate":0,"index":1381},"span":{"file_name":"/Users/shelwitz/.cargo/registry/src/github.com-1ecc6299db9ec823/bio-0.39.0/src/io/fasta.rs","byte_start":458252,"byte_end":458255,"line_start":895,"line_end":895,"column_start":12,"column_end":15},"name":"new","qualname":"<Record>::new","value":"pub fn new() -> Self","parent":null,"children":[],"decl_id":null,"docs":" Create a new instance.\n","sig":null,"attributes":[{"value":"/ Create a new instance.","span":{"file_name":"/Users/shelwitz/.cargo/registry/src/github.com-1ecc6299db9ec823/bio-0.39.0/src/io/fasta.rs","byte_start":458214,"byte_end":458240,"line_start":894,"line_end":894,"column_start":5,"column_end":31}}]},{"kind":"Method","id":{"krate":0,"index":1382},"span":{"file_name":"/Users/shelwitz/.cargo/registry/src/github.com-1ecc6299db9ec823/bio-0.39.0/src/io/fasta.rs","byte_start":458820,"byte_end":458830,"line_start":916,"line_end":916,"column_start":12,"column_end":22},"name":"with_attrs","qualname":"<Record>::with_attrs","value":"pub fn with_attrs(&str, Option<&str>, TextSlice) -> Self","parent":null,"children":[],"decl_id":null,"docs":" Create a new `Record` from given attributes.","sig":null,"attributes":[{"value":"/ Create a new `Record` from given attributes.","span":{"file_name":"/Users/shelwitz/.cargo/registry/src/github.com-1ecc6299db9ec823/bio-0.39.0/src/io/fasta.rs","byte_start":458393,"byte_end":458441,"line_start":903,"line_end":903,"column_start":5,"column_end":53}},{"value":"/","span":{"file_name":"/Users/shelwitz/.cargo/registry/src/github.com-1ecc6299db9ec823/bio-0.39.0/src/io/fasta.rs","byte_start":458446,"byte_end":458449,"line_start":904,"line_end":904,"column_start":5,"column_end":8}},{"value":"/ # Examples","span":{"file_name":"/Users/shelwitz/.cargo/registry/src/github.com-1ecc6299db9ec823/bio-0.39.0/src/io/fasta.rs","byte_start":458454,"byte_end":458468,"line_start":905,"line_end":905,"column_start":5,"column_end":19}},{"value":"/ ```rust","span":{"file_name":"/Users/shelwitz/.cargo/registry/src/github.com-1ecc6299db9ec823/bio-0.39.0/src/io/fasta.rs","byte_start":458473,"byte_end":458484,"line_start":906,"line_end":906,"column_start":5,"column_end":16}},{"value":"/ use bio::io::fasta::Record;","span":{"file_name":"/Users/shelwitz/.cargo/registry/src/github.com-1ecc6299db9ec823/bio-0.39.0/src/io/fasta.rs","byte_start":458489,"byte_end":458520,"line_start":907,"line_end":907,"column_start":5,"column_end":36}},{"value":"/","span":{"file_name":"/Users/shelwitz/.cargo/registry/src/github.com-1ecc6299db9ec823/bio-0.39.0/src/io/fasta.rs","byte_start":458525,"byte_end":458528,"line_start":908,"line_end":908,"column_start":5,"column_end":8}},{"value":"/ let read_id = \"read1\";","span":{"file_name":"/Users/shelwitz/.cargo/registry/src/github.com-1ecc6299db9ec823/bio-0.39.0/src/io/fasta.rs","byte_start":458533,"byte_end":458559,"line_start":909,"line_end":909,"column_start":5,"column_end":31}},{"value":"/ let description = Some(\"sampleid=foobar\");","span":{"file_name":"/Users/shelwitz/.cargo/registry/src/github.com-1ecc6299db9ec823/bio-0.39.0/src/io/fasta.rs","byte_start":458564,"byte_end":458610,"line_start":910,"line_end":910,"column_start":5,"column_end":51}},{"value":"/ let sequence = b\"ACGT\";","span":{"file_name":"/Users/shelwitz/.cargo/registry/src/github.com-1ecc6299db9ec823/bio-0.39.0/src/io/fasta.rs","byte_start":458615,"byte_end":458642,"line_start":911,"line_end":911,"column_start":5,"column_end":32}},{"value":"/ let record = Record::with_attrs(read_id, description, sequence);","span":{"file_name":"/Users/shelwitz/.cargo/registry/src/github.com-1ecc6299db9ec823/bio-0.39.0/src/io/fasta.rs","byte_start":458647,"byte_end":458715,"line_start":912,"line_end":912,"column_start":5,"column_end":73}},{"value":"/","span":{"file_name":"/Users/shelwitz/.cargo/registry/src/github.com-1ecc6299db9ec823/bio-0.39.0/src/io/fasta.rs","byte_start":458720,"byte_end":458723,"line_start":913,"line_end":913,"column_start":5,"column_end":8}},{"value":"/ assert_eq!(\">read1 sampleid=foobar\\nACGT\\n\", record.to_string())","span":{"file_name":"/Users/shelwitz/.cargo/registry/src/github.com-1ecc6299db9ec823/bio-0.39.0/src/io/fasta.rs","byte_start":458728,"byte_end":458796,"line_start":914,"line_end":914,"column_start":5,"column_end":73}},{"value":"/ ```","span":{"file_name":"/Users/shelwitz/.cargo/registry/src/github.com-1ecc6299db9ec823/bio-0.39.0/src/io/fasta.rs","byte_start":458801,"byte_end":458808,"line_start":915,"line_end":915,"column_start":5,"column_end":12}}]},{"kind":"Method","id":{"krate":0,"index":1384},"span":{"file_name":"/Users/shelwitz/.cargo/registry/src/github.com-1ecc6299db9ec823/bio-0.39.0/src/io/fasta.rs","byte_start":459131,"byte_end":459139,"line_start":926,"line_end":926,"column_start":12,"column_end":20},"name":"is_empty","qualname":"<Record>::is_empty","value":"pub fn is_empty(&Self) -> bool","parent":null,"children":[],"decl_id":null,"docs":" Check if record is empty.\n","sig":null,"attributes":[{"value":"/ Check if record is empty.","span":{"file_name":"/Users/shelwitz/.cargo/registry/src/github.com-1ecc6299db9ec823/bio-0.39.0/src/io/fasta.rs","byte_start":459090,"byte_end":459119,"line_start":925,"line_end":925,"column_start":5,"column_end":34}}]},{"kind":"Method","id":{"krate":0,"index":1385},"span":{"file_name":"/Users/shelwitz/.cargo/registry/src/github.com-1ecc6299db9ec823/bio-0.39.0/src/io/fasta.rs","byte_start":459288,"byte_end":459293,"line_start":931,"line_end":931,"column_start":12,"column_end":17},"name":"check","qualname":"<Record>::check","value":"pub fn check(&Self) -> Result<(), &str>","parent":null,"children":[],"decl_id":null,"docs":" Check validity of Fasta record.\n","sig":null,"attributes":[{"value":"/ Check validity of Fasta record.","span":{"file_name":"/Users/shelwitz/.cargo/registry/src/github.com-1ecc6299db9ec823/bio-0.39.0/src/io/fasta.rs","byte_start":459241,"byte_end":459276,"line_start":930,"line_end":930,"column_start":5,"column_end":40}}]},{"kind":"Method","id":{"krate":0,"index":1386},"span":{"file_name":"/Users/shelwitz/.cargo/registry/src/github.com-1ecc6299db9ec823/bio-0.39.0/src/io/fasta.rs","byte_start":459606,"byte_end":459608,"line_start":943,"line_end":943,"column_start":12,"column_end":14},"name":"id","qualname":"<Record>::id","value":"pub fn id(&Self) -> &str","parent":null,"children":[],"decl_id":null,"docs":" Return the id of the record.\n","sig":null,"attributes":[{"value":"/ Return the id of the record.","span":{"file_name":"/Users/shelwitz/.cargo/registry/src/github.com-1ecc6299db9ec823/bio-0.39.0/src/io/fasta.rs","byte_start":459562,"byte_end":459594,"line_start":942,"line_end":942,"column_start":5,"column_end":37}}]},{"kind":"Method","id":{"krate":0,"index":1387},"span":{"file_name":"/Users/shelwitz/.cargo/registry/src/github.com-1ecc6299db9ec823/bio-0.39.0/src/io/fasta.rs","byte_start":459709,"byte_end":459713,"line_start":948,"line_end":948,"column_start":12,"column_end":16},"name":"desc","qualname":"<Record>::desc","value":"pub fn desc(&Self) -> Option<&str>","parent":null,"children":[],"decl_id":null,"docs":" Return descriptions if present.\n","sig":null,"attributes":[{"value":"/ Return descriptions if present.","span":{"file_name":"/Users/shelwitz/.cargo/registry/src/github.com-1ecc6299db9ec823/bio-0.39.0/src/io/fasta.rs","byte_start":459662,"byte_end":459697,"line_start":947,"line_end":947,"column_start":5,"column_end":40}}]},{"kind":"Method","id":{"krate":0,"index":1388},"span":{"file_name":"/Users/shelwitz/.cargo/registry/src/github.com-1ecc6299db9ec823/bio-0.39.0/src/io/fasta.rs","byte_start":459909,"byte_end":459912,"line_start":956,"line_end":956,"column_start":12,"column_end":15},"name":"seq","qualname":"<Record>::seq","value":"pub fn seq(&Self) -> TextSlice","parent":null,"children":[],"decl_id":null,"docs":" Return the sequence of the record.\n","sig":null,"attributes":[{"value":"/ Return the sequence of the record.","span":{"file_name":"/Users/shelwitz/.cargo/registry/src/github.com-1ecc6299db9ec823/bio-0.39.0/src/io/fasta.rs","byte_start":459859,"byte_end":459897,"line_start":955,"line_end":955,"column_start":5,"column_end":43}}]},{"kind":"Struct","id":{"krate":0,"index":1392},"span":{"file_name":"/Users/shelwitz/.cargo/registry/src/github.com-1ecc6299db9ec823/bio-0.39.0/src/io/fasta.rs","byte_start":461665,"byte_end":461672,"line_start":1012,"line_end":1012,"column_start":12,"column_end":19},"name":"Records","qualname":"::io::fasta::Records","value":"Records {  }","parent":null,"children":[{"krate":0,"index":1394},{"krate":0,"index":1395}],"decl_id":null,"docs":" An iterator over the records of a Fasta file.\n","sig":null,"attributes":[{"value":"/ An iterator over the records of a Fasta file.","span":{"file_name":"/Users/shelwitz/.cargo/registry/src/github.com-1ecc6299db9ec823/bio-0.39.0/src/io/fasta.rs","byte_start":461604,"byte_end":461653,"line_start":1011,"line_end":1011,"column_start":1,"column_end":50}}]},{"kind":"Mod","id":{"krate":0,"index":1400},"span":{"file_name":"/Users/shelwitz/.cargo/registry/src/github.com-1ecc6299db9ec823/bio-0.39.0/src/io/fastq.rs","byte_start":0,"byte_end":0,"line_start":1,"line_end":1,"column_start":1,"column_end":1},"name":"fastq","qualname":"::io::fastq","value":"/Users/shelwitz/.cargo/registry/src/github.com-1ecc6299db9ec823/bio-0.39.0/src/io/fastq.rs","parent":null,"children":[{"krate":0,"index":1401},{"krate":0,"index":1404},{"krate":0,"index":1407},{"krate":0,"index":1410},{"krate":0,"index":1413},{"krate":0,"index":1416},{"krate":0,"index":1417},{"krate":0,"index":1418},{"krate":0,"index":1421},{"krate":0,"index":1424},{"krate":0,"index":4826},{"krate":0,"index":4827},{"krate":0,"index":4832},{"krate":0,"index":4841},{"krate":0,"index":4843},{"krate":0,"index":1427},{"krate":0,"index":1430},{"krate":0,"index":1433},{"krate":0,"index":1436},{"krate":0,"index":4855},{"krate":0,"index":4859},{"krate":0,"index":1438},{"krate":0,"index":1443},{"krate":0,"index":1447},{"krate":0,"index":1451},{"krate":0,"index":4862},{"krate":0,"index":4867},{"krate":0,"index":4869},{"krate":0,"index":4871},{"krate":0,"index":4873},{"krate":0,"index":4879},{"krate":0,"index":4926},{"krate":0,"index":4927},{"krate":0,"index":1455},{"krate":0,"index":1466},{"krate":0,"index":1468},{"krate":0,"index":4930},{"krate":0,"index":4933},{"krate":0,"index":1473},{"krate":0,"index":4936},{"krate":0,"index":4939},{"krate":0,"index":1477},{"krate":0,"index":1483}],"decl_id":null,"docs":" Structs and trait to read and write files in FASTQ format.","sig":null,"attributes":[{"value":"/ Structs and trait to read and write files in FASTQ format.","span":{"file_name":"/Users/shelwitz/.cargo/registry/src/github.com-1ecc6299db9ec823/bio-0.39.0/src/io/fastq.rs","byte_start":485788,"byte_end":485850,"line_start":6,"line_end":6,"column_start":1,"column_end":63}},{"value":"/","span":{"file_name":"/Users/shelwitz/.cargo/registry/src/github.com-1ecc6299db9ec823/bio-0.39.0/src/io/fastq.rs","byte_start":485851,"byte_end":485854,"line_start":7,"line_end":7,"column_start":1,"column_end":4}},{"value":"/ # Example","span":{"file_name":"/Users/shelwitz/.cargo/registry/src/github.com-1ecc6299db9ec823/bio-0.39.0/src/io/fastq.rs","byte_start":485855,"byte_end":485868,"line_start":8,"line_end":8,"column_start":1,"column_end":14}},{"value":"/","span":{"file_name":"/Users/shelwitz/.cargo/registry/src/github.com-1ecc6299db9ec823/bio-0.39.0/src/io/fastq.rs","byte_start":485869,"byte_end":485872,"line_start":9,"line_end":9,"column_start":1,"column_end":4}},{"value":"/ ## Read","span":{"file_name":"/Users/shelwitz/.cargo/registry/src/github.com-1ecc6299db9ec823/bio-0.39.0/src/io/fastq.rs","byte_start":485873,"byte_end":485884,"line_start":10,"line_end":10,"column_start":1,"column_end":12}},{"value":"/","span":{"file_name":"/Users/shelwitz/.cargo/registry/src/github.com-1ecc6299db9ec823/bio-0.39.0/src/io/fastq.rs","byte_start":485885,"byte_end":485888,"line_start":11,"line_end":11,"column_start":1,"column_end":4}},{"value":"/ In this example, we parse a fastq file from stdin and compute some statistics","span":{"file_name":"/Users/shelwitz/.cargo/registry/src/github.com-1ecc6299db9ec823/bio-0.39.0/src/io/fastq.rs","byte_start":485889,"byte_end":485970,"line_start":12,"line_end":12,"column_start":1,"column_end":82}},{"value":"/","span":{"file_name":"/Users/shelwitz/.cargo/registry/src/github.com-1ecc6299db9ec823/bio-0.39.0/src/io/fastq.rs","byte_start":485971,"byte_end":485974,"line_start":13,"line_end":13,"column_start":1,"column_end":4}},{"value":"/ ```","span":{"file_name":"/Users/shelwitz/.cargo/registry/src/github.com-1ecc6299db9ec823/bio-0.39.0/src/io/fastq.rs","byte_start":485975,"byte_end":485982,"line_start":14,"line_end":14,"column_start":1,"column_end":8}},{"value":"/ use bio::io::fastq;","span":{"file_name":"/Users/shelwitz/.cargo/registry/src/github.com-1ecc6299db9ec823/bio-0.39.0/src/io/fastq.rs","byte_start":485983,"byte_end":486006,"line_start":15,"line_end":15,"column_start":1,"column_end":24}},{"value":"/ use std::io;","span":{"file_name":"/Users/shelwitz/.cargo/registry/src/github.com-1ecc6299db9ec823/bio-0.39.0/src/io/fastq.rs","byte_start":486007,"byte_end":486023,"line_start":16,"line_end":16,"column_start":1,"column_end":17}},{"value":"/ let mut reader = fastq::Reader::new(io::stdin());","span":{"file_name":"/Users/shelwitz/.cargo/registry/src/github.com-1ecc6299db9ec823/bio-0.39.0/src/io/fastq.rs","byte_start":486024,"byte_end":486077,"line_start":17,"line_end":17,"column_start":1,"column_end":54}},{"value":"/","span":{"file_name":"/Users/shelwitz/.cargo/registry/src/github.com-1ecc6299db9ec823/bio-0.39.0/src/io/fastq.rs","byte_start":486078,"byte_end":486081,"line_start":18,"line_end":18,"column_start":1,"column_end":4}},{"value":"/ let mut nb_reads = 0;","span":{"file_name":"/Users/shelwitz/.cargo/registry/src/github.com-1ecc6299db9ec823/bio-0.39.0/src/io/fastq.rs","byte_start":486082,"byte_end":486107,"line_start":19,"line_end":19,"column_start":1,"column_end":26}},{"value":"/ let mut nb_bases = 0;","span":{"file_name":"/Users/shelwitz/.cargo/registry/src/github.com-1ecc6299db9ec823/bio-0.39.0/src/io/fastq.rs","byte_start":486108,"byte_end":486133,"line_start":20,"line_end":20,"column_start":1,"column_end":26}},{"value":"/","span":{"file_name":"/Users/shelwitz/.cargo/registry/src/github.com-1ecc6299db9ec823/bio-0.39.0/src/io/fastq.rs","byte_start":486134,"byte_end":486137,"line_start":21,"line_end":21,"column_start":1,"column_end":4}},{"value":"/ for result in reader.records() {","span":{"file_name":"/Users/shelwitz/.cargo/registry/src/github.com-1ecc6299db9ec823/bio-0.39.0/src/io/fastq.rs","byte_start":486138,"byte_end":486174,"line_start":22,"line_end":22,"column_start":1,"column_end":37}},{"value":"/     let record = result.expect(\"Error during fastq record parsing\");","span":{"file_name":"/Users/shelwitz/.cargo/registry/src/github.com-1ecc6299db9ec823/bio-0.39.0/src/io/fastq.rs","byte_start":486175,"byte_end":486247,"line_start":23,"line_end":23,"column_start":1,"column_end":73}},{"value":"/","span":{"file_name":"/Users/shelwitz/.cargo/registry/src/github.com-1ecc6299db9ec823/bio-0.39.0/src/io/fastq.rs","byte_start":486248,"byte_end":486251,"line_start":24,"line_end":24,"column_start":1,"column_end":4}},{"value":"/     nb_reads += 1;","span":{"file_name":"/Users/shelwitz/.cargo/registry/src/github.com-1ecc6299db9ec823/bio-0.39.0/src/io/fastq.rs","byte_start":486252,"byte_end":486274,"line_start":25,"line_end":25,"column_start":1,"column_end":23}},{"value":"/     nb_bases += record.seq().len();","span":{"file_name":"/Users/shelwitz/.cargo/registry/src/github.com-1ecc6299db9ec823/bio-0.39.0/src/io/fastq.rs","byte_start":486275,"byte_end":486314,"line_start":26,"line_end":26,"column_start":1,"column_end":40}},{"value":"/ }","span":{"file_name":"/Users/shelwitz/.cargo/registry/src/github.com-1ecc6299db9ec823/bio-0.39.0/src/io/fastq.rs","byte_start":486315,"byte_end":486320,"line_start":27,"line_end":27,"column_start":1,"column_end":6}},{"value":"/","span":{"file_name":"/Users/shelwitz/.cargo/registry/src/github.com-1ecc6299db9ec823/bio-0.39.0/src/io/fastq.rs","byte_start":486321,"byte_end":486324,"line_start":28,"line_end":28,"column_start":1,"column_end":4}},{"value":"/ println!(\"Number of reads: {}\", nb_reads);","span":{"file_name":"/Users/shelwitz/.cargo/registry/src/github.com-1ecc6299db9ec823/bio-0.39.0/src/io/fastq.rs","byte_start":486325,"byte_end":486371,"line_start":29,"line_end":29,"column_start":1,"column_end":47}},{"value":"/ println!(\"Number of bases: {}\", nb_bases);","span":{"file_name":"/Users/shelwitz/.cargo/registry/src/github.com-1ecc6299db9ec823/bio-0.39.0/src/io/fastq.rs","byte_start":486372,"byte_end":486418,"line_start":30,"line_end":30,"column_start":1,"column_end":47}},{"value":"/ ```","span":{"file_name":"/Users/shelwitz/.cargo/registry/src/github.com-1ecc6299db9ec823/bio-0.39.0/src/io/fastq.rs","byte_start":486419,"byte_end":486426,"line_start":31,"line_end":31,"column_start":1,"column_end":8}},{"value":"/","span":{"file_name":"/Users/shelwitz/.cargo/registry/src/github.com-1ecc6299db9ec823/bio-0.39.0/src/io/fastq.rs","byte_start":486427,"byte_end":486430,"line_start":32,"line_end":32,"column_start":1,"column_end":4}},{"value":"/ We can also use a `while` loop to iterate over records","span":{"file_name":"/Users/shelwitz/.cargo/registry/src/github.com-1ecc6299db9ec823/bio-0.39.0/src/io/fastq.rs","byte_start":486431,"byte_end":486489,"line_start":33,"line_end":33,"column_start":1,"column_end":59}},{"value":"/ ```","span":{"file_name":"/Users/shelwitz/.cargo/registry/src/github.com-1ecc6299db9ec823/bio-0.39.0/src/io/fastq.rs","byte_start":486490,"byte_end":486497,"line_start":34,"line_end":34,"column_start":1,"column_end":8}},{"value":"/ use bio::io::fastq;","span":{"file_name":"/Users/shelwitz/.cargo/registry/src/github.com-1ecc6299db9ec823/bio-0.39.0/src/io/fastq.rs","byte_start":486498,"byte_end":486521,"line_start":35,"line_end":35,"column_start":1,"column_end":24}},{"value":"/ use std::io;","span":{"file_name":"/Users/shelwitz/.cargo/registry/src/github.com-1ecc6299db9ec823/bio-0.39.0/src/io/fastq.rs","byte_start":486522,"byte_end":486538,"line_start":36,"line_end":36,"column_start":1,"column_end":17}},{"value":"/ let mut records = fastq::Reader::new(io::stdin()).records();","span":{"file_name":"/Users/shelwitz/.cargo/registry/src/github.com-1ecc6299db9ec823/bio-0.39.0/src/io/fastq.rs","byte_start":486539,"byte_end":486603,"line_start":37,"line_end":37,"column_start":1,"column_end":65}},{"value":"/","span":{"file_name":"/Users/shelwitz/.cargo/registry/src/github.com-1ecc6299db9ec823/bio-0.39.0/src/io/fastq.rs","byte_start":486604,"byte_end":486607,"line_start":38,"line_end":38,"column_start":1,"column_end":4}},{"value":"/ let mut nb_reads = 0;","span":{"file_name":"/Users/shelwitz/.cargo/registry/src/github.com-1ecc6299db9ec823/bio-0.39.0/src/io/fastq.rs","byte_start":486608,"byte_end":486633,"line_start":39,"line_end":39,"column_start":1,"column_end":26}},{"value":"/ let mut nb_bases = 0;","span":{"file_name":"/Users/shelwitz/.cargo/registry/src/github.com-1ecc6299db9ec823/bio-0.39.0/src/io/fastq.rs","byte_start":486634,"byte_end":486659,"line_start":40,"line_end":40,"column_start":1,"column_end":26}},{"value":"/","span":{"file_name":"/Users/shelwitz/.cargo/registry/src/github.com-1ecc6299db9ec823/bio-0.39.0/src/io/fastq.rs","byte_start":486660,"byte_end":486663,"line_start":41,"line_end":41,"column_start":1,"column_end":4}},{"value":"/ while let Some(Ok(record)) = records.next() {","span":{"file_name":"/Users/shelwitz/.cargo/registry/src/github.com-1ecc6299db9ec823/bio-0.39.0/src/io/fastq.rs","byte_start":486664,"byte_end":486713,"line_start":42,"line_end":42,"column_start":1,"column_end":50}},{"value":"/     nb_reads += 1;","span":{"file_name":"/Users/shelwitz/.cargo/registry/src/github.com-1ecc6299db9ec823/bio-0.39.0/src/io/fastq.rs","byte_start":486714,"byte_end":486736,"line_start":43,"line_end":43,"column_start":1,"column_end":23}},{"value":"/     nb_bases += record.seq().len();","span":{"file_name":"/Users/shelwitz/.cargo/registry/src/github.com-1ecc6299db9ec823/bio-0.39.0/src/io/fastq.rs","byte_start":486737,"byte_end":486776,"line_start":44,"line_end":44,"column_start":1,"column_end":40}},{"value":"/ }","span":{"file_name":"/Users/shelwitz/.cargo/registry/src/github.com-1ecc6299db9ec823/bio-0.39.0/src/io/fastq.rs","byte_start":486777,"byte_end":486782,"line_start":45,"line_end":45,"column_start":1,"column_end":6}},{"value":"/","span":{"file_name":"/Users/shelwitz/.cargo/registry/src/github.com-1ecc6299db9ec823/bio-0.39.0/src/io/fastq.rs","byte_start":486783,"byte_end":486786,"line_start":46,"line_end":46,"column_start":1,"column_end":4}},{"value":"/ println!(\"Number of reads: {}\", nb_reads);","span":{"file_name":"/Users/shelwitz/.cargo/registry/src/github.com-1ecc6299db9ec823/bio-0.39.0/src/io/fastq.rs","byte_start":486787,"byte_end":486833,"line_start":47,"line_end":47,"column_start":1,"column_end":47}},{"value":"/ println!(\"Number of bases: {}\", nb_bases);","span":{"file_name":"/Users/shelwitz/.cargo/registry/src/github.com-1ecc6299db9ec823/bio-0.39.0/src/io/fastq.rs","byte_start":486834,"byte_end":486880,"line_start":48,"line_end":48,"column_start":1,"column_end":47}},{"value":"/ ```","span":{"file_name":"/Users/shelwitz/.cargo/registry/src/github.com-1ecc6299db9ec823/bio-0.39.0/src/io/fastq.rs","byte_start":486881,"byte_end":486888,"line_start":49,"line_end":49,"column_start":1,"column_end":8}},{"value":"/","span":{"file_name":"/Users/shelwitz/.cargo/registry/src/github.com-1ecc6299db9ec823/bio-0.39.0/src/io/fastq.rs","byte_start":486889,"byte_end":486892,"line_start":50,"line_end":50,"column_start":1,"column_end":4}},{"value":"/ ## Write","span":{"file_name":"/Users/shelwitz/.cargo/registry/src/github.com-1ecc6299db9ec823/bio-0.39.0/src/io/fastq.rs","byte_start":486893,"byte_end":486905,"line_start":51,"line_end":51,"column_start":1,"column_end":13}},{"value":"/","span":{"file_name":"/Users/shelwitz/.cargo/registry/src/github.com-1ecc6299db9ec823/bio-0.39.0/src/io/fastq.rs","byte_start":486906,"byte_end":486909,"line_start":52,"line_end":52,"column_start":1,"column_end":4}},{"value":"/ In this example we generate 10 random sequences with length 100 and write them to stdout.","span":{"file_name":"/Users/shelwitz/.cargo/registry/src/github.com-1ecc6299db9ec823/bio-0.39.0/src/io/fastq.rs","byte_start":486910,"byte_end":487003,"line_start":53,"line_end":53,"column_start":1,"column_end":94}},{"value":"/","span":{"file_name":"/Users/shelwitz/.cargo/registry/src/github.com-1ecc6299db9ec823/bio-0.39.0/src/io/fastq.rs","byte_start":487004,"byte_end":487007,"line_start":54,"line_end":54,"column_start":1,"column_end":4}},{"value":"/ ```","span":{"file_name":"/Users/shelwitz/.cargo/registry/src/github.com-1ecc6299db9ec823/bio-0.39.0/src/io/fastq.rs","byte_start":487008,"byte_end":487015,"line_start":55,"line_end":55,"column_start":1,"column_end":8}},{"value":"/ use std::io;","span":{"file_name":"/Users/shelwitz/.cargo/registry/src/github.com-1ecc6299db9ec823/bio-0.39.0/src/io/fastq.rs","byte_start":487016,"byte_end":487032,"line_start":56,"line_end":56,"column_start":1,"column_end":17}},{"value":"/ use bio::io::fastq;","span":{"file_name":"/Users/shelwitz/.cargo/registry/src/github.com-1ecc6299db9ec823/bio-0.39.0/src/io/fastq.rs","byte_start":487033,"byte_end":487056,"line_start":57,"line_end":57,"column_start":1,"column_end":24}},{"value":"/","span":{"file_name":"/Users/shelwitz/.cargo/registry/src/github.com-1ecc6299db9ec823/bio-0.39.0/src/io/fastq.rs","byte_start":487057,"byte_end":487060,"line_start":58,"line_end":58,"column_start":1,"column_end":4}},{"value":"/ let mut seed = 42;","span":{"file_name":"/Users/shelwitz/.cargo/registry/src/github.com-1ecc6299db9ec823/bio-0.39.0/src/io/fastq.rs","byte_start":487061,"byte_end":487083,"line_start":59,"line_end":59,"column_start":1,"column_end":23}},{"value":"/","span":{"file_name":"/Users/shelwitz/.cargo/registry/src/github.com-1ecc6299db9ec823/bio-0.39.0/src/io/fastq.rs","byte_start":487084,"byte_end":487087,"line_start":60,"line_end":60,"column_start":1,"column_end":4}},{"value":"/ let nucleotides = [b'A', b'C', b'G', b'T'];","span":{"file_name":"/Users/shelwitz/.cargo/registry/src/github.com-1ecc6299db9ec823/bio-0.39.0/src/io/fastq.rs","byte_start":487088,"byte_end":487135,"line_start":61,"line_end":61,"column_start":1,"column_end":48}},{"value":"/","span":{"file_name":"/Users/shelwitz/.cargo/registry/src/github.com-1ecc6299db9ec823/bio-0.39.0/src/io/fastq.rs","byte_start":487136,"byte_end":487139,"line_start":62,"line_end":62,"column_start":1,"column_end":4}},{"value":"/ let mut writer = fastq::Writer::new(io::stdout());","span":{"file_name":"/Users/shelwitz/.cargo/registry/src/github.com-1ecc6299db9ec823/bio-0.39.0/src/io/fastq.rs","byte_start":487140,"byte_end":487194,"line_start":63,"line_end":63,"column_start":1,"column_end":55}},{"value":"/","span":{"file_name":"/Users/shelwitz/.cargo/registry/src/github.com-1ecc6299db9ec823/bio-0.39.0/src/io/fastq.rs","byte_start":487195,"byte_end":487198,"line_start":64,"line_end":64,"column_start":1,"column_end":4}},{"value":"/ for _ in 0..10 {","span":{"file_name":"/Users/shelwitz/.cargo/registry/src/github.com-1ecc6299db9ec823/bio-0.39.0/src/io/fastq.rs","byte_start":487199,"byte_end":487219,"line_start":65,"line_end":65,"column_start":1,"column_end":21}},{"value":"/     let seq = (0..100).map(|_| {","span":{"file_name":"/Users/shelwitz/.cargo/registry/src/github.com-1ecc6299db9ec823/bio-0.39.0/src/io/fastq.rs","byte_start":487220,"byte_end":487256,"line_start":66,"line_end":66,"column_start":1,"column_end":37}},{"value":"/         seed = ((seed ^ seed << 13) ^ seed >> 7) ^ seed << 17; // don't use this random generator","span":{"file_name":"/Users/shelwitz/.cargo/registry/src/github.com-1ecc6299db9ec823/bio-0.39.0/src/io/fastq.rs","byte_start":487257,"byte_end":487358,"line_start":67,"line_end":67,"column_start":1,"column_end":102}},{"value":"/         nucleotides[seed % 4]","span":{"file_name":"/Users/shelwitz/.cargo/registry/src/github.com-1ecc6299db9ec823/bio-0.39.0/src/io/fastq.rs","byte_start":487359,"byte_end":487392,"line_start":68,"line_end":68,"column_start":1,"column_end":34}},{"value":"/     }).collect::<Vec<u8>>();","span":{"file_name":"/Users/shelwitz/.cargo/registry/src/github.com-1ecc6299db9ec823/bio-0.39.0/src/io/fastq.rs","byte_start":487393,"byte_end":487425,"line_start":69,"line_end":69,"column_start":1,"column_end":33}},{"value":"/","span":{"file_name":"/Users/shelwitz/.cargo/registry/src/github.com-1ecc6299db9ec823/bio-0.39.0/src/io/fastq.rs","byte_start":487426,"byte_end":487429,"line_start":70,"line_end":70,"column_start":1,"column_end":4}},{"value":"/     let qual = (0..100).map(|_| b'!').collect::<Vec<u8>>();","span":{"file_name":"/Users/shelwitz/.cargo/registry/src/github.com-1ecc6299db9ec823/bio-0.39.0/src/io/fastq.rs","byte_start":487430,"byte_end":487493,"line_start":71,"line_end":71,"column_start":1,"column_end":64}},{"value":"/","span":{"file_name":"/Users/shelwitz/.cargo/registry/src/github.com-1ecc6299db9ec823/bio-0.39.0/src/io/fastq.rs","byte_start":487494,"byte_end":487497,"line_start":72,"line_end":72,"column_start":1,"column_end":4}},{"value":"/    writer.write(\"random\", None, seq.as_slice(), qual.as_slice());","span":{"file_name":"/Users/shelwitz/.cargo/registry/src/github.com-1ecc6299db9ec823/bio-0.39.0/src/io/fastq.rs","byte_start":487498,"byte_end":487567,"line_start":73,"line_end":73,"column_start":1,"column_end":70}},{"value":"/ }","span":{"file_name":"/Users/shelwitz/.cargo/registry/src/github.com-1ecc6299db9ec823/bio-0.39.0/src/io/fastq.rs","byte_start":487568,"byte_end":487573,"line_start":74,"line_end":74,"column_start":1,"column_end":6}},{"value":"/ ```","span":{"file_name":"/Users/shelwitz/.cargo/registry/src/github.com-1ecc6299db9ec823/bio-0.39.0/src/io/fastq.rs","byte_start":487574,"byte_end":487581,"line_start":75,"line_end":75,"column_start":1,"column_end":8}},{"value":"/","span":{"file_name":"/Users/shelwitz/.cargo/registry/src/github.com-1ecc6299db9ec823/bio-0.39.0/src/io/fastq.rs","byte_start":487582,"byte_end":487585,"line_start":76,"line_end":76,"column_start":1,"column_end":4}},{"value":"/ ## Read and Write","span":{"file_name":"/Users/shelwitz/.cargo/registry/src/github.com-1ecc6299db9ec823/bio-0.39.0/src/io/fastq.rs","byte_start":487586,"byte_end":487607,"line_start":77,"line_end":77,"column_start":1,"column_end":22}},{"value":"/","span":{"file_name":"/Users/shelwitz/.cargo/registry/src/github.com-1ecc6299db9ec823/bio-0.39.0/src/io/fastq.rs","byte_start":487608,"byte_end":487611,"line_start":78,"line_end":78,"column_start":1,"column_end":4}},{"value":"/ In this example we filter reads from stdin on mean quality (Phred + 33) and write them to stdout","span":{"file_name":"/Users/shelwitz/.cargo/registry/src/github.com-1ecc6299db9ec823/bio-0.39.0/src/io/fastq.rs","byte_start":487612,"byte_end":487712,"line_start":79,"line_end":79,"column_start":1,"column_end":101}},{"value":"/","span":{"file_name":"/Users/shelwitz/.cargo/registry/src/github.com-1ecc6299db9ec823/bio-0.39.0/src/io/fastq.rs","byte_start":487713,"byte_end":487716,"line_start":80,"line_end":80,"column_start":1,"column_end":4}},{"value":"/ ```","span":{"file_name":"/Users/shelwitz/.cargo/registry/src/github.com-1ecc6299db9ec823/bio-0.39.0/src/io/fastq.rs","byte_start":487717,"byte_end":487724,"line_start":81,"line_end":81,"column_start":1,"column_end":8}},{"value":"/ use bio::io::fastq;","span":{"file_name":"/Users/shelwitz/.cargo/registry/src/github.com-1ecc6299db9ec823/bio-0.39.0/src/io/fastq.rs","byte_start":487725,"byte_end":487748,"line_start":82,"line_end":82,"column_start":1,"column_end":24}},{"value":"/ use bio::io::fastq::FastqRead;","span":{"file_name":"/Users/shelwitz/.cargo/registry/src/github.com-1ecc6299db9ec823/bio-0.39.0/src/io/fastq.rs","byte_start":487749,"byte_end":487783,"line_start":83,"line_end":83,"column_start":1,"column_end":35}},{"value":"/ use std::io;","span":{"file_name":"/Users/shelwitz/.cargo/registry/src/github.com-1ecc6299db9ec823/bio-0.39.0/src/io/fastq.rs","byte_start":487784,"byte_end":487800,"line_start":84,"line_end":84,"column_start":1,"column_end":17}},{"value":"/","span":{"file_name":"/Users/shelwitz/.cargo/registry/src/github.com-1ecc6299db9ec823/bio-0.39.0/src/io/fastq.rs","byte_start":487801,"byte_end":487804,"line_start":85,"line_end":85,"column_start":1,"column_end":4}},{"value":"/ let mut reader = fastq::Reader::new(io::stdin());","span":{"file_name":"/Users/shelwitz/.cargo/registry/src/github.com-1ecc6299db9ec823/bio-0.39.0/src/io/fastq.rs","byte_start":487805,"byte_end":487858,"line_start":86,"line_end":86,"column_start":1,"column_end":54}},{"value":"/ let mut writer = fastq::Writer::new(io::stdout());","span":{"file_name":"/Users/shelwitz/.cargo/registry/src/github.com-1ecc6299db9ec823/bio-0.39.0/src/io/fastq.rs","byte_start":487859,"byte_end":487913,"line_start":87,"line_end":87,"column_start":1,"column_end":55}},{"value":"/ let mut record = fastq::Record::new();","span":{"file_name":"/Users/shelwitz/.cargo/registry/src/github.com-1ecc6299db9ec823/bio-0.39.0/src/io/fastq.rs","byte_start":487914,"byte_end":487956,"line_start":88,"line_end":88,"column_start":1,"column_end":43}},{"value":"/","span":{"file_name":"/Users/shelwitz/.cargo/registry/src/github.com-1ecc6299db9ec823/bio-0.39.0/src/io/fastq.rs","byte_start":487957,"byte_end":487960,"line_start":89,"line_end":89,"column_start":1,"column_end":4}},{"value":"/ while let Ok(()) = reader.read(&mut record) {","span":{"file_name":"/Users/shelwitz/.cargo/registry/src/github.com-1ecc6299db9ec823/bio-0.39.0/src/io/fastq.rs","byte_start":487961,"byte_end":488010,"line_start":90,"line_end":90,"column_start":1,"column_end":50}},{"value":"/     if record.is_empty() {","span":{"file_name":"/Users/shelwitz/.cargo/registry/src/github.com-1ecc6299db9ec823/bio-0.39.0/src/io/fastq.rs","byte_start":488011,"byte_end":488041,"line_start":91,"line_end":91,"column_start":1,"column_end":31}},{"value":"/         let check = record.check();","span":{"file_name":"/Users/shelwitz/.cargo/registry/src/github.com-1ecc6299db9ec823/bio-0.39.0/src/io/fastq.rs","byte_start":488042,"byte_end":488081,"line_start":92,"line_end":92,"column_start":1,"column_end":40}},{"value":"/         break;","span":{"file_name":"/Users/shelwitz/.cargo/registry/src/github.com-1ecc6299db9ec823/bio-0.39.0/src/io/fastq.rs","byte_start":488082,"byte_end":488100,"line_start":93,"line_end":93,"column_start":1,"column_end":19}},{"value":"/     }","span":{"file_name":"/Users/shelwitz/.cargo/registry/src/github.com-1ecc6299db9ec823/bio-0.39.0/src/io/fastq.rs","byte_start":488101,"byte_end":488110,"line_start":94,"line_end":94,"column_start":1,"column_end":10}},{"value":"/","span":{"file_name":"/Users/shelwitz/.cargo/registry/src/github.com-1ecc6299db9ec823/bio-0.39.0/src/io/fastq.rs","byte_start":488111,"byte_end":488114,"line_start":95,"line_end":95,"column_start":1,"column_end":4}},{"value":"/     let mut sum_qual = record.qual().iter().sum::<u8>() as f64;","span":{"file_name":"/Users/shelwitz/.cargo/registry/src/github.com-1ecc6299db9ec823/bio-0.39.0/src/io/fastq.rs","byte_start":488115,"byte_end":488182,"line_start":96,"line_end":96,"column_start":1,"column_end":68}},{"value":"/","span":{"file_name":"/Users/shelwitz/.cargo/registry/src/github.com-1ecc6299db9ec823/bio-0.39.0/src/io/fastq.rs","byte_start":488183,"byte_end":488186,"line_start":97,"line_end":97,"column_start":1,"column_end":4}},{"value":"/     if (sum_qual / record.seq().len() as f64 - 33.0) > 30.0 {","span":{"file_name":"/Users/shelwitz/.cargo/registry/src/github.com-1ecc6299db9ec823/bio-0.39.0/src/io/fastq.rs","byte_start":488187,"byte_end":488252,"line_start":98,"line_end":98,"column_start":1,"column_end":66}},{"value":"/         writer.write_record(&record);","span":{"file_name":"/Users/shelwitz/.cargo/registry/src/github.com-1ecc6299db9ec823/bio-0.39.0/src/io/fastq.rs","byte_start":488253,"byte_end":488294,"line_start":99,"line_end":99,"column_start":1,"column_end":42}},{"value":"/     }","span":{"file_name":"/Users/shelwitz/.cargo/registry/src/github.com-1ecc6299db9ec823/bio-0.39.0/src/io/fastq.rs","byte_start":488295,"byte_end":488304,"line_start":100,"line_end":100,"column_start":1,"column_end":10}},{"value":"/ }","span":{"file_name":"/Users/shelwitz/.cargo/registry/src/github.com-1ecc6299db9ec823/bio-0.39.0/src/io/fastq.rs","byte_start":488305,"byte_end":488310,"line_start":101,"line_end":101,"column_start":1,"column_end":6}},{"value":"/ ```","span":{"file_name":"/Users/shelwitz/.cargo/registry/src/github.com-1ecc6299db9ec823/bio-0.39.0/src/io/fastq.rs","byte_start":488311,"byte_end":488318,"line_start":102,"line_end":102,"column_start":1,"column_end":8}}]},{"kind":"TupleVariant","id":{"krate":0,"index":4845},"span":{"file_name":"/Users/shelwitz/.cargo/registry/src/github.com-1ecc6299db9ec823/bio-0.39.0/src/io/fastq.rs","byte_start":488576,"byte_end":488585,"line_start":116,"line_end":116,"column_start":5,"column_end":14},"name":"MissingAt","qualname":"::io::fastq::Error::MissingAt","value":"Error::MissingAt","parent":{"krate":0,"index":4826},"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[{"value":"error(\"expected '@' at record start\")","span":{"file_name":"/Users/shelwitz/.cargo/registry/src/github.com-1ecc6299db9ec823/bio-0.39.0/src/io/fastq.rs","byte_start":488531,"byte_end":488571,"line_start":115,"line_end":115,"column_start":5,"column_end":45}}]},{"kind":"StructVariant","id":{"krate":0,"index":4847},"span":{"file_name":"/Users/shelwitz/.cargo/registry/src/github.com-1ecc6299db9ec823/bio-0.39.0/src/io/fastq.rs","byte_start":488641,"byte_end":488649,"line_start":119,"line_end":119,"column_start":5,"column_end":13},"name":"FileOpen","qualname":"::io::fastq::Error::FileOpen","value":"Error::FileOpen { path, source }","parent":{"krate":0,"index":4826},"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[{"value":"error(\"can't open {path} file: {source}\")","span":{"file_name":"/Users/shelwitz/.cargo/registry/src/github.com-1ecc6299db9ec823/bio-0.39.0/src/io/fastq.rs","byte_start":488592,"byte_end":488636,"line_start":118,"line_end":118,"column_start":5,"column_end":49}}]},{"kind":"TupleVariant","id":{"krate":0,"index":4850},"span":{"file_name":"/Users/shelwitz/.cargo/registry/src/github.com-1ecc6299db9ec823/bio-0.39.0/src/io/fastq.rs","byte_start":488726,"byte_end":488735,"line_start":122,"line_end":122,"column_start":5,"column_end":14},"name":"ReadError","qualname":"::io::fastq::Error::ReadError","value":"Error::ReadError(io::Error)","parent":{"krate":0,"index":4826},"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[{"value":"error(\"can't read input\")","span":{"file_name":"/Users/shelwitz/.cargo/registry/src/github.com-1ecc6299db9ec823/bio-0.39.0/src/io/fastq.rs","byte_start":488693,"byte_end":488721,"line_start":121,"line_end":121,"column_start":5,"column_end":33}}]},{"kind":"TupleVariant","id":{"krate":0,"index":4853},"span":{"file_name":"/Users/shelwitz/.cargo/registry/src/github.com-1ecc6299db9ec823/bio-0.39.0/src/io/fastq.rs","byte_start":488884,"byte_end":488900,"line_start":125,"line_end":125,"column_start":5,"column_end":21},"name":"IncompleteRecord","qualname":"::io::fastq::Error::IncompleteRecord","value":"Error::IncompleteRecord","parent":{"krate":0,"index":4826},"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[{"value":"error(\"Incomplete record. Each FastQ record has to consist of 4 lines: header, sequence, separator and qualities.\")","span":{"file_name":"/Users/shelwitz/.cargo/registry/src/github.com-1ecc6299db9ec823/bio-0.39.0/src/io/fastq.rs","byte_start":488761,"byte_end":488879,"line_start":124,"line_end":124,"column_start":5,"column_end":123}}]},{"kind":"Enum","id":{"krate":0,"index":4826},"span":{"file_name":"/Users/shelwitz/.cargo/registry/src/github.com-1ecc6299db9ec823/bio-0.39.0/src/io/fastq.rs","byte_start":488519,"byte_end":488524,"line_start":114,"line_end":114,"column_start":10,"column_end":15},"name":"Error","qualname":"::io::fastq::Error","value":"pub enum Error {\n    MissingAt,\n    FileOpen {\n        path: PathBuf,\n        source: io::Error,\n    },\n    ReadError(io::Error),\n    IncompleteRecord,\n}","parent":null,"children":[{"krate":0,"index":4845},{"krate":0,"index":4847},{"krate":0,"index":4850},{"krate":0,"index":4853}],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Type","id":{"krate":0,"index":1427},"span":{"file_name":"/Users/shelwitz/.cargo/registry/src/github.com-1ecc6299db9ec823/bio-0.39.0/src/io/fastq.rs","byte_start":488913,"byte_end":488919,"line_start":127,"line_end":127,"column_start":10,"column_end":16},"name":"Result","qualname":"::io::fastq::Result","value":"std::result::Result<T, E>","parent":null,"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Trait","id":{"krate":0,"index":1436},"span":{"file_name":"/Users/shelwitz/.cargo/registry/src/github.com-1ecc6299db9ec823/bio-0.39.0/src/io/fastq.rs","byte_start":489073,"byte_end":489082,"line_start":134,"line_end":134,"column_start":11,"column_end":20},"name":"FastqRead","qualname":"::io::fastq::FastqRead","value":"FastqRead","parent":null,"children":[{"krate":0,"index":1437}],"decl_id":null,"docs":" Trait for FastQ readers.\n","sig":null,"attributes":[{"value":"/ Trait for FastQ readers.","span":{"file_name":"/Users/shelwitz/.cargo/registry/src/github.com-1ecc6299db9ec823/bio-0.39.0/src/io/fastq.rs","byte_start":489034,"byte_end":489062,"line_start":133,"line_end":133,"column_start":1,"column_end":29}}]},{"kind":"Method","id":{"krate":0,"index":1437},"span":{"file_name":"/Users/shelwitz/.cargo/registry/src/github.com-1ecc6299db9ec823/bio-0.39.0/src/io/fastq.rs","byte_start":489092,"byte_end":489096,"line_start":135,"line_end":135,"column_start":8,"column_end":12},"name":"read","qualname":"::io::fastq::FastqRead::read","value":"pub fn read(&mut Self, &mut Record) -> Result<()>","parent":{"krate":0,"index":1436},"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Struct","id":{"krate":0,"index":4855},"span":{"file_name":"/Users/shelwitz/.cargo/registry/src/github.com-1ecc6299db9ec823/bio-0.39.0/src/io/fastq.rs","byte_start":489195,"byte_end":489201,"line_start":140,"line_end":140,"column_start":12,"column_end":18},"name":"Reader","qualname":"::io::fastq::Reader","value":"Reader {  }","parent":null,"children":[{"krate":0,"index":4857},{"krate":0,"index":4858}],"decl_id":null,"docs":" A FastQ reader.\n","sig":null,"attributes":[{"value":"/ A FastQ reader.","span":{"file_name":"/Users/shelwitz/.cargo/registry/src/github.com-1ecc6299db9ec823/bio-0.39.0/src/io/fastq.rs","byte_start":489147,"byte_end":489166,"line_start":138,"line_end":138,"column_start":1,"column_end":20}}]},{"kind":"Method","id":{"krate":0,"index":1439},"span":{"file_name":"/Users/shelwitz/.cargo/registry/src/github.com-1ecc6299db9ec823/bio-0.39.0/src/io/fastq.rs","byte_start":489332,"byte_end":489341,"line_start":147,"line_end":147,"column_start":12,"column_end":21},"name":"from_file","qualname":"<Reader<io::BufReader<fs::File>>>::from_file","value":"pub fn from_file<P: AsRef<Path> + std::fmt::Debug>(P) -> anyhow::Result<Self>","parent":null,"children":[],"decl_id":null,"docs":" Read from a given file.\n","sig":null,"attributes":[{"value":"/ Read from a given file.","span":{"file_name":"/Users/shelwitz/.cargo/registry/src/github.com-1ecc6299db9ec823/bio-0.39.0/src/io/fastq.rs","byte_start":489293,"byte_end":489320,"line_start":146,"line_end":146,"column_start":5,"column_end":32}}]},{"kind":"Method","id":{"krate":0,"index":1445},"span":{"file_name":"/Users/shelwitz/.cargo/registry/src/github.com-1ecc6299db9ec823/bio-0.39.0/src/io/fastq.rs","byte_start":489846,"byte_end":489849,"line_start":160,"line_end":160,"column_start":12,"column_end":15},"name":"new","qualname":"<Reader<io::BufReader<R>>>::new","value":"pub fn new(R) -> Self","parent":null,"children":[],"decl_id":null,"docs":" Read from a given [`io::Read`](https://doc.rust-lang.org/std/io/trait.Read.html).\n","sig":null,"attributes":[{"value":"/ Read from a given [`io::Read`](https://doc.rust-lang.org/std/io/trait.Read.html).","span":{"file_name":"/Users/shelwitz/.cargo/registry/src/github.com-1ecc6299db9ec823/bio-0.39.0/src/io/fastq.rs","byte_start":489749,"byte_end":489834,"line_start":159,"line_end":159,"column_start":5,"column_end":90}}]},{"kind":"Method","id":{"krate":0,"index":1446},"span":{"file_name":"/Users/shelwitz/.cargo/registry/src/github.com-1ecc6299db9ec823/bio-0.39.0/src/io/fastq.rs","byte_start":490086,"byte_end":490099,"line_start":168,"line_end":168,"column_start":12,"column_end":25},"name":"with_capacity","qualname":"<Reader<io::BufReader<R>>>::with_capacity","value":"pub fn with_capacity(usize, R) -> Self","parent":null,"children":[],"decl_id":null,"docs":" Create a new Fastq reader given a capacity and an instance of `io::Read`.\n","sig":null,"attributes":[{"value":"/ Create a new Fastq reader given a capacity and an instance of `io::Read`.","span":{"file_name":"/Users/shelwitz/.cargo/registry/src/github.com-1ecc6299db9ec823/bio-0.39.0/src/io/fastq.rs","byte_start":489997,"byte_end":490074,"line_start":167,"line_end":167,"column_start":5,"column_end":82}}]},{"kind":"Method","id":{"krate":0,"index":1449},"span":{"file_name":"/Users/shelwitz/.cargo/registry/src/github.com-1ecc6299db9ec823/bio-0.39.0/src/io/fastq.rs","byte_start":490422,"byte_end":490434,"line_start":181,"line_end":181,"column_start":12,"column_end":24},"name":"from_bufread","qualname":"<Reader<B>>::from_bufread","value":"pub fn from_bufread(B) -> Self","parent":null,"children":[],"decl_id":null,"docs":"  Create a new Fastq reader with an object that implements `io::BufReader`.\n","sig":null,"attributes":[{"value":"/  Create a new Fastq reader with an object that implements `io::BufReader`.","span":{"file_name":"/Users/shelwitz/.cargo/registry/src/github.com-1ecc6299db9ec823/bio-0.39.0/src/io/fastq.rs","byte_start":490332,"byte_end":490410,"line_start":180,"line_end":180,"column_start":5,"column_end":83}}]},{"kind":"Method","id":{"krate":0,"index":1450},"span":{"file_name":"/Users/shelwitz/.cargo/registry/src/github.com-1ecc6299db9ec823/bio-0.39.0/src/io/fastq.rs","byte_start":491137,"byte_end":491144,"line_start":208,"line_end":208,"column_start":12,"column_end":19},"name":"records","qualname":"<Reader<B>>::records","value":"pub fn records(Self) -> Records<B>","parent":null,"children":[],"decl_id":null,"docs":" Return an iterator over the records of this FastQ file.","sig":null,"attributes":[{"value":"/ Return an iterator over the records of this FastQ file.","span":{"file_name":"/Users/shelwitz/.cargo/registry/src/github.com-1ecc6299db9ec823/bio-0.39.0/src/io/fastq.rs","byte_start":490568,"byte_end":490627,"line_start":188,"line_end":188,"column_start":5,"column_end":64}},{"value":"/","span":{"file_name":"/Users/shelwitz/.cargo/registry/src/github.com-1ecc6299db9ec823/bio-0.39.0/src/io/fastq.rs","byte_start":490632,"byte_end":490635,"line_start":189,"line_end":189,"column_start":5,"column_end":8}},{"value":"/ # Errors","span":{"file_name":"/Users/shelwitz/.cargo/registry/src/github.com-1ecc6299db9ec823/bio-0.39.0/src/io/fastq.rs","byte_start":490640,"byte_end":490652,"line_start":190,"line_end":190,"column_start":5,"column_end":17}},{"value":"/","span":{"file_name":"/Users/shelwitz/.cargo/registry/src/github.com-1ecc6299db9ec823/bio-0.39.0/src/io/fastq.rs","byte_start":490657,"byte_end":490660,"line_start":191,"line_end":191,"column_start":5,"column_end":8}},{"value":"/ This function will return an error if a record is incomplete","span":{"file_name":"/Users/shelwitz/.cargo/registry/src/github.com-1ecc6299db9ec823/bio-0.39.0/src/io/fastq.rs","byte_start":490665,"byte_end":490729,"line_start":192,"line_end":192,"column_start":5,"column_end":69}},{"value":"/ or syntax is violated.","span":{"file_name":"/Users/shelwitz/.cargo/registry/src/github.com-1ecc6299db9ec823/bio-0.39.0/src/io/fastq.rs","byte_start":490734,"byte_end":490760,"line_start":193,"line_end":193,"column_start":5,"column_end":31}},{"value":"/","span":{"file_name":"/Users/shelwitz/.cargo/registry/src/github.com-1ecc6299db9ec823/bio-0.39.0/src/io/fastq.rs","byte_start":490765,"byte_end":490768,"line_start":194,"line_end":194,"column_start":5,"column_end":8}},{"value":"/ # Example","span":{"file_name":"/Users/shelwitz/.cargo/registry/src/github.com-1ecc6299db9ec823/bio-0.39.0/src/io/fastq.rs","byte_start":490773,"byte_end":490786,"line_start":195,"line_end":195,"column_start":5,"column_end":18}},{"value":"/","span":{"file_name":"/Users/shelwitz/.cargo/registry/src/github.com-1ecc6299db9ec823/bio-0.39.0/src/io/fastq.rs","byte_start":490791,"byte_end":490794,"line_start":196,"line_end":196,"column_start":5,"column_end":8}},{"value":"/ ```rust","span":{"file_name":"/Users/shelwitz/.cargo/registry/src/github.com-1ecc6299db9ec823/bio-0.39.0/src/io/fastq.rs","byte_start":490799,"byte_end":490810,"line_start":197,"line_end":197,"column_start":5,"column_end":16}},{"value":"/ use bio::io::fastq;","span":{"file_name":"/Users/shelwitz/.cargo/registry/src/github.com-1ecc6299db9ec823/bio-0.39.0/src/io/fastq.rs","byte_start":490815,"byte_end":490838,"line_start":198,"line_end":198,"column_start":5,"column_end":28}},{"value":"/","span":{"file_name":"/Users/shelwitz/.cargo/registry/src/github.com-1ecc6299db9ec823/bio-0.39.0/src/io/fastq.rs","byte_start":490843,"byte_end":490846,"line_start":199,"line_end":199,"column_start":5,"column_end":8}},{"value":"/ let fq: &'static [u8] = b\"@id description\\nACGT\\n+\\n!!!!\\n\";","span":{"file_name":"/Users/shelwitz/.cargo/registry/src/github.com-1ecc6299db9ec823/bio-0.39.0/src/io/fastq.rs","byte_start":490851,"byte_end":490915,"line_start":200,"line_end":200,"column_start":5,"column_end":69}},{"value":"/ let records = fastq::Reader::new(fq)","span":{"file_name":"/Users/shelwitz/.cargo/registry/src/github.com-1ecc6299db9ec823/bio-0.39.0/src/io/fastq.rs","byte_start":490920,"byte_end":490960,"line_start":201,"line_end":201,"column_start":5,"column_end":45}},{"value":"/     .records()","span":{"file_name":"/Users/shelwitz/.cargo/registry/src/github.com-1ecc6299db9ec823/bio-0.39.0/src/io/fastq.rs","byte_start":490965,"byte_end":490983,"line_start":202,"line_end":202,"column_start":5,"column_end":23}},{"value":"/     .map(|record| record.unwrap());","span":{"file_name":"/Users/shelwitz/.cargo/registry/src/github.com-1ecc6299db9ec823/bio-0.39.0/src/io/fastq.rs","byte_start":490988,"byte_end":491027,"line_start":203,"line_end":203,"column_start":5,"column_end":44}},{"value":"/ for record in records {","span":{"file_name":"/Users/shelwitz/.cargo/registry/src/github.com-1ecc6299db9ec823/bio-0.39.0/src/io/fastq.rs","byte_start":491032,"byte_end":491059,"line_start":204,"line_end":204,"column_start":5,"column_end":32}},{"value":"/     assert!(record.check().is_ok())","span":{"file_name":"/Users/shelwitz/.cargo/registry/src/github.com-1ecc6299db9ec823/bio-0.39.0/src/io/fastq.rs","byte_start":491064,"byte_end":491103,"line_start":205,"line_end":205,"column_start":5,"column_end":44}},{"value":"/ }","span":{"file_name":"/Users/shelwitz/.cargo/registry/src/github.com-1ecc6299db9ec823/bio-0.39.0/src/io/fastq.rs","byte_start":491108,"byte_end":491113,"line_start":206,"line_end":206,"column_start":5,"column_end":10}},{"value":"/ ```","span":{"file_name":"/Users/shelwitz/.cargo/registry/src/github.com-1ecc6299db9ec823/bio-0.39.0/src/io/fastq.rs","byte_start":491118,"byte_end":491125,"line_start":207,"line_end":207,"column_start":5,"column_end":12}}]},{"kind":"Struct","id":{"krate":0,"index":4862},"span":{"file_name":"/Users/shelwitz/.cargo/registry/src/github.com-1ecc6299db9ec823/bio-0.39.0/src/io/fastq.rs","byte_start":494241,"byte_end":494247,"line_start":299,"line_end":299,"column_start":12,"column_end":18},"name":"Record","qualname":"::io::fastq::Record","value":"Record {  }","parent":null,"children":[{"krate":0,"index":4863},{"krate":0,"index":4864},{"krate":0,"index":4865},{"krate":0,"index":4866}],"decl_id":null,"docs":" A FastQ record.\n","sig":null,"attributes":[{"value":"/ A FastQ record.","span":{"file_name":"/Users/shelwitz/.cargo/registry/src/github.com-1ecc6299db9ec823/bio-0.39.0/src/io/fastq.rs","byte_start":494142,"byte_end":494161,"line_start":297,"line_end":297,"column_start":1,"column_end":20}}]},{"kind":"Method","id":{"krate":0,"index":1456},"span":{"file_name":"/Users/shelwitz/.cargo/registry/src/github.com-1ecc6299db9ec823/bio-0.39.0/src/io/fastq.rs","byte_start":494397,"byte_end":494400,"line_start":308,"line_end":308,"column_start":12,"column_end":15},"name":"new","qualname":"<Record>::new","value":"pub fn new() -> Self","parent":null,"children":[],"decl_id":null,"docs":" Create a new, empty FastQ record.\n","sig":null,"attributes":[{"value":"/ Create a new, empty FastQ record.","span":{"file_name":"/Users/shelwitz/.cargo/registry/src/github.com-1ecc6299db9ec823/bio-0.39.0/src/io/fastq.rs","byte_start":494348,"byte_end":494385,"line_start":307,"line_end":307,"column_start":5,"column_end":42}}]},{"kind":"Method","id":{"krate":0,"index":1457},"span":{"file_name":"/Users/shelwitz/.cargo/registry/src/github.com-1ecc6299db9ec823/bio-0.39.0/src/io/fastq.rs","byte_start":495015,"byte_end":495025,"line_start":330,"line_end":330,"column_start":12,"column_end":22},"name":"with_attrs","qualname":"<Record>::with_attrs","value":"pub fn with_attrs(&str, Option<&str>, TextSlice, &[u8]) -> Self","parent":null,"children":[],"decl_id":null,"docs":" Create a new FastQ record from given attributes.","sig":null,"attributes":[{"value":"/ Create a new FastQ record from given attributes.","span":{"file_name":"/Users/shelwitz/.cargo/registry/src/github.com-1ecc6299db9ec823/bio-0.39.0/src/io/fastq.rs","byte_start":494571,"byte_end":494623,"line_start":317,"line_end":317,"column_start":5,"column_end":57}},{"value":"/","span":{"file_name":"/Users/shelwitz/.cargo/registry/src/github.com-1ecc6299db9ec823/bio-0.39.0/src/io/fastq.rs","byte_start":494628,"byte_end":494631,"line_start":318,"line_end":318,"column_start":5,"column_end":8}},{"value":"/ # Example","span":{"file_name":"/Users/shelwitz/.cargo/registry/src/github.com-1ecc6299db9ec823/bio-0.39.0/src/io/fastq.rs","byte_start":494636,"byte_end":494649,"line_start":319,"line_end":319,"column_start":5,"column_end":18}},{"value":"/","span":{"file_name":"/Users/shelwitz/.cargo/registry/src/github.com-1ecc6299db9ec823/bio-0.39.0/src/io/fastq.rs","byte_start":494654,"byte_end":494657,"line_start":320,"line_end":320,"column_start":5,"column_end":8}},{"value":"/ ```rust","span":{"file_name":"/Users/shelwitz/.cargo/registry/src/github.com-1ecc6299db9ec823/bio-0.39.0/src/io/fastq.rs","byte_start":494662,"byte_end":494673,"line_start":321,"line_end":321,"column_start":5,"column_end":16}},{"value":"/ use bio::io::fastq::Record;","span":{"file_name":"/Users/shelwitz/.cargo/registry/src/github.com-1ecc6299db9ec823/bio-0.39.0/src/io/fastq.rs","byte_start":494678,"byte_end":494709,"line_start":322,"line_end":322,"column_start":5,"column_end":36}},{"value":"/","span":{"file_name":"/Users/shelwitz/.cargo/registry/src/github.com-1ecc6299db9ec823/bio-0.39.0/src/io/fastq.rs","byte_start":494714,"byte_end":494717,"line_start":323,"line_end":323,"column_start":5,"column_end":8}},{"value":"/ let record = Record::with_attrs(\"id_str\", Some(\"desc\"), b\"ATGCGGG\", b\"QQQQQQQ\");","span":{"file_name":"/Users/shelwitz/.cargo/registry/src/github.com-1ecc6299db9ec823/bio-0.39.0/src/io/fastq.rs","byte_start":494722,"byte_end":494806,"line_start":324,"line_end":324,"column_start":5,"column_end":89}},{"value":"/ assert_eq!(record.id(), \"id_str\");","span":{"file_name":"/Users/shelwitz/.cargo/registry/src/github.com-1ecc6299db9ec823/bio-0.39.0/src/io/fastq.rs","byte_start":494811,"byte_end":494849,"line_start":325,"line_end":325,"column_start":5,"column_end":43}},{"value":"/ assert_eq!(record.desc(), Some(\"desc\"));","span":{"file_name":"/Users/shelwitz/.cargo/registry/src/github.com-1ecc6299db9ec823/bio-0.39.0/src/io/fastq.rs","byte_start":494854,"byte_end":494898,"line_start":326,"line_end":326,"column_start":5,"column_end":49}},{"value":"/ assert_eq!(record.seq(), b\"ATGCGGG\");","span":{"file_name":"/Users/shelwitz/.cargo/registry/src/github.com-1ecc6299db9ec823/bio-0.39.0/src/io/fastq.rs","byte_start":494903,"byte_end":494944,"line_start":327,"line_end":327,"column_start":5,"column_end":46}},{"value":"/ assert_eq!(record.qual(), b\"QQQQQQQ\");","span":{"file_name":"/Users/shelwitz/.cargo/registry/src/github.com-1ecc6299db9ec823/bio-0.39.0/src/io/fastq.rs","byte_start":494949,"byte_end":494991,"line_start":328,"line_end":328,"column_start":5,"column_end":47}},{"value":"/ ```","span":{"file_name":"/Users/shelwitz/.cargo/registry/src/github.com-1ecc6299db9ec823/bio-0.39.0/src/io/fastq.rs","byte_start":494996,"byte_end":495003,"line_start":329,"line_end":329,"column_start":5,"column_end":12}}]},{"kind":"Method","id":{"krate":0,"index":1459},"span":{"file_name":"/Users/shelwitz/.cargo/registry/src/github.com-1ecc6299db9ec823/bio-0.39.0/src/io/fastq.rs","byte_start":495714,"byte_end":495722,"line_start":353,"line_end":353,"column_start":12,"column_end":20},"name":"is_empty","qualname":"<Record>::is_empty","value":"pub fn is_empty(&Self) -> bool","parent":null,"children":[],"decl_id":null,"docs":" Check if a record is empty.","sig":null,"attributes":[{"value":"/ Check if a record is empty.","span":{"file_name":"/Users/shelwitz/.cargo/registry/src/github.com-1ecc6299db9ec823/bio-0.39.0/src/io/fastq.rs","byte_start":495359,"byte_end":495390,"line_start":340,"line_end":340,"column_start":5,"column_end":36}},{"value":"/","span":{"file_name":"/Users/shelwitz/.cargo/registry/src/github.com-1ecc6299db9ec823/bio-0.39.0/src/io/fastq.rs","byte_start":495395,"byte_end":495398,"line_start":341,"line_end":341,"column_start":5,"column_end":8}},{"value":"/ # Example","span":{"file_name":"/Users/shelwitz/.cargo/registry/src/github.com-1ecc6299db9ec823/bio-0.39.0/src/io/fastq.rs","byte_start":495403,"byte_end":495416,"line_start":342,"line_end":342,"column_start":5,"column_end":18}},{"value":"/","span":{"file_name":"/Users/shelwitz/.cargo/registry/src/github.com-1ecc6299db9ec823/bio-0.39.0/src/io/fastq.rs","byte_start":495421,"byte_end":495424,"line_start":343,"line_end":343,"column_start":5,"column_end":8}},{"value":"/ ```rust","span":{"file_name":"/Users/shelwitz/.cargo/registry/src/github.com-1ecc6299db9ec823/bio-0.39.0/src/io/fastq.rs","byte_start":495429,"byte_end":495440,"line_start":344,"line_end":344,"column_start":5,"column_end":16}},{"value":"/ use bio::io::fastq::Record;","span":{"file_name":"/Users/shelwitz/.cargo/registry/src/github.com-1ecc6299db9ec823/bio-0.39.0/src/io/fastq.rs","byte_start":495445,"byte_end":495476,"line_start":345,"line_end":345,"column_start":5,"column_end":36}},{"value":"/","span":{"file_name":"/Users/shelwitz/.cargo/registry/src/github.com-1ecc6299db9ec823/bio-0.39.0/src/io/fastq.rs","byte_start":495481,"byte_end":495484,"line_start":346,"line_end":346,"column_start":5,"column_end":8}},{"value":"/ let mut record = Record::new();","span":{"file_name":"/Users/shelwitz/.cargo/registry/src/github.com-1ecc6299db9ec823/bio-0.39.0/src/io/fastq.rs","byte_start":495489,"byte_end":495524,"line_start":347,"line_end":347,"column_start":5,"column_end":40}},{"value":"/ assert!(record.is_empty());","span":{"file_name":"/Users/shelwitz/.cargo/registry/src/github.com-1ecc6299db9ec823/bio-0.39.0/src/io/fastq.rs","byte_start":495529,"byte_end":495560,"line_start":348,"line_end":348,"column_start":5,"column_end":36}},{"value":"/","span":{"file_name":"/Users/shelwitz/.cargo/registry/src/github.com-1ecc6299db9ec823/bio-0.39.0/src/io/fastq.rs","byte_start":495565,"byte_end":495568,"line_start":349,"line_end":349,"column_start":5,"column_end":8}},{"value":"/ record = Record::with_attrs(\"id_str\", Some(\"desc\"), b\"ATGCGGG\", b\"QQQQQQQ\");","span":{"file_name":"/Users/shelwitz/.cargo/registry/src/github.com-1ecc6299db9ec823/bio-0.39.0/src/io/fastq.rs","byte_start":495573,"byte_end":495653,"line_start":350,"line_end":350,"column_start":5,"column_end":85}},{"value":"/ assert!(!record.is_empty());","span":{"file_name":"/Users/shelwitz/.cargo/registry/src/github.com-1ecc6299db9ec823/bio-0.39.0/src/io/fastq.rs","byte_start":495658,"byte_end":495690,"line_start":351,"line_end":351,"column_start":5,"column_end":37}},{"value":"/ ```","span":{"file_name":"/Users/shelwitz/.cargo/registry/src/github.com-1ecc6299db9ec823/bio-0.39.0/src/io/fastq.rs","byte_start":495695,"byte_end":495702,"line_start":352,"line_end":352,"column_start":5,"column_end":12}}]},{"kind":"Method","id":{"krate":0,"index":1460},"span":{"file_name":"/Users/shelwitz/.cargo/registry/src/github.com-1ecc6299db9ec823/bio-0.39.0/src/io/fastq.rs","byte_start":496705,"byte_end":496710,"line_start":378,"line_end":378,"column_start":12,"column_end":17},"name":"check","qualname":"<Record>::check","value":"pub fn check(&Self) -> Result<(), &str>","parent":null,"children":[],"decl_id":null,"docs":" Check the validity of a FastQ record.","sig":null,"attributes":[{"value":"/ Check the validity of a FastQ record.","span":{"file_name":"/Users/shelwitz/.cargo/registry/src/github.com-1ecc6299db9ec823/bio-0.39.0/src/io/fastq.rs","byte_start":495848,"byte_end":495889,"line_start":357,"line_end":357,"column_start":5,"column_end":46}},{"value":"/","span":{"file_name":"/Users/shelwitz/.cargo/registry/src/github.com-1ecc6299db9ec823/bio-0.39.0/src/io/fastq.rs","byte_start":495894,"byte_end":495897,"line_start":358,"line_end":358,"column_start":5,"column_end":8}},{"value":"/ # Errors","span":{"file_name":"/Users/shelwitz/.cargo/registry/src/github.com-1ecc6299db9ec823/bio-0.39.0/src/io/fastq.rs","byte_start":495902,"byte_end":495914,"line_start":359,"line_end":359,"column_start":5,"column_end":17}},{"value":"/ This function will return an `Err` if one of the following conditions is met:","span":{"file_name":"/Users/shelwitz/.cargo/registry/src/github.com-1ecc6299db9ec823/bio-0.39.0/src/io/fastq.rs","byte_start":495919,"byte_end":496000,"line_start":360,"line_end":360,"column_start":5,"column_end":86}},{"value":"/ -   The record identifier is empty.","span":{"file_name":"/Users/shelwitz/.cargo/registry/src/github.com-1ecc6299db9ec823/bio-0.39.0/src/io/fastq.rs","byte_start":496005,"byte_end":496044,"line_start":361,"line_end":361,"column_start":5,"column_end":44}},{"value":"/ -   There is a non-ASCII character found in either the sequence or quality strings.","span":{"file_name":"/Users/shelwitz/.cargo/registry/src/github.com-1ecc6299db9ec823/bio-0.39.0/src/io/fastq.rs","byte_start":496049,"byte_end":496136,"line_start":362,"line_end":362,"column_start":5,"column_end":92}},{"value":"/ -   The sequence and quality strings do not have the same length.","span":{"file_name":"/Users/shelwitz/.cargo/registry/src/github.com-1ecc6299db9ec823/bio-0.39.0/src/io/fastq.rs","byte_start":496141,"byte_end":496210,"line_start":363,"line_end":363,"column_start":5,"column_end":74}},{"value":"/","span":{"file_name":"/Users/shelwitz/.cargo/registry/src/github.com-1ecc6299db9ec823/bio-0.39.0/src/io/fastq.rs","byte_start":496215,"byte_end":496218,"line_start":364,"line_end":364,"column_start":5,"column_end":8}},{"value":"/ # Example","span":{"file_name":"/Users/shelwitz/.cargo/registry/src/github.com-1ecc6299db9ec823/bio-0.39.0/src/io/fastq.rs","byte_start":496223,"byte_end":496236,"line_start":365,"line_end":365,"column_start":5,"column_end":18}},{"value":"/","span":{"file_name":"/Users/shelwitz/.cargo/registry/src/github.com-1ecc6299db9ec823/bio-0.39.0/src/io/fastq.rs","byte_start":496241,"byte_end":496244,"line_start":366,"line_end":366,"column_start":5,"column_end":8}},{"value":"/ ```rust","span":{"file_name":"/Users/shelwitz/.cargo/registry/src/github.com-1ecc6299db9ec823/bio-0.39.0/src/io/fastq.rs","byte_start":496249,"byte_end":496260,"line_start":367,"line_end":367,"column_start":5,"column_end":16}},{"value":"/ use bio::io::fastq::Record;","span":{"file_name":"/Users/shelwitz/.cargo/registry/src/github.com-1ecc6299db9ec823/bio-0.39.0/src/io/fastq.rs","byte_start":496265,"byte_end":496296,"line_start":368,"line_end":368,"column_start":5,"column_end":36}},{"value":"/","span":{"file_name":"/Users/shelwitz/.cargo/registry/src/github.com-1ecc6299db9ec823/bio-0.39.0/src/io/fastq.rs","byte_start":496301,"byte_end":496304,"line_start":369,"line_end":369,"column_start":5,"column_end":8}},{"value":"/ let mut record = Record::with_attrs(\"id\", None, \"Prüfung\".as_ref(), b\"!!!!!!!\");","span":{"file_name":"/Users/shelwitz/.cargo/registry/src/github.com-1ecc6299db9ec823/bio-0.39.0/src/io/fastq.rs","byte_start":496309,"byte_end":496394,"line_start":370,"line_end":370,"column_start":5,"column_end":89}},{"value":"/ let actual = record.check().unwrap_err();","span":{"file_name":"/Users/shelwitz/.cargo/registry/src/github.com-1ecc6299db9ec823/bio-0.39.0/src/io/fastq.rs","byte_start":496399,"byte_end":496444,"line_start":371,"line_end":371,"column_start":5,"column_end":50}},{"value":"/ let expected = \"Non-ascii character found in sequence.\";","span":{"file_name":"/Users/shelwitz/.cargo/registry/src/github.com-1ecc6299db9ec823/bio-0.39.0/src/io/fastq.rs","byte_start":496449,"byte_end":496509,"line_start":372,"line_end":372,"column_start":5,"column_end":65}},{"value":"/ assert_eq!(actual, expected);","span":{"file_name":"/Users/shelwitz/.cargo/registry/src/github.com-1ecc6299db9ec823/bio-0.39.0/src/io/fastq.rs","byte_start":496514,"byte_end":496547,"line_start":373,"line_end":373,"column_start":5,"column_end":38}},{"value":"/","span":{"file_name":"/Users/shelwitz/.cargo/registry/src/github.com-1ecc6299db9ec823/bio-0.39.0/src/io/fastq.rs","byte_start":496552,"byte_end":496555,"line_start":374,"line_end":374,"column_start":5,"column_end":8}},{"value":"/ record = Record::with_attrs(\"id_str\", Some(\"desc\"), b\"ATGCGGG\", b\"QQQQQQQ\");","span":{"file_name":"/Users/shelwitz/.cargo/registry/src/github.com-1ecc6299db9ec823/bio-0.39.0/src/io/fastq.rs","byte_start":496560,"byte_end":496640,"line_start":375,"line_end":375,"column_start":5,"column_end":85}},{"value":"/ assert!(record.check().is_ok());","span":{"file_name":"/Users/shelwitz/.cargo/registry/src/github.com-1ecc6299db9ec823/bio-0.39.0/src/io/fastq.rs","byte_start":496645,"byte_end":496681,"line_start":376,"line_end":376,"column_start":5,"column_end":41}},{"value":"/ ```","span":{"file_name":"/Users/shelwitz/.cargo/registry/src/github.com-1ecc6299db9ec823/bio-0.39.0/src/io/fastq.rs","byte_start":496686,"byte_end":496693,"line_start":377,"line_end":377,"column_start":5,"column_end":12}}]},{"kind":"Method","id":{"krate":0,"index":1461},"span":{"file_name":"/Users/shelwitz/.cargo/registry/src/github.com-1ecc6299db9ec823/bio-0.39.0/src/io/fastq.rs","byte_start":497264,"byte_end":497266,"line_start":396,"line_end":396,"column_start":12,"column_end":14},"name":"id","qualname":"<Record>::id","value":"pub fn id(&Self) -> &str","parent":null,"children":[],"decl_id":null,"docs":" Return the id of the record.\n","sig":null,"attributes":[{"value":"/ Return the id of the record.","span":{"file_name":"/Users/shelwitz/.cargo/registry/src/github.com-1ecc6299db9ec823/bio-0.39.0/src/io/fastq.rs","byte_start":497220,"byte_end":497252,"line_start":395,"line_end":395,"column_start":5,"column_end":37}}]},{"kind":"Method","id":{"krate":0,"index":1462},"span":{"file_name":"/Users/shelwitz/.cargo/registry/src/github.com-1ecc6299db9ec823/bio-0.39.0/src/io/fastq.rs","byte_start":497367,"byte_end":497371,"line_start":401,"line_end":401,"column_start":12,"column_end":16},"name":"desc","qualname":"<Record>::desc","value":"pub fn desc(&Self) -> Option<&str>","parent":null,"children":[],"decl_id":null,"docs":" Return descriptions if present.\n","sig":null,"attributes":[{"value":"/ Return descriptions if present.","span":{"file_name":"/Users/shelwitz/.cargo/registry/src/github.com-1ecc6299db9ec823/bio-0.39.0/src/io/fastq.rs","byte_start":497320,"byte_end":497355,"line_start":400,"line_end":400,"column_start":5,"column_end":40}}]},{"kind":"Method","id":{"krate":0,"index":1463},"span":{"file_name":"/Users/shelwitz/.cargo/registry/src/github.com-1ecc6299db9ec823/bio-0.39.0/src/io/fastq.rs","byte_start":497567,"byte_end":497570,"line_start":409,"line_end":409,"column_start":12,"column_end":15},"name":"seq","qualname":"<Record>::seq","value":"pub fn seq(&Self) -> TextSlice","parent":null,"children":[],"decl_id":null,"docs":" Return the sequence of the record.\n","sig":null,"attributes":[{"value":"/ Return the sequence of the record.","span":{"file_name":"/Users/shelwitz/.cargo/registry/src/github.com-1ecc6299db9ec823/bio-0.39.0/src/io/fastq.rs","byte_start":497517,"byte_end":497555,"line_start":408,"line_end":408,"column_start":5,"column_end":43}}]},{"kind":"Method","id":{"krate":0,"index":1464},"span":{"file_name":"/Users/shelwitz/.cargo/registry/src/github.com-1ecc6299db9ec823/bio-0.39.0/src/io/fastq.rs","byte_start":497703,"byte_end":497707,"line_start":414,"line_end":414,"column_start":12,"column_end":16},"name":"qual","qualname":"<Record>::qual","value":"pub fn qual(&Self) -> &[u8]","parent":null,"children":[],"decl_id":null,"docs":" Return the base qualities of the record.\n","sig":null,"attributes":[{"value":"/ Return the base qualities of the record.","span":{"file_name":"/Users/shelwitz/.cargo/registry/src/github.com-1ecc6299db9ec823/bio-0.39.0/src/io/fastq.rs","byte_start":497647,"byte_end":497691,"line_start":413,"line_end":413,"column_start":5,"column_end":49}}]},{"kind":"Struct","id":{"krate":0,"index":4930},"span":{"file_name":"/Users/shelwitz/.cargo/registry/src/github.com-1ecc6299db9ec823/bio-0.39.0/src/io/fastq.rs","byte_start":499859,"byte_end":499866,"line_start":491,"line_end":491,"column_start":12,"column_end":19},"name":"Records","qualname":"::io::fastq::Records","value":"Records {  }","parent":null,"children":[{"krate":0,"index":4932}],"decl_id":null,"docs":" An iterator over the records of a FastQ file.\n","sig":null,"attributes":[{"value":"/ An iterator over the records of a FastQ file.","span":{"file_name":"/Users/shelwitz/.cargo/registry/src/github.com-1ecc6299db9ec823/bio-0.39.0/src/io/fastq.rs","byte_start":499781,"byte_end":499830,"line_start":489,"line_end":489,"column_start":1,"column_end":50}}]},{"kind":"Struct","id":{"krate":0,"index":4936},"span":{"file_name":"/Users/shelwitz/.cargo/registry/src/github.com-1ecc6299db9ec823/bio-0.39.0/src/io/fastq.rs","byte_start":500334,"byte_end":500340,"line_start":513,"line_end":513,"column_start":12,"column_end":18},"name":"Writer","qualname":"::io::fastq::Writer","value":"Writer {  }","parent":null,"children":[{"krate":0,"index":4938}],"decl_id":null,"docs":" A FastQ writer.\n","sig":null,"attributes":[{"value":"/ A FastQ writer.","span":{"file_name":"/Users/shelwitz/.cargo/registry/src/github.com-1ecc6299db9ec823/bio-0.39.0/src/io/fastq.rs","byte_start":500286,"byte_end":500305,"line_start":511,"line_end":511,"column_start":1,"column_end":20}}]},{"kind":"Method","id":{"krate":0,"index":1478},"span":{"file_name":"/Users/shelwitz/.cargo/registry/src/github.com-1ecc6299db9ec823/bio-0.39.0/src/io/fastq.rs","byte_start":500505,"byte_end":500512,"line_start":520,"line_end":520,"column_start":12,"column_end":19},"name":"to_file","qualname":"<Writer<fs::File>>::to_file","value":"pub fn to_file<P: AsRef<Path>>(P) -> io::Result<Self>","parent":null,"children":[],"decl_id":null,"docs":" Write to a given file path.\n","sig":null,"attributes":[{"value":"/ Write to a given file path.","span":{"file_name":"/Users/shelwitz/.cargo/registry/src/github.com-1ecc6299db9ec823/bio-0.39.0/src/io/fastq.rs","byte_start":500418,"byte_end":500449,"line_start":518,"line_end":518,"column_start":5,"column_end":36}},{"value":"allow(clippy :: wrong_self_convention)","span":{"file_name":"/Users/shelwitz/.cargo/registry/src/github.com-1ecc6299db9ec823/bio-0.39.0/src/io/fastq.rs","byte_start":500454,"byte_end":500493,"line_start":519,"line_end":519,"column_start":5,"column_end":44}}]},{"kind":"Method","id":{"krate":0,"index":1480},"span":{"file_name":"/Users/shelwitz/.cargo/registry/src/github.com-1ecc6299db9ec823/bio-0.39.0/src/io/fastq.rs","byte_start":500685,"byte_end":500706,"line_start":525,"line_end":525,"column_start":12,"column_end":33},"name":"to_file_with_capacity","qualname":"<Writer<fs::File>>::to_file_with_capacity","value":"pub fn to_file_with_capacity<P: AsRef<Path>>(usize, P) -> io::Result<Self>","parent":null,"children":[],"decl_id":null,"docs":" Write to the given file path and a buffer capacity\n","sig":null,"attributes":[{"value":"/ Write to the given file path and a buffer capacity","span":{"file_name":"/Users/shelwitz/.cargo/registry/src/github.com-1ecc6299db9ec823/bio-0.39.0/src/io/fastq.rs","byte_start":500619,"byte_end":500673,"line_start":524,"line_end":524,"column_start":5,"column_end":59}}]},{"kind":"Method","id":{"krate":0,"index":1485},"span":{"file_name":"/Users/shelwitz/.cargo/registry/src/github.com-1ecc6299db9ec823/bio-0.39.0/src/io/fastq.rs","byte_start":500941,"byte_end":500944,"line_start":532,"line_end":532,"column_start":12,"column_end":15},"name":"new","qualname":"<Writer<W>>::new","value":"pub fn new(W) -> Self","parent":null,"children":[],"decl_id":null,"docs":" Write to a given `io::Write`.\n","sig":null,"attributes":[{"value":"/ Write to a given `io::Write`.","span":{"file_name":"/Users/shelwitz/.cargo/registry/src/github.com-1ecc6299db9ec823/bio-0.39.0/src/io/fastq.rs","byte_start":500896,"byte_end":500929,"line_start":531,"line_end":531,"column_start":5,"column_end":38}}]},{"kind":"Method","id":{"krate":0,"index":1486},"span":{"file_name":"/Users/shelwitz/.cargo/registry/src/github.com-1ecc6299db9ec823/bio-0.39.0/src/io/fastq.rs","byte_start":501125,"byte_end":501138,"line_start":539,"line_end":539,"column_start":12,"column_end":25},"name":"with_capacity","qualname":"<Writer<W>>::with_capacity","value":"pub fn with_capacity(usize, W) -> Self","parent":null,"children":[],"decl_id":null,"docs":" Create a new Fastq writer with a capacity of write buffer\n","sig":null,"attributes":[{"value":"/ Create a new Fastq writer with a capacity of write buffer","span":{"file_name":"/Users/shelwitz/.cargo/registry/src/github.com-1ecc6299db9ec823/bio-0.39.0/src/io/fastq.rs","byte_start":501052,"byte_end":501113,"line_start":538,"line_end":538,"column_start":5,"column_end":66}}]},{"kind":"Method","id":{"krate":0,"index":1487},"span":{"file_name":"/Users/shelwitz/.cargo/registry/src/github.com-1ecc6299db9ec823/bio-0.39.0/src/io/fastq.rs","byte_start":501347,"byte_end":501361,"line_start":546,"line_end":546,"column_start":12,"column_end":26},"name":"from_bufwriter","qualname":"<Writer<W>>::from_bufwriter","value":"pub fn from_bufwriter(io::BufWriter<W>) -> Self","parent":null,"children":[],"decl_id":null,"docs":" Create a new Fastq writer with a given BufWriter\n","sig":null,"attributes":[{"value":"/ Create a new Fastq writer with a given BufWriter","span":{"file_name":"/Users/shelwitz/.cargo/registry/src/github.com-1ecc6299db9ec823/bio-0.39.0/src/io/fastq.rs","byte_start":501283,"byte_end":501335,"line_start":545,"line_end":545,"column_start":5,"column_end":57}}]},{"kind":"Method","id":{"krate":0,"index":1488},"span":{"file_name":"/Users/shelwitz/.cargo/registry/src/github.com-1ecc6299db9ec823/bio-0.39.0/src/io/fastq.rs","byte_start":501495,"byte_end":501507,"line_start":551,"line_end":551,"column_start":12,"column_end":24},"name":"write_record","qualname":"<Writer<W>>::write_record","value":"pub fn write_record(&mut Self, &Record) -> io::Result<()>","parent":null,"children":[],"decl_id":null,"docs":" Directly write a FastQ record.\n","sig":null,"attributes":[{"value":"/ Directly write a FastQ record.","span":{"file_name":"/Users/shelwitz/.cargo/registry/src/github.com-1ecc6299db9ec823/bio-0.39.0/src/io/fastq.rs","byte_start":501449,"byte_end":501483,"line_start":550,"line_end":550,"column_start":5,"column_end":39}}]},{"kind":"Method","id":{"krate":0,"index":1489},"span":{"file_name":"/Users/shelwitz/.cargo/registry/src/github.com-1ecc6299db9ec823/bio-0.39.0/src/io/fastq.rs","byte_start":501740,"byte_end":501745,"line_start":556,"line_end":556,"column_start":12,"column_end":17},"name":"write","qualname":"<Writer<W>>::write","value":"pub fn write(&mut Self, &str, Option<&str>, TextSlice, &[u8])\n-> io::Result<()>","parent":null,"children":[],"decl_id":null,"docs":" Write a FastQ record with given id, optional description, sequence and qualities.\n","sig":null,"attributes":[{"value":"/ Write a FastQ record with given id, optional description, sequence and qualities.","span":{"file_name":"/Users/shelwitz/.cargo/registry/src/github.com-1ecc6299db9ec823/bio-0.39.0/src/io/fastq.rs","byte_start":501643,"byte_end":501728,"line_start":555,"line_end":555,"column_start":5,"column_end":90}}]},{"kind":"Method","id":{"krate":0,"index":1490},"span":{"file_name":"/Users/shelwitz/.cargo/registry/src/github.com-1ecc6299db9ec823/bio-0.39.0/src/io/fastq.rs","byte_start":502404,"byte_end":502409,"line_start":579,"line_end":579,"column_start":12,"column_end":17},"name":"flush","qualname":"<Writer<W>>::flush","value":"pub fn flush(&mut Self) -> io::Result<()>","parent":null,"children":[],"decl_id":null,"docs":" Flush the writer, ensuring that everything is written.\n","sig":null,"attributes":[{"value":"/ Flush the writer, ensuring that everything is written.","span":{"file_name":"/Users/shelwitz/.cargo/registry/src/github.com-1ecc6299db9ec823/bio-0.39.0/src/io/fastq.rs","byte_start":502334,"byte_end":502392,"line_start":578,"line_end":578,"column_start":5,"column_end":63}}]},{"kind":"Mod","id":{"krate":0,"index":1491},"span":{"file_name":"/Users/shelwitz/.cargo/registry/src/github.com-1ecc6299db9ec823/bio-0.39.0/src/io/gff.rs","byte_start":0,"byte_end":0,"line_start":1,"line_end":1,"column_start":1,"column_end":1},"name":"gff","qualname":"::io::gff","value":"/Users/shelwitz/.cargo/registry/src/github.com-1ecc6299db9ec823/bio-0.39.0/src/io/gff.rs","parent":null,"children":[{"krate":0,"index":1492},{"krate":0,"index":1495},{"krate":0,"index":1498},{"krate":0,"index":1501},{"krate":0,"index":1504},{"krate":0,"index":1507},{"krate":0,"index":1510},{"krate":0,"index":1513},{"krate":0,"index":1516},{"krate":0,"index":1519},{"krate":0,"index":4942},{"krate":0,"index":4954},{"krate":0,"index":4956},{"krate":0,"index":4958},{"krate":0,"index":4959},{"krate":0,"index":4960},{"krate":0,"index":1522},{"krate":0,"index":1525},{"krate":0,"index":4963},{"krate":0,"index":4967},{"krate":0,"index":1527},{"krate":0,"index":1532},{"krate":0,"index":1536},{"krate":0,"index":1537},{"krate":0,"index":1543},{"krate":0,"index":4970},{"krate":0,"index":4975},{"krate":0,"index":1551},{"krate":0,"index":1555},{"krate":0,"index":4978},{"krate":0,"index":4988},{"krate":0,"index":4990},{"krate":0,"index":4992},{"krate":0,"index":4998},{"krate":0,"index":5055},{"krate":0,"index":1560}],"decl_id":null,"docs":" [GFF3] format reading and writing. [GFF2] is currently not supported.","sig":null,"attributes":[{"value":"/ [GFF3] format reading and writing. [GFF2] is currently not supported.","span":{"file_name":"/Users/shelwitz/.cargo/registry/src/github.com-1ecc6299db9ec823/bio-0.39.0/src/io/gff.rs","byte_start":516155,"byte_end":516228,"line_start":6,"line_end":6,"column_start":1,"column_end":74}},{"value":"/","span":{"file_name":"/Users/shelwitz/.cargo/registry/src/github.com-1ecc6299db9ec823/bio-0.39.0/src/io/gff.rs","byte_start":516229,"byte_end":516232,"line_start":7,"line_end":7,"column_start":1,"column_end":4}},{"value":"/ [GFF2]: http://gmod.org/wiki/GFF2 (not supported)","span":{"file_name":"/Users/shelwitz/.cargo/registry/src/github.com-1ecc6299db9ec823/bio-0.39.0/src/io/gff.rs","byte_start":516233,"byte_end":516286,"line_start":8,"line_end":8,"column_start":1,"column_end":54}},{"value":"/ [GTF2]: http://mblab.wustl.edu/GTF2.html (not supported)","span":{"file_name":"/Users/shelwitz/.cargo/registry/src/github.com-1ecc6299db9ec823/bio-0.39.0/src/io/gff.rs","byte_start":516287,"byte_end":516347,"line_start":9,"line_end":9,"column_start":1,"column_end":61}},{"value":"/ [GFF3]: http://gmod.org/wiki/GFF3#GFF3_Format","span":{"file_name":"/Users/shelwitz/.cargo/registry/src/github.com-1ecc6299db9ec823/bio-0.39.0/src/io/gff.rs","byte_start":516348,"byte_end":516397,"line_start":10,"line_end":10,"column_start":1,"column_end":50}},{"value":"/","span":{"file_name":"/Users/shelwitz/.cargo/registry/src/github.com-1ecc6299db9ec823/bio-0.39.0/src/io/gff.rs","byte_start":516398,"byte_end":516401,"line_start":11,"line_end":11,"column_start":1,"column_end":4}},{"value":"/ # Example","span":{"file_name":"/Users/shelwitz/.cargo/registry/src/github.com-1ecc6299db9ec823/bio-0.39.0/src/io/gff.rs","byte_start":516402,"byte_end":516415,"line_start":12,"line_end":12,"column_start":1,"column_end":14}},{"value":"/","span":{"file_name":"/Users/shelwitz/.cargo/registry/src/github.com-1ecc6299db9ec823/bio-0.39.0/src/io/gff.rs","byte_start":516416,"byte_end":516419,"line_start":13,"line_end":13,"column_start":1,"column_end":4}},{"value":"/ ```","span":{"file_name":"/Users/shelwitz/.cargo/registry/src/github.com-1ecc6299db9ec823/bio-0.39.0/src/io/gff.rs","byte_start":516420,"byte_end":516427,"line_start":14,"line_end":14,"column_start":1,"column_end":8}},{"value":"/ // import functions (at top of script)","span":{"file_name":"/Users/shelwitz/.cargo/registry/src/github.com-1ecc6299db9ec823/bio-0.39.0/src/io/gff.rs","byte_start":516428,"byte_end":516470,"line_start":15,"line_end":15,"column_start":1,"column_end":43}},{"value":"/ use bio::io::gff;","span":{"file_name":"/Users/shelwitz/.cargo/registry/src/github.com-1ecc6299db9ec823/bio-0.39.0/src/io/gff.rs","byte_start":516471,"byte_end":516492,"line_start":16,"line_end":16,"column_start":1,"column_end":22}},{"value":"/ use std::io;","span":{"file_name":"/Users/shelwitz/.cargo/registry/src/github.com-1ecc6299db9ec823/bio-0.39.0/src/io/gff.rs","byte_start":516493,"byte_end":516509,"line_start":17,"line_end":17,"column_start":1,"column_end":17}},{"value":"/ let mut reader = gff::Reader::new(io::stdin(), gff::GffType::GFF3);","span":{"file_name":"/Users/shelwitz/.cargo/registry/src/github.com-1ecc6299db9ec823/bio-0.39.0/src/io/gff.rs","byte_start":516510,"byte_end":516581,"line_start":18,"line_end":18,"column_start":1,"column_end":72}},{"value":"/ let mut writer = gff::Writer::new(vec![], gff::GffType::GFF3);","span":{"file_name":"/Users/shelwitz/.cargo/registry/src/github.com-1ecc6299db9ec823/bio-0.39.0/src/io/gff.rs","byte_start":516582,"byte_end":516648,"line_start":19,"line_end":19,"column_start":1,"column_end":67}},{"value":"/ for record in reader.records() {","span":{"file_name":"/Users/shelwitz/.cargo/registry/src/github.com-1ecc6299db9ec823/bio-0.39.0/src/io/gff.rs","byte_start":516649,"byte_end":516685,"line_start":20,"line_end":20,"column_start":1,"column_end":37}},{"value":"/     let rec = record.ok().expect(\"Error reading record.\");","span":{"file_name":"/Users/shelwitz/.cargo/registry/src/github.com-1ecc6299db9ec823/bio-0.39.0/src/io/gff.rs","byte_start":516686,"byte_end":516748,"line_start":21,"line_end":21,"column_start":1,"column_end":63}},{"value":"/     println!(\"{}\", rec.seqname());","span":{"file_name":"/Users/shelwitz/.cargo/registry/src/github.com-1ecc6299db9ec823/bio-0.39.0/src/io/gff.rs","byte_start":516749,"byte_end":516787,"line_start":22,"line_end":22,"column_start":1,"column_end":39}},{"value":"/     writer.write(&rec).ok().expect(\"Error writing record.\");","span":{"file_name":"/Users/shelwitz/.cargo/registry/src/github.com-1ecc6299db9ec823/bio-0.39.0/src/io/gff.rs","byte_start":516788,"byte_end":516852,"line_start":23,"line_end":23,"column_start":1,"column_end":65}},{"value":"/ }","span":{"file_name":"/Users/shelwitz/.cargo/registry/src/github.com-1ecc6299db9ec823/bio-0.39.0/src/io/gff.rs","byte_start":516853,"byte_end":516858,"line_start":24,"line_end":24,"column_start":1,"column_end":6}},{"value":"/ ```","span":{"file_name":"/Users/shelwitz/.cargo/registry/src/github.com-1ecc6299db9ec823/bio-0.39.0/src/io/gff.rs","byte_start":516859,"byte_end":516866,"line_start":25,"line_end":25,"column_start":1,"column_end":8}}]},{"kind":"TupleVariant","id":{"krate":0,"index":4943},"span":{"file_name":"/Users/shelwitz/.cargo/registry/src/github.com-1ecc6299db9ec823/bio-0.39.0/src/io/gff.rs","byte_start":517381,"byte_end":517385,"line_start":47,"line_end":47,"column_start":5,"column_end":9},"name":"GFF3","qualname":"::io::gff::GffType::GFF3","value":"GffType::GFF3","parent":{"krate":0,"index":4942},"children":[],"decl_id":null,"docs":" Attribute format is: key1=value; key2=value1,value2\n","sig":null,"attributes":[{"value":"/ Attribute format is: key1=value; key2=value1,value2","span":{"file_name":"/Users/shelwitz/.cargo/registry/src/github.com-1ecc6299db9ec823/bio-0.39.0/src/io/gff.rs","byte_start":517321,"byte_end":517376,"line_start":46,"line_end":46,"column_start":5,"column_end":60}}]},{"kind":"TupleVariant","id":{"krate":0,"index":4945},"span":{"file_name":"/Users/shelwitz/.cargo/registry/src/github.com-1ecc6299db9ec823/bio-0.39.0/src/io/gff.rs","byte_start":517457,"byte_end":517461,"line_start":49,"line_end":49,"column_start":5,"column_end":9},"name":"GFF2","qualname":"::io::gff::GffType::GFF2","value":"GffType::GFF2","parent":{"krate":0,"index":4942},"children":[],"decl_id":null,"docs":" Attribute format is: key1 value; key2 value1; key2 value2\n","sig":null,"attributes":[{"value":"/ Attribute format is: key1 value; key2 value1; key2 value2","span":{"file_name":"/Users/shelwitz/.cargo/registry/src/github.com-1ecc6299db9ec823/bio-0.39.0/src/io/gff.rs","byte_start":517391,"byte_end":517452,"line_start":48,"line_end":48,"column_start":5,"column_end":66}}]},{"kind":"TupleVariant","id":{"krate":0,"index":4947},"span":{"file_name":"/Users/shelwitz/.cargo/registry/src/github.com-1ecc6299db9ec823/bio-0.39.0/src/io/gff.rs","byte_start":517536,"byte_end":517540,"line_start":51,"line_end":51,"column_start":5,"column_end":9},"name":"GTF2","qualname":"::io::gff::GffType::GTF2","value":"GffType::GTF2","parent":{"krate":0,"index":4942},"children":[],"decl_id":null,"docs":" Same as GFF2 just possible keyword and possible value change\n","sig":null,"attributes":[{"value":"/ Same as GFF2 just possible keyword and possible value change","span":{"file_name":"/Users/shelwitz/.cargo/registry/src/github.com-1ecc6299db9ec823/bio-0.39.0/src/io/gff.rs","byte_start":517467,"byte_end":517531,"line_start":50,"line_end":50,"column_start":5,"column_end":69}}]},{"kind":"TupleVariant","id":{"krate":0,"index":4949},"span":{"file_name":"/Users/shelwitz/.cargo/registry/src/github.com-1ecc6299db9ec823/bio-0.39.0/src/io/gff.rs","byte_start":517730,"byte_end":517733,"line_start":55,"line_end":55,"column_start":5,"column_end":8},"name":"Any","qualname":"::io::gff::GffType::Any","value":"GffType::Any(u8, u8, u8)","parent":{"krate":0,"index":4942},"children":[],"decl_id":null,"docs":" Any, first field of tuple separates key from value,\n second field separates multiple key value pairs, and\n third field separates multiple values for the same key\n","sig":null,"attributes":[{"value":"/ Any, first field of tuple separates key from value,","span":{"file_name":"/Users/shelwitz/.cargo/registry/src/github.com-1ecc6299db9ec823/bio-0.39.0/src/io/gff.rs","byte_start":517546,"byte_end":517601,"line_start":52,"line_end":52,"column_start":5,"column_end":60}},{"value":"/ second field separates multiple key value pairs, and","span":{"file_name":"/Users/shelwitz/.cargo/registry/src/github.com-1ecc6299db9ec823/bio-0.39.0/src/io/gff.rs","byte_start":517606,"byte_end":517662,"line_start":53,"line_end":53,"column_start":5,"column_end":61}},{"value":"/ third field separates multiple values for the same key","span":{"file_name":"/Users/shelwitz/.cargo/registry/src/github.com-1ecc6299db9ec823/bio-0.39.0/src/io/gff.rs","byte_start":517667,"byte_end":517725,"line_start":54,"line_end":54,"column_start":5,"column_end":63}}]},{"kind":"Enum","id":{"krate":0,"index":4942},"span":{"file_name":"/Users/shelwitz/.cargo/registry/src/github.com-1ecc6299db9ec823/bio-0.39.0/src/io/gff.rs","byte_start":517307,"byte_end":517314,"line_start":45,"line_end":45,"column_start":10,"column_end":17},"name":"GffType","qualname":"::io::gff::GffType","value":"pub enum GffType { GFF3, GFF2, GTF2, Any(u8, u8, u8), }","parent":null,"children":[{"krate":0,"index":4943},{"krate":0,"index":4945},{"krate":0,"index":4947},{"krate":0,"index":4949}],"decl_id":null,"docs":" `GffType`","sig":null,"attributes":[{"value":"/ `GffType`","span":{"file_name":"/Users/shelwitz/.cargo/registry/src/github.com-1ecc6299db9ec823/bio-0.39.0/src/io/gff.rs","byte_start":517085,"byte_end":517098,"line_start":39,"line_end":39,"column_start":1,"column_end":14}},{"value":"/","span":{"file_name":"/Users/shelwitz/.cargo/registry/src/github.com-1ecc6299db9ec823/bio-0.39.0/src/io/gff.rs","byte_start":517099,"byte_end":517102,"line_start":40,"line_end":40,"column_start":1,"column_end":4}},{"value":"/ We have three format in the GFF family.","span":{"file_name":"/Users/shelwitz/.cargo/registry/src/github.com-1ecc6299db9ec823/bio-0.39.0/src/io/gff.rs","byte_start":517103,"byte_end":517146,"line_start":41,"line_end":41,"column_start":1,"column_end":44}},{"value":"/ The change is in the last field of GFF.","span":{"file_name":"/Users/shelwitz/.cargo/registry/src/github.com-1ecc6299db9ec823/bio-0.39.0/src/io/gff.rs","byte_start":517147,"byte_end":517190,"line_start":42,"line_end":42,"column_start":1,"column_end":44}},{"value":"/ For each type we have key value separator and field separator","span":{"file_name":"/Users/shelwitz/.cargo/registry/src/github.com-1ecc6299db9ec823/bio-0.39.0/src/io/gff.rs","byte_start":517191,"byte_end":517256,"line_start":43,"line_end":43,"column_start":1,"column_end":66}}]},{"kind":"Struct","id":{"krate":0,"index":4963},"span":{"file_name":"/Users/shelwitz/.cargo/registry/src/github.com-1ecc6299db9ec823/bio-0.39.0/src/io/gff.rs","byte_start":518783,"byte_end":518789,"line_start":96,"line_end":96,"column_start":12,"column_end":18},"name":"Reader","qualname":"::io::gff::Reader","value":"Reader {  }","parent":null,"children":[{"krate":0,"index":4965},{"krate":0,"index":4966}],"decl_id":null,"docs":" A GFF reader.\n","sig":null,"attributes":[{"value":"/ A GFF reader.","span":{"file_name":"/Users/shelwitz/.cargo/registry/src/github.com-1ecc6299db9ec823/bio-0.39.0/src/io/gff.rs","byte_start":518737,"byte_end":518754,"line_start":94,"line_end":94,"column_start":1,"column_end":18}}]},{"kind":"Method","id":{"krate":0,"index":1528},"span":{"file_name":"/Users/shelwitz/.cargo/registry/src/github.com-1ecc6299db9ec823/bio-0.39.0/src/io/gff.rs","byte_start":518948,"byte_end":518957,"line_start":103,"line_end":103,"column_start":12,"column_end":21},"name":"from_file","qualname":"<Reader<fs::File>>::from_file","value":"pub fn from_file<P: AsRef<Path> + std::fmt::Debug>(P, GffType)\n-> anyhow::Result<Self>","parent":null,"children":[],"decl_id":null,"docs":" Read GFF from given file path in given format.\n","sig":null,"attributes":[{"value":"/ Read GFF from given file path in given format.","span":{"file_name":"/Users/shelwitz/.cargo/registry/src/github.com-1ecc6299db9ec823/bio-0.39.0/src/io/gff.rs","byte_start":518886,"byte_end":518936,"line_start":102,"line_end":102,"column_start":5,"column_end":55}}]},{"kind":"Method","id":{"krate":0,"index":1534},"span":{"file_name":"/Users/shelwitz/.cargo/registry/src/github.com-1ecc6299db9ec823/bio-0.39.0/src/io/gff.rs","byte_start":519359,"byte_end":519362,"line_start":115,"line_end":115,"column_start":12,"column_end":15},"name":"new","qualname":"<Reader<R>>::new","value":"pub fn new(R, GffType) -> Self","parent":null,"children":[],"decl_id":null,"docs":" Create a new GFF reader given an instance of `io::Read`, in given format.\n","sig":null,"attributes":[{"value":"/ Create a new GFF reader given an instance of `io::Read`, in given format.","span":{"file_name":"/Users/shelwitz/.cargo/registry/src/github.com-1ecc6299db9ec823/bio-0.39.0/src/io/gff.rs","byte_start":519270,"byte_end":519347,"line_start":114,"line_end":114,"column_start":5,"column_end":82}}]},{"kind":"Method","id":{"krate":0,"index":1535},"span":{"file_name":"/Users/shelwitz/.cargo/registry/src/github.com-1ecc6299db9ec823/bio-0.39.0/src/io/gff.rs","byte_start":519708,"byte_end":519715,"line_start":127,"line_end":127,"column_start":12,"column_end":19},"name":"records","qualname":"<Reader<R>>::records","value":"pub fn records(&mut Self) -> Records<, R>","parent":null,"children":[],"decl_id":null,"docs":" Iterate over all records.\n","sig":null,"attributes":[{"value":"/ Iterate over all records.","span":{"file_name":"/Users/shelwitz/.cargo/registry/src/github.com-1ecc6299db9ec823/bio-0.39.0/src/io/gff.rs","byte_start":519667,"byte_end":519696,"line_start":126,"line_end":126,"column_start":5,"column_end":34}}]},{"kind":"Struct","id":{"krate":0,"index":1537},"span":{"file_name":"/Users/shelwitz/.cargo/registry/src/github.com-1ecc6299db9ec823/bio-0.39.0/src/io/gff.rs","byte_start":520394,"byte_end":520401,"line_start":156,"line_end":156,"column_start":12,"column_end":19},"name":"Records","qualname":"::io::gff::Records","value":"Records {  }","parent":null,"children":[{"krate":0,"index":1540},{"krate":0,"index":1541},{"krate":0,"index":1542}],"decl_id":null,"docs":" An iterator over the records of a GFF file.\n","sig":null,"attributes":[{"value":"/ An iterator over the records of a GFF file.","span":{"file_name":"/Users/shelwitz/.cargo/registry/src/github.com-1ecc6299db9ec823/bio-0.39.0/src/io/gff.rs","byte_start":520335,"byte_end":520382,"line_start":155,"line_end":155,"column_start":1,"column_end":48}}]},{"kind":"Struct","id":{"krate":0,"index":4970},"span":{"file_name":"/Users/shelwitz/.cargo/registry/src/github.com-1ecc6299db9ec823/bio-0.39.0/src/io/gff.rs","byte_start":521943,"byte_end":521949,"line_start":205,"line_end":205,"column_start":12,"column_end":18},"name":"Writer","qualname":"::io::gff::Writer","value":"Writer {  }","parent":null,"children":[{"krate":0,"index":4972},{"krate":0,"index":4973},{"krate":0,"index":4974}],"decl_id":null,"docs":" A GFF writer.\n","sig":null,"attributes":[{"value":"/ A GFF writer.","span":{"file_name":"/Users/shelwitz/.cargo/registry/src/github.com-1ecc6299db9ec823/bio-0.39.0/src/io/gff.rs","byte_start":521897,"byte_end":521914,"line_start":203,"line_end":203,"column_start":1,"column_end":18}}]},{"kind":"Method","id":{"krate":0,"index":1552},"span":{"file_name":"/Users/shelwitz/.cargo/registry/src/github.com-1ecc6299db9ec823/bio-0.39.0/src/io/gff.rs","byte_start":522172,"byte_end":522179,"line_start":214,"line_end":214,"column_start":12,"column_end":19},"name":"to_file","qualname":"<Writer<fs::File>>::to_file","value":"pub fn to_file<P: AsRef<Path>>(P, GffType) -> io::Result<Self>","parent":null,"children":[],"decl_id":null,"docs":" Write to a given file path in given format.\n","sig":null,"attributes":[{"value":"/ Write to a given file path in given format.","span":{"file_name":"/Users/shelwitz/.cargo/registry/src/github.com-1ecc6299db9ec823/bio-0.39.0/src/io/gff.rs","byte_start":522069,"byte_end":522116,"line_start":212,"line_end":212,"column_start":5,"column_end":52}},{"value":"allow(clippy :: wrong_self_convention)","span":{"file_name":"/Users/shelwitz/.cargo/registry/src/github.com-1ecc6299db9ec823/bio-0.39.0/src/io/gff.rs","byte_start":522121,"byte_end":522160,"line_start":213,"line_end":213,"column_start":5,"column_end":44}}]},{"kind":"Method","id":{"krate":0,"index":1557},"span":{"file_name":"/Users/shelwitz/.cargo/registry/src/github.com-1ecc6299db9ec823/bio-0.39.0/src/io/gff.rs","byte_start":522399,"byte_end":522402,"line_start":221,"line_end":221,"column_start":12,"column_end":15},"name":"new","qualname":"<Writer<W>>::new","value":"pub fn new(W, GffType) -> Self","parent":null,"children":[],"decl_id":null,"docs":" Write to a given writer.\n","sig":null,"attributes":[{"value":"/ Write to a given writer.","span":{"file_name":"/Users/shelwitz/.cargo/registry/src/github.com-1ecc6299db9ec823/bio-0.39.0/src/io/gff.rs","byte_start":522359,"byte_end":522387,"line_start":220,"line_end":220,"column_start":5,"column_end":33}}]},{"kind":"Method","id":{"krate":0,"index":1558},"span":{"file_name":"/Users/shelwitz/.cargo/registry/src/github.com-1ecc6299db9ec823/bio-0.39.0/src/io/gff.rs","byte_start":522833,"byte_end":522838,"line_start":235,"line_end":235,"column_start":12,"column_end":17},"name":"write","qualname":"<Writer<W>>::write","value":"pub fn write(&mut Self, &Record) -> csv::Result<()>","parent":null,"children":[],"decl_id":null,"docs":" Write a given GFF record.\n","sig":null,"attributes":[{"value":"/ Write a given GFF record.","span":{"file_name":"/Users/shelwitz/.cargo/registry/src/github.com-1ecc6299db9ec823/bio-0.39.0/src/io/gff.rs","byte_start":522792,"byte_end":522821,"line_start":234,"line_end":234,"column_start":5,"column_end":34}}]},{"kind":"Struct","id":{"krate":0,"index":4978},"span":{"file_name":"/Users/shelwitz/.cargo/registry/src/github.com-1ecc6299db9ec823/bio-0.39.0/src/io/gff.rs","byte_start":523568,"byte_end":523574,"line_start":262,"line_end":262,"column_start":12,"column_end":18},"name":"Record","qualname":"::io::gff::Record","value":"Record {  }","parent":null,"children":[{"krate":0,"index":4979},{"krate":0,"index":4980},{"krate":0,"index":4981},{"krate":0,"index":4982},{"krate":0,"index":4983},{"krate":0,"index":4984},{"krate":0,"index":4985},{"krate":0,"index":4986},{"krate":0,"index":4987}],"decl_id":null,"docs":" A GFF record\n","sig":null,"attributes":[{"value":"/ A GFF record","span":{"file_name":"/Users/shelwitz/.cargo/registry/src/github.com-1ecc6299db9ec823/bio-0.39.0/src/io/gff.rs","byte_start":523483,"byte_end":523499,"line_start":260,"line_end":260,"column_start":1,"column_end":17}}]},{"kind":"Method","id":{"krate":0,"index":1561},"span":{"file_name":"/Users/shelwitz/.cargo/registry/src/github.com-1ecc6299db9ec823/bio-0.39.0/src/io/gff.rs","byte_start":523835,"byte_end":523838,"line_start":276,"line_end":276,"column_start":12,"column_end":15},"name":"new","qualname":"<Record>::new","value":"pub fn new() -> Self","parent":null,"children":[],"decl_id":null,"docs":" Create a new GFF record.\n","sig":null,"attributes":[{"value":"/ Create a new GFF record.","span":{"file_name":"/Users/shelwitz/.cargo/registry/src/github.com-1ecc6299db9ec823/bio-0.39.0/src/io/gff.rs","byte_start":523795,"byte_end":523823,"line_start":275,"line_end":275,"column_start":5,"column_end":33}}]},{"kind":"Method","id":{"krate":0,"index":1562},"span":{"file_name":"/Users/shelwitz/.cargo/registry/src/github.com-1ecc6299db9ec823/bio-0.39.0/src/io/gff.rs","byte_start":524252,"byte_end":524259,"line_start":291,"line_end":291,"column_start":12,"column_end":19},"name":"seqname","qualname":"<Record>::seqname","value":"pub fn seqname(&Self) -> &str","parent":null,"children":[],"decl_id":null,"docs":" Sequence name of the feature.\n","sig":null,"attributes":[{"value":"/ Sequence name of the feature.","span":{"file_name":"/Users/shelwitz/.cargo/registry/src/github.com-1ecc6299db9ec823/bio-0.39.0/src/io/gff.rs","byte_start":524207,"byte_end":524240,"line_start":290,"line_end":290,"column_start":5,"column_end":38}}]},{"kind":"Method","id":{"krate":0,"index":1563},"span":{"file_name":"/Users/shelwitz/.cargo/registry/src/github.com-1ecc6299db9ec823/bio-0.39.0/src/io/gff.rs","byte_start":524348,"byte_end":524354,"line_start":296,"line_end":296,"column_start":12,"column_end":18},"name":"source","qualname":"<Record>::source","value":"pub fn source(&Self) -> &str","parent":null,"children":[],"decl_id":null,"docs":" Source of the feature.\n","sig":null,"attributes":[{"value":"/ Source of the feature.","span":{"file_name":"/Users/shelwitz/.cargo/registry/src/github.com-1ecc6299db9ec823/bio-0.39.0/src/io/gff.rs","byte_start":524310,"byte_end":524336,"line_start":295,"line_end":295,"column_start":5,"column_end":31}}]},{"kind":"Method","id":{"krate":0,"index":1564},"span":{"file_name":"/Users/shelwitz/.cargo/registry/src/github.com-1ecc6299db9ec823/bio-0.39.0/src/io/gff.rs","byte_start":524440,"byte_end":524452,"line_start":301,"line_end":301,"column_start":12,"column_end":24},"name":"feature_type","qualname":"<Record>::feature_type","value":"pub fn feature_type(&Self) -> &str","parent":null,"children":[],"decl_id":null,"docs":" Type of the feature.\n","sig":null,"attributes":[{"value":"/ Type of the feature.","span":{"file_name":"/Users/shelwitz/.cargo/registry/src/github.com-1ecc6299db9ec823/bio-0.39.0/src/io/gff.rs","byte_start":524404,"byte_end":524428,"line_start":300,"line_end":300,"column_start":5,"column_end":29}}]},{"kind":"Method","id":{"krate":0,"index":1565},"span":{"file_name":"/Users/shelwitz/.cargo/registry/src/github.com-1ecc6299db9ec823/bio-0.39.0/src/io/gff.rs","byte_start":524560,"byte_end":524565,"line_start":306,"line_end":306,"column_start":12,"column_end":17},"name":"start","qualname":"<Record>::start","value":"pub fn start(&Self) -> &u64","parent":null,"children":[],"decl_id":null,"docs":" Start position of feature (1-based).\n","sig":null,"attributes":[{"value":"/ Start position of feature (1-based).","span":{"file_name":"/Users/shelwitz/.cargo/registry/src/github.com-1ecc6299db9ec823/bio-0.39.0/src/io/gff.rs","byte_start":524508,"byte_end":524548,"line_start":305,"line_end":305,"column_start":5,"column_end":45}}]},{"kind":"Method","id":{"krate":0,"index":1566},"span":{"file_name":"/Users/shelwitz/.cargo/registry/src/github.com-1ecc6299db9ec823/bio-0.39.0/src/io/gff.rs","byte_start":524678,"byte_end":524681,"line_start":311,"line_end":311,"column_start":12,"column_end":15},"name":"end","qualname":"<Record>::end","value":"pub fn end(&Self) -> &u64","parent":null,"children":[],"decl_id":null,"docs":" End position of feature (1-based, not included).\n","sig":null,"attributes":[{"value":"/ End position of feature (1-based, not included).","span":{"file_name":"/Users/shelwitz/.cargo/registry/src/github.com-1ecc6299db9ec823/bio-0.39.0/src/io/gff.rs","byte_start":524614,"byte_end":524666,"line_start":310,"line_end":310,"column_start":5,"column_end":57}}]},{"kind":"Method","id":{"krate":0,"index":1567},"span":{"file_name":"/Users/shelwitz/.cargo/registry/src/github.com-1ecc6299db9ec823/bio-0.39.0/src/io/gff.rs","byte_start":524760,"byte_end":524765,"line_start":316,"line_end":316,"column_start":12,"column_end":17},"name":"score","qualname":"<Record>::score","value":"pub fn score(&Self) -> Option<u64>","parent":null,"children":[],"decl_id":null,"docs":" Score of feature\n","sig":null,"attributes":[{"value":"/ Score of feature","span":{"file_name":"/Users/shelwitz/.cargo/registry/src/github.com-1ecc6299db9ec823/bio-0.39.0/src/io/gff.rs","byte_start":524728,"byte_end":524748,"line_start":315,"line_end":315,"column_start":5,"column_end":25}}]},{"kind":"Method","id":{"krate":0,"index":1568},"span":{"file_name":"/Users/shelwitz/.cargo/registry/src/github.com-1ecc6299db9ec823/bio-0.39.0/src/io/gff.rs","byte_start":524959,"byte_end":524965,"line_start":324,"line_end":324,"column_start":12,"column_end":18},"name":"strand","qualname":"<Record>::strand","value":"pub fn strand(&Self) -> Option<Strand>","parent":null,"children":[],"decl_id":null,"docs":" Strand of the feature.\n","sig":null,"attributes":[{"value":"/ Strand of the feature.","span":{"file_name":"/Users/shelwitz/.cargo/registry/src/github.com-1ecc6299db9ec823/bio-0.39.0/src/io/gff.rs","byte_start":524921,"byte_end":524947,"line_start":323,"line_end":323,"column_start":5,"column_end":31}}]},{"kind":"Method","id":{"krate":0,"index":1569},"span":{"file_name":"/Users/shelwitz/.cargo/registry/src/github.com-1ecc6299db9ec823/bio-0.39.0/src/io/gff.rs","byte_start":525195,"byte_end":525200,"line_start":333,"line_end":333,"column_start":12,"column_end":17},"name":"frame","qualname":"<Record>::frame","value":"pub fn frame(&Self) -> &str","parent":null,"children":[],"decl_id":null,"docs":" Frame of the feature.\n","sig":null,"attributes":[{"value":"/ Frame of the feature.","span":{"file_name":"/Users/shelwitz/.cargo/registry/src/github.com-1ecc6299db9ec823/bio-0.39.0/src/io/gff.rs","byte_start":525158,"byte_end":525183,"line_start":332,"line_end":332,"column_start":5,"column_end":30}}]},{"kind":"Method","id":{"krate":0,"index":1570},"span":{"file_name":"/Users/shelwitz/.cargo/registry/src/github.com-1ecc6299db9ec823/bio-0.39.0/src/io/gff.rs","byte_start":525285,"byte_end":525295,"line_start":338,"line_end":338,"column_start":12,"column_end":22},"name":"attributes","qualname":"<Record>::attributes","value":"pub fn attributes(&Self) -> &MultiMap<String, String>","parent":null,"children":[],"decl_id":null,"docs":" Attribute of feature\n","sig":null,"attributes":[{"value":"/ Attribute of feature","span":{"file_name":"/Users/shelwitz/.cargo/registry/src/github.com-1ecc6299db9ec823/bio-0.39.0/src/io/gff.rs","byte_start":525249,"byte_end":525273,"line_start":337,"line_end":337,"column_start":5,"column_end":29}}]},{"kind":"Method","id":{"krate":0,"index":1571},"span":{"file_name":"/Users/shelwitz/.cargo/registry/src/github.com-1ecc6299db9ec823/bio-0.39.0/src/io/gff.rs","byte_start":525430,"byte_end":525441,"line_start":343,"line_end":343,"column_start":12,"column_end":23},"name":"seqname_mut","qualname":"<Record>::seqname_mut","value":"pub fn seqname_mut(&mut Self) -> &mut String","parent":null,"children":[],"decl_id":null,"docs":" Get mutable reference on seqname of feature.\n","sig":null,"attributes":[{"value":"/ Get mutable reference on seqname of feature.","span":{"file_name":"/Users/shelwitz/.cargo/registry/src/github.com-1ecc6299db9ec823/bio-0.39.0/src/io/gff.rs","byte_start":525370,"byte_end":525418,"line_start":342,"line_end":342,"column_start":5,"column_end":53}}]},{"kind":"Method","id":{"krate":0,"index":1572},"span":{"file_name":"/Users/shelwitz/.cargo/registry/src/github.com-1ecc6299db9ec823/bio-0.39.0/src/io/gff.rs","byte_start":525566,"byte_end":525576,"line_start":348,"line_end":348,"column_start":12,"column_end":22},"name":"source_mut","qualname":"<Record>::source_mut","value":"pub fn source_mut(&mut Self) -> &mut String","parent":null,"children":[],"decl_id":null,"docs":" Get mutable reference on source of feature.\n","sig":null,"attributes":[{"value":"/ Get mutable reference on source of feature.","span":{"file_name":"/Users/shelwitz/.cargo/registry/src/github.com-1ecc6299db9ec823/bio-0.39.0/src/io/gff.rs","byte_start":525507,"byte_end":525554,"line_start":347,"line_end":347,"column_start":5,"column_end":52}}]},{"kind":"Method","id":{"krate":0,"index":1573},"span":{"file_name":"/Users/shelwitz/.cargo/registry/src/github.com-1ecc6299db9ec823/bio-0.39.0/src/io/gff.rs","byte_start":525698,"byte_end":525714,"line_start":353,"line_end":353,"column_start":12,"column_end":28},"name":"feature_type_mut","qualname":"<Record>::feature_type_mut","value":"pub fn feature_type_mut(&mut Self) -> &mut String","parent":null,"children":[],"decl_id":null,"docs":" Get mutable reference on type of feature.\n","sig":null,"attributes":[{"value":"/ Get mutable reference on type of feature.","span":{"file_name":"/Users/shelwitz/.cargo/registry/src/github.com-1ecc6299db9ec823/bio-0.39.0/src/io/gff.rs","byte_start":525641,"byte_end":525686,"line_start":352,"line_end":352,"column_start":5,"column_end":50}}]},{"kind":"Method","id":{"krate":0,"index":1574},"span":{"file_name":"/Users/shelwitz/.cargo/registry/src/github.com-1ecc6299db9ec823/bio-0.39.0/src/io/gff.rs","byte_start":525843,"byte_end":525852,"line_start":358,"line_end":358,"column_start":12,"column_end":21},"name":"start_mut","qualname":"<Record>::start_mut","value":"pub fn start_mut(&mut Self) -> &mut u64","parent":null,"children":[],"decl_id":null,"docs":" Get mutable reference on start of feature.\n","sig":null,"attributes":[{"value":"/ Get mutable reference on start of feature.","span":{"file_name":"/Users/shelwitz/.cargo/registry/src/github.com-1ecc6299db9ec823/bio-0.39.0/src/io/gff.rs","byte_start":525785,"byte_end":525831,"line_start":357,"line_end":357,"column_start":5,"column_end":51}}]},{"kind":"Method","id":{"krate":0,"index":1575},"span":{"file_name":"/Users/shelwitz/.cargo/registry/src/github.com-1ecc6299db9ec823/bio-0.39.0/src/io/gff.rs","byte_start":525969,"byte_end":525976,"line_start":363,"line_end":363,"column_start":12,"column_end":19},"name":"end_mut","qualname":"<Record>::end_mut","value":"pub fn end_mut(&mut Self) -> &mut u64","parent":null,"children":[],"decl_id":null,"docs":" Get mutable reference on end of feature.\n","sig":null,"attributes":[{"value":"/ Get mutable reference on end of feature.","span":{"file_name":"/Users/shelwitz/.cargo/registry/src/github.com-1ecc6299db9ec823/bio-0.39.0/src/io/gff.rs","byte_start":525913,"byte_end":525957,"line_start":362,"line_end":362,"column_start":5,"column_end":49}}]},{"kind":"Method","id":{"krate":0,"index":1576},"span":{"file_name":"/Users/shelwitz/.cargo/registry/src/github.com-1ecc6299db9ec823/bio-0.39.0/src/io/gff.rs","byte_start":526093,"byte_end":526102,"line_start":368,"line_end":368,"column_start":12,"column_end":21},"name":"score_mut","qualname":"<Record>::score_mut","value":"pub fn score_mut(&mut Self) -> &mut String","parent":null,"children":[],"decl_id":null,"docs":" Get mutable reference on score of feature.\n","sig":null,"attributes":[{"value":"/ Get mutable reference on score of feature.","span":{"file_name":"/Users/shelwitz/.cargo/registry/src/github.com-1ecc6299db9ec823/bio-0.39.0/src/io/gff.rs","byte_start":526035,"byte_end":526081,"line_start":367,"line_end":367,"column_start":5,"column_end":51}}]},{"kind":"Method","id":{"krate":0,"index":1577},"span":{"file_name":"/Users/shelwitz/.cargo/registry/src/github.com-1ecc6299db9ec823/bio-0.39.0/src/io/gff.rs","byte_start":526225,"byte_end":526235,"line_start":373,"line_end":373,"column_start":12,"column_end":22},"name":"strand_mut","qualname":"<Record>::strand_mut","value":"pub fn strand_mut(&mut Self) -> &mut String","parent":null,"children":[],"decl_id":null,"docs":" Get mutable reference on strand of feature.\n","sig":null,"attributes":[{"value":"/ Get mutable reference on strand of feature.","span":{"file_name":"/Users/shelwitz/.cargo/registry/src/github.com-1ecc6299db9ec823/bio-0.39.0/src/io/gff.rs","byte_start":526166,"byte_end":526213,"line_start":372,"line_end":372,"column_start":5,"column_end":52}}]},{"kind":"Method","id":{"krate":0,"index":1578},"span":{"file_name":"/Users/shelwitz/.cargo/registry/src/github.com-1ecc6299db9ec823/bio-0.39.0/src/io/gff.rs","byte_start":526358,"byte_end":526367,"line_start":378,"line_end":378,"column_start":12,"column_end":21},"name":"frame_mut","qualname":"<Record>::frame_mut","value":"pub fn frame_mut(&mut Self) -> &mut String","parent":null,"children":[],"decl_id":null,"docs":" Get mutable reference on frame of feature.\n","sig":null,"attributes":[{"value":"/ Get mutable reference on frame of feature.","span":{"file_name":"/Users/shelwitz/.cargo/registry/src/github.com-1ecc6299db9ec823/bio-0.39.0/src/io/gff.rs","byte_start":526300,"byte_end":526346,"line_start":377,"line_end":377,"column_start":5,"column_end":51}}]},{"kind":"Method","id":{"krate":0,"index":1579},"span":{"file_name":"/Users/shelwitz/.cargo/registry/src/github.com-1ecc6299db9ec823/bio-0.39.0/src/io/gff.rs","byte_start":526494,"byte_end":526508,"line_start":383,"line_end":383,"column_start":12,"column_end":26},"name":"attributes_mut","qualname":"<Record>::attributes_mut","value":"pub fn attributes_mut(&mut Self) -> &mut MultiMap<String, String>","parent":null,"children":[],"decl_id":null,"docs":" Get mutable reference on attributes of feature.\n","sig":null,"attributes":[{"value":"/ Get mutable reference on attributes of feature.","span":{"file_name":"/Users/shelwitz/.cargo/registry/src/github.com-1ecc6299db9ec823/bio-0.39.0/src/io/gff.rs","byte_start":526431,"byte_end":526482,"line_start":382,"line_end":382,"column_start":5,"column_end":56}}]},{"kind":"Mod","id":{"krate":0,"index":1580},"span":{"file_name":"/Users/shelwitz/.cargo/registry/src/github.com-1ecc6299db9ec823/bio-0.39.0/src/pattern_matching/mod.rs","byte_start":0,"byte_end":0,"line_start":1,"line_end":1,"column_start":1,"column_end":1},"name":"pattern_matching","qualname":"::pattern_matching","value":"/Users/shelwitz/.cargo/registry/src/github.com-1ecc6299db9ec823/bio-0.39.0/src/pattern_matching/mod.rs","parent":null,"children":[{"krate":0,"index":1581},{"krate":0,"index":1611},{"krate":0,"index":1646},{"krate":0,"index":1671},{"krate":0,"index":1712},{"krate":0,"index":2165},{"krate":0,"index":2308},{"krate":0,"index":2345}],"decl_id":null,"docs":" This module contains various useful pattern matching algorithms.\n The implementations are based on the lecture notes\n \"Algorithmen auf Sequenzen\", Kopczynski, Marschall, Martin and Rahmann, 2008 - 2015.","sig":null,"attributes":[{"value":"/ This module contains various useful pattern matching algorithms.","span":{"file_name":"/Users/shelwitz/.cargo/registry/src/github.com-1ecc6299db9ec823/bio-0.39.0/src/pattern_matching/mod.rs","byte_start":537229,"byte_end":537297,"line_start":6,"line_end":6,"column_start":1,"column_end":69}},{"value":"/ The implementations are based on the lecture notes","span":{"file_name":"/Users/shelwitz/.cargo/registry/src/github.com-1ecc6299db9ec823/bio-0.39.0/src/pattern_matching/mod.rs","byte_start":537298,"byte_end":537352,"line_start":7,"line_end":7,"column_start":1,"column_end":55}},{"value":"/ \"Algorithmen auf Sequenzen\", Kopczynski, Marschall, Martin and Rahmann, 2008 - 2015.","span":{"file_name":"/Users/shelwitz/.cargo/registry/src/github.com-1ecc6299db9ec823/bio-0.39.0/src/pattern_matching/mod.rs","byte_start":537353,"byte_end":537441,"line_start":8,"line_end":8,"column_start":1,"column_end":89}},{"value":"/","span":{"file_name":"/Users/shelwitz/.cargo/registry/src/github.com-1ecc6299db9ec823/bio-0.39.0/src/pattern_matching/mod.rs","byte_start":537442,"byte_end":537445,"line_start":9,"line_end":9,"column_start":1,"column_end":4}},{"value":"/ * Algorithm of Horspool: fastest for a sufficiently large alphabet","span":{"file_name":"/Users/shelwitz/.cargo/registry/src/github.com-1ecc6299db9ec823/bio-0.39.0/src/pattern_matching/mod.rs","byte_start":537446,"byte_end":537516,"line_start":10,"line_end":10,"column_start":1,"column_end":71}},{"value":"/ * Shift And algorithm: fast for patterns with less than 64 symbols and very small alphabets.","span":{"file_name":"/Users/shelwitz/.cargo/registry/src/github.com-1ecc6299db9ec823/bio-0.39.0/src/pattern_matching/mod.rs","byte_start":537517,"byte_end":537613,"line_start":11,"line_end":11,"column_start":1,"column_end":97}},{"value":"/ * BNDM algorithm: fast for patterns with less than 64 symbols.","span":{"file_name":"/Users/shelwitz/.cargo/registry/src/github.com-1ecc6299db9ec823/bio-0.39.0/src/pattern_matching/mod.rs","byte_start":537614,"byte_end":537680,"line_start":12,"line_end":12,"column_start":1,"column_end":67}},{"value":"/ * BOM algorithm: fast for long patterns and small alphabet.","span":{"file_name":"/Users/shelwitz/.cargo/registry/src/github.com-1ecc6299db9ec823/bio-0.39.0/src/pattern_matching/mod.rs","byte_start":537681,"byte_end":537744,"line_start":13,"line_end":13,"column_start":1,"column_end":64}},{"value":"/ * KMP algorithm: the classical ancestor.","span":{"file_name":"/Users/shelwitz/.cargo/registry/src/github.com-1ecc6299db9ec823/bio-0.39.0/src/pattern_matching/mod.rs","byte_start":537745,"byte_end":537789,"line_start":14,"line_end":14,"column_start":1,"column_end":45}},{"value":"/ * Ukkonens algorithm: approximate pattern matching with dynamic programming.","span":{"file_name":"/Users/shelwitz/.cargo/registry/src/github.com-1ecc6299db9ec823/bio-0.39.0/src/pattern_matching/mod.rs","byte_start":537790,"byte_end":537870,"line_start":15,"line_end":15,"column_start":1,"column_end":81}},{"value":"/ * Myers algorithm: linear-time approximate pattern matching with edit distance for small patterns","span":{"file_name":"/Users/shelwitz/.cargo/registry/src/github.com-1ecc6299db9ec823/bio-0.39.0/src/pattern_matching/mod.rs","byte_start":537871,"byte_end":537972,"line_start":16,"line_end":16,"column_start":1,"column_end":102}},{"value":"/","span":{"file_name":"/Users/shelwitz/.cargo/registry/src/github.com-1ecc6299db9ec823/bio-0.39.0/src/pattern_matching/mod.rs","byte_start":537973,"byte_end":537976,"line_start":17,"line_end":17,"column_start":1,"column_end":4}},{"value":"/ Another fast pattern matching algorithm is available in the twoway crate: https://crates.io/crates/twoway","span":{"file_name":"/Users/shelwitz/.cargo/registry/src/github.com-1ecc6299db9ec823/bio-0.39.0/src/pattern_matching/mod.rs","byte_start":537977,"byte_end":538086,"line_start":18,"line_end":18,"column_start":1,"column_end":110}}]},{"kind":"Mod","id":{"krate":0,"index":1581},"span":{"file_name":"/Users/shelwitz/.cargo/registry/src/github.com-1ecc6299db9ec823/bio-0.39.0/src/pattern_matching/bndm.rs","byte_start":0,"byte_end":0,"line_start":1,"line_end":1,"column_start":1,"column_end":1},"name":"bndm","qualname":"::pattern_matching::bndm","value":"/Users/shelwitz/.cargo/registry/src/github.com-1ecc6299db9ec823/bio-0.39.0/src/pattern_matching/bndm.rs","parent":null,"children":[{"krate":0,"index":1582},{"krate":0,"index":1585},{"krate":0,"index":1588},{"krate":0,"index":1591},{"krate":0,"index":1596},{"krate":0,"index":1602},{"krate":0,"index":1607}],"decl_id":null,"docs":" Backward nondeterministic DAWG matching (BNDM).\n Best-case complexity: O(n / m) with pattern of length m <= 64 and text of length n.\n Worst case complexity: O(n * m).","sig":null,"attributes":[{"value":"/ Backward nondeterministic DAWG matching (BNDM).","span":{"file_name":"/Users/shelwitz/.cargo/registry/src/github.com-1ecc6299db9ec823/bio-0.39.0/src/pattern_matching/bndm.rs","byte_start":538418,"byte_end":538469,"line_start":6,"line_end":6,"column_start":1,"column_end":52}},{"value":"/ Best-case complexity: O(n / m) with pattern of length m <= 64 and text of length n.","span":{"file_name":"/Users/shelwitz/.cargo/registry/src/github.com-1ecc6299db9ec823/bio-0.39.0/src/pattern_matching/bndm.rs","byte_start":538470,"byte_end":538557,"line_start":7,"line_end":7,"column_start":1,"column_end":88}},{"value":"/ Worst case complexity: O(n * m).","span":{"file_name":"/Users/shelwitz/.cargo/registry/src/github.com-1ecc6299db9ec823/bio-0.39.0/src/pattern_matching/bndm.rs","byte_start":538558,"byte_end":538594,"line_start":8,"line_end":8,"column_start":1,"column_end":37}},{"value":"/","span":{"file_name":"/Users/shelwitz/.cargo/registry/src/github.com-1ecc6299db9ec823/bio-0.39.0/src/pattern_matching/bndm.rs","byte_start":538595,"byte_end":538598,"line_start":9,"line_end":9,"column_start":1,"column_end":4}},{"value":"/ # Example","span":{"file_name":"/Users/shelwitz/.cargo/registry/src/github.com-1ecc6299db9ec823/bio-0.39.0/src/pattern_matching/bndm.rs","byte_start":538599,"byte_end":538612,"line_start":10,"line_end":10,"column_start":1,"column_end":14}},{"value":"/","span":{"file_name":"/Users/shelwitz/.cargo/registry/src/github.com-1ecc6299db9ec823/bio-0.39.0/src/pattern_matching/bndm.rs","byte_start":538613,"byte_end":538616,"line_start":11,"line_end":11,"column_start":1,"column_end":4}},{"value":"/ ```","span":{"file_name":"/Users/shelwitz/.cargo/registry/src/github.com-1ecc6299db9ec823/bio-0.39.0/src/pattern_matching/bndm.rs","byte_start":538617,"byte_end":538624,"line_start":12,"line_end":12,"column_start":1,"column_end":8}},{"value":"/ use bio::pattern_matching::bndm;","span":{"file_name":"/Users/shelwitz/.cargo/registry/src/github.com-1ecc6299db9ec823/bio-0.39.0/src/pattern_matching/bndm.rs","byte_start":538625,"byte_end":538661,"line_start":13,"line_end":13,"column_start":1,"column_end":37}},{"value":"/ let pattern = b\"GAAAA\";","span":{"file_name":"/Users/shelwitz/.cargo/registry/src/github.com-1ecc6299db9ec823/bio-0.39.0/src/pattern_matching/bndm.rs","byte_start":538662,"byte_end":538689,"line_start":14,"line_end":14,"column_start":1,"column_end":28}},{"value":"/ let text = b\"ACGGCTAGAAAAGGCTAGAAAA\";","span":{"file_name":"/Users/shelwitz/.cargo/registry/src/github.com-1ecc6299db9ec823/bio-0.39.0/src/pattern_matching/bndm.rs","byte_start":538690,"byte_end":538731,"line_start":15,"line_end":15,"column_start":1,"column_end":42}},{"value":"/ let bndm = bndm::BNDM::new(pattern);","span":{"file_name":"/Users/shelwitz/.cargo/registry/src/github.com-1ecc6299db9ec823/bio-0.39.0/src/pattern_matching/bndm.rs","byte_start":538732,"byte_end":538772,"line_start":16,"line_end":16,"column_start":1,"column_end":41}},{"value":"/ let occ: Vec<usize> = bndm.find_all(text).collect();","span":{"file_name":"/Users/shelwitz/.cargo/registry/src/github.com-1ecc6299db9ec823/bio-0.39.0/src/pattern_matching/bndm.rs","byte_start":538773,"byte_end":538829,"line_start":17,"line_end":17,"column_start":1,"column_end":57}},{"value":"/ assert_eq!(occ, [7, 17]);","span":{"file_name":"/Users/shelwitz/.cargo/registry/src/github.com-1ecc6299db9ec823/bio-0.39.0/src/pattern_matching/bndm.rs","byte_start":538830,"byte_end":538859,"line_start":18,"line_end":18,"column_start":1,"column_end":30}},{"value":"/ ```","span":{"file_name":"/Users/shelwitz/.cargo/registry/src/github.com-1ecc6299db9ec823/bio-0.39.0/src/pattern_matching/bndm.rs","byte_start":538860,"byte_end":538867,"line_start":19,"line_end":19,"column_start":1,"column_end":8}}]},{"kind":"Struct","id":{"krate":0,"index":1591},"span":{"file_name":"/Users/shelwitz/.cargo/registry/src/github.com-1ecc6299db9ec823/bio-0.39.0/src/pattern_matching/bndm.rs","byte_start":539002,"byte_end":539006,"line_start":26,"line_end":26,"column_start":12,"column_end":16},"name":"BNDM","qualname":"::pattern_matching::bndm::BNDM","value":"BNDM {  }","parent":null,"children":[{"krate":0,"index":1592},{"krate":0,"index":1593},{"krate":0,"index":1595}],"decl_id":null,"docs":" BNDM algorithm.\n","sig":null,"attributes":[{"value":"/ BNDM algorithm.","span":{"file_name":"/Users/shelwitz/.cargo/registry/src/github.com-1ecc6299db9ec823/bio-0.39.0/src/pattern_matching/bndm.rs","byte_start":538971,"byte_end":538990,"line_start":25,"line_end":25,"column_start":1,"column_end":20}}]},{"kind":"Method","id":{"krate":0,"index":1597},"span":{"file_name":"/Users/shelwitz/.cargo/registry/src/github.com-1ecc6299db9ec823/bio-0.39.0/src/pattern_matching/bndm.rs","byte_start":539140,"byte_end":539143,"line_start":34,"line_end":34,"column_start":12,"column_end":15},"name":"new","qualname":"<BNDM>::new","value":"pub fn new<C, P>(P) -> Self where C: Borrow<u8>, P: IntoIterator<Item = C>,\nP::IntoIter: DoubleEndedIterator + ExactSizeIterator","parent":null,"children":[],"decl_id":null,"docs":" Create a new instance for a given pattern.\n","sig":null,"attributes":[{"value":"/ Create a new instance for a given pattern.","span":{"file_name":"/Users/shelwitz/.cargo/registry/src/github.com-1ecc6299db9ec823/bio-0.39.0/src/pattern_matching/bndm.rs","byte_start":539082,"byte_end":539128,"line_start":33,"line_end":33,"column_start":5,"column_end":51}}]},{"kind":"Method","id":{"krate":0,"index":1600},"span":{"file_name":"/Users/shelwitz/.cargo/registry/src/github.com-1ecc6299db9ec823/bio-0.39.0/src/pattern_matching/bndm.rs","byte_start":539758,"byte_end":539766,"line_start":51,"line_end":51,"column_start":12,"column_end":20},"name":"find_all","qualname":"<BNDM>::find_all","value":"pub fn find_all<'a>(&'a Self, TextSlice) -> Matches","parent":null,"children":[],"decl_id":null,"docs":" Find all matches of pattern with a given text. Matches are returned as iterator over start positions.\n","sig":null,"attributes":[{"value":"/ Find all matches of pattern with a given text. Matches are returned as iterator over start positions.","span":{"file_name":"/Users/shelwitz/.cargo/registry/src/github.com-1ecc6299db9ec823/bio-0.39.0/src/pattern_matching/bndm.rs","byte_start":539641,"byte_end":539746,"line_start":50,"line_end":50,"column_start":5,"column_end":110}}]},{"kind":"Struct","id":{"krate":0,"index":1602},"span":{"file_name":"/Users/shelwitz/.cargo/registry/src/github.com-1ecc6299db9ec823/bio-0.39.0/src/pattern_matching/bndm.rs","byte_start":539983,"byte_end":539990,"line_start":61,"line_end":61,"column_start":12,"column_end":19},"name":"Matches","qualname":"::pattern_matching::bndm::Matches","value":"Matches {  }","parent":null,"children":[{"krate":0,"index":1604},{"krate":0,"index":1605},{"krate":0,"index":1606}],"decl_id":null,"docs":" Iterator over start positions of matches.\n","sig":null,"attributes":[{"value":"/ Iterator over start positions of matches.","span":{"file_name":"/Users/shelwitz/.cargo/registry/src/github.com-1ecc6299db9ec823/bio-0.39.0/src/pattern_matching/bndm.rs","byte_start":539926,"byte_end":539971,"line_start":60,"line_end":60,"column_start":1,"column_end":46}}]},{"kind":"Mod","id":{"krate":0,"index":1611},"span":{"file_name":"/Users/shelwitz/.cargo/registry/src/github.com-1ecc6299db9ec823/bio-0.39.0/src/pattern_matching/bom.rs","byte_start":0,"byte_end":0,"line_start":1,"line_end":1,"column_start":1,"column_end":1},"name":"bom","qualname":"::pattern_matching::bom","value":"/Users/shelwitz/.cargo/registry/src/github.com-1ecc6299db9ec823/bio-0.39.0/src/pattern_matching/bom.rs","parent":null,"children":[{"krate":0,"index":1612},{"krate":0,"index":1615},{"krate":0,"index":1618},{"krate":0,"index":1619},{"krate":0,"index":1621},{"krate":0,"index":1624},{"krate":0,"index":1627},{"krate":0,"index":1630},{"krate":0,"index":1637},{"krate":0,"index":1642}],"decl_id":null,"docs":" Backward oracle matching algorithm.\n Best-case complexity: O(n / m) with pattern of length m and text of length n.\n Worst case complexity: O(n * m).","sig":null,"attributes":[{"value":"/ Backward oracle matching algorithm.","span":{"file_name":"/Users/shelwitz/.cargo/registry/src/github.com-1ecc6299db9ec823/bio-0.39.0/src/pattern_matching/bom.rs","byte_start":542344,"byte_end":542383,"line_start":6,"line_end":6,"column_start":1,"column_end":40}},{"value":"/ Best-case complexity: O(n / m) with pattern of length m and text of length n.","span":{"file_name":"/Users/shelwitz/.cargo/registry/src/github.com-1ecc6299db9ec823/bio-0.39.0/src/pattern_matching/bom.rs","byte_start":542384,"byte_end":542465,"line_start":7,"line_end":7,"column_start":1,"column_end":82}},{"value":"/ Worst case complexity: O(n * m).","span":{"file_name":"/Users/shelwitz/.cargo/registry/src/github.com-1ecc6299db9ec823/bio-0.39.0/src/pattern_matching/bom.rs","byte_start":542466,"byte_end":542502,"line_start":8,"line_end":8,"column_start":1,"column_end":37}},{"value":"/","span":{"file_name":"/Users/shelwitz/.cargo/registry/src/github.com-1ecc6299db9ec823/bio-0.39.0/src/pattern_matching/bom.rs","byte_start":542503,"byte_end":542506,"line_start":9,"line_end":9,"column_start":1,"column_end":4}},{"value":"/ # Example","span":{"file_name":"/Users/shelwitz/.cargo/registry/src/github.com-1ecc6299db9ec823/bio-0.39.0/src/pattern_matching/bom.rs","byte_start":542507,"byte_end":542520,"line_start":10,"line_end":10,"column_start":1,"column_end":14}},{"value":"/","span":{"file_name":"/Users/shelwitz/.cargo/registry/src/github.com-1ecc6299db9ec823/bio-0.39.0/src/pattern_matching/bom.rs","byte_start":542521,"byte_end":542524,"line_start":11,"line_end":11,"column_start":1,"column_end":4}},{"value":"/ ```","span":{"file_name":"/Users/shelwitz/.cargo/registry/src/github.com-1ecc6299db9ec823/bio-0.39.0/src/pattern_matching/bom.rs","byte_start":542525,"byte_end":542532,"line_start":12,"line_end":12,"column_start":1,"column_end":8}},{"value":"/ use bio::pattern_matching::bom::BOM;","span":{"file_name":"/Users/shelwitz/.cargo/registry/src/github.com-1ecc6299db9ec823/bio-0.39.0/src/pattern_matching/bom.rs","byte_start":542533,"byte_end":542573,"line_start":13,"line_end":13,"column_start":1,"column_end":41}},{"value":"/ let text = b\"ACGGCTAGGAAAAAGACTGAGGACTGAAAA\";","span":{"file_name":"/Users/shelwitz/.cargo/registry/src/github.com-1ecc6299db9ec823/bio-0.39.0/src/pattern_matching/bom.rs","byte_start":542574,"byte_end":542623,"line_start":14,"line_end":14,"column_start":1,"column_end":50}},{"value":"/ let pattern = b\"GAAAA\";","span":{"file_name":"/Users/shelwitz/.cargo/registry/src/github.com-1ecc6299db9ec823/bio-0.39.0/src/pattern_matching/bom.rs","byte_start":542624,"byte_end":542651,"line_start":15,"line_end":15,"column_start":1,"column_end":28}},{"value":"/ let bom = BOM::new(pattern);","span":{"file_name":"/Users/shelwitz/.cargo/registry/src/github.com-1ecc6299db9ec823/bio-0.39.0/src/pattern_matching/bom.rs","byte_start":542652,"byte_end":542684,"line_start":16,"line_end":16,"column_start":1,"column_end":33}},{"value":"/ let occ: Vec<usize> = bom.find_all(text).collect();","span":{"file_name":"/Users/shelwitz/.cargo/registry/src/github.com-1ecc6299db9ec823/bio-0.39.0/src/pattern_matching/bom.rs","byte_start":542685,"byte_end":542740,"line_start":17,"line_end":17,"column_start":1,"column_end":56}},{"value":"/ assert_eq!(occ, [8, 25]);","span":{"file_name":"/Users/shelwitz/.cargo/registry/src/github.com-1ecc6299db9ec823/bio-0.39.0/src/pattern_matching/bom.rs","byte_start":542741,"byte_end":542770,"line_start":18,"line_end":18,"column_start":1,"column_end":30}},{"value":"/ ```","span":{"file_name":"/Users/shelwitz/.cargo/registry/src/github.com-1ecc6299db9ec823/bio-0.39.0/src/pattern_matching/bom.rs","byte_start":542771,"byte_end":542778,"line_start":19,"line_end":19,"column_start":1,"column_end":8}}]},{"kind":"Struct","id":{"krate":0,"index":1627},"span":{"file_name":"/Users/shelwitz/.cargo/registry/src/github.com-1ecc6299db9ec823/bio-0.39.0/src/pattern_matching/bom.rs","byte_start":542950,"byte_end":542953,"line_start":29,"line_end":29,"column_start":12,"column_end":15},"name":"BOM","qualname":"::pattern_matching::bom::BOM","value":"BOM {  }","parent":null,"children":[{"krate":0,"index":1628},{"krate":0,"index":1629}],"decl_id":null,"docs":" Backward oracle matching algorithm.\n","sig":null,"attributes":[{"value":"/ Backward oracle matching algorithm.","span":{"file_name":"/Users/shelwitz/.cargo/registry/src/github.com-1ecc6299db9ec823/bio-0.39.0/src/pattern_matching/bom.rs","byte_start":542899,"byte_end":542938,"line_start":28,"line_end":28,"column_start":1,"column_end":40}}]},{"kind":"Method","id":{"krate":0,"index":1631},"span":{"file_name":"/Users/shelwitz/.cargo/registry/src/github.com-1ecc6299db9ec823/bio-0.39.0/src/pattern_matching/bom.rs","byte_start":543077,"byte_end":543080,"line_start":36,"line_end":36,"column_start":12,"column_end":15},"name":"new","qualname":"<BOM>::new","value":"pub fn new<C, P>(P) -> Self where C: Borrow<u8> + Ord, P: IntoIterator<Item =\nC>, P::IntoIter: DoubleEndedIterator + ExactSizeIterator + Clone","parent":null,"children":[],"decl_id":null,"docs":" Create a new instance for a given pattern.\n","sig":null,"attributes":[{"value":"/ Create a new instance for a given pattern.","span":{"file_name":"/Users/shelwitz/.cargo/registry/src/github.com-1ecc6299db9ec823/bio-0.39.0/src/pattern_matching/bom.rs","byte_start":543019,"byte_end":543065,"line_start":35,"line_end":35,"column_start":5,"column_end":51}}]},{"kind":"Method","id":{"krate":0,"index":1635},"span":{"file_name":"/Users/shelwitz/.cargo/registry/src/github.com-1ecc6299db9ec823/bio-0.39.0/src/pattern_matching/bom.rs","byte_start":545167,"byte_end":545175,"line_start":96,"line_end":96,"column_start":12,"column_end":20},"name":"find_all","qualname":"<BOM>::find_all","value":"pub fn find_all<'a>(&'a Self, TextSlice) -> Matches","parent":null,"children":[],"decl_id":null,"docs":" Find all matches of the pattern in the given text. Matches are returned as an iterator over start positions.\n","sig":null,"attributes":[{"value":"/ Find all matches of the pattern in the given text. Matches are returned as an iterator over start positions.","span":{"file_name":"/Users/shelwitz/.cargo/registry/src/github.com-1ecc6299db9ec823/bio-0.39.0/src/pattern_matching/bom.rs","byte_start":545043,"byte_end":545155,"line_start":95,"line_end":95,"column_start":5,"column_end":117}}]},{"kind":"Struct","id":{"krate":0,"index":1637},"span":{"file_name":"/Users/shelwitz/.cargo/registry/src/github.com-1ecc6299db9ec823/bio-0.39.0/src/pattern_matching/bom.rs","byte_start":545391,"byte_end":545398,"line_start":106,"line_end":106,"column_start":12,"column_end":19},"name":"Matches","qualname":"::pattern_matching::bom::Matches","value":"Matches {  }","parent":null,"children":[{"krate":0,"index":1639},{"krate":0,"index":1640},{"krate":0,"index":1641}],"decl_id":null,"docs":" Iterator over start positions of matches.\n","sig":null,"attributes":[{"value":"/ Iterator over start positions of matches.","span":{"file_name":"/Users/shelwitz/.cargo/registry/src/github.com-1ecc6299db9ec823/bio-0.39.0/src/pattern_matching/bom.rs","byte_start":545334,"byte_end":545379,"line_start":105,"line_end":105,"column_start":1,"column_end":46}}]},{"kind":"Mod","id":{"krate":0,"index":1646},"span":{"file_name":"/Users/shelwitz/.cargo/registry/src/github.com-1ecc6299db9ec823/bio-0.39.0/src/pattern_matching/horspool.rs","byte_start":0,"byte_end":0,"line_start":1,"line_end":1,"column_start":1,"column_end":1},"name":"horspool","qualname":"::pattern_matching::horspool","value":"/Users/shelwitz/.cargo/registry/src/github.com-1ecc6299db9ec823/bio-0.39.0/src/pattern_matching/horspool.rs","parent":null,"children":[{"krate":0,"index":1647},{"krate":0,"index":1650},{"krate":0,"index":1655},{"krate":0,"index":1660},{"krate":0,"index":1667}],"decl_id":null,"docs":" Algorithm of Horspool.\n Window-based, similar to but faster than Boyer-Moore.","sig":null,"attributes":[{"value":"/ Algorithm of Horspool.","span":{"file_name":"/Users/shelwitz/.cargo/registry/src/github.com-1ecc6299db9ec823/bio-0.39.0/src/pattern_matching/horspool.rs","byte_start":547876,"byte_end":547902,"line_start":6,"line_end":6,"column_start":1,"column_end":27}},{"value":"/ Window-based, similar to but faster than Boyer-Moore.","span":{"file_name":"/Users/shelwitz/.cargo/registry/src/github.com-1ecc6299db9ec823/bio-0.39.0/src/pattern_matching/horspool.rs","byte_start":547903,"byte_end":547960,"line_start":7,"line_end":7,"column_start":1,"column_end":58}},{"value":"/","span":{"file_name":"/Users/shelwitz/.cargo/registry/src/github.com-1ecc6299db9ec823/bio-0.39.0/src/pattern_matching/horspool.rs","byte_start":547961,"byte_end":547964,"line_start":8,"line_end":8,"column_start":1,"column_end":4}},{"value":"/ # Idea","span":{"file_name":"/Users/shelwitz/.cargo/registry/src/github.com-1ecc6299db9ec823/bio-0.39.0/src/pattern_matching/horspool.rs","byte_start":547965,"byte_end":547975,"line_start":9,"line_end":9,"column_start":1,"column_end":11}},{"value":"/ Look at a search window m, match pattern backwards.","span":{"file_name":"/Users/shelwitz/.cargo/registry/src/github.com-1ecc6299db9ec823/bio-0.39.0/src/pattern_matching/horspool.rs","byte_start":547976,"byte_end":548031,"line_start":10,"line_end":10,"column_start":1,"column_end":56}},{"value":"/ In case of a mismatch, you can jump behind that.","span":{"file_name":"/Users/shelwitz/.cargo/registry/src/github.com-1ecc6299db9ec823/bio-0.39.0/src/pattern_matching/horspool.rs","byte_start":548032,"byte_end":548084,"line_start":11,"line_end":11,"column_start":1,"column_end":53}},{"value":"/ Best case time complexity: O(n / m)","span":{"file_name":"/Users/shelwitz/.cargo/registry/src/github.com-1ecc6299db9ec823/bio-0.39.0/src/pattern_matching/horspool.rs","byte_start":548085,"byte_end":548124,"line_start":12,"line_end":12,"column_start":1,"column_end":40}},{"value":"/ Worst case time complexity: O(n * m)","span":{"file_name":"/Users/shelwitz/.cargo/registry/src/github.com-1ecc6299db9ec823/bio-0.39.0/src/pattern_matching/horspool.rs","byte_start":548125,"byte_end":548165,"line_start":13,"line_end":13,"column_start":1,"column_end":41}},{"value":"/ With a large alphabet, you are likely","span":{"file_name":"/Users/shelwitz/.cargo/registry/src/github.com-1ecc6299db9ec823/bio-0.39.0/src/pattern_matching/horspool.rs","byte_start":548166,"byte_end":548207,"line_start":14,"line_end":14,"column_start":1,"column_end":42}},{"value":"/ around the best case, and faster than the rather","span":{"file_name":"/Users/shelwitz/.cargo/registry/src/github.com-1ecc6299db9ec823/bio-0.39.0/src/pattern_matching/horspool.rs","byte_start":548208,"byte_end":548260,"line_start":15,"line_end":15,"column_start":1,"column_end":53}},{"value":"/ complicated Boyer-Moore.","span":{"file_name":"/Users/shelwitz/.cargo/registry/src/github.com-1ecc6299db9ec823/bio-0.39.0/src/pattern_matching/horspool.rs","byte_start":548261,"byte_end":548289,"line_start":16,"line_end":16,"column_start":1,"column_end":29}},{"value":"/","span":{"file_name":"/Users/shelwitz/.cargo/registry/src/github.com-1ecc6299db9ec823/bio-0.39.0/src/pattern_matching/horspool.rs","byte_start":548290,"byte_end":548293,"line_start":17,"line_end":17,"column_start":1,"column_end":4}},{"value":"/ The algorithm has two phases (let a be the last symbol in the window):","span":{"file_name":"/Users/shelwitz/.cargo/registry/src/github.com-1ecc6299db9ec823/bio-0.39.0/src/pattern_matching/horspool.rs","byte_start":548294,"byte_end":548368,"line_start":18,"line_end":18,"column_start":1,"column_end":75}},{"value":"/","span":{"file_name":"/Users/shelwitz/.cargo/registry/src/github.com-1ecc6299db9ec823/bio-0.39.0/src/pattern_matching/horspool.rs","byte_start":548369,"byte_end":548372,"line_start":19,"line_end":19,"column_start":1,"column_end":4}},{"value":"/ 1. test phase: compare the last symbol of the window.","span":{"file_name":"/Users/shelwitz/.cargo/registry/src/github.com-1ecc6299db9ec823/bio-0.39.0/src/pattern_matching/horspool.rs","byte_start":548373,"byte_end":548430,"line_start":20,"line_end":20,"column_start":1,"column_end":58}},{"value":"/    If it matches, compare the whole pattern.","span":{"file_name":"/Users/shelwitz/.cargo/registry/src/github.com-1ecc6299db9ec823/bio-0.39.0/src/pattern_matching/horspool.rs","byte_start":548431,"byte_end":548479,"line_start":21,"line_end":21,"column_start":1,"column_end":49}},{"value":"/    If it does not match, continue with the shift phase.","span":{"file_name":"/Users/shelwitz/.cargo/registry/src/github.com-1ecc6299db9ec823/bio-0.39.0/src/pattern_matching/horspool.rs","byte_start":548480,"byte_end":548539,"line_start":22,"line_end":22,"column_start":1,"column_end":60}},{"value":"/ 2. shift phase: let `l[a]` be the rightmost position of a in","span":{"file_name":"/Users/shelwitz/.cargo/registry/src/github.com-1ecc6299db9ec823/bio-0.39.0/src/pattern_matching/horspool.rs","byte_start":548540,"byte_end":548604,"line_start":23,"line_end":23,"column_start":1,"column_end":65}},{"value":"/    the pattern without the last symbol. If it does not occur","span":{"file_name":"/Users/shelwitz/.cargo/registry/src/github.com-1ecc6299db9ec823/bio-0.39.0/src/pattern_matching/horspool.rs","byte_start":548605,"byte_end":548669,"line_start":24,"line_end":24,"column_start":1,"column_end":65}},{"value":"/    let `l[a]` be -1. Shift the window by `m - 1 - l[a]`. i.e.","span":{"file_name":"/Users/shelwitz/.cargo/registry/src/github.com-1ecc6299db9ec823/bio-0.39.0/src/pattern_matching/horspool.rs","byte_start":548670,"byte_end":548735,"line_start":25,"line_end":25,"column_start":1,"column_end":66}},{"value":"/    we shift the window such that the rightmost a matches","span":{"file_name":"/Users/shelwitz/.cargo/registry/src/github.com-1ecc6299db9ec823/bio-0.39.0/src/pattern_matching/horspool.rs","byte_start":548736,"byte_end":548796,"line_start":26,"line_end":26,"column_start":1,"column_end":61}},{"value":"/    the a at the end of the last window.","span":{"file_name":"/Users/shelwitz/.cargo/registry/src/github.com-1ecc6299db9ec823/bio-0.39.0/src/pattern_matching/horspool.rs","byte_start":548797,"byte_end":548840,"line_start":27,"line_end":27,"column_start":1,"column_end":44}},{"value":"/    If a does not occur in the pattern, we shift by the whole length.","span":{"file_name":"/Users/shelwitz/.cargo/registry/src/github.com-1ecc6299db9ec823/bio-0.39.0/src/pattern_matching/horspool.rs","byte_start":548841,"byte_end":548913,"line_start":28,"line_end":28,"column_start":1,"column_end":73}},{"value":"/","span":{"file_name":"/Users/shelwitz/.cargo/registry/src/github.com-1ecc6299db9ec823/bio-0.39.0/src/pattern_matching/horspool.rs","byte_start":548914,"byte_end":548917,"line_start":29,"line_end":29,"column_start":1,"column_end":4}},{"value":"/ # Example","span":{"file_name":"/Users/shelwitz/.cargo/registry/src/github.com-1ecc6299db9ec823/bio-0.39.0/src/pattern_matching/horspool.rs","byte_start":548918,"byte_end":548931,"line_start":30,"line_end":30,"column_start":1,"column_end":14}},{"value":"/","span":{"file_name":"/Users/shelwitz/.cargo/registry/src/github.com-1ecc6299db9ec823/bio-0.39.0/src/pattern_matching/horspool.rs","byte_start":548932,"byte_end":548935,"line_start":31,"line_end":31,"column_start":1,"column_end":4}},{"value":"/ ```","span":{"file_name":"/Users/shelwitz/.cargo/registry/src/github.com-1ecc6299db9ec823/bio-0.39.0/src/pattern_matching/horspool.rs","byte_start":548936,"byte_end":548943,"line_start":32,"line_end":32,"column_start":1,"column_end":8}},{"value":"/ use bio::pattern_matching::horspool::Horspool;","span":{"file_name":"/Users/shelwitz/.cargo/registry/src/github.com-1ecc6299db9ec823/bio-0.39.0/src/pattern_matching/horspool.rs","byte_start":548944,"byte_end":548994,"line_start":33,"line_end":33,"column_start":1,"column_end":51}},{"value":"/ let text = b\"ACGGCTAGGAAAAAGACTGAGGACTGAAAA\";","span":{"file_name":"/Users/shelwitz/.cargo/registry/src/github.com-1ecc6299db9ec823/bio-0.39.0/src/pattern_matching/horspool.rs","byte_start":548995,"byte_end":549044,"line_start":34,"line_end":34,"column_start":1,"column_end":50}},{"value":"/ let pattern = b\"GAAAA\";","span":{"file_name":"/Users/shelwitz/.cargo/registry/src/github.com-1ecc6299db9ec823/bio-0.39.0/src/pattern_matching/horspool.rs","byte_start":549045,"byte_end":549072,"line_start":35,"line_end":35,"column_start":1,"column_end":28}},{"value":"/ let horspool = Horspool::new(pattern);","span":{"file_name":"/Users/shelwitz/.cargo/registry/src/github.com-1ecc6299db9ec823/bio-0.39.0/src/pattern_matching/horspool.rs","byte_start":549073,"byte_end":549115,"line_start":36,"line_end":36,"column_start":1,"column_end":43}},{"value":"/ let occ: Vec<usize> = horspool.find_all(text).collect();","span":{"file_name":"/Users/shelwitz/.cargo/registry/src/github.com-1ecc6299db9ec823/bio-0.39.0/src/pattern_matching/horspool.rs","byte_start":549116,"byte_end":549176,"line_start":37,"line_end":37,"column_start":1,"column_end":61}},{"value":"/ assert_eq!(occ, [8, 25]);","span":{"file_name":"/Users/shelwitz/.cargo/registry/src/github.com-1ecc6299db9ec823/bio-0.39.0/src/pattern_matching/horspool.rs","byte_start":549177,"byte_end":549206,"line_start":38,"line_end":38,"column_start":1,"column_end":30}},{"value":"/ ```","span":{"file_name":"/Users/shelwitz/.cargo/registry/src/github.com-1ecc6299db9ec823/bio-0.39.0/src/pattern_matching/horspool.rs","byte_start":549207,"byte_end":549214,"line_start":39,"line_end":39,"column_start":1,"column_end":8}}]},{"kind":"Struct","id":{"krate":0,"index":1650},"span":{"file_name":"/Users/shelwitz/.cargo/registry/src/github.com-1ecc6299db9ec823/bio-0.39.0/src/pattern_matching/horspool.rs","byte_start":549284,"byte_end":549292,"line_start":44,"line_end":44,"column_start":12,"column_end":20},"name":"Horspool","qualname":"::pattern_matching::horspool::Horspool","value":"Horspool {  }","parent":null,"children":[{"krate":0,"index":1652},{"krate":0,"index":1653},{"krate":0,"index":1654}],"decl_id":null,"docs":" Algorithm of Horspool.\n","sig":null,"attributes":[{"value":"/ Algorithm of Horspool.","span":{"file_name":"/Users/shelwitz/.cargo/registry/src/github.com-1ecc6299db9ec823/bio-0.39.0/src/pattern_matching/horspool.rs","byte_start":549246,"byte_end":549272,"line_start":43,"line_end":43,"column_start":1,"column_end":27}}]},{"kind":"Method","id":{"krate":0,"index":1657},"span":{"file_name":"/Users/shelwitz/.cargo/registry/src/github.com-1ecc6299db9ec823/bio-0.39.0/src/pattern_matching/horspool.rs","byte_start":549453,"byte_end":549456,"line_start":52,"line_end":52,"column_start":12,"column_end":15},"name":"new","qualname":"<Horspool>::new","value":"pub fn new(TextSlice) -> Self","parent":null,"children":[],"decl_id":null,"docs":" Create a new instance for a given pattern.\n","sig":null,"attributes":[{"value":"/ Create a new instance for a given pattern.","span":{"file_name":"/Users/shelwitz/.cargo/registry/src/github.com-1ecc6299db9ec823/bio-0.39.0/src/pattern_matching/horspool.rs","byte_start":549395,"byte_end":549441,"line_start":51,"line_end":51,"column_start":5,"column_end":51}}]},{"kind":"Method","id":{"krate":0,"index":1658},"span":{"file_name":"/Users/shelwitz/.cargo/registry/src/github.com-1ecc6299db9ec823/bio-0.39.0/src/pattern_matching/horspool.rs","byte_start":549937,"byte_end":549945,"line_start":66,"line_end":66,"column_start":12,"column_end":20},"name":"find_all","qualname":"<Horspool>::find_all","value":"pub fn find_all<'b>(&'b Self, TextSlice) -> Matches","parent":null,"children":[],"decl_id":null,"docs":" Find all matches with a given text. Matches are returned as an iterator over start\n positions.\n","sig":null,"attributes":[{"value":"/ Find all matches with a given text. Matches are returned as an iterator over start","span":{"file_name":"/Users/shelwitz/.cargo/registry/src/github.com-1ecc6299db9ec823/bio-0.39.0/src/pattern_matching/horspool.rs","byte_start":549820,"byte_end":549906,"line_start":64,"line_end":64,"column_start":5,"column_end":91}},{"value":"/ positions.","span":{"file_name":"/Users/shelwitz/.cargo/registry/src/github.com-1ecc6299db9ec823/bio-0.39.0/src/pattern_matching/horspool.rs","byte_start":549911,"byte_end":549925,"line_start":65,"line_end":65,"column_start":5,"column_end":19}}]},{"kind":"Struct","id":{"krate":0,"index":1660},"span":{"file_name":"/Users/shelwitz/.cargo/registry/src/github.com-1ecc6299db9ec823/bio-0.39.0/src/pattern_matching/horspool.rs","byte_start":550247,"byte_end":550254,"line_start":78,"line_end":78,"column_start":12,"column_end":19},"name":"Matches","qualname":"::pattern_matching::horspool::Matches","value":"Matches {  }","parent":null,"children":[{"krate":0,"index":1662},{"krate":0,"index":1663},{"krate":0,"index":1664},{"krate":0,"index":1665},{"krate":0,"index":1666}],"decl_id":null,"docs":" Iterator over start positions of matches.\n","sig":null,"attributes":[{"value":"/ Iterator over start positions of matches.","span":{"file_name":"/Users/shelwitz/.cargo/registry/src/github.com-1ecc6299db9ec823/bio-0.39.0/src/pattern_matching/horspool.rs","byte_start":550190,"byte_end":550235,"line_start":77,"line_end":77,"column_start":1,"column_end":46}}]},{"kind":"Mod","id":{"krate":0,"index":1671},"span":{"file_name":"/Users/shelwitz/.cargo/registry/src/github.com-1ecc6299db9ec823/bio-0.39.0/src/pattern_matching/kmp.rs","byte_start":0,"byte_end":0,"line_start":1,"line_end":1,"column_start":1,"column_end":1},"name":"kmp","qualname":"::pattern_matching::kmp","value":"/Users/shelwitz/.cargo/registry/src/github.com-1ecc6299db9ec823/bio-0.39.0/src/pattern_matching/kmp.rs","parent":null,"children":[{"krate":0,"index":1672},{"krate":0,"index":1675},{"krate":0,"index":1676},{"krate":0,"index":1679},{"krate":0,"index":1682},{"krate":0,"index":1685},{"krate":0,"index":1686},{"krate":0,"index":1691},{"krate":0,"index":1698},{"krate":0,"index":1699},{"krate":0,"index":1706}],"decl_id":null,"docs":" Algorithm of Knuth Morris and Pratt.\n Constructs an automaton recognizing the pattern, and scans linearly over\n a text of length n. Complexity: O(n).\n The transition function delta is simulated via the lps-function, that assigns to each position\n q in the pattern the longest prefix of the pattern that is suffix of pattern[..q+1].\n Then, in the NFA for the pattern, active states after reading position q are\n {q, lps(q), lps(lps(q)), ... 0}.","sig":null,"attributes":[{"value":"/ Algorithm of Knuth Morris and Pratt.","span":{"file_name":"/Users/shelwitz/.cargo/registry/src/github.com-1ecc6299db9ec823/bio-0.39.0/src/pattern_matching/kmp.rs","byte_start":552384,"byte_end":552424,"line_start":6,"line_end":6,"column_start":1,"column_end":41}},{"value":"/ Constructs an automaton recognizing the pattern, and scans linearly over","span":{"file_name":"/Users/shelwitz/.cargo/registry/src/github.com-1ecc6299db9ec823/bio-0.39.0/src/pattern_matching/kmp.rs","byte_start":552425,"byte_end":552501,"line_start":7,"line_end":7,"column_start":1,"column_end":77}},{"value":"/ a text of length n. Complexity: O(n).","span":{"file_name":"/Users/shelwitz/.cargo/registry/src/github.com-1ecc6299db9ec823/bio-0.39.0/src/pattern_matching/kmp.rs","byte_start":552502,"byte_end":552543,"line_start":8,"line_end":8,"column_start":1,"column_end":42}},{"value":"/ The transition function delta is simulated via the lps-function, that assigns to each position","span":{"file_name":"/Users/shelwitz/.cargo/registry/src/github.com-1ecc6299db9ec823/bio-0.39.0/src/pattern_matching/kmp.rs","byte_start":552544,"byte_end":552642,"line_start":9,"line_end":9,"column_start":1,"column_end":99}},{"value":"/ q in the pattern the longest prefix of the pattern that is suffix of pattern[..q+1].","span":{"file_name":"/Users/shelwitz/.cargo/registry/src/github.com-1ecc6299db9ec823/bio-0.39.0/src/pattern_matching/kmp.rs","byte_start":552643,"byte_end":552731,"line_start":10,"line_end":10,"column_start":1,"column_end":89}},{"value":"/ Then, in the NFA for the pattern, active states after reading position q are","span":{"file_name":"/Users/shelwitz/.cargo/registry/src/github.com-1ecc6299db9ec823/bio-0.39.0/src/pattern_matching/kmp.rs","byte_start":552732,"byte_end":552812,"line_start":11,"line_end":11,"column_start":1,"column_end":81}},{"value":"/ {q, lps(q), lps(lps(q)), ... 0}.","span":{"file_name":"/Users/shelwitz/.cargo/registry/src/github.com-1ecc6299db9ec823/bio-0.39.0/src/pattern_matching/kmp.rs","byte_start":552813,"byte_end":552849,"line_start":12,"line_end":12,"column_start":1,"column_end":37}},{"value":"/","span":{"file_name":"/Users/shelwitz/.cargo/registry/src/github.com-1ecc6299db9ec823/bio-0.39.0/src/pattern_matching/kmp.rs","byte_start":552850,"byte_end":552853,"line_start":13,"line_end":13,"column_start":1,"column_end":4}},{"value":"/ # Example","span":{"file_name":"/Users/shelwitz/.cargo/registry/src/github.com-1ecc6299db9ec823/bio-0.39.0/src/pattern_matching/kmp.rs","byte_start":552854,"byte_end":552867,"line_start":14,"line_end":14,"column_start":1,"column_end":14}},{"value":"/","span":{"file_name":"/Users/shelwitz/.cargo/registry/src/github.com-1ecc6299db9ec823/bio-0.39.0/src/pattern_matching/kmp.rs","byte_start":552868,"byte_end":552871,"line_start":15,"line_end":15,"column_start":1,"column_end":4}},{"value":"/ ```","span":{"file_name":"/Users/shelwitz/.cargo/registry/src/github.com-1ecc6299db9ec823/bio-0.39.0/src/pattern_matching/kmp.rs","byte_start":552872,"byte_end":552879,"line_start":16,"line_end":16,"column_start":1,"column_end":8}},{"value":"/ use bio::pattern_matching::kmp::KMP;","span":{"file_name":"/Users/shelwitz/.cargo/registry/src/github.com-1ecc6299db9ec823/bio-0.39.0/src/pattern_matching/kmp.rs","byte_start":552880,"byte_end":552920,"line_start":17,"line_end":17,"column_start":1,"column_end":41}},{"value":"/ let text = b\"aaaaabbabbbbbbbabbab\";","span":{"file_name":"/Users/shelwitz/.cargo/registry/src/github.com-1ecc6299db9ec823/bio-0.39.0/src/pattern_matching/kmp.rs","byte_start":552921,"byte_end":552960,"line_start":18,"line_end":18,"column_start":1,"column_end":40}},{"value":"/ let pattern = b\"abbab\";","span":{"file_name":"/Users/shelwitz/.cargo/registry/src/github.com-1ecc6299db9ec823/bio-0.39.0/src/pattern_matching/kmp.rs","byte_start":552961,"byte_end":552988,"line_start":19,"line_end":19,"column_start":1,"column_end":28}},{"value":"/ let kmp = KMP::new(pattern);","span":{"file_name":"/Users/shelwitz/.cargo/registry/src/github.com-1ecc6299db9ec823/bio-0.39.0/src/pattern_matching/kmp.rs","byte_start":552989,"byte_end":553021,"line_start":20,"line_end":20,"column_start":1,"column_end":33}},{"value":"/ let occ: Vec<usize> = kmp.find_all(text).collect();","span":{"file_name":"/Users/shelwitz/.cargo/registry/src/github.com-1ecc6299db9ec823/bio-0.39.0/src/pattern_matching/kmp.rs","byte_start":553022,"byte_end":553077,"line_start":21,"line_end":21,"column_start":1,"column_end":56}},{"value":"/ assert_eq!(occ, [4, 15]);","span":{"file_name":"/Users/shelwitz/.cargo/registry/src/github.com-1ecc6299db9ec823/bio-0.39.0/src/pattern_matching/kmp.rs","byte_start":553078,"byte_end":553107,"line_start":22,"line_end":22,"column_start":1,"column_end":30}},{"value":"/ ```","span":{"file_name":"/Users/shelwitz/.cargo/registry/src/github.com-1ecc6299db9ec823/bio-0.39.0/src/pattern_matching/kmp.rs","byte_start":553108,"byte_end":553115,"line_start":23,"line_end":23,"column_start":1,"column_end":8}}]},{"kind":"Struct","id":{"krate":0,"index":1686},"span":{"file_name":"/Users/shelwitz/.cargo/registry/src/github.com-1ecc6299db9ec823/bio-0.39.0/src/pattern_matching/kmp.rs","byte_start":553263,"byte_end":553266,"line_start":33,"line_end":33,"column_start":12,"column_end":15},"name":"KMP","qualname":"::pattern_matching::kmp::KMP","value":"KMP {  }","parent":null,"children":[{"krate":0,"index":1688},{"krate":0,"index":1689},{"krate":0,"index":1690}],"decl_id":null,"docs":" KMP algorithm.\n","sig":null,"attributes":[{"value":"/ KMP algorithm.","span":{"file_name":"/Users/shelwitz/.cargo/registry/src/github.com-1ecc6299db9ec823/bio-0.39.0/src/pattern_matching/kmp.rs","byte_start":553233,"byte_end":553251,"line_start":32,"line_end":32,"column_start":1,"column_end":19}}]},{"kind":"Method","id":{"krate":0,"index":1693},"span":{"file_name":"/Users/shelwitz/.cargo/registry/src/github.com-1ecc6299db9ec823/bio-0.39.0/src/pattern_matching/kmp.rs","byte_start":553413,"byte_end":553416,"line_start":41,"line_end":41,"column_start":12,"column_end":15},"name":"new","qualname":"<KMP>::new","value":"pub fn new(TextSlice) -> Self","parent":null,"children":[],"decl_id":null,"docs":" Create a new instance for a given pattern.\n","sig":null,"attributes":[{"value":"/ Create a new instance for a given pattern.","span":{"file_name":"/Users/shelwitz/.cargo/registry/src/github.com-1ecc6299db9ec823/bio-0.39.0/src/pattern_matching/kmp.rs","byte_start":553355,"byte_end":553401,"line_start":40,"line_end":40,"column_start":5,"column_end":51}}]},{"kind":"Method","id":{"krate":0,"index":1695},"span":{"file_name":"/Users/shelwitz/.cargo/registry/src/github.com-1ecc6299db9ec823/bio-0.39.0/src/pattern_matching/kmp.rs","byte_start":553921,"byte_end":553929,"line_start":61,"line_end":61,"column_start":12,"column_end":20},"name":"find_all","qualname":"<KMP>::find_all","value":"pub fn find_all<C, T>(&Self, T) -> Matches<, C, T::IntoIter> where\nC: Borrow<u8>, T: IntoIterator<Item = C>","parent":null,"children":[],"decl_id":null,"docs":" Find all matches of pattern in a given text. Matches are returned as iterator over start\n positions.\n","sig":null,"attributes":[{"value":"/ Find all matches of pattern in a given text. Matches are returned as iterator over start","span":{"file_name":"/Users/shelwitz/.cargo/registry/src/github.com-1ecc6299db9ec823/bio-0.39.0/src/pattern_matching/kmp.rs","byte_start":553798,"byte_end":553890,"line_start":59,"line_end":59,"column_start":5,"column_end":97}},{"value":"/ positions.","span":{"file_name":"/Users/shelwitz/.cargo/registry/src/github.com-1ecc6299db9ec823/bio-0.39.0/src/pattern_matching/kmp.rs","byte_start":553895,"byte_end":553909,"line_start":60,"line_end":60,"column_start":5,"column_end":19}}]},{"kind":"Struct","id":{"krate":0,"index":1699},"span":{"file_name":"/Users/shelwitz/.cargo/registry/src/github.com-1ecc6299db9ec823/bio-0.39.0/src/pattern_matching/kmp.rs","byte_start":554575,"byte_end":554582,"line_start":91,"line_end":91,"column_start":12,"column_end":19},"name":"Matches","qualname":"::pattern_matching::kmp::Matches","value":"Matches {  }","parent":null,"children":[{"krate":0,"index":1703},{"krate":0,"index":1704},{"krate":0,"index":1705}],"decl_id":null,"docs":" Iterator over start positions of matches.\n","sig":null,"attributes":[{"value":"/ Iterator over start positions of matches.","span":{"file_name":"/Users/shelwitz/.cargo/registry/src/github.com-1ecc6299db9ec823/bio-0.39.0/src/pattern_matching/kmp.rs","byte_start":554518,"byte_end":554563,"line_start":90,"line_end":90,"column_start":1,"column_end":46}}]},{"kind":"Mod","id":{"krate":0,"index":1712},"span":{"file_name":"/Users/shelwitz/.cargo/registry/src/github.com-1ecc6299db9ec823/bio-0.39.0/src/pattern_matching/myers/mod.rs","byte_start":0,"byte_end":0,"line_start":1,"line_end":1,"column_start":1,"column_end":1},"name":"myers","qualname":"::pattern_matching::myers","value":"/Users/shelwitz/.cargo/registry/src/github.com-1ecc6299db9ec823/bio-0.39.0/src/pattern_matching/myers/mod.rs","parent":null,"children":[{"krate":0,"index":1713},{"krate":0,"index":1736},{"krate":0,"index":1780},{"krate":0,"index":1825},{"krate":0,"index":1964},{"krate":0,"index":2081},{"krate":0,"index":2159},{"krate":0,"index":2162},{"krate":0,"index":2163},{"krate":0,"index":2164}],"decl_id":null,"docs":" Myers bit-parallel approximate pattern matching algorithm.\n Finds all matches up to a given edit distance. The pattern has to fit into a bitvector,\n and is thus limited to 64 or (since stable Rust version 1.26) to 128 symbols.\n Complexity: O(n)","sig":null,"attributes":[{"value":"/ Myers bit-parallel approximate pattern matching algorithm.","span":{"file_name":"/Users/shelwitz/.cargo/registry/src/github.com-1ecc6299db9ec823/bio-0.39.0/src/pattern_matching/myers/mod.rs","byte_start":556641,"byte_end":556703,"line_start":6,"line_end":6,"column_start":1,"column_end":63}},{"value":"/ Finds all matches up to a given edit distance. The pattern has to fit into a bitvector,","span":{"file_name":"/Users/shelwitz/.cargo/registry/src/github.com-1ecc6299db9ec823/bio-0.39.0/src/pattern_matching/myers/mod.rs","byte_start":556704,"byte_end":556795,"line_start":7,"line_end":7,"column_start":1,"column_end":92}},{"value":"/ and is thus limited to 64 or (since stable Rust version 1.26) to 128 symbols.","span":{"file_name":"/Users/shelwitz/.cargo/registry/src/github.com-1ecc6299db9ec823/bio-0.39.0/src/pattern_matching/myers/mod.rs","byte_start":556796,"byte_end":556877,"line_start":8,"line_end":8,"column_start":1,"column_end":82}},{"value":"/ Complexity: O(n)","span":{"file_name":"/Users/shelwitz/.cargo/registry/src/github.com-1ecc6299db9ec823/bio-0.39.0/src/pattern_matching/myers/mod.rs","byte_start":556878,"byte_end":556898,"line_start":9,"line_end":9,"column_start":1,"column_end":21}},{"value":"/","span":{"file_name":"/Users/shelwitz/.cargo/registry/src/github.com-1ecc6299db9ec823/bio-0.39.0/src/pattern_matching/myers/mod.rs","byte_start":556899,"byte_end":556902,"line_start":10,"line_end":10,"column_start":1,"column_end":4}},{"value":"/ Traceback allows obtaining the starting position and the alignment path of the hit.","span":{"file_name":"/Users/shelwitz/.cargo/registry/src/github.com-1ecc6299db9ec823/bio-0.39.0/src/pattern_matching/myers/mod.rs","byte_start":556903,"byte_end":556990,"line_start":11,"line_end":11,"column_start":1,"column_end":88}},{"value":"/ Its implementation is somehow similar to the one by Edlib (Šošić and Šikić 2017),","span":{"file_name":"/Users/shelwitz/.cargo/registry/src/github.com-1ecc6299db9ec823/bio-0.39.0/src/pattern_matching/myers/mod.rs","byte_start":556991,"byte_end":557081,"line_start":12,"line_end":12,"column_start":1,"column_end":86}},{"value":"/ although there can be small differences when there is more than one possible alignment","span":{"file_name":"/Users/shelwitz/.cargo/registry/src/github.com-1ecc6299db9ec823/bio-0.39.0/src/pattern_matching/myers/mod.rs","byte_start":557082,"byte_end":557172,"line_start":13,"line_end":13,"column_start":1,"column_end":91}},{"value":"/ path with then same edit distance at a position: Edlib prefers to make insertions","span":{"file_name":"/Users/shelwitz/.cargo/registry/src/github.com-1ecc6299db9ec823/bio-0.39.0/src/pattern_matching/myers/mod.rs","byte_start":557173,"byte_end":557258,"line_start":14,"line_end":14,"column_start":1,"column_end":86}},{"value":"/ and deletions to the pattern (query) over substitutions","span":{"file_name":"/Users/shelwitz/.cargo/registry/src/github.com-1ecc6299db9ec823/bio-0.39.0/src/pattern_matching/myers/mod.rs","byte_start":557259,"byte_end":557318,"line_start":15,"line_end":15,"column_start":1,"column_end":60}},{"value":"/ (Insertion > Deletion > Substitution) while our implementation prefers substitutions","span":{"file_name":"/Users/shelwitz/.cargo/registry/src/github.com-1ecc6299db9ec823/bio-0.39.0/src/pattern_matching/myers/mod.rs","byte_start":557319,"byte_end":557407,"line_start":16,"line_end":16,"column_start":1,"column_end":89}},{"value":"/ (Substitution > Insertion > Deletion).","span":{"file_name":"/Users/shelwitz/.cargo/registry/src/github.com-1ecc6299db9ec823/bio-0.39.0/src/pattern_matching/myers/mod.rs","byte_start":557408,"byte_end":557450,"line_start":17,"line_end":17,"column_start":1,"column_end":43}},{"value":"/","span":{"file_name":"/Users/shelwitz/.cargo/registry/src/github.com-1ecc6299db9ec823/bio-0.39.0/src/pattern_matching/myers/mod.rs","byte_start":557451,"byte_end":557454,"line_start":18,"line_end":18,"column_start":1,"column_end":4}},{"value":"/ *Myers, G. (1999). A fast bit-vector algorithm for approximate string matching based on dynamic","span":{"file_name":"/Users/shelwitz/.cargo/registry/src/github.com-1ecc6299db9ec823/bio-0.39.0/src/pattern_matching/myers/mod.rs","byte_start":557455,"byte_end":557554,"line_start":19,"line_end":19,"column_start":1,"column_end":100}},{"value":"/  programming. Journal of the ACM (JACM) 46, 395–415.*","span":{"file_name":"/Users/shelwitz/.cargo/registry/src/github.com-1ecc6299db9ec823/bio-0.39.0/src/pattern_matching/myers/mod.rs","byte_start":557555,"byte_end":557614,"line_start":20,"line_end":20,"column_start":1,"column_end":58}},{"value":"/","span":{"file_name":"/Users/shelwitz/.cargo/registry/src/github.com-1ecc6299db9ec823/bio-0.39.0/src/pattern_matching/myers/mod.rs","byte_start":557615,"byte_end":557618,"line_start":21,"line_end":21,"column_start":1,"column_end":4}},{"value":"/ *Šošić, M., and Šikić, M. (2017). Edlib: a C/C ++ library for fast, exact sequence alignment","span":{"file_name":"/Users/shelwitz/.cargo/registry/src/github.com-1ecc6299db9ec823/bio-0.39.0/src/pattern_matching/myers/mod.rs","byte_start":557619,"byte_end":557720,"line_start":22,"line_end":22,"column_start":1,"column_end":97}},{"value":"/ using edit distance. Bioinformatics 33, 1394–1395.*","span":{"file_name":"/Users/shelwitz/.cargo/registry/src/github.com-1ecc6299db9ec823/bio-0.39.0/src/pattern_matching/myers/mod.rs","byte_start":557721,"byte_end":557778,"line_start":23,"line_end":23,"column_start":1,"column_end":56}},{"value":"/","span":{"file_name":"/Users/shelwitz/.cargo/registry/src/github.com-1ecc6299db9ec823/bio-0.39.0/src/pattern_matching/myers/mod.rs","byte_start":557779,"byte_end":557782,"line_start":24,"line_end":24,"column_start":1,"column_end":4}},{"value":"/ # Example","span":{"file_name":"/Users/shelwitz/.cargo/registry/src/github.com-1ecc6299db9ec823/bio-0.39.0/src/pattern_matching/myers/mod.rs","byte_start":557783,"byte_end":557796,"line_start":25,"line_end":25,"column_start":1,"column_end":14}},{"value":"/","span":{"file_name":"/Users/shelwitz/.cargo/registry/src/github.com-1ecc6299db9ec823/bio-0.39.0/src/pattern_matching/myers/mod.rs","byte_start":557797,"byte_end":557800,"line_start":26,"line_end":26,"column_start":1,"column_end":4}},{"value":"/ Iterating over matches in pairs of `(end, distance)` using `u64` as bitvector type:","span":{"file_name":"/Users/shelwitz/.cargo/registry/src/github.com-1ecc6299db9ec823/bio-0.39.0/src/pattern_matching/myers/mod.rs","byte_start":557801,"byte_end":557888,"line_start":27,"line_end":27,"column_start":1,"column_end":88}},{"value":"/","span":{"file_name":"/Users/shelwitz/.cargo/registry/src/github.com-1ecc6299db9ec823/bio-0.39.0/src/pattern_matching/myers/mod.rs","byte_start":557889,"byte_end":557892,"line_start":28,"line_end":28,"column_start":1,"column_end":4}},{"value":"/ ```","span":{"file_name":"/Users/shelwitz/.cargo/registry/src/github.com-1ecc6299db9ec823/bio-0.39.0/src/pattern_matching/myers/mod.rs","byte_start":557893,"byte_end":557900,"line_start":29,"line_end":29,"column_start":1,"column_end":8}},{"value":"/ # extern crate bio;","span":{"file_name":"/Users/shelwitz/.cargo/registry/src/github.com-1ecc6299db9ec823/bio-0.39.0/src/pattern_matching/myers/mod.rs","byte_start":557901,"byte_end":557924,"line_start":30,"line_end":30,"column_start":1,"column_end":24}},{"value":"/ use bio::pattern_matching::myers::Myers;","span":{"file_name":"/Users/shelwitz/.cargo/registry/src/github.com-1ecc6299db9ec823/bio-0.39.0/src/pattern_matching/myers/mod.rs","byte_start":557925,"byte_end":557969,"line_start":31,"line_end":31,"column_start":1,"column_end":45}},{"value":"/","span":{"file_name":"/Users/shelwitz/.cargo/registry/src/github.com-1ecc6299db9ec823/bio-0.39.0/src/pattern_matching/myers/mod.rs","byte_start":557970,"byte_end":557973,"line_start":32,"line_end":32,"column_start":1,"column_end":4}},{"value":"/ # fn main() {","span":{"file_name":"/Users/shelwitz/.cargo/registry/src/github.com-1ecc6299db9ec823/bio-0.39.0/src/pattern_matching/myers/mod.rs","byte_start":557974,"byte_end":557991,"line_start":33,"line_end":33,"column_start":1,"column_end":18}},{"value":"/ let text = b\"CGGTCCTGAGGGATTAGCAC\";","span":{"file_name":"/Users/shelwitz/.cargo/registry/src/github.com-1ecc6299db9ec823/bio-0.39.0/src/pattern_matching/myers/mod.rs","byte_start":557992,"byte_end":558031,"line_start":34,"line_end":34,"column_start":1,"column_end":40}},{"value":"/ let pattern = b\"TCCTAGGGC\";","span":{"file_name":"/Users/shelwitz/.cargo/registry/src/github.com-1ecc6299db9ec823/bio-0.39.0/src/pattern_matching/myers/mod.rs","byte_start":558032,"byte_end":558063,"line_start":35,"line_end":35,"column_start":1,"column_end":32}},{"value":"/","span":{"file_name":"/Users/shelwitz/.cargo/registry/src/github.com-1ecc6299db9ec823/bio-0.39.0/src/pattern_matching/myers/mod.rs","byte_start":558064,"byte_end":558067,"line_start":36,"line_end":36,"column_start":1,"column_end":4}},{"value":"/ let myers = Myers::<u64>::new(pattern);","span":{"file_name":"/Users/shelwitz/.cargo/registry/src/github.com-1ecc6299db9ec823/bio-0.39.0/src/pattern_matching/myers/mod.rs","byte_start":558068,"byte_end":558111,"line_start":37,"line_end":37,"column_start":1,"column_end":44}},{"value":"/ let occ: Vec<_> = myers.find_all_end(text, 2).collect();","span":{"file_name":"/Users/shelwitz/.cargo/registry/src/github.com-1ecc6299db9ec823/bio-0.39.0/src/pattern_matching/myers/mod.rs","byte_start":558112,"byte_end":558172,"line_start":38,"line_end":38,"column_start":1,"column_end":61}},{"value":"/","span":{"file_name":"/Users/shelwitz/.cargo/registry/src/github.com-1ecc6299db9ec823/bio-0.39.0/src/pattern_matching/myers/mod.rs","byte_start":558173,"byte_end":558176,"line_start":39,"line_end":39,"column_start":1,"column_end":4}},{"value":"/ assert_eq!(occ, [(11, 2), (12, 2)]);","span":{"file_name":"/Users/shelwitz/.cargo/registry/src/github.com-1ecc6299db9ec823/bio-0.39.0/src/pattern_matching/myers/mod.rs","byte_start":558177,"byte_end":558217,"line_start":40,"line_end":40,"column_start":1,"column_end":41}},{"value":"/ # }","span":{"file_name":"/Users/shelwitz/.cargo/registry/src/github.com-1ecc6299db9ec823/bio-0.39.0/src/pattern_matching/myers/mod.rs","byte_start":558218,"byte_end":558225,"line_start":41,"line_end":41,"column_start":1,"column_end":8}},{"value":"/ ```","span":{"file_name":"/Users/shelwitz/.cargo/registry/src/github.com-1ecc6299db9ec823/bio-0.39.0/src/pattern_matching/myers/mod.rs","byte_start":558226,"byte_end":558233,"line_start":42,"line_end":42,"column_start":1,"column_end":8}},{"value":"/","span":{"file_name":"/Users/shelwitz/.cargo/registry/src/github.com-1ecc6299db9ec823/bio-0.39.0/src/pattern_matching/myers/mod.rs","byte_start":558234,"byte_end":558237,"line_start":43,"line_end":43,"column_start":1,"column_end":4}},{"value":"/ Starting with stable Rust 1.26, it is also possible to use `u128` as bitvector","span":{"file_name":"/Users/shelwitz/.cargo/registry/src/github.com-1ecc6299db9ec823/bio-0.39.0/src/pattern_matching/myers/mod.rs","byte_start":558238,"byte_end":558320,"line_start":44,"line_end":44,"column_start":1,"column_end":83}},{"value":"/ (`Myers::<u128>`), which enables longer patterns, but is somewhat slower.","span":{"file_name":"/Users/shelwitz/.cargo/registry/src/github.com-1ecc6299db9ec823/bio-0.39.0/src/pattern_matching/myers/mod.rs","byte_start":558321,"byte_end":558398,"line_start":45,"line_end":45,"column_start":1,"column_end":78}},{"value":"/","span":{"file_name":"/Users/shelwitz/.cargo/registry/src/github.com-1ecc6299db9ec823/bio-0.39.0/src/pattern_matching/myers/mod.rs","byte_start":558399,"byte_end":558402,"line_start":46,"line_end":46,"column_start":1,"column_end":4}},{"value":"/ # Long patterns","span":{"file_name":"/Users/shelwitz/.cargo/registry/src/github.com-1ecc6299db9ec823/bio-0.39.0/src/pattern_matching/myers/mod.rs","byte_start":558403,"byte_end":558422,"line_start":47,"line_end":47,"column_start":1,"column_end":20}},{"value":"/","span":{"file_name":"/Users/shelwitz/.cargo/registry/src/github.com-1ecc6299db9ec823/bio-0.39.0/src/pattern_matching/myers/mod.rs","byte_start":558423,"byte_end":558426,"line_start":48,"line_end":48,"column_start":1,"column_end":4}},{"value":"/ With the default implementation, query (pattern) length is limited by the size of the","span":{"file_name":"/Users/shelwitz/.cargo/registry/src/github.com-1ecc6299db9ec823/bio-0.39.0/src/pattern_matching/myers/mod.rs","byte_start":558427,"byte_end":558516,"line_start":49,"line_end":49,"column_start":1,"column_end":90}},{"value":"/ bit-vector; 64 symbols for `Myers::<u64>`. Patterns longer than 128 symbols (when using","span":{"file_name":"/Users/shelwitz/.cargo/registry/src/github.com-1ecc6299db9ec823/bio-0.39.0/src/pattern_matching/myers/mod.rs","byte_start":558517,"byte_end":558608,"line_start":50,"line_end":50,"column_start":1,"column_end":92}},{"value":"/ `u128` as bit-vector) can only be handled by using the block-based Myers implementation,","span":{"file_name":"/Users/shelwitz/.cargo/registry/src/github.com-1ecc6299db9ec823/bio-0.39.0/src/pattern_matching/myers/mod.rs","byte_start":558609,"byte_end":558701,"line_start":51,"line_end":51,"column_start":1,"column_end":93}},{"value":"/ which lives in the [`long`](long/index.html) submodule. An example:","span":{"file_name":"/Users/shelwitz/.cargo/registry/src/github.com-1ecc6299db9ec823/bio-0.39.0/src/pattern_matching/myers/mod.rs","byte_start":558702,"byte_end":558773,"line_start":52,"line_end":52,"column_start":1,"column_end":72}},{"value":"/","span":{"file_name":"/Users/shelwitz/.cargo/registry/src/github.com-1ecc6299db9ec823/bio-0.39.0/src/pattern_matching/myers/mod.rs","byte_start":558774,"byte_end":558777,"line_start":53,"line_end":53,"column_start":1,"column_end":4}},{"value":"/ ```","span":{"file_name":"/Users/shelwitz/.cargo/registry/src/github.com-1ecc6299db9ec823/bio-0.39.0/src/pattern_matching/myers/mod.rs","byte_start":558778,"byte_end":558785,"line_start":54,"line_end":54,"column_start":1,"column_end":8}},{"value":"/ # extern crate bio;","span":{"file_name":"/Users/shelwitz/.cargo/registry/src/github.com-1ecc6299db9ec823/bio-0.39.0/src/pattern_matching/myers/mod.rs","byte_start":558786,"byte_end":558809,"line_start":55,"line_end":55,"column_start":1,"column_end":24}},{"value":"/ use bio::pattern_matching::myers::{long, Myers};","span":{"file_name":"/Users/shelwitz/.cargo/registry/src/github.com-1ecc6299db9ec823/bio-0.39.0/src/pattern_matching/myers/mod.rs","byte_start":558810,"byte_end":558862,"line_start":56,"line_end":56,"column_start":1,"column_end":53}},{"value":"/","span":{"file_name":"/Users/shelwitz/.cargo/registry/src/github.com-1ecc6299db9ec823/bio-0.39.0/src/pattern_matching/myers/mod.rs","byte_start":558863,"byte_end":558866,"line_start":57,"line_end":57,"column_start":1,"column_end":4}},{"value":"/ # fn main() {","span":{"file_name":"/Users/shelwitz/.cargo/registry/src/github.com-1ecc6299db9ec823/bio-0.39.0/src/pattern_matching/myers/mod.rs","byte_start":558867,"byte_end":558884,"line_start":58,"line_end":58,"column_start":1,"column_end":18}},{"value":"/ let text = b\"CGGTCCTGAGGGATTAGCAC\";","span":{"file_name":"/Users/shelwitz/.cargo/registry/src/github.com-1ecc6299db9ec823/bio-0.39.0/src/pattern_matching/myers/mod.rs","byte_start":558885,"byte_end":558924,"line_start":59,"line_end":59,"column_start":1,"column_end":40}},{"value":"/ let pattern = b\"TCCTAGGGC\";","span":{"file_name":"/Users/shelwitz/.cargo/registry/src/github.com-1ecc6299db9ec823/bio-0.39.0/src/pattern_matching/myers/mod.rs","byte_start":558925,"byte_end":558956,"line_start":60,"line_end":60,"column_start":1,"column_end":32}},{"value":"/","span":{"file_name":"/Users/shelwitz/.cargo/registry/src/github.com-1ecc6299db9ec823/bio-0.39.0/src/pattern_matching/myers/mod.rs","byte_start":558957,"byte_end":558960,"line_start":61,"line_end":61,"column_start":1,"column_end":4}},{"value":"/ let myers_64 = Myers::<u64>::new(pattern);","span":{"file_name":"/Users/shelwitz/.cargo/registry/src/github.com-1ecc6299db9ec823/bio-0.39.0/src/pattern_matching/myers/mod.rs","byte_start":558961,"byte_end":559007,"line_start":62,"line_end":62,"column_start":1,"column_end":47}},{"value":"/ let occ_64: Vec<_> = myers_64.find_all_end(text, 2).collect();","span":{"file_name":"/Users/shelwitz/.cargo/registry/src/github.com-1ecc6299db9ec823/bio-0.39.0/src/pattern_matching/myers/mod.rs","byte_start":559008,"byte_end":559074,"line_start":63,"line_end":63,"column_start":1,"column_end":67}},{"value":"/","span":{"file_name":"/Users/shelwitz/.cargo/registry/src/github.com-1ecc6299db9ec823/bio-0.39.0/src/pattern_matching/myers/mod.rs","byte_start":559075,"byte_end":559078,"line_start":64,"line_end":64,"column_start":1,"column_end":4}},{"value":"/ // the pattern of length 9 is too long to fit into a single `u8` bit-vector","span":{"file_name":"/Users/shelwitz/.cargo/registry/src/github.com-1ecc6299db9ec823/bio-0.39.0/src/pattern_matching/myers/mod.rs","byte_start":559079,"byte_end":559158,"line_start":65,"line_end":65,"column_start":1,"column_end":80}},{"value":"/ // (panics!)","span":{"file_name":"/Users/shelwitz/.cargo/registry/src/github.com-1ecc6299db9ec823/bio-0.39.0/src/pattern_matching/myers/mod.rs","byte_start":559159,"byte_end":559175,"line_start":66,"line_end":66,"column_start":1,"column_end":17}},{"value":"/ // let myers_8 = Myers::<u8>::new(pattern);","span":{"file_name":"/Users/shelwitz/.cargo/registry/src/github.com-1ecc6299db9ec823/bio-0.39.0/src/pattern_matching/myers/mod.rs","byte_start":559176,"byte_end":559223,"line_start":67,"line_end":67,"column_start":1,"column_end":48}},{"value":"/","span":{"file_name":"/Users/shelwitz/.cargo/registry/src/github.com-1ecc6299db9ec823/bio-0.39.0/src/pattern_matching/myers/mod.rs","byte_start":559224,"byte_end":559227,"line_start":68,"line_end":68,"column_start":1,"column_end":4}},{"value":"/ // However, we can use the block-based implementation with `u8` bit-vectors","span":{"file_name":"/Users/shelwitz/.cargo/registry/src/github.com-1ecc6299db9ec823/bio-0.39.0/src/pattern_matching/myers/mod.rs","byte_start":559228,"byte_end":559307,"line_start":69,"line_end":69,"column_start":1,"column_end":80}},{"value":"/ let myers_long_8 = long::Myers::<u8>::new(pattern);","span":{"file_name":"/Users/shelwitz/.cargo/registry/src/github.com-1ecc6299db9ec823/bio-0.39.0/src/pattern_matching/myers/mod.rs","byte_start":559308,"byte_end":559363,"line_start":70,"line_end":70,"column_start":1,"column_end":56}},{"value":"/ let occ_long_8: Vec<_> = myers_long_8","span":{"file_name":"/Users/shelwitz/.cargo/registry/src/github.com-1ecc6299db9ec823/bio-0.39.0/src/pattern_matching/myers/mod.rs","byte_start":559364,"byte_end":559405,"line_start":71,"line_end":71,"column_start":1,"column_end":42}},{"value":"/     .find_all_end(text, 2)","span":{"file_name":"/Users/shelwitz/.cargo/registry/src/github.com-1ecc6299db9ec823/bio-0.39.0/src/pattern_matching/myers/mod.rs","byte_start":559406,"byte_end":559436,"line_start":72,"line_end":72,"column_start":1,"column_end":31}},{"value":"/     .map(|(end, dist)| (end, dist as u8))","span":{"file_name":"/Users/shelwitz/.cargo/registry/src/github.com-1ecc6299db9ec823/bio-0.39.0/src/pattern_matching/myers/mod.rs","byte_start":559437,"byte_end":559482,"line_start":73,"line_end":73,"column_start":1,"column_end":46}},{"value":"/     .collect();","span":{"file_name":"/Users/shelwitz/.cargo/registry/src/github.com-1ecc6299db9ec823/bio-0.39.0/src/pattern_matching/myers/mod.rs","byte_start":559483,"byte_end":559502,"line_start":74,"line_end":74,"column_start":1,"column_end":20}},{"value":"/","span":{"file_name":"/Users/shelwitz/.cargo/registry/src/github.com-1ecc6299db9ec823/bio-0.39.0/src/pattern_matching/myers/mod.rs","byte_start":559503,"byte_end":559506,"line_start":75,"line_end":75,"column_start":1,"column_end":4}},{"value":"/ assert_eq!(occ_64, occ_long_8);","span":{"file_name":"/Users/shelwitz/.cargo/registry/src/github.com-1ecc6299db9ec823/bio-0.39.0/src/pattern_matching/myers/mod.rs","byte_start":559507,"byte_end":559542,"line_start":76,"line_end":76,"column_start":1,"column_end":36}},{"value":"/ # }","span":{"file_name":"/Users/shelwitz/.cargo/registry/src/github.com-1ecc6299db9ec823/bio-0.39.0/src/pattern_matching/myers/mod.rs","byte_start":559543,"byte_end":559550,"line_start":77,"line_end":77,"column_start":1,"column_end":8}},{"value":"/ ```","span":{"file_name":"/Users/shelwitz/.cargo/registry/src/github.com-1ecc6299db9ec823/bio-0.39.0/src/pattern_matching/myers/mod.rs","byte_start":559551,"byte_end":559558,"line_start":78,"line_end":78,"column_start":1,"column_end":8}},{"value":"/ Note that `u8` just used for demonstration, using `u64` is still the best in most cases.","span":{"file_name":"/Users/shelwitz/.cargo/registry/src/github.com-1ecc6299db9ec823/bio-0.39.0/src/pattern_matching/myers/mod.rs","byte_start":559559,"byte_end":559651,"line_start":79,"line_end":79,"column_start":1,"column_end":93}},{"value":"/","span":{"file_name":"/Users/shelwitz/.cargo/registry/src/github.com-1ecc6299db9ec823/bio-0.39.0/src/pattern_matching/myers/mod.rs","byte_start":559652,"byte_end":559655,"line_start":80,"line_end":80,"column_start":1,"column_end":4}},{"value":"/ # Obtaining the starting position of a match","span":{"file_name":"/Users/shelwitz/.cargo/registry/src/github.com-1ecc6299db9ec823/bio-0.39.0/src/pattern_matching/myers/mod.rs","byte_start":559656,"byte_end":559704,"line_start":81,"line_end":81,"column_start":1,"column_end":49}},{"value":"/","span":{"file_name":"/Users/shelwitz/.cargo/registry/src/github.com-1ecc6299db9ec823/bio-0.39.0/src/pattern_matching/myers/mod.rs","byte_start":559705,"byte_end":559708,"line_start":82,"line_end":82,"column_start":1,"column_end":4}},{"value":"/ The `Myers::find_all` method provides an iterator over tuples of `(start, end, distance)`.","span":{"file_name":"/Users/shelwitz/.cargo/registry/src/github.com-1ecc6299db9ec823/bio-0.39.0/src/pattern_matching/myers/mod.rs","byte_start":559709,"byte_end":559803,"line_start":83,"line_end":83,"column_start":1,"column_end":95}},{"value":"/ Calculating the starting position requires finding the alignment path, therefore this is","span":{"file_name":"/Users/shelwitz/.cargo/registry/src/github.com-1ecc6299db9ec823/bio-0.39.0/src/pattern_matching/myers/mod.rs","byte_start":559804,"byte_end":559896,"line_start":84,"line_end":84,"column_start":1,"column_end":93}},{"value":"/ slower than `Myers::find_all_end`. Note that the end positions differ from above by one.","span":{"file_name":"/Users/shelwitz/.cargo/registry/src/github.com-1ecc6299db9ec823/bio-0.39.0/src/pattern_matching/myers/mod.rs","byte_start":559897,"byte_end":559989,"line_start":85,"line_end":85,"column_start":1,"column_end":93}},{"value":"/ This is intentional, as the iterator returns a range rather an index, and ranges in Rust","span":{"file_name":"/Users/shelwitz/.cargo/registry/src/github.com-1ecc6299db9ec823/bio-0.39.0/src/pattern_matching/myers/mod.rs","byte_start":559990,"byte_end":560082,"line_start":86,"line_end":86,"column_start":1,"column_end":93}},{"value":"/ do not include the end position by default.","span":{"file_name":"/Users/shelwitz/.cargo/registry/src/github.com-1ecc6299db9ec823/bio-0.39.0/src/pattern_matching/myers/mod.rs","byte_start":560083,"byte_end":560130,"line_start":87,"line_end":87,"column_start":1,"column_end":48}},{"value":"/","span":{"file_name":"/Users/shelwitz/.cargo/registry/src/github.com-1ecc6299db9ec823/bio-0.39.0/src/pattern_matching/myers/mod.rs","byte_start":560131,"byte_end":560134,"line_start":88,"line_end":88,"column_start":1,"column_end":4}},{"value":"/ ```","span":{"file_name":"/Users/shelwitz/.cargo/registry/src/github.com-1ecc6299db9ec823/bio-0.39.0/src/pattern_matching/myers/mod.rs","byte_start":560135,"byte_end":560142,"line_start":89,"line_end":89,"column_start":1,"column_end":8}},{"value":"/ # extern crate bio;","span":{"file_name":"/Users/shelwitz/.cargo/registry/src/github.com-1ecc6299db9ec823/bio-0.39.0/src/pattern_matching/myers/mod.rs","byte_start":560143,"byte_end":560166,"line_start":90,"line_end":90,"column_start":1,"column_end":24}},{"value":"/ use bio::pattern_matching::myers::Myers;","span":{"file_name":"/Users/shelwitz/.cargo/registry/src/github.com-1ecc6299db9ec823/bio-0.39.0/src/pattern_matching/myers/mod.rs","byte_start":560167,"byte_end":560211,"line_start":91,"line_end":91,"column_start":1,"column_end":45}},{"value":"/","span":{"file_name":"/Users/shelwitz/.cargo/registry/src/github.com-1ecc6299db9ec823/bio-0.39.0/src/pattern_matching/myers/mod.rs","byte_start":560212,"byte_end":560215,"line_start":92,"line_end":92,"column_start":1,"column_end":4}},{"value":"/ # fn main() {","span":{"file_name":"/Users/shelwitz/.cargo/registry/src/github.com-1ecc6299db9ec823/bio-0.39.0/src/pattern_matching/myers/mod.rs","byte_start":560216,"byte_end":560233,"line_start":93,"line_end":93,"column_start":1,"column_end":18}},{"value":"/ let text = b\"CGGTCCTGAGGGATTAGCAC\";","span":{"file_name":"/Users/shelwitz/.cargo/registry/src/github.com-1ecc6299db9ec823/bio-0.39.0/src/pattern_matching/myers/mod.rs","byte_start":560234,"byte_end":560273,"line_start":94,"line_end":94,"column_start":1,"column_end":40}},{"value":"/ let pattern = b\"TCCTAGGGC\";","span":{"file_name":"/Users/shelwitz/.cargo/registry/src/github.com-1ecc6299db9ec823/bio-0.39.0/src/pattern_matching/myers/mod.rs","byte_start":560274,"byte_end":560305,"line_start":95,"line_end":95,"column_start":1,"column_end":32}},{"value":"/","span":{"file_name":"/Users/shelwitz/.cargo/registry/src/github.com-1ecc6299db9ec823/bio-0.39.0/src/pattern_matching/myers/mod.rs","byte_start":560306,"byte_end":560309,"line_start":96,"line_end":96,"column_start":1,"column_end":4}},{"value":"/ let mut myers = Myers::<u64>::new(pattern);","span":{"file_name":"/Users/shelwitz/.cargo/registry/src/github.com-1ecc6299db9ec823/bio-0.39.0/src/pattern_matching/myers/mod.rs","byte_start":560310,"byte_end":560357,"line_start":97,"line_end":97,"column_start":1,"column_end":48}},{"value":"/ let occ: Vec<_> = myers.find_all(text, 2).collect();","span":{"file_name":"/Users/shelwitz/.cargo/registry/src/github.com-1ecc6299db9ec823/bio-0.39.0/src/pattern_matching/myers/mod.rs","byte_start":560358,"byte_end":560414,"line_start":98,"line_end":98,"column_start":1,"column_end":57}},{"value":"/","span":{"file_name":"/Users/shelwitz/.cargo/registry/src/github.com-1ecc6299db9ec823/bio-0.39.0/src/pattern_matching/myers/mod.rs","byte_start":560415,"byte_end":560418,"line_start":99,"line_end":99,"column_start":1,"column_end":4}},{"value":"/ assert_eq!(occ, [(3, 12, 2), (3, 13, 2)]);","span":{"file_name":"/Users/shelwitz/.cargo/registry/src/github.com-1ecc6299db9ec823/bio-0.39.0/src/pattern_matching/myers/mod.rs","byte_start":560419,"byte_end":560465,"line_start":100,"line_end":100,"column_start":1,"column_end":47}},{"value":"/ # }","span":{"file_name":"/Users/shelwitz/.cargo/registry/src/github.com-1ecc6299db9ec823/bio-0.39.0/src/pattern_matching/myers/mod.rs","byte_start":560466,"byte_end":560473,"line_start":101,"line_end":101,"column_start":1,"column_end":8}},{"value":"/ ```","span":{"file_name":"/Users/shelwitz/.cargo/registry/src/github.com-1ecc6299db9ec823/bio-0.39.0/src/pattern_matching/myers/mod.rs","byte_start":560474,"byte_end":560481,"line_start":102,"line_end":102,"column_start":1,"column_end":8}},{"value":"/","span":{"file_name":"/Users/shelwitz/.cargo/registry/src/github.com-1ecc6299db9ec823/bio-0.39.0/src/pattern_matching/myers/mod.rs","byte_start":560482,"byte_end":560485,"line_start":103,"line_end":103,"column_start":1,"column_end":4}},{"value":"/ # Obtaining alignments","span":{"file_name":"/Users/shelwitz/.cargo/registry/src/github.com-1ecc6299db9ec823/bio-0.39.0/src/pattern_matching/myers/mod.rs","byte_start":560486,"byte_end":560512,"line_start":104,"line_end":104,"column_start":1,"column_end":27}},{"value":"/","span":{"file_name":"/Users/shelwitz/.cargo/registry/src/github.com-1ecc6299db9ec823/bio-0.39.0/src/pattern_matching/myers/mod.rs","byte_start":560513,"byte_end":560516,"line_start":105,"line_end":105,"column_start":1,"column_end":4}},{"value":"/ [`FullMatches`](struct.FullMatches.html) returned by `Myers::find_all()` also provide a method","span":{"file_name":"/Users/shelwitz/.cargo/registry/src/github.com-1ecc6299db9ec823/bio-0.39.0/src/pattern_matching/myers/mod.rs","byte_start":560517,"byte_end":560615,"line_start":106,"line_end":106,"column_start":1,"column_end":99}},{"value":"/ for obtaining an alignment path:","span":{"file_name":"/Users/shelwitz/.cargo/registry/src/github.com-1ecc6299db9ec823/bio-0.39.0/src/pattern_matching/myers/mod.rs","byte_start":560616,"byte_end":560652,"line_start":107,"line_end":107,"column_start":1,"column_end":37}},{"value":"/","span":{"file_name":"/Users/shelwitz/.cargo/registry/src/github.com-1ecc6299db9ec823/bio-0.39.0/src/pattern_matching/myers/mod.rs","byte_start":560653,"byte_end":560656,"line_start":108,"line_end":108,"column_start":1,"column_end":4}},{"value":"/ ```","span":{"file_name":"/Users/shelwitz/.cargo/registry/src/github.com-1ecc6299db9ec823/bio-0.39.0/src/pattern_matching/myers/mod.rs","byte_start":560657,"byte_end":560664,"line_start":109,"line_end":109,"column_start":1,"column_end":8}},{"value":"/ # extern crate bio;","span":{"file_name":"/Users/shelwitz/.cargo/registry/src/github.com-1ecc6299db9ec823/bio-0.39.0/src/pattern_matching/myers/mod.rs","byte_start":560665,"byte_end":560688,"line_start":110,"line_end":110,"column_start":1,"column_end":24}},{"value":"/ use bio::alignment::Alignment;","span":{"file_name":"/Users/shelwitz/.cargo/registry/src/github.com-1ecc6299db9ec823/bio-0.39.0/src/pattern_matching/myers/mod.rs","byte_start":560689,"byte_end":560723,"line_start":111,"line_end":111,"column_start":1,"column_end":35}},{"value":"/ use bio::pattern_matching::myers::Myers;","span":{"file_name":"/Users/shelwitz/.cargo/registry/src/github.com-1ecc6299db9ec823/bio-0.39.0/src/pattern_matching/myers/mod.rs","byte_start":560724,"byte_end":560768,"line_start":112,"line_end":112,"column_start":1,"column_end":45}},{"value":"/","span":{"file_name":"/Users/shelwitz/.cargo/registry/src/github.com-1ecc6299db9ec823/bio-0.39.0/src/pattern_matching/myers/mod.rs","byte_start":560769,"byte_end":560772,"line_start":113,"line_end":113,"column_start":1,"column_end":4}},{"value":"/ # fn main() {","span":{"file_name":"/Users/shelwitz/.cargo/registry/src/github.com-1ecc6299db9ec823/bio-0.39.0/src/pattern_matching/myers/mod.rs","byte_start":560773,"byte_end":560790,"line_start":114,"line_end":114,"column_start":1,"column_end":18}},{"value":"/ let text = b\"CGGTCCTGAGGGATTAGCAC\";","span":{"file_name":"/Users/shelwitz/.cargo/registry/src/github.com-1ecc6299db9ec823/bio-0.39.0/src/pattern_matching/myers/mod.rs","byte_start":560791,"byte_end":560830,"line_start":115,"line_end":115,"column_start":1,"column_end":40}},{"value":"/ let pattern = b\"TCCTAGGGC\";","span":{"file_name":"/Users/shelwitz/.cargo/registry/src/github.com-1ecc6299db9ec823/bio-0.39.0/src/pattern_matching/myers/mod.rs","byte_start":560831,"byte_end":560862,"line_start":116,"line_end":116,"column_start":1,"column_end":32}},{"value":"/","span":{"file_name":"/Users/shelwitz/.cargo/registry/src/github.com-1ecc6299db9ec823/bio-0.39.0/src/pattern_matching/myers/mod.rs","byte_start":560863,"byte_end":560866,"line_start":117,"line_end":117,"column_start":1,"column_end":4}},{"value":"/ let mut myers = Myers::<u64>::new(pattern);","span":{"file_name":"/Users/shelwitz/.cargo/registry/src/github.com-1ecc6299db9ec823/bio-0.39.0/src/pattern_matching/myers/mod.rs","byte_start":560867,"byte_end":560914,"line_start":118,"line_end":118,"column_start":1,"column_end":48}},{"value":"/ // create an 'empty' alignment instance, which can be reused","span":{"file_name":"/Users/shelwitz/.cargo/registry/src/github.com-1ecc6299db9ec823/bio-0.39.0/src/pattern_matching/myers/mod.rs","byte_start":560915,"byte_end":560979,"line_start":119,"line_end":119,"column_start":1,"column_end":65}},{"value":"/ let mut aln = Alignment::default();","span":{"file_name":"/Users/shelwitz/.cargo/registry/src/github.com-1ecc6299db9ec823/bio-0.39.0/src/pattern_matching/myers/mod.rs","byte_start":560980,"byte_end":561019,"line_start":120,"line_end":120,"column_start":1,"column_end":40}},{"value":"/","span":{"file_name":"/Users/shelwitz/.cargo/registry/src/github.com-1ecc6299db9ec823/bio-0.39.0/src/pattern_matching/myers/mod.rs","byte_start":561020,"byte_end":561023,"line_start":121,"line_end":121,"column_start":1,"column_end":4}},{"value":"/ let mut matches = myers.find_all(text, 3);","span":{"file_name":"/Users/shelwitz/.cargo/registry/src/github.com-1ecc6299db9ec823/bio-0.39.0/src/pattern_matching/myers/mod.rs","byte_start":561024,"byte_end":561070,"line_start":122,"line_end":122,"column_start":1,"column_end":47}},{"value":"/ while matches.next_alignment(&mut aln) {","span":{"file_name":"/Users/shelwitz/.cargo/registry/src/github.com-1ecc6299db9ec823/bio-0.39.0/src/pattern_matching/myers/mod.rs","byte_start":561071,"byte_end":561115,"line_start":123,"line_end":123,"column_start":1,"column_end":45}},{"value":"/     //println!(\"Hit fond in range: {}..{} (distance: {})\", aln.ystart, aln.yend, aln.score);","span":{"file_name":"/Users/shelwitz/.cargo/registry/src/github.com-1ecc6299db9ec823/bio-0.39.0/src/pattern_matching/myers/mod.rs","byte_start":561116,"byte_end":561212,"line_start":124,"line_end":124,"column_start":1,"column_end":97}},{"value":"/     //println!(\"{}\", aln.pretty(pattern, text));","span":{"file_name":"/Users/shelwitz/.cargo/registry/src/github.com-1ecc6299db9ec823/bio-0.39.0/src/pattern_matching/myers/mod.rs","byte_start":561213,"byte_end":561265,"line_start":125,"line_end":125,"column_start":1,"column_end":53}},{"value":"/ }","span":{"file_name":"/Users/shelwitz/.cargo/registry/src/github.com-1ecc6299db9ec823/bio-0.39.0/src/pattern_matching/myers/mod.rs","byte_start":561266,"byte_end":561271,"line_start":126,"line_end":126,"column_start":1,"column_end":6}},{"value":"/ # }","span":{"file_name":"/Users/shelwitz/.cargo/registry/src/github.com-1ecc6299db9ec823/bio-0.39.0/src/pattern_matching/myers/mod.rs","byte_start":561272,"byte_end":561279,"line_start":127,"line_end":127,"column_start":1,"column_end":8}},{"value":"/ ```","span":{"file_name":"/Users/shelwitz/.cargo/registry/src/github.com-1ecc6299db9ec823/bio-0.39.0/src/pattern_matching/myers/mod.rs","byte_start":561280,"byte_end":561287,"line_start":128,"line_end":128,"column_start":1,"column_end":8}},{"value":"/ **Output:**","span":{"file_name":"/Users/shelwitz/.cargo/registry/src/github.com-1ecc6299db9ec823/bio-0.39.0/src/pattern_matching/myers/mod.rs","byte_start":561288,"byte_end":561303,"line_start":129,"line_end":129,"column_start":1,"column_end":16}},{"value":"/","span":{"file_name":"/Users/shelwitz/.cargo/registry/src/github.com-1ecc6299db9ec823/bio-0.39.0/src/pattern_matching/myers/mod.rs","byte_start":561304,"byte_end":561307,"line_start":130,"line_end":130,"column_start":1,"column_end":4}},{"value":"/ <pre>","span":{"file_name":"/Users/shelwitz/.cargo/registry/src/github.com-1ecc6299db9ec823/bio-0.39.0/src/pattern_matching/myers/mod.rs","byte_start":561308,"byte_end":561317,"line_start":131,"line_end":131,"column_start":1,"column_end":10}},{"value":"/ Hit fond in range: 3..10 (distance: 3)","span":{"file_name":"/Users/shelwitz/.cargo/registry/src/github.com-1ecc6299db9ec823/bio-0.39.0/src/pattern_matching/myers/mod.rs","byte_start":561318,"byte_end":561360,"line_start":132,"line_end":132,"column_start":1,"column_end":43}},{"value":"/    TCCTAGGGC","span":{"file_name":"/Users/shelwitz/.cargo/registry/src/github.com-1ecc6299db9ec823/bio-0.39.0/src/pattern_matching/myers/mod.rs","byte_start":561361,"byte_end":561377,"line_start":133,"line_end":133,"column_start":1,"column_end":17}},{"value":"/    ||||+|\\|+","span":{"file_name":"/Users/shelwitz/.cargo/registry/src/github.com-1ecc6299db9ec823/bio-0.39.0/src/pattern_matching/myers/mod.rs","byte_start":561378,"byte_end":561394,"line_start":134,"line_end":134,"column_start":1,"column_end":17}},{"value":"/ TCCTCCT-GAG-GGATTAGCAC","span":{"file_name":"/Users/shelwitz/.cargo/registry/src/github.com-1ecc6299db9ec823/bio-0.39.0/src/pattern_matching/myers/mod.rs","byte_start":561395,"byte_end":561421,"line_start":135,"line_end":135,"column_start":1,"column_end":27}},{"value":"/","span":{"file_name":"/Users/shelwitz/.cargo/registry/src/github.com-1ecc6299db9ec823/bio-0.39.0/src/pattern_matching/myers/mod.rs","byte_start":561422,"byte_end":561425,"line_start":136,"line_end":136,"column_start":1,"column_end":4}},{"value":"/ Hit fond in range: 3..11 (distance: 3)","span":{"file_name":"/Users/shelwitz/.cargo/registry/src/github.com-1ecc6299db9ec823/bio-0.39.0/src/pattern_matching/myers/mod.rs","byte_start":561426,"byte_end":561468,"line_start":137,"line_end":137,"column_start":1,"column_end":43}},{"value":"/    TCCTAGGGC","span":{"file_name":"/Users/shelwitz/.cargo/registry/src/github.com-1ecc6299db9ec823/bio-0.39.0/src/pattern_matching/myers/mod.rs","byte_start":561469,"byte_end":561485,"line_start":138,"line_end":138,"column_start":1,"column_end":17}},{"value":"/    ||||+|\\|\\","span":{"file_name":"/Users/shelwitz/.cargo/registry/src/github.com-1ecc6299db9ec823/bio-0.39.0/src/pattern_matching/myers/mod.rs","byte_start":561486,"byte_end":561502,"line_start":139,"line_end":139,"column_start":1,"column_end":17}},{"value":"/ TCCTCCT-GAGGGATTAGCAC","span":{"file_name":"/Users/shelwitz/.cargo/registry/src/github.com-1ecc6299db9ec823/bio-0.39.0/src/pattern_matching/myers/mod.rs","byte_start":561503,"byte_end":561528,"line_start":140,"line_end":140,"column_start":1,"column_end":26}},{"value":"/","span":{"file_name":"/Users/shelwitz/.cargo/registry/src/github.com-1ecc6299db9ec823/bio-0.39.0/src/pattern_matching/myers/mod.rs","byte_start":561529,"byte_end":561532,"line_start":141,"line_end":141,"column_start":1,"column_end":4}},{"value":"/ Hit fond in range: 3..12 (distance: 2)","span":{"file_name":"/Users/shelwitz/.cargo/registry/src/github.com-1ecc6299db9ec823/bio-0.39.0/src/pattern_matching/myers/mod.rs","byte_start":561533,"byte_end":561575,"line_start":142,"line_end":142,"column_start":1,"column_end":43}},{"value":"/    TCCT-AGGGC","span":{"file_name":"/Users/shelwitz/.cargo/registry/src/github.com-1ecc6299db9ec823/bio-0.39.0/src/pattern_matching/myers/mod.rs","byte_start":561576,"byte_end":561593,"line_start":143,"line_end":143,"column_start":1,"column_end":18}},{"value":"/    ||||x||||+","span":{"file_name":"/Users/shelwitz/.cargo/registry/src/github.com-1ecc6299db9ec823/bio-0.39.0/src/pattern_matching/myers/mod.rs","byte_start":561594,"byte_end":561611,"line_start":144,"line_end":144,"column_start":1,"column_end":18}},{"value":"/ TCCTCCTGAGGG-ATTAGCAC","span":{"file_name":"/Users/shelwitz/.cargo/registry/src/github.com-1ecc6299db9ec823/bio-0.39.0/src/pattern_matching/myers/mod.rs","byte_start":561612,"byte_end":561637,"line_start":145,"line_end":145,"column_start":1,"column_end":26}},{"value":"/","span":{"file_name":"/Users/shelwitz/.cargo/registry/src/github.com-1ecc6299db9ec823/bio-0.39.0/src/pattern_matching/myers/mod.rs","byte_start":561638,"byte_end":561641,"line_start":146,"line_end":146,"column_start":1,"column_end":4}},{"value":"/ Hit fond in range: 3..13 (distance: 2)","span":{"file_name":"/Users/shelwitz/.cargo/registry/src/github.com-1ecc6299db9ec823/bio-0.39.0/src/pattern_matching/myers/mod.rs","byte_start":561642,"byte_end":561684,"line_start":147,"line_end":147,"column_start":1,"column_end":43}},{"value":"/    TCCT-AGGGC","span":{"file_name":"/Users/shelwitz/.cargo/registry/src/github.com-1ecc6299db9ec823/bio-0.39.0/src/pattern_matching/myers/mod.rs","byte_start":561685,"byte_end":561702,"line_start":148,"line_end":148,"column_start":1,"column_end":18}},{"value":"/    ||||x||||\\","span":{"file_name":"/Users/shelwitz/.cargo/registry/src/github.com-1ecc6299db9ec823/bio-0.39.0/src/pattern_matching/myers/mod.rs","byte_start":561703,"byte_end":561720,"line_start":149,"line_end":149,"column_start":1,"column_end":18}},{"value":"/ TCCTCCTGAGGGATTAGCAC","span":{"file_name":"/Users/shelwitz/.cargo/registry/src/github.com-1ecc6299db9ec823/bio-0.39.0/src/pattern_matching/myers/mod.rs","byte_start":561721,"byte_end":561745,"line_start":150,"line_end":150,"column_start":1,"column_end":25}},{"value":"/","span":{"file_name":"/Users/shelwitz/.cargo/registry/src/github.com-1ecc6299db9ec823/bio-0.39.0/src/pattern_matching/myers/mod.rs","byte_start":561746,"byte_end":561749,"line_start":151,"line_end":151,"column_start":1,"column_end":4}},{"value":"/ ... (truncated)","span":{"file_name":"/Users/shelwitz/.cargo/registry/src/github.com-1ecc6299db9ec823/bio-0.39.0/src/pattern_matching/myers/mod.rs","byte_start":561750,"byte_end":561769,"line_start":152,"line_end":152,"column_start":1,"column_end":20}},{"value":"/","span":{"file_name":"/Users/shelwitz/.cargo/registry/src/github.com-1ecc6299db9ec823/bio-0.39.0/src/pattern_matching/myers/mod.rs","byte_start":561770,"byte_end":561773,"line_start":153,"line_end":153,"column_start":1,"column_end":4}},{"value":"/ </pre>","span":{"file_name":"/Users/shelwitz/.cargo/registry/src/github.com-1ecc6299db9ec823/bio-0.39.0/src/pattern_matching/myers/mod.rs","byte_start":561774,"byte_end":561784,"line_start":154,"line_end":154,"column_start":1,"column_end":11}},{"value":"/","span":{"file_name":"/Users/shelwitz/.cargo/registry/src/github.com-1ecc6299db9ec823/bio-0.39.0/src/pattern_matching/myers/mod.rs","byte_start":561785,"byte_end":561788,"line_start":155,"line_end":155,"column_start":1,"column_end":4}},{"value":"/ **Note** that the [`Alignment`](../../alignment/struct.Alignment.html) instance is only created","span":{"file_name":"/Users/shelwitz/.cargo/registry/src/github.com-1ecc6299db9ec823/bio-0.39.0/src/pattern_matching/myers/mod.rs","byte_start":561789,"byte_end":561888,"line_start":156,"line_end":156,"column_start":1,"column_end":100}},{"value":"/ once and then reused. Because the Myers algorithm is very fast, the allocation necessary for","span":{"file_name":"/Users/shelwitz/.cargo/registry/src/github.com-1ecc6299db9ec823/bio-0.39.0/src/pattern_matching/myers/mod.rs","byte_start":561889,"byte_end":561985,"line_start":157,"line_end":157,"column_start":1,"column_end":97}},{"value":"/ `Alignment::operations` can have a non-negligible impact on performance; and thus, recycling","span":{"file_name":"/Users/shelwitz/.cargo/registry/src/github.com-1ecc6299db9ec823/bio-0.39.0/src/pattern_matching/myers/mod.rs","byte_start":561986,"byte_end":562082,"line_start":158,"line_end":158,"column_start":1,"column_end":97}},{"value":"/ makes sense.","span":{"file_name":"/Users/shelwitz/.cargo/registry/src/github.com-1ecc6299db9ec823/bio-0.39.0/src/pattern_matching/myers/mod.rs","byte_start":562083,"byte_end":562099,"line_start":159,"line_end":159,"column_start":1,"column_end":17}},{"value":"/","span":{"file_name":"/Users/shelwitz/.cargo/registry/src/github.com-1ecc6299db9ec823/bio-0.39.0/src/pattern_matching/myers/mod.rs","byte_start":562100,"byte_end":562103,"line_start":160,"line_end":160,"column_start":1,"column_end":4}},{"value":"/ # Finding the best hit","span":{"file_name":"/Users/shelwitz/.cargo/registry/src/github.com-1ecc6299db9ec823/bio-0.39.0/src/pattern_matching/myers/mod.rs","byte_start":562104,"byte_end":562130,"line_start":161,"line_end":161,"column_start":1,"column_end":27}},{"value":"/","span":{"file_name":"/Users/shelwitz/.cargo/registry/src/github.com-1ecc6299db9ec823/bio-0.39.0/src/pattern_matching/myers/mod.rs","byte_start":562131,"byte_end":562134,"line_start":162,"line_end":162,"column_start":1,"column_end":4}},{"value":"/ In many cases, only the match with the smallest edit distance is actually of interest.","span":{"file_name":"/Users/shelwitz/.cargo/registry/src/github.com-1ecc6299db9ec823/bio-0.39.0/src/pattern_matching/myers/mod.rs","byte_start":562135,"byte_end":562225,"line_start":163,"line_end":163,"column_start":1,"column_end":91}},{"value":"/ Calculating an alignment for every hit is therefore not necessary.","span":{"file_name":"/Users/shelwitz/.cargo/registry/src/github.com-1ecc6299db9ec823/bio-0.39.0/src/pattern_matching/myers/mod.rs","byte_start":562226,"byte_end":562296,"line_start":164,"line_end":164,"column_start":1,"column_end":71}},{"value":"/ [`LazyMatches`](struct.LazyMatches.html) returned by `Myers::find_all_lazy()`","span":{"file_name":"/Users/shelwitz/.cargo/registry/src/github.com-1ecc6299db9ec823/bio-0.39.0/src/pattern_matching/myers/mod.rs","byte_start":562297,"byte_end":562378,"line_start":165,"line_end":165,"column_start":1,"column_end":82}},{"value":"/ provide an iterator over tuples of `(end, distance)` like `Myers::find_all_end()`, but","span":{"file_name":"/Users/shelwitz/.cargo/registry/src/github.com-1ecc6299db9ec823/bio-0.39.0/src/pattern_matching/myers/mod.rs","byte_start":562379,"byte_end":562469,"line_start":166,"line_end":166,"column_start":1,"column_end":91}},{"value":"/ additionally keep the data necessary for calculating the alignment path later at any desired","span":{"file_name":"/Users/shelwitz/.cargo/registry/src/github.com-1ecc6299db9ec823/bio-0.39.0/src/pattern_matching/myers/mod.rs","byte_start":562470,"byte_end":562566,"line_start":167,"line_end":167,"column_start":1,"column_end":97}},{"value":"/ position. Storing the data itself has a slight performance impact and requires more memory","span":{"file_name":"/Users/shelwitz/.cargo/registry/src/github.com-1ecc6299db9ec823/bio-0.39.0/src/pattern_matching/myers/mod.rs","byte_start":562567,"byte_end":562661,"line_start":168,"line_end":168,"column_start":1,"column_end":95}},{"value":"/ compared to `Myers::find_all_end()` [O(n) as opposed to O(m + k)]. Still the following code","span":{"file_name":"/Users/shelwitz/.cargo/registry/src/github.com-1ecc6299db9ec823/bio-0.39.0/src/pattern_matching/myers/mod.rs","byte_start":562662,"byte_end":562757,"line_start":169,"line_end":169,"column_start":1,"column_end":96}},{"value":"/ is faster than using `FullMatches`:","span":{"file_name":"/Users/shelwitz/.cargo/registry/src/github.com-1ecc6299db9ec823/bio-0.39.0/src/pattern_matching/myers/mod.rs","byte_start":562758,"byte_end":562797,"line_start":170,"line_end":170,"column_start":1,"column_end":40}},{"value":"/","span":{"file_name":"/Users/shelwitz/.cargo/registry/src/github.com-1ecc6299db9ec823/bio-0.39.0/src/pattern_matching/myers/mod.rs","byte_start":562798,"byte_end":562801,"line_start":171,"line_end":171,"column_start":1,"column_end":4}},{"value":"/ ```","span":{"file_name":"/Users/shelwitz/.cargo/registry/src/github.com-1ecc6299db9ec823/bio-0.39.0/src/pattern_matching/myers/mod.rs","byte_start":562802,"byte_end":562809,"line_start":172,"line_end":172,"column_start":1,"column_end":8}},{"value":"/ # extern crate bio;","span":{"file_name":"/Users/shelwitz/.cargo/registry/src/github.com-1ecc6299db9ec823/bio-0.39.0/src/pattern_matching/myers/mod.rs","byte_start":562810,"byte_end":562833,"line_start":173,"line_end":173,"column_start":1,"column_end":24}},{"value":"/ use bio::alignment::Alignment;","span":{"file_name":"/Users/shelwitz/.cargo/registry/src/github.com-1ecc6299db9ec823/bio-0.39.0/src/pattern_matching/myers/mod.rs","byte_start":562834,"byte_end":562868,"line_start":174,"line_end":174,"column_start":1,"column_end":35}},{"value":"/ use bio::pattern_matching::myers::Myers;","span":{"file_name":"/Users/shelwitz/.cargo/registry/src/github.com-1ecc6299db9ec823/bio-0.39.0/src/pattern_matching/myers/mod.rs","byte_start":562869,"byte_end":562913,"line_start":175,"line_end":175,"column_start":1,"column_end":45}},{"value":"/","span":{"file_name":"/Users/shelwitz/.cargo/registry/src/github.com-1ecc6299db9ec823/bio-0.39.0/src/pattern_matching/myers/mod.rs","byte_start":562914,"byte_end":562917,"line_start":176,"line_end":176,"column_start":1,"column_end":4}},{"value":"/ # fn main() {","span":{"file_name":"/Users/shelwitz/.cargo/registry/src/github.com-1ecc6299db9ec823/bio-0.39.0/src/pattern_matching/myers/mod.rs","byte_start":562918,"byte_end":562935,"line_start":177,"line_end":177,"column_start":1,"column_end":18}},{"value":"/ let text = b\"CGGTCCTGAGGGATTAGCAC\";","span":{"file_name":"/Users/shelwitz/.cargo/registry/src/github.com-1ecc6299db9ec823/bio-0.39.0/src/pattern_matching/myers/mod.rs","byte_start":562936,"byte_end":562975,"line_start":178,"line_end":178,"column_start":1,"column_end":40}},{"value":"/ let pattern = b\"TCCTAGGGC\";","span":{"file_name":"/Users/shelwitz/.cargo/registry/src/github.com-1ecc6299db9ec823/bio-0.39.0/src/pattern_matching/myers/mod.rs","byte_start":562976,"byte_end":563007,"line_start":179,"line_end":179,"column_start":1,"column_end":32}},{"value":"/","span":{"file_name":"/Users/shelwitz/.cargo/registry/src/github.com-1ecc6299db9ec823/bio-0.39.0/src/pattern_matching/myers/mod.rs","byte_start":563008,"byte_end":563011,"line_start":180,"line_end":180,"column_start":1,"column_end":4}},{"value":"/ let mut myers = Myers::<u64>::new(pattern);","span":{"file_name":"/Users/shelwitz/.cargo/registry/src/github.com-1ecc6299db9ec823/bio-0.39.0/src/pattern_matching/myers/mod.rs","byte_start":563012,"byte_end":563059,"line_start":181,"line_end":181,"column_start":1,"column_end":48}},{"value":"/ let mut aln = Alignment::default();","span":{"file_name":"/Users/shelwitz/.cargo/registry/src/github.com-1ecc6299db9ec823/bio-0.39.0/src/pattern_matching/myers/mod.rs","byte_start":563060,"byte_end":563099,"line_start":182,"line_end":182,"column_start":1,"column_end":40}},{"value":"/","span":{"file_name":"/Users/shelwitz/.cargo/registry/src/github.com-1ecc6299db9ec823/bio-0.39.0/src/pattern_matching/myers/mod.rs","byte_start":563100,"byte_end":563103,"line_start":183,"line_end":183,"column_start":1,"column_end":4}},{"value":"/ let mut matches = myers.find_all_lazy(text, 2);","span":{"file_name":"/Users/shelwitz/.cargo/registry/src/github.com-1ecc6299db9ec823/bio-0.39.0/src/pattern_matching/myers/mod.rs","byte_start":563104,"byte_end":563155,"line_start":184,"line_end":184,"column_start":1,"column_end":52}},{"value":"/","span":{"file_name":"/Users/shelwitz/.cargo/registry/src/github.com-1ecc6299db9ec823/bio-0.39.0/src/pattern_matching/myers/mod.rs","byte_start":563156,"byte_end":563159,"line_start":185,"line_end":185,"column_start":1,"column_end":4}},{"value":"/ // first, find the best hit","span":{"file_name":"/Users/shelwitz/.cargo/registry/src/github.com-1ecc6299db9ec823/bio-0.39.0/src/pattern_matching/myers/mod.rs","byte_start":563160,"byte_end":563191,"line_start":186,"line_end":186,"column_start":1,"column_end":32}},{"value":"/ let (best_end, _) = matches.by_ref().min_by_key(|&(_, dist)| dist).unwrap();","span":{"file_name":"/Users/shelwitz/.cargo/registry/src/github.com-1ecc6299db9ec823/bio-0.39.0/src/pattern_matching/myers/mod.rs","byte_start":563192,"byte_end":563272,"line_start":187,"line_end":187,"column_start":1,"column_end":81}},{"value":"/","span":{"file_name":"/Users/shelwitz/.cargo/registry/src/github.com-1ecc6299db9ec823/bio-0.39.0/src/pattern_matching/myers/mod.rs","byte_start":563273,"byte_end":563276,"line_start":188,"line_end":188,"column_start":1,"column_end":4}},{"value":"/ // now calculate the alignment","span":{"file_name":"/Users/shelwitz/.cargo/registry/src/github.com-1ecc6299db9ec823/bio-0.39.0/src/pattern_matching/myers/mod.rs","byte_start":563277,"byte_end":563311,"line_start":189,"line_end":189,"column_start":1,"column_end":35}},{"value":"/ matches.alignment_at(best_end, &mut aln);","span":{"file_name":"/Users/shelwitz/.cargo/registry/src/github.com-1ecc6299db9ec823/bio-0.39.0/src/pattern_matching/myers/mod.rs","byte_start":563312,"byte_end":563357,"line_start":190,"line_end":190,"column_start":1,"column_end":46}},{"value":"/ println!(","span":{"file_name":"/Users/shelwitz/.cargo/registry/src/github.com-1ecc6299db9ec823/bio-0.39.0/src/pattern_matching/myers/mod.rs","byte_start":563358,"byte_end":563371,"line_start":191,"line_end":191,"column_start":1,"column_end":14}},{"value":"/     \"Best alignment at {}..{} (distance: {})\",","span":{"file_name":"/Users/shelwitz/.cargo/registry/src/github.com-1ecc6299db9ec823/bio-0.39.0/src/pattern_matching/myers/mod.rs","byte_start":563372,"byte_end":563422,"line_start":192,"line_end":192,"column_start":1,"column_end":51}},{"value":"/     aln.ystart, aln.yend, aln.score","span":{"file_name":"/Users/shelwitz/.cargo/registry/src/github.com-1ecc6299db9ec823/bio-0.39.0/src/pattern_matching/myers/mod.rs","byte_start":563423,"byte_end":563462,"line_start":193,"line_end":193,"column_start":1,"column_end":40}},{"value":"/ );","span":{"file_name":"/Users/shelwitz/.cargo/registry/src/github.com-1ecc6299db9ec823/bio-0.39.0/src/pattern_matching/myers/mod.rs","byte_start":563463,"byte_end":563469,"line_start":194,"line_end":194,"column_start":1,"column_end":7}},{"value":"/ println!(\"{}\", aln.pretty(pattern, text));","span":{"file_name":"/Users/shelwitz/.cargo/registry/src/github.com-1ecc6299db9ec823/bio-0.39.0/src/pattern_matching/myers/mod.rs","byte_start":563470,"byte_end":563516,"line_start":195,"line_end":195,"column_start":1,"column_end":47}},{"value":"/ # }","span":{"file_name":"/Users/shelwitz/.cargo/registry/src/github.com-1ecc6299db9ec823/bio-0.39.0/src/pattern_matching/myers/mod.rs","byte_start":563517,"byte_end":563524,"line_start":196,"line_end":196,"column_start":1,"column_end":8}},{"value":"/ ```","span":{"file_name":"/Users/shelwitz/.cargo/registry/src/github.com-1ecc6299db9ec823/bio-0.39.0/src/pattern_matching/myers/mod.rs","byte_start":563525,"byte_end":563532,"line_start":197,"line_end":197,"column_start":1,"column_end":8}},{"value":"/","span":{"file_name":"/Users/shelwitz/.cargo/registry/src/github.com-1ecc6299db9ec823/bio-0.39.0/src/pattern_matching/myers/mod.rs","byte_start":563533,"byte_end":563536,"line_start":198,"line_end":198,"column_start":1,"column_end":4}},{"value":"/ **Output:**","span":{"file_name":"/Users/shelwitz/.cargo/registry/src/github.com-1ecc6299db9ec823/bio-0.39.0/src/pattern_matching/myers/mod.rs","byte_start":563537,"byte_end":563552,"line_start":199,"line_end":199,"column_start":1,"column_end":16}},{"value":"/","span":{"file_name":"/Users/shelwitz/.cargo/registry/src/github.com-1ecc6299db9ec823/bio-0.39.0/src/pattern_matching/myers/mod.rs","byte_start":563553,"byte_end":563556,"line_start":200,"line_end":200,"column_start":1,"column_end":4}},{"value":"/ <pre>","span":{"file_name":"/Users/shelwitz/.cargo/registry/src/github.com-1ecc6299db9ec823/bio-0.39.0/src/pattern_matching/myers/mod.rs","byte_start":563557,"byte_end":563566,"line_start":201,"line_end":201,"column_start":1,"column_end":10}},{"value":"/ Best alignment at 3..12 (distance: 2)","span":{"file_name":"/Users/shelwitz/.cargo/registry/src/github.com-1ecc6299db9ec823/bio-0.39.0/src/pattern_matching/myers/mod.rs","byte_start":563567,"byte_end":563608,"line_start":202,"line_end":202,"column_start":1,"column_end":42}},{"value":"/    TCCT-AGGGC","span":{"file_name":"/Users/shelwitz/.cargo/registry/src/github.com-1ecc6299db9ec823/bio-0.39.0/src/pattern_matching/myers/mod.rs","byte_start":563609,"byte_end":563626,"line_start":203,"line_end":203,"column_start":1,"column_end":18}},{"value":"/    ||||x||||+","span":{"file_name":"/Users/shelwitz/.cargo/registry/src/github.com-1ecc6299db9ec823/bio-0.39.0/src/pattern_matching/myers/mod.rs","byte_start":563627,"byte_end":563644,"line_start":204,"line_end":204,"column_start":1,"column_end":18}},{"value":"/ TCCTCCTGAGGG-ATTAGCAC","span":{"file_name":"/Users/shelwitz/.cargo/registry/src/github.com-1ecc6299db9ec823/bio-0.39.0/src/pattern_matching/myers/mod.rs","byte_start":563645,"byte_end":563670,"line_start":205,"line_end":205,"column_start":1,"column_end":26}},{"value":"/ </pre>","span":{"file_name":"/Users/shelwitz/.cargo/registry/src/github.com-1ecc6299db9ec823/bio-0.39.0/src/pattern_matching/myers/mod.rs","byte_start":563671,"byte_end":563681,"line_start":206,"line_end":206,"column_start":1,"column_end":11}},{"value":"/","span":{"file_name":"/Users/shelwitz/.cargo/registry/src/github.com-1ecc6299db9ec823/bio-0.39.0/src/pattern_matching/myers/mod.rs","byte_start":563682,"byte_end":563685,"line_start":207,"line_end":207,"column_start":1,"column_end":4}},{"value":"/ Actually as seen in the previous chapters, there are two hits with the same distance of 2.","span":{"file_name":"/Users/shelwitz/.cargo/registry/src/github.com-1ecc6299db9ec823/bio-0.39.0/src/pattern_matching/myers/mod.rs","byte_start":563686,"byte_end":563780,"line_start":208,"line_end":208,"column_start":1,"column_end":95}},{"value":"/ It may make sense to consider both of them.","span":{"file_name":"/Users/shelwitz/.cargo/registry/src/github.com-1ecc6299db9ec823/bio-0.39.0/src/pattern_matching/myers/mod.rs","byte_start":563781,"byte_end":563828,"line_start":209,"line_end":209,"column_start":1,"column_end":48}},{"value":"/","span":{"file_name":"/Users/shelwitz/.cargo/registry/src/github.com-1ecc6299db9ec823/bio-0.39.0/src/pattern_matching/myers/mod.rs","byte_start":563829,"byte_end":563832,"line_start":210,"line_end":210,"column_start":1,"column_end":4}},{"value":"/ # Dealing with ambiguities","span":{"file_name":"/Users/shelwitz/.cargo/registry/src/github.com-1ecc6299db9ec823/bio-0.39.0/src/pattern_matching/myers/mod.rs","byte_start":563833,"byte_end":563863,"line_start":211,"line_end":211,"column_start":1,"column_end":31}},{"value":"/","span":{"file_name":"/Users/shelwitz/.cargo/registry/src/github.com-1ecc6299db9ec823/bio-0.39.0/src/pattern_matching/myers/mod.rs","byte_start":563864,"byte_end":563867,"line_start":212,"line_end":212,"column_start":1,"column_end":4}},{"value":"/ Matching multiple or all symbols at once can be achieved using `MyersBuilder`. This example","span":{"file_name":"/Users/shelwitz/.cargo/registry/src/github.com-1ecc6299db9ec823/bio-0.39.0/src/pattern_matching/myers/mod.rs","byte_start":563868,"byte_end":563963,"line_start":213,"line_end":213,"column_start":1,"column_end":96}},{"value":"/ allows `N` in the search pattern to match all four DNA bases in the text:","span":{"file_name":"/Users/shelwitz/.cargo/registry/src/github.com-1ecc6299db9ec823/bio-0.39.0/src/pattern_matching/myers/mod.rs","byte_start":563964,"byte_end":564041,"line_start":214,"line_end":214,"column_start":1,"column_end":78}},{"value":"/","span":{"file_name":"/Users/shelwitz/.cargo/registry/src/github.com-1ecc6299db9ec823/bio-0.39.0/src/pattern_matching/myers/mod.rs","byte_start":564042,"byte_end":564045,"line_start":215,"line_end":215,"column_start":1,"column_end":4}},{"value":"/ ```","span":{"file_name":"/Users/shelwitz/.cargo/registry/src/github.com-1ecc6299db9ec823/bio-0.39.0/src/pattern_matching/myers/mod.rs","byte_start":564046,"byte_end":564053,"line_start":216,"line_end":216,"column_start":1,"column_end":8}},{"value":"/ # extern crate bio;","span":{"file_name":"/Users/shelwitz/.cargo/registry/src/github.com-1ecc6299db9ec823/bio-0.39.0/src/pattern_matching/myers/mod.rs","byte_start":564054,"byte_end":564077,"line_start":217,"line_end":217,"column_start":1,"column_end":24}},{"value":"/ use bio::pattern_matching::myers::MyersBuilder;","span":{"file_name":"/Users/shelwitz/.cargo/registry/src/github.com-1ecc6299db9ec823/bio-0.39.0/src/pattern_matching/myers/mod.rs","byte_start":564078,"byte_end":564129,"line_start":218,"line_end":218,"column_start":1,"column_end":52}},{"value":"/","span":{"file_name":"/Users/shelwitz/.cargo/registry/src/github.com-1ecc6299db9ec823/bio-0.39.0/src/pattern_matching/myers/mod.rs","byte_start":564130,"byte_end":564133,"line_start":219,"line_end":219,"column_start":1,"column_end":4}},{"value":"/ # fn main() {","span":{"file_name":"/Users/shelwitz/.cargo/registry/src/github.com-1ecc6299db9ec823/bio-0.39.0/src/pattern_matching/myers/mod.rs","byte_start":564134,"byte_end":564151,"line_start":220,"line_end":220,"column_start":1,"column_end":18}},{"value":"/ let text = b\"GTCTGATCTTACC\";","span":{"file_name":"/Users/shelwitz/.cargo/registry/src/github.com-1ecc6299db9ec823/bio-0.39.0/src/pattern_matching/myers/mod.rs","byte_start":564152,"byte_end":564184,"line_start":221,"line_end":221,"column_start":1,"column_end":33}},{"value":"/ let pattern = b\"TGATCNT\";","span":{"file_name":"/Users/shelwitz/.cargo/registry/src/github.com-1ecc6299db9ec823/bio-0.39.0/src/pattern_matching/myers/mod.rs","byte_start":564185,"byte_end":564214,"line_start":222,"line_end":222,"column_start":1,"column_end":30}},{"value":"/","span":{"file_name":"/Users/shelwitz/.cargo/registry/src/github.com-1ecc6299db9ec823/bio-0.39.0/src/pattern_matching/myers/mod.rs","byte_start":564215,"byte_end":564218,"line_start":223,"line_end":223,"column_start":1,"column_end":4}},{"value":"/ let myers = MyersBuilder::new().ambig(b'N', b\"ACGT\").build_64(pattern);","span":{"file_name":"/Users/shelwitz/.cargo/registry/src/github.com-1ecc6299db9ec823/bio-0.39.0/src/pattern_matching/myers/mod.rs","byte_start":564219,"byte_end":564294,"line_start":224,"line_end":224,"column_start":1,"column_end":76}},{"value":"/ assert_eq!(myers.distance(text), 0);","span":{"file_name":"/Users/shelwitz/.cargo/registry/src/github.com-1ecc6299db9ec823/bio-0.39.0/src/pattern_matching/myers/mod.rs","byte_start":564295,"byte_end":564335,"line_start":225,"line_end":225,"column_start":1,"column_end":41}},{"value":"/ # }","span":{"file_name":"/Users/shelwitz/.cargo/registry/src/github.com-1ecc6299db9ec823/bio-0.39.0/src/pattern_matching/myers/mod.rs","byte_start":564336,"byte_end":564343,"line_start":226,"line_end":226,"column_start":1,"column_end":8}},{"value":"/ ```","span":{"file_name":"/Users/shelwitz/.cargo/registry/src/github.com-1ecc6299db9ec823/bio-0.39.0/src/pattern_matching/myers/mod.rs","byte_start":564344,"byte_end":564351,"line_start":227,"line_end":227,"column_start":1,"column_end":8}},{"value":"/","span":{"file_name":"/Users/shelwitz/.cargo/registry/src/github.com-1ecc6299db9ec823/bio-0.39.0/src/pattern_matching/myers/mod.rs","byte_start":564352,"byte_end":564355,"line_start":228,"line_end":228,"column_start":1,"column_end":4}},{"value":"/ For more examples see the documentation of [`MyersBuilder`](struct.MyersBuilder.html).","span":{"file_name":"/Users/shelwitz/.cargo/registry/src/github.com-1ecc6299db9ec823/bio-0.39.0/src/pattern_matching/myers/mod.rs","byte_start":564356,"byte_end":564446,"line_start":229,"line_end":229,"column_start":1,"column_end":91}}]},{"kind":"Struct","id":{"krate":0,"index":5076},"span":{"file_name":"/Users/shelwitz/.cargo/registry/src/github.com-1ecc6299db9ec823/bio-0.39.0/src/pattern_matching/myers/builder.rs","byte_start":586981,"byte_end":586993,"line_start":51,"line_end":51,"column_start":12,"column_end":24},"name":"MyersBuilder","qualname":"::pattern_matching::myers::builder::MyersBuilder","value":"MyersBuilder {  }","parent":null,"children":[{"krate":0,"index":5077},{"krate":0,"index":5078}],"decl_id":null,"docs":" Builds a Myers instance, allowing to specify ambiguities.","sig":null,"attributes":[{"value":"/ Builds a Myers instance, allowing to specify ambiguities.","span":{"file_name":"/Users/shelwitz/.cargo/registry/src/github.com-1ecc6299db9ec823/bio-0.39.0/src/pattern_matching/myers/builder.rs","byte_start":585647,"byte_end":585708,"line_start":7,"line_end":7,"column_start":1,"column_end":62}},{"value":"/","span":{"file_name":"/Users/shelwitz/.cargo/registry/src/github.com-1ecc6299db9ec823/bio-0.39.0/src/pattern_matching/myers/builder.rs","byte_start":585709,"byte_end":585712,"line_start":8,"line_end":8,"column_start":1,"column_end":4}},{"value":"/ # Example:","span":{"file_name":"/Users/shelwitz/.cargo/registry/src/github.com-1ecc6299db9ec823/bio-0.39.0/src/pattern_matching/myers/builder.rs","byte_start":585713,"byte_end":585727,"line_start":9,"line_end":9,"column_start":1,"column_end":15}},{"value":"/","span":{"file_name":"/Users/shelwitz/.cargo/registry/src/github.com-1ecc6299db9ec823/bio-0.39.0/src/pattern_matching/myers/builder.rs","byte_start":585728,"byte_end":585731,"line_start":10,"line_end":10,"column_start":1,"column_end":4}},{"value":"/ This example shows how recognition of IUPAC ambiguities in patterns can be implemented:","span":{"file_name":"/Users/shelwitz/.cargo/registry/src/github.com-1ecc6299db9ec823/bio-0.39.0/src/pattern_matching/myers/builder.rs","byte_start":585732,"byte_end":585823,"line_start":11,"line_end":11,"column_start":1,"column_end":92}},{"value":"/","span":{"file_name":"/Users/shelwitz/.cargo/registry/src/github.com-1ecc6299db9ec823/bio-0.39.0/src/pattern_matching/myers/builder.rs","byte_start":585824,"byte_end":585827,"line_start":12,"line_end":12,"column_start":1,"column_end":4}},{"value":"/ ```","span":{"file_name":"/Users/shelwitz/.cargo/registry/src/github.com-1ecc6299db9ec823/bio-0.39.0/src/pattern_matching/myers/builder.rs","byte_start":585828,"byte_end":585835,"line_start":13,"line_end":13,"column_start":1,"column_end":8}},{"value":"/ # extern crate bio;","span":{"file_name":"/Users/shelwitz/.cargo/registry/src/github.com-1ecc6299db9ec823/bio-0.39.0/src/pattern_matching/myers/builder.rs","byte_start":585836,"byte_end":585859,"line_start":14,"line_end":14,"column_start":1,"column_end":24}},{"value":"/ use bio::pattern_matching::myers::MyersBuilder;","span":{"file_name":"/Users/shelwitz/.cargo/registry/src/github.com-1ecc6299db9ec823/bio-0.39.0/src/pattern_matching/myers/builder.rs","byte_start":585860,"byte_end":585911,"line_start":15,"line_end":15,"column_start":1,"column_end":52}},{"value":"/","span":{"file_name":"/Users/shelwitz/.cargo/registry/src/github.com-1ecc6299db9ec823/bio-0.39.0/src/pattern_matching/myers/builder.rs","byte_start":585912,"byte_end":585915,"line_start":16,"line_end":16,"column_start":1,"column_end":4}},{"value":"/ # fn main() {","span":{"file_name":"/Users/shelwitz/.cargo/registry/src/github.com-1ecc6299db9ec823/bio-0.39.0/src/pattern_matching/myers/builder.rs","byte_start":585916,"byte_end":585933,"line_start":17,"line_end":17,"column_start":1,"column_end":18}},{"value":"/ let ambigs = [","span":{"file_name":"/Users/shelwitz/.cargo/registry/src/github.com-1ecc6299db9ec823/bio-0.39.0/src/pattern_matching/myers/builder.rs","byte_start":585934,"byte_end":585952,"line_start":18,"line_end":18,"column_start":1,"column_end":19}},{"value":"/     (b'M', &b\"AC\"[..]),","span":{"file_name":"/Users/shelwitz/.cargo/registry/src/github.com-1ecc6299db9ec823/bio-0.39.0/src/pattern_matching/myers/builder.rs","byte_start":585953,"byte_end":585980,"line_start":19,"line_end":19,"column_start":1,"column_end":28}},{"value":"/     (b'R', &b\"AG\"[..]),","span":{"file_name":"/Users/shelwitz/.cargo/registry/src/github.com-1ecc6299db9ec823/bio-0.39.0/src/pattern_matching/myers/builder.rs","byte_start":585981,"byte_end":586008,"line_start":20,"line_end":20,"column_start":1,"column_end":28}},{"value":"/     (b'W', &b\"AT\"[..]),","span":{"file_name":"/Users/shelwitz/.cargo/registry/src/github.com-1ecc6299db9ec823/bio-0.39.0/src/pattern_matching/myers/builder.rs","byte_start":586009,"byte_end":586036,"line_start":21,"line_end":21,"column_start":1,"column_end":28}},{"value":"/     (b'S', &b\"CG\"[..]),","span":{"file_name":"/Users/shelwitz/.cargo/registry/src/github.com-1ecc6299db9ec823/bio-0.39.0/src/pattern_matching/myers/builder.rs","byte_start":586037,"byte_end":586064,"line_start":22,"line_end":22,"column_start":1,"column_end":28}},{"value":"/     (b'Y', &b\"CT\"[..]),","span":{"file_name":"/Users/shelwitz/.cargo/registry/src/github.com-1ecc6299db9ec823/bio-0.39.0/src/pattern_matching/myers/builder.rs","byte_start":586065,"byte_end":586092,"line_start":23,"line_end":23,"column_start":1,"column_end":28}},{"value":"/     (b'K', &b\"GT\"[..]),","span":{"file_name":"/Users/shelwitz/.cargo/registry/src/github.com-1ecc6299db9ec823/bio-0.39.0/src/pattern_matching/myers/builder.rs","byte_start":586093,"byte_end":586120,"line_start":24,"line_end":24,"column_start":1,"column_end":28}},{"value":"/     (b'V', &b\"ACGMRS\"[..]),","span":{"file_name":"/Users/shelwitz/.cargo/registry/src/github.com-1ecc6299db9ec823/bio-0.39.0/src/pattern_matching/myers/builder.rs","byte_start":586121,"byte_end":586152,"line_start":25,"line_end":25,"column_start":1,"column_end":32}},{"value":"/     (b'H', &b\"ACTMWY\"[..]),","span":{"file_name":"/Users/shelwitz/.cargo/registry/src/github.com-1ecc6299db9ec823/bio-0.39.0/src/pattern_matching/myers/builder.rs","byte_start":586153,"byte_end":586184,"line_start":26,"line_end":26,"column_start":1,"column_end":32}},{"value":"/     (b'D', &b\"AGTRWK\"[..]),","span":{"file_name":"/Users/shelwitz/.cargo/registry/src/github.com-1ecc6299db9ec823/bio-0.39.0/src/pattern_matching/myers/builder.rs","byte_start":586185,"byte_end":586216,"line_start":27,"line_end":27,"column_start":1,"column_end":32}},{"value":"/     (b'B', &b\"CGTSYK\"[..]),","span":{"file_name":"/Users/shelwitz/.cargo/registry/src/github.com-1ecc6299db9ec823/bio-0.39.0/src/pattern_matching/myers/builder.rs","byte_start":586217,"byte_end":586248,"line_start":28,"line_end":28,"column_start":1,"column_end":32}},{"value":"/     (b'N', &b\"ACGTMRWSYKVHDB\"[..]),","span":{"file_name":"/Users/shelwitz/.cargo/registry/src/github.com-1ecc6299db9ec823/bio-0.39.0/src/pattern_matching/myers/builder.rs","byte_start":586249,"byte_end":586288,"line_start":29,"line_end":29,"column_start":1,"column_end":40}},{"value":"/ ];","span":{"file_name":"/Users/shelwitz/.cargo/registry/src/github.com-1ecc6299db9ec823/bio-0.39.0/src/pattern_matching/myers/builder.rs","byte_start":586289,"byte_end":586295,"line_start":30,"line_end":30,"column_start":1,"column_end":7}},{"value":"/","span":{"file_name":"/Users/shelwitz/.cargo/registry/src/github.com-1ecc6299db9ec823/bio-0.39.0/src/pattern_matching/myers/builder.rs","byte_start":586296,"byte_end":586299,"line_start":31,"line_end":31,"column_start":1,"column_end":4}},{"value":"/ let mut builder = MyersBuilder::new();","span":{"file_name":"/Users/shelwitz/.cargo/registry/src/github.com-1ecc6299db9ec823/bio-0.39.0/src/pattern_matching/myers/builder.rs","byte_start":586300,"byte_end":586342,"line_start":32,"line_end":32,"column_start":1,"column_end":43}},{"value":"/","span":{"file_name":"/Users/shelwitz/.cargo/registry/src/github.com-1ecc6299db9ec823/bio-0.39.0/src/pattern_matching/myers/builder.rs","byte_start":586343,"byte_end":586346,"line_start":33,"line_end":33,"column_start":1,"column_end":4}},{"value":"/ for &(base, equivalents) in &ambigs {","span":{"file_name":"/Users/shelwitz/.cargo/registry/src/github.com-1ecc6299db9ec823/bio-0.39.0/src/pattern_matching/myers/builder.rs","byte_start":586347,"byte_end":586388,"line_start":34,"line_end":34,"column_start":1,"column_end":42}},{"value":"/     builder.ambig(base, equivalents);","span":{"file_name":"/Users/shelwitz/.cargo/registry/src/github.com-1ecc6299db9ec823/bio-0.39.0/src/pattern_matching/myers/builder.rs","byte_start":586389,"byte_end":586430,"line_start":35,"line_end":35,"column_start":1,"column_end":42}},{"value":"/ }","span":{"file_name":"/Users/shelwitz/.cargo/registry/src/github.com-1ecc6299db9ec823/bio-0.39.0/src/pattern_matching/myers/builder.rs","byte_start":586431,"byte_end":586436,"line_start":36,"line_end":36,"column_start":1,"column_end":6}},{"value":"/","span":{"file_name":"/Users/shelwitz/.cargo/registry/src/github.com-1ecc6299db9ec823/bio-0.39.0/src/pattern_matching/myers/builder.rs","byte_start":586437,"byte_end":586440,"line_start":37,"line_end":37,"column_start":1,"column_end":4}},{"value":"/ let text = b\"GGATGNGCGCCATAG\";","span":{"file_name":"/Users/shelwitz/.cargo/registry/src/github.com-1ecc6299db9ec823/bio-0.39.0/src/pattern_matching/myers/builder.rs","byte_start":586441,"byte_end":586475,"line_start":38,"line_end":38,"column_start":1,"column_end":35}},{"value":"/ let pattern = b\"TRANCGG\";","span":{"file_name":"/Users/shelwitz/.cargo/registry/src/github.com-1ecc6299db9ec823/bio-0.39.0/src/pattern_matching/myers/builder.rs","byte_start":586476,"byte_end":586505,"line_start":39,"line_end":39,"column_start":1,"column_end":30}},{"value":"/ //                *   * (mismatch)","span":{"file_name":"/Users/shelwitz/.cargo/registry/src/github.com-1ecc6299db9ec823/bio-0.39.0/src/pattern_matching/myers/builder.rs","byte_start":586506,"byte_end":586544,"line_start":40,"line_end":40,"column_start":1,"column_end":39}},{"value":"/","span":{"file_name":"/Users/shelwitz/.cargo/registry/src/github.com-1ecc6299db9ec823/bio-0.39.0/src/pattern_matching/myers/builder.rs","byte_start":586545,"byte_end":586548,"line_start":41,"line_end":41,"column_start":1,"column_end":4}},{"value":"/ let myers = builder.build_64(pattern);","span":{"file_name":"/Users/shelwitz/.cargo/registry/src/github.com-1ecc6299db9ec823/bio-0.39.0/src/pattern_matching/myers/builder.rs","byte_start":586549,"byte_end":586591,"line_start":42,"line_end":42,"column_start":1,"column_end":43}},{"value":"/ assert_eq!(myers.distance(text), 2);","span":{"file_name":"/Users/shelwitz/.cargo/registry/src/github.com-1ecc6299db9ec823/bio-0.39.0/src/pattern_matching/myers/builder.rs","byte_start":586592,"byte_end":586632,"line_start":43,"line_end":43,"column_start":1,"column_end":41}},{"value":"/ # }","span":{"file_name":"/Users/shelwitz/.cargo/registry/src/github.com-1ecc6299db9ec823/bio-0.39.0/src/pattern_matching/myers/builder.rs","byte_start":586633,"byte_end":586640,"line_start":44,"line_end":44,"column_start":1,"column_end":8}},{"value":"/ ```","span":{"file_name":"/Users/shelwitz/.cargo/registry/src/github.com-1ecc6299db9ec823/bio-0.39.0/src/pattern_matching/myers/builder.rs","byte_start":586641,"byte_end":586648,"line_start":45,"line_end":45,"column_start":1,"column_end":8}},{"value":"/","span":{"file_name":"/Users/shelwitz/.cargo/registry/src/github.com-1ecc6299db9ec823/bio-0.39.0/src/pattern_matching/myers/builder.rs","byte_start":586649,"byte_end":586652,"line_start":46,"line_end":46,"column_start":1,"column_end":4}},{"value":"/ Note that only ambiguities in the pattern are recognized. The reverse is not true; ambiguities","span":{"file_name":"/Users/shelwitz/.cargo/registry/src/github.com-1ecc6299db9ec823/bio-0.39.0/src/pattern_matching/myers/builder.rs","byte_start":586653,"byte_end":586751,"line_start":47,"line_end":47,"column_start":1,"column_end":99}},{"value":"/ in the search text are not matched by multiple symbols in the pattern. This would require","span":{"file_name":"/Users/shelwitz/.cargo/registry/src/github.com-1ecc6299db9ec823/bio-0.39.0/src/pattern_matching/myers/builder.rs","byte_start":586752,"byte_end":586845,"line_start":48,"line_end":48,"column_start":1,"column_end":94}},{"value":"/ specifying additional ambiguities (`builder.ambig(b'A', b\"MRWVHDN\")`, etc...).","span":{"file_name":"/Users/shelwitz/.cargo/registry/src/github.com-1ecc6299db9ec823/bio-0.39.0/src/pattern_matching/myers/builder.rs","byte_start":586846,"byte_end":586928,"line_start":49,"line_end":49,"column_start":1,"column_end":83}}]},{"kind":"Method","id":{"krate":0,"index":1754},"span":{"file_name":"/Users/shelwitz/.cargo/registry/src/github.com-1ecc6299db9ec823/bio-0.39.0/src/pattern_matching/myers/builder.rs","byte_start":587088,"byte_end":587091,"line_start":57,"line_end":57,"column_start":12,"column_end":15},"name":"new","qualname":"<MyersBuilder>::new","value":"pub fn new() -> MyersBuilder","parent":null,"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":1755},"span":{"file_name":"/Users/shelwitz/.cargo/registry/src/github.com-1ecc6299db9ec823/bio-0.39.0/src/pattern_matching/myers/builder.rs","byte_start":587776,"byte_end":587781,"line_start":81,"line_end":81,"column_start":12,"column_end":17},"name":"ambig","qualname":"<MyersBuilder>::ambig","value":"pub fn ambig<I, B>(&mut Self, u8, I) -> &mut Self where I: IntoIterator<Item =\nB>, B: Borrow<u8>","parent":null,"children":[],"decl_id":null,"docs":" Allows to specify ambiguous symbols and their equivalents. Note that the ambiguous symbol\n will always be matched by itself. Explicitly including it in the equivalents is not\n necessary.","sig":null,"attributes":[{"value":"/ Allows to specify ambiguous symbols and their equivalents. Note that the ambiguous symbol","span":{"file_name":"/Users/shelwitz/.cargo/registry/src/github.com-1ecc6299db9ec823/bio-0.39.0/src/pattern_matching/myers/builder.rs","byte_start":587147,"byte_end":587240,"line_start":61,"line_end":61,"column_start":5,"column_end":98}},{"value":"/ will always be matched by itself. Explicitly including it in the equivalents is not","span":{"file_name":"/Users/shelwitz/.cargo/registry/src/github.com-1ecc6299db9ec823/bio-0.39.0/src/pattern_matching/myers/builder.rs","byte_start":587245,"byte_end":587332,"line_start":62,"line_end":62,"column_start":5,"column_end":92}},{"value":"/ necessary.","span":{"file_name":"/Users/shelwitz/.cargo/registry/src/github.com-1ecc6299db9ec823/bio-0.39.0/src/pattern_matching/myers/builder.rs","byte_start":587337,"byte_end":587351,"line_start":63,"line_end":63,"column_start":5,"column_end":19}},{"value":"/","span":{"file_name":"/Users/shelwitz/.cargo/registry/src/github.com-1ecc6299db9ec823/bio-0.39.0/src/pattern_matching/myers/builder.rs","byte_start":587356,"byte_end":587359,"line_start":64,"line_end":64,"column_start":5,"column_end":8}},{"value":"/ # Example:","span":{"file_name":"/Users/shelwitz/.cargo/registry/src/github.com-1ecc6299db9ec823/bio-0.39.0/src/pattern_matching/myers/builder.rs","byte_start":587364,"byte_end":587378,"line_start":65,"line_end":65,"column_start":5,"column_end":19}},{"value":"/","span":{"file_name":"/Users/shelwitz/.cargo/registry/src/github.com-1ecc6299db9ec823/bio-0.39.0/src/pattern_matching/myers/builder.rs","byte_start":587383,"byte_end":587386,"line_start":66,"line_end":66,"column_start":5,"column_end":8}},{"value":"/ ```","span":{"file_name":"/Users/shelwitz/.cargo/registry/src/github.com-1ecc6299db9ec823/bio-0.39.0/src/pattern_matching/myers/builder.rs","byte_start":587391,"byte_end":587398,"line_start":67,"line_end":67,"column_start":5,"column_end":12}},{"value":"/ # extern crate bio;","span":{"file_name":"/Users/shelwitz/.cargo/registry/src/github.com-1ecc6299db9ec823/bio-0.39.0/src/pattern_matching/myers/builder.rs","byte_start":587403,"byte_end":587426,"line_start":68,"line_end":68,"column_start":5,"column_end":28}},{"value":"/ use bio::pattern_matching::myers::MyersBuilder;","span":{"file_name":"/Users/shelwitz/.cargo/registry/src/github.com-1ecc6299db9ec823/bio-0.39.0/src/pattern_matching/myers/builder.rs","byte_start":587431,"byte_end":587482,"line_start":69,"line_end":69,"column_start":5,"column_end":56}},{"value":"/","span":{"file_name":"/Users/shelwitz/.cargo/registry/src/github.com-1ecc6299db9ec823/bio-0.39.0/src/pattern_matching/myers/builder.rs","byte_start":587487,"byte_end":587490,"line_start":70,"line_end":70,"column_start":5,"column_end":8}},{"value":"/ # fn main() {","span":{"file_name":"/Users/shelwitz/.cargo/registry/src/github.com-1ecc6299db9ec823/bio-0.39.0/src/pattern_matching/myers/builder.rs","byte_start":587495,"byte_end":587512,"line_start":71,"line_end":71,"column_start":5,"column_end":22}},{"value":"/ let text = b\"GGATGAGCGCCATAG\";","span":{"file_name":"/Users/shelwitz/.cargo/registry/src/github.com-1ecc6299db9ec823/bio-0.39.0/src/pattern_matching/myers/builder.rs","byte_start":587517,"byte_end":587551,"line_start":72,"line_end":72,"column_start":5,"column_end":39}},{"value":"/ let pattern = b\"TGAGCGN\";","span":{"file_name":"/Users/shelwitz/.cargo/registry/src/github.com-1ecc6299db9ec823/bio-0.39.0/src/pattern_matching/myers/builder.rs","byte_start":587556,"byte_end":587585,"line_start":73,"line_end":73,"column_start":5,"column_end":34}},{"value":"/","span":{"file_name":"/Users/shelwitz/.cargo/registry/src/github.com-1ecc6299db9ec823/bio-0.39.0/src/pattern_matching/myers/builder.rs","byte_start":587590,"byte_end":587593,"line_start":74,"line_end":74,"column_start":5,"column_end":8}},{"value":"/ let myers = MyersBuilder::new()","span":{"file_name":"/Users/shelwitz/.cargo/registry/src/github.com-1ecc6299db9ec823/bio-0.39.0/src/pattern_matching/myers/builder.rs","byte_start":587598,"byte_end":587633,"line_start":75,"line_end":75,"column_start":5,"column_end":40}},{"value":"/     .ambig(b'N', b\"ACGT\")","span":{"file_name":"/Users/shelwitz/.cargo/registry/src/github.com-1ecc6299db9ec823/bio-0.39.0/src/pattern_matching/myers/builder.rs","byte_start":587638,"byte_end":587667,"line_start":76,"line_end":76,"column_start":5,"column_end":34}},{"value":"/     .build_64(pattern);","span":{"file_name":"/Users/shelwitz/.cargo/registry/src/github.com-1ecc6299db9ec823/bio-0.39.0/src/pattern_matching/myers/builder.rs","byte_start":587672,"byte_end":587699,"line_start":77,"line_end":77,"column_start":5,"column_end":32}},{"value":"/","span":{"file_name":"/Users/shelwitz/.cargo/registry/src/github.com-1ecc6299db9ec823/bio-0.39.0/src/pattern_matching/myers/builder.rs","byte_start":587704,"byte_end":587707,"line_start":78,"line_end":78,"column_start":5,"column_end":8}},{"value":"/ assert_eq!(myers.distance(text), 0);","span":{"file_name":"/Users/shelwitz/.cargo/registry/src/github.com-1ecc6299db9ec823/bio-0.39.0/src/pattern_matching/myers/builder.rs","byte_start":587712,"byte_end":587752,"line_start":79,"line_end":79,"column_start":5,"column_end":45}},{"value":"/ # }","span":{"file_name":"/Users/shelwitz/.cargo/registry/src/github.com-1ecc6299db9ec823/bio-0.39.0/src/pattern_matching/myers/builder.rs","byte_start":587757,"byte_end":587764,"line_start":80,"line_end":80,"column_start":5,"column_end":12}}]},{"kind":"Method","id":{"krate":0,"index":1759},"span":{"file_name":"/Users/shelwitz/.cargo/registry/src/github.com-1ecc6299db9ec823/bio-0.39.0/src/pattern_matching/myers/builder.rs","byte_start":588839,"byte_end":588852,"line_start":116,"line_end":116,"column_start":12,"column_end":25},"name":"text_wildcard","qualname":"<MyersBuilder>::text_wildcard","value":"pub fn text_wildcard(&mut Self, u8) -> &mut Self","parent":null,"children":[],"decl_id":null,"docs":" Allows to specify a wildcard symbol, that upon appearance in the search text\n shall be matched by any symbol of the pattern. Multiple wildcards are possible.\n For the inverse, that is, wildcards in the pattern matching any symbol in search\n text, use `ambig(byte, 0..255)`.","sig":null,"attributes":[{"value":"/ Allows to specify a wildcard symbol, that upon appearance in the search text","span":{"file_name":"/Users/shelwitz/.cargo/registry/src/github.com-1ecc6299db9ec823/bio-0.39.0/src/pattern_matching/myers/builder.rs","byte_start":588117,"byte_end":588197,"line_start":95,"line_end":95,"column_start":5,"column_end":85}},{"value":"/ shall be matched by any symbol of the pattern. Multiple wildcards are possible.","span":{"file_name":"/Users/shelwitz/.cargo/registry/src/github.com-1ecc6299db9ec823/bio-0.39.0/src/pattern_matching/myers/builder.rs","byte_start":588202,"byte_end":588285,"line_start":96,"line_end":96,"column_start":5,"column_end":88}},{"value":"/ For the inverse, that is, wildcards in the pattern matching any symbol in search","span":{"file_name":"/Users/shelwitz/.cargo/registry/src/github.com-1ecc6299db9ec823/bio-0.39.0/src/pattern_matching/myers/builder.rs","byte_start":588290,"byte_end":588374,"line_start":97,"line_end":97,"column_start":5,"column_end":89}},{"value":"/ text, use `ambig(byte, 0..255)`.","span":{"file_name":"/Users/shelwitz/.cargo/registry/src/github.com-1ecc6299db9ec823/bio-0.39.0/src/pattern_matching/myers/builder.rs","byte_start":588379,"byte_end":588415,"line_start":98,"line_end":98,"column_start":5,"column_end":41}},{"value":"/","span":{"file_name":"/Users/shelwitz/.cargo/registry/src/github.com-1ecc6299db9ec823/bio-0.39.0/src/pattern_matching/myers/builder.rs","byte_start":588420,"byte_end":588423,"line_start":99,"line_end":99,"column_start":5,"column_end":8}},{"value":"/ # Example:","span":{"file_name":"/Users/shelwitz/.cargo/registry/src/github.com-1ecc6299db9ec823/bio-0.39.0/src/pattern_matching/myers/builder.rs","byte_start":588428,"byte_end":588442,"line_start":100,"line_end":100,"column_start":5,"column_end":19}},{"value":"/","span":{"file_name":"/Users/shelwitz/.cargo/registry/src/github.com-1ecc6299db9ec823/bio-0.39.0/src/pattern_matching/myers/builder.rs","byte_start":588447,"byte_end":588450,"line_start":101,"line_end":101,"column_start":5,"column_end":8}},{"value":"/ ```","span":{"file_name":"/Users/shelwitz/.cargo/registry/src/github.com-1ecc6299db9ec823/bio-0.39.0/src/pattern_matching/myers/builder.rs","byte_start":588455,"byte_end":588462,"line_start":102,"line_end":102,"column_start":5,"column_end":12}},{"value":"/ # extern crate bio;","span":{"file_name":"/Users/shelwitz/.cargo/registry/src/github.com-1ecc6299db9ec823/bio-0.39.0/src/pattern_matching/myers/builder.rs","byte_start":588467,"byte_end":588490,"line_start":103,"line_end":103,"column_start":5,"column_end":28}},{"value":"/ use bio::pattern_matching::myers::MyersBuilder;","span":{"file_name":"/Users/shelwitz/.cargo/registry/src/github.com-1ecc6299db9ec823/bio-0.39.0/src/pattern_matching/myers/builder.rs","byte_start":588495,"byte_end":588546,"line_start":104,"line_end":104,"column_start":5,"column_end":56}},{"value":"/","span":{"file_name":"/Users/shelwitz/.cargo/registry/src/github.com-1ecc6299db9ec823/bio-0.39.0/src/pattern_matching/myers/builder.rs","byte_start":588551,"byte_end":588554,"line_start":105,"line_end":105,"column_start":5,"column_end":8}},{"value":"/ # fn main() {","span":{"file_name":"/Users/shelwitz/.cargo/registry/src/github.com-1ecc6299db9ec823/bio-0.39.0/src/pattern_matching/myers/builder.rs","byte_start":588559,"byte_end":588576,"line_start":106,"line_end":106,"column_start":5,"column_end":22}},{"value":"/ let text = b\"GGATGAGCG*CATAG\";","span":{"file_name":"/Users/shelwitz/.cargo/registry/src/github.com-1ecc6299db9ec823/bio-0.39.0/src/pattern_matching/myers/builder.rs","byte_start":588581,"byte_end":588615,"line_start":107,"line_end":107,"column_start":5,"column_end":39}},{"value":"/ let pattern = b\"TGAGCGT\";","span":{"file_name":"/Users/shelwitz/.cargo/registry/src/github.com-1ecc6299db9ec823/bio-0.39.0/src/pattern_matching/myers/builder.rs","byte_start":588620,"byte_end":588649,"line_start":108,"line_end":108,"column_start":5,"column_end":34}},{"value":"/","span":{"file_name":"/Users/shelwitz/.cargo/registry/src/github.com-1ecc6299db9ec823/bio-0.39.0/src/pattern_matching/myers/builder.rs","byte_start":588654,"byte_end":588657,"line_start":109,"line_end":109,"column_start":5,"column_end":8}},{"value":"/ let myers = MyersBuilder::new()","span":{"file_name":"/Users/shelwitz/.cargo/registry/src/github.com-1ecc6299db9ec823/bio-0.39.0/src/pattern_matching/myers/builder.rs","byte_start":588662,"byte_end":588697,"line_start":110,"line_end":110,"column_start":5,"column_end":40}},{"value":"/     .text_wildcard(b'*')","span":{"file_name":"/Users/shelwitz/.cargo/registry/src/github.com-1ecc6299db9ec823/bio-0.39.0/src/pattern_matching/myers/builder.rs","byte_start":588702,"byte_end":588730,"line_start":111,"line_end":111,"column_start":5,"column_end":33}},{"value":"/     .build_64(pattern);","span":{"file_name":"/Users/shelwitz/.cargo/registry/src/github.com-1ecc6299db9ec823/bio-0.39.0/src/pattern_matching/myers/builder.rs","byte_start":588735,"byte_end":588762,"line_start":112,"line_end":112,"column_start":5,"column_end":32}},{"value":"/","span":{"file_name":"/Users/shelwitz/.cargo/registry/src/github.com-1ecc6299db9ec823/bio-0.39.0/src/pattern_matching/myers/builder.rs","byte_start":588767,"byte_end":588770,"line_start":113,"line_end":113,"column_start":5,"column_end":8}},{"value":"/ assert_eq!(myers.distance(text), 0);","span":{"file_name":"/Users/shelwitz/.cargo/registry/src/github.com-1ecc6299db9ec823/bio-0.39.0/src/pattern_matching/myers/builder.rs","byte_start":588775,"byte_end":588815,"line_start":114,"line_end":114,"column_start":5,"column_end":45}},{"value":"/ # }","span":{"file_name":"/Users/shelwitz/.cargo/registry/src/github.com-1ecc6299db9ec823/bio-0.39.0/src/pattern_matching/myers/builder.rs","byte_start":588820,"byte_end":588827,"line_start":115,"line_end":115,"column_start":5,"column_end":12}}]},{"kind":"Method","id":{"krate":0,"index":1760},"span":{"file_name":"/Users/shelwitz/.cargo/registry/src/github.com-1ecc6299db9ec823/bio-0.39.0/src/pattern_matching/myers/builder.rs","byte_start":589105,"byte_end":589113,"line_start":123,"line_end":123,"column_start":12,"column_end":20},"name":"build_64","qualname":"<MyersBuilder>::build_64","value":"pub fn build_64<C, P>(&Self, P) -> Myers<u64> where C: Borrow<u8>,\nP: IntoIterator<Item = C>, P::IntoIter: ExactSizeIterator","parent":null,"children":[],"decl_id":null,"docs":" Creates a Myers instance given a pattern, using `u64` as bit vector type.\n Pattern length is restricted to at most 64 symbols.\n","sig":null,"attributes":[{"value":"/ Creates a Myers instance given a pattern, using `u64` as bit vector type.","span":{"file_name":"/Users/shelwitz/.cargo/registry/src/github.com-1ecc6299db9ec823/bio-0.39.0/src/pattern_matching/myers/builder.rs","byte_start":588956,"byte_end":589033,"line_start":121,"line_end":121,"column_start":5,"column_end":82}},{"value":"/ Pattern length is restricted to at most 64 symbols.","span":{"file_name":"/Users/shelwitz/.cargo/registry/src/github.com-1ecc6299db9ec823/bio-0.39.0/src/pattern_matching/myers/builder.rs","byte_start":589038,"byte_end":589093,"line_start":122,"line_end":122,"column_start":5,"column_end":60}}]},{"kind":"Method","id":{"krate":0,"index":1763},"span":{"file_name":"/Users/shelwitz/.cargo/registry/src/github.com-1ecc6299db9ec823/bio-0.39.0/src/pattern_matching/myers/builder.rs","byte_start":589478,"byte_end":589487,"line_start":135,"line_end":135,"column_start":12,"column_end":21},"name":"build_128","qualname":"<MyersBuilder>::build_128","value":"pub fn build_128<C, P>(&Self, P) -> Myers<u128> where C: Borrow<u8>,\nP: IntoIterator<Item = C>, P::IntoIter: ExactSizeIterator","parent":null,"children":[],"decl_id":null,"docs":" Creates a Myers instance given a pattern, using `u128` as bit vector type.\n Pattern length is restricted to at most 128 symbols.\n","sig":null,"attributes":[{"value":"/ Creates a Myers instance given a pattern, using `u128` as bit vector type.","span":{"file_name":"/Users/shelwitz/.cargo/registry/src/github.com-1ecc6299db9ec823/bio-0.39.0/src/pattern_matching/myers/builder.rs","byte_start":589306,"byte_end":589384,"line_start":132,"line_end":132,"column_start":5,"column_end":83}},{"value":"/ Pattern length is restricted to at most 128 symbols.","span":{"file_name":"/Users/shelwitz/.cargo/registry/src/github.com-1ecc6299db9ec823/bio-0.39.0/src/pattern_matching/myers/builder.rs","byte_start":589389,"byte_end":589445,"line_start":133,"line_end":133,"column_start":5,"column_end":61}},{"value":"cfg(has_u128)","span":{"file_name":"/Users/shelwitz/.cargo/registry/src/github.com-1ecc6299db9ec823/bio-0.39.0/src/pattern_matching/myers/builder.rs","byte_start":589450,"byte_end":589466,"line_start":134,"line_end":134,"column_start":5,"column_end":21}}]},{"kind":"Method","id":{"krate":0,"index":1766},"span":{"file_name":"/Users/shelwitz/.cargo/registry/src/github.com-1ecc6299db9ec823/bio-0.39.0/src/pattern_matching/myers/builder.rs","byte_start":590164,"byte_end":590169,"line_start":159,"line_end":159,"column_start":12,"column_end":17},"name":"build","qualname":"<MyersBuilder>::build","value":"pub fn build<T, C, P>(&Self, P) -> Myers<T> where T: BitVec, C: Borrow<u8>,\nP: IntoIterator<Item = C>, P::IntoIter: ExactSizeIterator","parent":null,"children":[],"decl_id":null,"docs":" Creates a Myers instance given a pattern, using any desired type for bit vectors.\n Pattern length is restricted to the size of the bit vector `T`.","sig":null,"attributes":[{"value":"/ Creates a Myers instance given a pattern, using any desired type for bit vectors.","span":{"file_name":"/Users/shelwitz/.cargo/registry/src/github.com-1ecc6299db9ec823/bio-0.39.0/src/pattern_matching/myers/builder.rs","byte_start":589681,"byte_end":589766,"line_start":144,"line_end":144,"column_start":5,"column_end":90}},{"value":"/ Pattern length is restricted to the size of the bit vector `T`.","span":{"file_name":"/Users/shelwitz/.cargo/registry/src/github.com-1ecc6299db9ec823/bio-0.39.0/src/pattern_matching/myers/builder.rs","byte_start":589771,"byte_end":589838,"line_start":145,"line_end":145,"column_start":5,"column_end":72}},{"value":"/","span":{"file_name":"/Users/shelwitz/.cargo/registry/src/github.com-1ecc6299db9ec823/bio-0.39.0/src/pattern_matching/myers/builder.rs","byte_start":589843,"byte_end":589846,"line_start":146,"line_end":146,"column_start":5,"column_end":8}},{"value":"/ # Example:","span":{"file_name":"/Users/shelwitz/.cargo/registry/src/github.com-1ecc6299db9ec823/bio-0.39.0/src/pattern_matching/myers/builder.rs","byte_start":589851,"byte_end":589865,"line_start":147,"line_end":147,"column_start":5,"column_end":19}},{"value":"/","span":{"file_name":"/Users/shelwitz/.cargo/registry/src/github.com-1ecc6299db9ec823/bio-0.39.0/src/pattern_matching/myers/builder.rs","byte_start":589870,"byte_end":589873,"line_start":148,"line_end":148,"column_start":5,"column_end":8}},{"value":"/ ```","span":{"file_name":"/Users/shelwitz/.cargo/registry/src/github.com-1ecc6299db9ec823/bio-0.39.0/src/pattern_matching/myers/builder.rs","byte_start":589878,"byte_end":589885,"line_start":149,"line_end":149,"column_start":5,"column_end":12}},{"value":"/ # extern crate bio;","span":{"file_name":"/Users/shelwitz/.cargo/registry/src/github.com-1ecc6299db9ec823/bio-0.39.0/src/pattern_matching/myers/builder.rs","byte_start":589890,"byte_end":589913,"line_start":150,"line_end":150,"column_start":5,"column_end":28}},{"value":"/ use bio::pattern_matching::myers::{MyersBuilder, Myers};","span":{"file_name":"/Users/shelwitz/.cargo/registry/src/github.com-1ecc6299db9ec823/bio-0.39.0/src/pattern_matching/myers/builder.rs","byte_start":589918,"byte_end":589978,"line_start":151,"line_end":151,"column_start":5,"column_end":65}},{"value":"/","span":{"file_name":"/Users/shelwitz/.cargo/registry/src/github.com-1ecc6299db9ec823/bio-0.39.0/src/pattern_matching/myers/builder.rs","byte_start":589983,"byte_end":589986,"line_start":152,"line_end":152,"column_start":5,"column_end":8}},{"value":"/ # fn main() {","span":{"file_name":"/Users/shelwitz/.cargo/registry/src/github.com-1ecc6299db9ec823/bio-0.39.0/src/pattern_matching/myers/builder.rs","byte_start":589991,"byte_end":590008,"line_start":153,"line_end":153,"column_start":5,"column_end":22}},{"value":"/ let myers: Myers<u32> = MyersBuilder::new()","span":{"file_name":"/Users/shelwitz/.cargo/registry/src/github.com-1ecc6299db9ec823/bio-0.39.0/src/pattern_matching/myers/builder.rs","byte_start":590013,"byte_end":590060,"line_start":154,"line_end":154,"column_start":5,"column_end":52}},{"value":"/     .text_wildcard(b'*')","span":{"file_name":"/Users/shelwitz/.cargo/registry/src/github.com-1ecc6299db9ec823/bio-0.39.0/src/pattern_matching/myers/builder.rs","byte_start":590065,"byte_end":590093,"line_start":155,"line_end":155,"column_start":5,"column_end":33}},{"value":"/     .build(b\"TGAGCG*\");","span":{"file_name":"/Users/shelwitz/.cargo/registry/src/github.com-1ecc6299db9ec823/bio-0.39.0/src/pattern_matching/myers/builder.rs","byte_start":590098,"byte_end":590125,"line_start":156,"line_end":156,"column_start":5,"column_end":32}},{"value":"/ // ...","span":{"file_name":"/Users/shelwitz/.cargo/registry/src/github.com-1ecc6299db9ec823/bio-0.39.0/src/pattern_matching/myers/builder.rs","byte_start":590130,"byte_end":590140,"line_start":157,"line_end":157,"column_start":5,"column_end":15}},{"value":"/ # }","span":{"file_name":"/Users/shelwitz/.cargo/registry/src/github.com-1ecc6299db9ec823/bio-0.39.0/src/pattern_matching/myers/builder.rs","byte_start":590145,"byte_end":590152,"line_start":158,"line_end":158,"column_start":5,"column_end":12}}]},{"kind":"Method","id":{"krate":0,"index":1770},"span":{"file_name":"/Users/shelwitz/.cargo/registry/src/github.com-1ecc6299db9ec823/bio-0.39.0/src/pattern_matching/myers/builder.rs","byte_start":590611,"byte_end":590624,"line_start":171,"line_end":171,"column_start":12,"column_end":25},"name":"build_long_64","qualname":"<MyersBuilder>::build_long_64","value":"pub fn build_long_64<C, P>(&Self, P) -> MyersLong<u64> where C: Borrow<u8>,\nP: IntoIterator<Item = C>, P::IntoIter: ExactSizeIterator","parent":null,"children":[],"decl_id":null,"docs":" Creates a `long::Myers` instance given a pattern, using `u64` as bit vector type.\n Pattern length is not restricted regardless of the type of the bit vector.\n","sig":null,"attributes":[{"value":"/ Creates a `long::Myers` instance given a pattern, using `u64` as bit vector type.","span":{"file_name":"/Users/shelwitz/.cargo/registry/src/github.com-1ecc6299db9ec823/bio-0.39.0/src/pattern_matching/myers/builder.rs","byte_start":590431,"byte_end":590516,"line_start":169,"line_end":169,"column_start":5,"column_end":90}},{"value":"/ Pattern length is not restricted regardless of the type of the bit vector.","span":{"file_name":"/Users/shelwitz/.cargo/registry/src/github.com-1ecc6299db9ec823/bio-0.39.0/src/pattern_matching/myers/builder.rs","byte_start":590521,"byte_end":590599,"line_start":170,"line_end":170,"column_start":5,"column_end":83}}]},{"kind":"Method","id":{"krate":0,"index":1773},"span":{"file_name":"/Users/shelwitz/.cargo/registry/src/github.com-1ecc6299db9ec823/bio-0.39.0/src/pattern_matching/myers/builder.rs","byte_start":591028,"byte_end":591042,"line_start":183,"line_end":183,"column_start":12,"column_end":26},"name":"build_long_128","qualname":"<MyersBuilder>::build_long_128","value":"pub fn build_long_128<C, P>(&Self, P) -> MyersLong<u128> where C: Borrow<u8>,\nP: IntoIterator<Item = C>, P::IntoIter: ExactSizeIterator","parent":null,"children":[],"decl_id":null,"docs":" Creates a `long::Myers` instance given a pattern, using `u128` as bit vector type.\n Pattern length is not restricted regardless of the type of the bit vector.\n","sig":null,"attributes":[{"value":"/ Creates a `long::Myers` instance given a pattern, using `u128` as bit vector type.","span":{"file_name":"/Users/shelwitz/.cargo/registry/src/github.com-1ecc6299db9ec823/bio-0.39.0/src/pattern_matching/myers/builder.rs","byte_start":590826,"byte_end":590912,"line_start":180,"line_end":180,"column_start":5,"column_end":91}},{"value":"/ Pattern length is not restricted regardless of the type of the bit vector.","span":{"file_name":"/Users/shelwitz/.cargo/registry/src/github.com-1ecc6299db9ec823/bio-0.39.0/src/pattern_matching/myers/builder.rs","byte_start":590917,"byte_end":590995,"line_start":181,"line_end":181,"column_start":5,"column_end":83}},{"value":"cfg(has_u128)","span":{"file_name":"/Users/shelwitz/.cargo/registry/src/github.com-1ecc6299db9ec823/bio-0.39.0/src/pattern_matching/myers/builder.rs","byte_start":591000,"byte_end":591016,"line_start":182,"line_end":182,"column_start":5,"column_end":21}}]},{"kind":"Method","id":{"krate":0,"index":1776},"span":{"file_name":"/Users/shelwitz/.cargo/registry/src/github.com-1ecc6299db9ec823/bio-0.39.0/src/pattern_matching/myers/builder.rs","byte_start":591433,"byte_end":591443,"line_start":194,"line_end":194,"column_start":12,"column_end":22},"name":"build_long","qualname":"<MyersBuilder>::build_long","value":"pub fn build_long<T, C, P>(&Self, P) -> MyersLong<T> where T: BitVec,\nC: Borrow<u8>, P: IntoIterator<Item = C>, P::IntoIter: ExactSizeIterator","parent":null,"children":[],"decl_id":null,"docs":" Creates a `long::Myers` instance given a pattern, using any desired type for bit vectors.\n Pattern length is not restricted regardless of the type of the bit vector.\n","sig":null,"attributes":[{"value":"/ Creates a `long::Myers` instance given a pattern, using any desired type for bit vectors.","span":{"file_name":"/Users/shelwitz/.cargo/registry/src/github.com-1ecc6299db9ec823/bio-0.39.0/src/pattern_matching/myers/builder.rs","byte_start":591245,"byte_end":591338,"line_start":192,"line_end":192,"column_start":5,"column_end":98}},{"value":"/ Pattern length is not restricted regardless of the type of the bit vector.","span":{"file_name":"/Users/shelwitz/.cargo/registry/src/github.com-1ecc6299db9ec823/bio-0.39.0/src/pattern_matching/myers/builder.rs","byte_start":591343,"byte_end":591421,"line_start":193,"line_end":193,"column_start":5,"column_end":83}}]},{"kind":"Trait","id":{"krate":0,"index":1805},"span":{"file_name":"/Users/shelwitz/.cargo/registry/src/github.com-1ecc6299db9ec823/bio-0.39.0/src/pattern_matching/myers/helpers.rs","byte_start":592525,"byte_end":592533,"line_start":16,"line_end":16,"column_start":11,"column_end":19},"name":"DistType","qualname":"::pattern_matching::myers::helpers::DistType","value":"DistType: Copy + Debug + Default + AddAssign + SubAssign + PrimInt + FromPrimitive +\nToPrimitive + AsPrimitive<usize> + AsPrimitive<i64> + WrappingAdd + Sub<Output\n= Self>","parent":null,"children":[],"decl_id":null,"docs":" Trait for types that should be used to store the distance score when using the simple\n Myers algorithm (not the block-based one, which always uses `usize`).","sig":null,"attributes":[{"value":"/ Trait for types that should be used to store the distance score when using the simple","span":{"file_name":"/Users/shelwitz/.cargo/registry/src/github.com-1ecc6299db9ec823/bio-0.39.0/src/pattern_matching/myers/helpers.rs","byte_start":591842,"byte_end":591931,"line_start":6,"line_end":6,"column_start":1,"column_end":90}},{"value":"/ Myers algorithm (not the block-based one, which always uses `usize`).","span":{"file_name":"/Users/shelwitz/.cargo/registry/src/github.com-1ecc6299db9ec823/bio-0.39.0/src/pattern_matching/myers/helpers.rs","byte_start":591932,"byte_end":592005,"line_start":7,"line_end":7,"column_start":1,"column_end":74}},{"value":"/","span":{"file_name":"/Users/shelwitz/.cargo/registry/src/github.com-1ecc6299db9ec823/bio-0.39.0/src/pattern_matching/myers/helpers.rs","byte_start":592006,"byte_end":592009,"line_start":8,"line_end":8,"column_start":1,"column_end":4}},{"value":"/ For all currently implemented BitVec types, the maximum possible distance","span":{"file_name":"/Users/shelwitz/.cargo/registry/src/github.com-1ecc6299db9ec823/bio-0.39.0/src/pattern_matching/myers/helpers.rs","byte_start":592010,"byte_end":592087,"line_start":9,"line_end":9,"column_start":1,"column_end":78}},{"value":"/ can be stored in `u8`. Custom implementations using bigger integers can","span":{"file_name":"/Users/shelwitz/.cargo/registry/src/github.com-1ecc6299db9ec823/bio-0.39.0/src/pattern_matching/myers/helpers.rs","byte_start":592088,"byte_end":592163,"line_start":10,"line_end":10,"column_start":1,"column_end":76}},{"value":"/ adjust `DistType` to hold bigger numbers. Note that due to how the traceback","span":{"file_name":"/Users/shelwitz/.cargo/registry/src/github.com-1ecc6299db9ec823/bio-0.39.0/src/pattern_matching/myers/helpers.rs","byte_start":592164,"byte_end":592244,"line_start":11,"line_end":11,"column_start":1,"column_end":81}},{"value":"/ algorithm currently works, `DistType` should be able to represent numbers larger","span":{"file_name":"/Users/shelwitz/.cargo/registry/src/github.com-1ecc6299db9ec823/bio-0.39.0/src/pattern_matching/myers/helpers.rs","byte_start":592245,"byte_end":592329,"line_start":12,"line_end":12,"column_start":1,"column_end":85}},{"value":"/ than the bit-width of the `BitVec` type. For instance, a hypothetical `BitVec` type","span":{"file_name":"/Users/shelwitz/.cargo/registry/src/github.com-1ecc6299db9ec823/bio-0.39.0/src/pattern_matching/myers/helpers.rs","byte_start":592330,"byte_end":592417,"line_start":13,"line_end":13,"column_start":1,"column_end":88}},{"value":"/ of `u256` should use `u16` as distance, since `u8` cannot store numbers larger","span":{"file_name":"/Users/shelwitz/.cargo/registry/src/github.com-1ecc6299db9ec823/bio-0.39.0/src/pattern_matching/myers/helpers.rs","byte_start":592418,"byte_end":592500,"line_start":14,"line_end":14,"column_start":1,"column_end":83}},{"value":"/ than 255.","span":{"file_name":"/Users/shelwitz/.cargo/registry/src/github.com-1ecc6299db9ec823/bio-0.39.0/src/pattern_matching/myers/helpers.rs","byte_start":592501,"byte_end":592514,"line_start":15,"line_end":15,"column_start":1,"column_end":14}}]},{"kind":"Trait","id":{"krate":0,"index":1811},"span":{"file_name":"/Users/shelwitz/.cargo/registry/src/github.com-1ecc6299db9ec823/bio-0.39.0/src/pattern_matching/myers/helpers.rs","byte_start":593077,"byte_end":593083,"line_start":36,"line_end":36,"column_start":11,"column_end":17},"name":"BitVec","qualname":"::pattern_matching::myers::helpers::BitVec","value":"BitVec: Copy + Debug + Binary + Default + Add + Sub + BitOr + BitOrAssign + BitAnd +\nBitXor + Not + Shl<usize> + ShlAssign<usize> + ShrAssign<usize> + PrimInt +\nWrappingAdd + ToPrimitive + FromPrimitive + AsPrimitive<usize> +\nAsPrimitive<i64>","parent":null,"children":[{"krate":0,"index":1812}],"decl_id":null,"docs":" This trait must be implemented for integer types serving as bit vectors.\n Only unsigned integers will work correctly.\n","sig":null,"attributes":[{"value":"/ This trait must be implemented for integer types serving as bit vectors.","span":{"file_name":"/Users/shelwitz/.cargo/registry/src/github.com-1ecc6299db9ec823/bio-0.39.0/src/pattern_matching/myers/helpers.rs","byte_start":592942,"byte_end":593018,"line_start":34,"line_end":34,"column_start":1,"column_end":77}},{"value":"/ Only unsigned integers will work correctly.","span":{"file_name":"/Users/shelwitz/.cargo/registry/src/github.com-1ecc6299db9ec823/bio-0.39.0/src/pattern_matching/myers/helpers.rs","byte_start":593019,"byte_end":593066,"line_start":35,"line_end":35,"column_start":1,"column_end":48}}]},{"kind":"Type","id":{"krate":0,"index":1812},"span":{"file_name":"/Users/shelwitz/.cargo/registry/src/github.com-1ecc6299db9ec823/bio-0.39.0/src/pattern_matching/myers/helpers.rs","byte_start":593713,"byte_end":593721,"line_start":60,"line_end":60,"column_start":10,"column_end":18},"name":"DistType","qualname":"::pattern_matching::myers::helpers::BitVec::DistType","value":"type DistType: DistType;","parent":{"krate":0,"index":1811},"children":[],"decl_id":null,"docs":" Type that should be used to store the distance score when using the simple\n Myers algorithm (not the block-based one, which always uses `usize`).\n","sig":null,"attributes":[{"value":"/ Type that should be used to store the distance score when using the simple","span":{"file_name":"/Users/shelwitz/.cargo/registry/src/github.com-1ecc6299db9ec823/bio-0.39.0/src/pattern_matching/myers/helpers.rs","byte_start":593547,"byte_end":593625,"line_start":58,"line_end":58,"column_start":5,"column_end":83}},{"value":"/ Myers algorithm (not the block-based one, which always uses `usize`).","span":{"file_name":"/Users/shelwitz/.cargo/registry/src/github.com-1ecc6299db9ec823/bio-0.39.0/src/pattern_matching/myers/helpers.rs","byte_start":593630,"byte_end":593703,"line_start":59,"line_end":59,"column_start":5,"column_end":78}}]},{"kind":"Mod","id":{"krate":0,"index":1825},"span":{"file_name":"/Users/shelwitz/.cargo/registry/src/github.com-1ecc6299db9ec823/bio-0.39.0/src/pattern_matching/myers/long.rs","byte_start":0,"byte_end":0,"line_start":1,"line_end":1,"column_start":1,"column_end":1},"name":"long","qualname":"::pattern_matching::myers::long","value":"/Users/shelwitz/.cargo/registry/src/github.com-1ecc6299db9ec823/bio-0.39.0/src/pattern_matching/myers/long.rs","parent":null,"children":[{"krate":0,"index":1826},{"krate":0,"index":1829},{"krate":0,"index":1830},{"krate":0,"index":1833},{"krate":0,"index":1836},{"krate":0,"index":1839},{"krate":0,"index":1842},{"krate":0,"index":1843},{"krate":0,"index":1845},{"krate":0,"index":1848},{"krate":0,"index":1851},{"krate":0,"index":1854},{"krate":0,"index":1857},{"krate":0,"index":1860},{"krate":0,"index":1861},{"krate":0,"index":1864},{"krate":0,"index":1867},{"krate":0,"index":1868},{"krate":0,"index":1871},{"krate":0,"index":1874},{"krate":0,"index":1877},{"krate":0,"index":1880},{"krate":0,"index":1885},{"krate":0,"index":1890},{"krate":0,"index":1902},{"krate":0,"index":1904},{"krate":0,"index":1909},{"krate":0,"index":5100},{"krate":0,"index":5104},{"krate":0,"index":1917},{"krate":0,"index":1920},{"krate":0,"index":1929},{"krate":0,"index":1932},{"krate":0,"index":1946},{"krate":0,"index":1950},{"krate":0,"index":5107},{"krate":0,"index":5257}],"decl_id":null,"docs":" Block-based version of the algorithm, which does not restrict pattern length.","sig":null,"attributes":[{"value":"/ Block-based version of the algorithm, which does not restrict pattern length.","span":{"file_name":"/Users/shelwitz/.cargo/registry/src/github.com-1ecc6299db9ec823/bio-0.39.0/src/pattern_matching/myers/long.rs","byte_start":594825,"byte_end":594906,"line_start":1,"line_end":1,"column_start":1,"column_end":82}},{"value":"/","span":{"file_name":"/Users/shelwitz/.cargo/registry/src/github.com-1ecc6299db9ec823/bio-0.39.0/src/pattern_matching/myers/long.rs","byte_start":594907,"byte_end":594910,"line_start":2,"line_end":2,"column_start":1,"column_end":4}},{"value":"/ This module implements the block-based version of the Myers pattern matching algorithm.","span":{"file_name":"/Users/shelwitz/.cargo/registry/src/github.com-1ecc6299db9ec823/bio-0.39.0/src/pattern_matching/myers/long.rs","byte_start":594911,"byte_end":595002,"line_start":3,"line_end":3,"column_start":1,"column_end":92}},{"value":"/ It can be used for searching patterns of any length and obtaining semiglobal alignments","span":{"file_name":"/Users/shelwitz/.cargo/registry/src/github.com-1ecc6299db9ec823/bio-0.39.0/src/pattern_matching/myers/long.rs","byte_start":595003,"byte_end":595094,"line_start":4,"line_end":4,"column_start":1,"column_end":92}},{"value":"/ of the hits. Apart from that, the `Myers` object in this module provides exactly the same","span":{"file_name":"/Users/shelwitz/.cargo/registry/src/github.com-1ecc6299db9ec823/bio-0.39.0/src/pattern_matching/myers/long.rs","byte_start":595095,"byte_end":595188,"line_start":5,"line_end":5,"column_start":1,"column_end":94}},{"value":"/ API as the 'simple' version `bio::pattern_matching::myers::Myers`.","span":{"file_name":"/Users/shelwitz/.cargo/registry/src/github.com-1ecc6299db9ec823/bio-0.39.0/src/pattern_matching/myers/long.rs","byte_start":595189,"byte_end":595259,"line_start":6,"line_end":6,"column_start":1,"column_end":71}},{"value":"/ For short patterns, the 'simple' version is still to be preferred, as the block-based","span":{"file_name":"/Users/shelwitz/.cargo/registry/src/github.com-1ecc6299db9ec823/bio-0.39.0/src/pattern_matching/myers/long.rs","byte_start":595260,"byte_end":595349,"line_start":7,"line_end":7,"column_start":1,"column_end":90}},{"value":"/ algorithm is slower.","span":{"file_name":"/Users/shelwitz/.cargo/registry/src/github.com-1ecc6299db9ec823/bio-0.39.0/src/pattern_matching/myers/long.rs","byte_start":595350,"byte_end":595374,"line_start":8,"line_end":8,"column_start":1,"column_end":25}}]},{"kind":"Struct","id":{"krate":0,"index":1885},"span":{"file_name":"/Users/shelwitz/.cargo/registry/src/github.com-1ecc6299db9ec823/bio-0.39.0/src/pattern_matching/myers/long.rs","byte_start":595885,"byte_end":595890,"line_start":34,"line_end":34,"column_start":12,"column_end":17},"name":"Myers","qualname":"::pattern_matching::myers::long::Myers","value":"Myers {  }","parent":null,"children":[{"krate":0,"index":1887},{"krate":0,"index":1888},{"krate":0,"index":1889}],"decl_id":null,"docs":" Myers algorithm.\n","sig":null,"attributes":[{"value":"/ Myers algorithm.","span":{"file_name":"/Users/shelwitz/.cargo/registry/src/github.com-1ecc6299db9ec823/bio-0.39.0/src/pattern_matching/myers/long.rs","byte_start":595853,"byte_end":595873,"line_start":33,"line_end":33,"column_start":1,"column_end":21}}]},{"kind":"Method","id":{"krate":0,"index":1892},"span":{"file_name":"/Users/shelwitz/.cargo/registry/src/github.com-1ecc6299db9ec823/bio-0.39.0/src/pattern_matching/myers/long.rs","byte_start":596146,"byte_end":596149,"line_start":46,"line_end":46,"column_start":12,"column_end":15},"name":"new","qualname":"<Myers<T>>::new","value":"pub fn new<P, C>(P) -> Self where C: Borrow<u8>, P: IntoIterator<Item = C>,\nP::IntoIter: ExactSizeIterator","parent":null,"children":[],"decl_id":null,"docs":" Create a new instance of Myers algorithm for a given pattern.\n","sig":null,"attributes":[{"value":"/ Create a new instance of Myers algorithm for a given pattern.","span":{"file_name":"/Users/shelwitz/.cargo/registry/src/github.com-1ecc6299db9ec823/bio-0.39.0/src/pattern_matching/myers/long.rs","byte_start":596055,"byte_end":596120,"line_start":44,"line_end":44,"column_start":5,"column_end":70}},{"value":"inline","span":{"file_name":"/Users/shelwitz/.cargo/registry/src/github.com-1ecc6299db9ec823/bio-0.39.0/src/pattern_matching/myers/long.rs","byte_start":596125,"byte_end":596134,"line_start":45,"line_end":45,"column_start":5,"column_end":14}}]},{"kind":"Struct","id":{"krate":0,"index":2017},"span":{"file_name":"/Users/shelwitz/.cargo/registry/src/github.com-1ecc6299db9ec823/bio-0.39.0/src/pattern_matching/myers/simple.rs","byte_start":610409,"byte_end":610414,"line_start":15,"line_end":15,"column_start":12,"column_end":17},"name":"Myers","qualname":"::pattern_matching::myers::simple::Myers","value":"Myers {  }","parent":null,"children":[{"krate":0,"index":2019},{"krate":0,"index":2021},{"krate":0,"index":2022},{"krate":0,"index":2023}],"decl_id":null,"docs":" Myers algorithm.\n","sig":null,"attributes":[{"value":"/ Myers algorithm.","span":{"file_name":"/Users/shelwitz/.cargo/registry/src/github.com-1ecc6299db9ec823/bio-0.39.0/src/pattern_matching/myers/simple.rs","byte_start":610377,"byte_end":610397,"line_start":14,"line_end":14,"column_start":1,"column_end":21}}]},{"kind":"Method","id":{"krate":0,"index":2026},"span":{"file_name":"/Users/shelwitz/.cargo/registry/src/github.com-1ecc6299db9ec823/bio-0.39.0/src/pattern_matching/myers/simple.rs","byte_start":610715,"byte_end":610718,"line_start":28,"line_end":28,"column_start":12,"column_end":15},"name":"new","qualname":"<Myers<T>>::new","value":"pub fn new<P, C>(P) -> Self where C: Borrow<u8>, P: IntoIterator<Item = C>,\nP::IntoIter: ExactSizeIterator","parent":null,"children":[],"decl_id":null,"docs":" Create a new instance of Myers algorithm for a given pattern.\n","sig":null,"attributes":[{"value":"/ Create a new instance of Myers algorithm for a given pattern.","span":{"file_name":"/Users/shelwitz/.cargo/registry/src/github.com-1ecc6299db9ec823/bio-0.39.0/src/pattern_matching/myers/simple.rs","byte_start":610624,"byte_end":610689,"line_start":26,"line_end":26,"column_start":5,"column_end":70}},{"value":"inline","span":{"file_name":"/Users/shelwitz/.cargo/registry/src/github.com-1ecc6299db9ec823/bio-0.39.0/src/pattern_matching/myers/simple.rs","byte_start":610694,"byte_end":610703,"line_start":27,"line_end":27,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":2037},"span":{"file_name":"/Users/shelwitz/.cargo/registry/src/github.com-1ecc6299db9ec823/bio-0.39.0/src/pattern_matching/myers/simple.rs","byte_start":613456,"byte_end":613457,"line_start":119,"line_end":119,"column_start":12,"column_end":13},"name":"m","qualname":"<Myers<T>>::m","value":"pub fn m(&Self) -> T::DistType","parent":null,"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[{"value":"inline","span":{"file_name":"/Users/shelwitz/.cargo/registry/src/github.com-1ecc6299db9ec823/bio-0.39.0/src/pattern_matching/myers/simple.rs","byte_start":613435,"byte_end":613444,"line_start":118,"line_end":118,"column_start":5,"column_end":14}}]},{"kind":"Type","id":{"krate":0,"index":2114},"span":{"file_name":"/Users/shelwitz/.cargo/registry/src/github.com-1ecc6299db9ec823/bio-0.39.0/src/pattern_matching/myers/traceback.rs","byte_start":618550,"byte_end":618566,"line_start":18,"line_end":18,"column_start":10,"column_end":26},"name":"TracebackHandler","qualname":"::pattern_matching::myers::traceback::StatesHandler::TracebackHandler","value":"type TracebackHandler: TracebackHandler<'a, T, D>;","parent":{"krate":0,"index":2110},"children":[],"decl_id":null,"docs":" Object that helps obtaining a single traceback path\n","sig":null,"attributes":[{"value":"/ Object that helps obtaining a single traceback path","span":{"file_name":"/Users/shelwitz/.cargo/registry/src/github.com-1ecc6299db9ec823/bio-0.39.0/src/pattern_matching/myers/traceback.rs","byte_start":618485,"byte_end":618540,"line_start":17,"line_end":17,"column_start":5,"column_end":60}}]},{"kind":"Type","id":{"krate":0,"index":2115},"span":{"file_name":"/Users/shelwitz/.cargo/registry/src/github.com-1ecc6299db9ec823/bio-0.39.0/src/pattern_matching/myers/traceback.rs","byte_start":618667,"byte_end":618682,"line_start":20,"line_end":20,"column_start":10,"column_end":25},"name":"TracebackColumn","qualname":"::pattern_matching::myers::traceback::StatesHandler::TracebackColumn","value":"type TracebackColumn: ?Sized;","parent":{"krate":0,"index":2110},"children":[],"decl_id":null,"docs":" Type that represents a column in the traceback matrix\n","sig":null,"attributes":[{"value":"/ Type that represents a column in the traceback matrix","span":{"file_name":"/Users/shelwitz/.cargo/registry/src/github.com-1ecc6299db9ec823/bio-0.39.0/src/pattern_matching/myers/traceback.rs","byte_start":618600,"byte_end":618657,"line_start":19,"line_end":19,"column_start":5,"column_end":62}}]},{"kind":"Mod","id":{"krate":0,"index":2165},"span":{"file_name":"/Users/shelwitz/.cargo/registry/src/github.com-1ecc6299db9ec823/bio-0.39.0/src/pattern_matching/pssm/mod.rs","byte_start":0,"byte_end":0,"line_start":1,"line_end":1,"column_start":1,"column_end":1},"name":"pssm","qualname":"::pattern_matching::pssm","value":"/Users/shelwitz/.cargo/registry/src/github.com-1ecc6299db9ec823/bio-0.39.0/src/pattern_matching/pssm/mod.rs","parent":null,"children":[{"krate":0,"index":2166},{"krate":0,"index":2169},{"krate":0,"index":2172},{"krate":0,"index":2175},{"krate":0,"index":2178},{"krate":0,"index":2216},{"krate":0,"index":2223},{"krate":0,"index":2260},{"krate":0,"index":2263},{"krate":0,"index":2264},{"krate":0,"index":2267},{"krate":0,"index":2270},{"krate":0,"index":2273},{"krate":0,"index":2274},{"krate":0,"index":2275},{"krate":0,"index":5464},{"krate":0,"index":5468},{"krate":0,"index":5470},{"krate":0,"index":5472},{"krate":0,"index":5473},{"krate":0,"index":2276},{"krate":0,"index":2278}],"decl_id":null,"docs":" Create a weight matrix representing a set of aligned reference sequences\n that constitute a motif, and use this matrix to scan query sequences for\n occurrences of this motif.\n Complexity: O(n*m) for motif length n and query length m","sig":null,"attributes":[{"value":"/ Create a weight matrix representing a set of aligned reference sequences","span":{"file_name":"/Users/shelwitz/.cargo/registry/src/github.com-1ecc6299db9ec823/bio-0.39.0/src/pattern_matching/pssm/mod.rs","byte_start":633296,"byte_end":633372,"line_start":6,"line_end":6,"column_start":1,"column_end":77}},{"value":"/ that constitute a motif, and use this matrix to scan query sequences for","span":{"file_name":"/Users/shelwitz/.cargo/registry/src/github.com-1ecc6299db9ec823/bio-0.39.0/src/pattern_matching/pssm/mod.rs","byte_start":633373,"byte_end":633449,"line_start":7,"line_end":7,"column_start":1,"column_end":77}},{"value":"/ occurrences of this motif.","span":{"file_name":"/Users/shelwitz/.cargo/registry/src/github.com-1ecc6299db9ec823/bio-0.39.0/src/pattern_matching/pssm/mod.rs","byte_start":633450,"byte_end":633480,"line_start":8,"line_end":8,"column_start":1,"column_end":31}},{"value":"/ Complexity: O(n*m) for motif length n and query length m","span":{"file_name":"/Users/shelwitz/.cargo/registry/src/github.com-1ecc6299db9ec823/bio-0.39.0/src/pattern_matching/pssm/mod.rs","byte_start":633481,"byte_end":633541,"line_start":9,"line_end":9,"column_start":1,"column_end":61}},{"value":"/","span":{"file_name":"/Users/shelwitz/.cargo/registry/src/github.com-1ecc6299db9ec823/bio-0.39.0/src/pattern_matching/pssm/mod.rs","byte_start":633542,"byte_end":633545,"line_start":10,"line_end":10,"column_start":1,"column_end":4}},{"value":"/ The position-specific scoring matrix (PSSM), aka position weight matrix (PWM),","span":{"file_name":"/Users/shelwitz/.cargo/registry/src/github.com-1ecc6299db9ec823/bio-0.39.0/src/pattern_matching/pssm/mod.rs","byte_start":633546,"byte_end":633628,"line_start":11,"line_end":11,"column_start":1,"column_end":83}},{"value":"/ algorithm is implemented for both DNA and amino-acid sequences.","span":{"file_name":"/Users/shelwitz/.cargo/registry/src/github.com-1ecc6299db9ec823/bio-0.39.0/src/pattern_matching/pssm/mod.rs","byte_start":633629,"byte_end":633696,"line_start":12,"line_end":12,"column_start":1,"column_end":68}},{"value":"/","span":{"file_name":"/Users/shelwitz/.cargo/registry/src/github.com-1ecc6299db9ec823/bio-0.39.0/src/pattern_matching/pssm/mod.rs","byte_start":633697,"byte_end":633700,"line_start":13,"line_end":13,"column_start":1,"column_end":4}},{"value":"/ # Examples","span":{"file_name":"/Users/shelwitz/.cargo/registry/src/github.com-1ecc6299db9ec823/bio-0.39.0/src/pattern_matching/pssm/mod.rs","byte_start":633701,"byte_end":633715,"line_start":14,"line_end":14,"column_start":1,"column_end":15}},{"value":"/","span":{"file_name":"/Users/shelwitz/.cargo/registry/src/github.com-1ecc6299db9ec823/bio-0.39.0/src/pattern_matching/pssm/mod.rs","byte_start":633716,"byte_end":633719,"line_start":15,"line_end":15,"column_start":1,"column_end":4}},{"value":"/ use bio::pattern_matching::pssm::DNAMotif;","span":{"file_name":"/Users/shelwitz/.cargo/registry/src/github.com-1ecc6299db9ec823/bio-0.39.0/src/pattern_matching/pssm/mod.rs","byte_start":633720,"byte_end":633766,"line_start":16,"line_end":16,"column_start":1,"column_end":47}},{"value":"/ let pssm = DNAMotif::from_seqs(vec![","span":{"file_name":"/Users/shelwitz/.cargo/registry/src/github.com-1ecc6299db9ec823/bio-0.39.0/src/pattern_matching/pssm/mod.rs","byte_start":633767,"byte_end":633807,"line_start":17,"line_end":17,"column_start":1,"column_end":41}},{"value":"/            b\"AAAA\".to_vec(),","span":{"file_name":"/Users/shelwitz/.cargo/registry/src/github.com-1ecc6299db9ec823/bio-0.39.0/src/pattern_matching/pssm/mod.rs","byte_start":633808,"byte_end":633840,"line_start":18,"line_end":18,"column_start":1,"column_end":33}},{"value":"/            b\"AATA\".to_vec(),","span":{"file_name":"/Users/shelwitz/.cargo/registry/src/github.com-1ecc6299db9ec823/bio-0.39.0/src/pattern_matching/pssm/mod.rs","byte_start":633841,"byte_end":633873,"line_start":19,"line_end":19,"column_start":1,"column_end":33}},{"value":"/            b\"AAGA\".to_vec(),","span":{"file_name":"/Users/shelwitz/.cargo/registry/src/github.com-1ecc6299db9ec823/bio-0.39.0/src/pattern_matching/pssm/mod.rs","byte_start":633874,"byte_end":633906,"line_start":20,"line_end":20,"column_start":1,"column_end":33}},{"value":"/            b\"AAAA\".to_vec(),","span":{"file_name":"/Users/shelwitz/.cargo/registry/src/github.com-1ecc6299db9ec823/bio-0.39.0/src/pattern_matching/pssm/mod.rs","byte_start":633907,"byte_end":633939,"line_start":21,"line_end":21,"column_start":1,"column_end":33}},{"value":"/        ].as_ref(), None).unwrap();","span":{"file_name":"/Users/shelwitz/.cargo/registry/src/github.com-1ecc6299db9ec823/bio-0.39.0/src/pattern_matching/pssm/mod.rs","byte_start":633940,"byte_end":633978,"line_start":22,"line_end":22,"column_start":1,"column_end":39}},{"value":"/ let start_pos = pssm.score(b\"CCCCCAATA\").unwrap().loc;","span":{"file_name":"/Users/shelwitz/.cargo/registry/src/github.com-1ecc6299db9ec823/bio-0.39.0/src/pattern_matching/pssm/mod.rs","byte_start":633979,"byte_end":634037,"line_start":23,"line_end":23,"column_start":1,"column_end":59}},{"value":"/ println!(\"motif found at position {}\", start_pos);","span":{"file_name":"/Users/shelwitz/.cargo/registry/src/github.com-1ecc6299db9ec823/bio-0.39.0/src/pattern_matching/pssm/mod.rs","byte_start":634038,"byte_end":634092,"line_start":24,"line_end":24,"column_start":1,"column_end":55}},{"value":"/","span":{"file_name":"/Users/shelwitz/.cargo/registry/src/github.com-1ecc6299db9ec823/bio-0.39.0/src/pattern_matching/pssm/mod.rs","byte_start":634093,"byte_end":634096,"line_start":25,"line_end":25,"column_start":1,"column_end":4}},{"value":"/ /* amino acid sequences are supported, too */","span":{"file_name":"/Users/shelwitz/.cargo/registry/src/github.com-1ecc6299db9ec823/bio-0.39.0/src/pattern_matching/pssm/mod.rs","byte_start":634097,"byte_end":634146,"line_start":26,"line_end":26,"column_start":1,"column_end":50}},{"value":"/ use pssm::pattern_matching::pssm::ProtMotif;","span":{"file_name":"/Users/shelwitz/.cargo/registry/src/github.com-1ecc6299db9ec823/bio-0.39.0/src/pattern_matching/pssm/mod.rs","byte_start":634147,"byte_end":634195,"line_start":27,"line_end":27,"column_start":1,"column_end":49}},{"value":"/ let pssm = ProtMotif::from_seqs(vec![","span":{"file_name":"/Users/shelwitz/.cargo/registry/src/github.com-1ecc6299db9ec823/bio-0.39.0/src/pattern_matching/pssm/mod.rs","byte_start":634196,"byte_end":634237,"line_start":28,"line_end":28,"column_start":1,"column_end":42}},{"value":"/            b\"ARNNYM\".to_vec(),","span":{"file_name":"/Users/shelwitz/.cargo/registry/src/github.com-1ecc6299db9ec823/bio-0.39.0/src/pattern_matching/pssm/mod.rs","byte_start":634238,"byte_end":634272,"line_start":29,"line_end":29,"column_start":1,"column_end":35}},{"value":"/            b\"ARNRYM\".to_vec(),","span":{"file_name":"/Users/shelwitz/.cargo/registry/src/github.com-1ecc6299db9ec823/bio-0.39.0/src/pattern_matching/pssm/mod.rs","byte_start":634273,"byte_end":634307,"line_start":30,"line_end":30,"column_start":1,"column_end":35}},{"value":"/            b\"ARNNCM\".to_vec(),","span":{"file_name":"/Users/shelwitz/.cargo/registry/src/github.com-1ecc6299db9ec823/bio-0.39.0/src/pattern_matching/pssm/mod.rs","byte_start":634308,"byte_end":634342,"line_start":31,"line_end":31,"column_start":1,"column_end":35}},{"value":"/            b\"ARNNYM\".to_vec(),","span":{"file_name":"/Users/shelwitz/.cargo/registry/src/github.com-1ecc6299db9ec823/bio-0.39.0/src/pattern_matching/pssm/mod.rs","byte_start":634343,"byte_end":634377,"line_start":32,"line_end":32,"column_start":1,"column_end":35}},{"value":"/        ].as_ref(), None).unwrap();","span":{"file_name":"/Users/shelwitz/.cargo/registry/src/github.com-1ecc6299db9ec823/bio-0.39.0/src/pattern_matching/pssm/mod.rs","byte_start":634378,"byte_end":634416,"line_start":33,"line_end":33,"column_start":1,"column_end":39}}]},{"kind":"Struct","id":{"krate":0,"index":5416},"span":{"file_name":"/Users/shelwitz/.cargo/registry/src/github.com-1ecc6299db9ec823/bio-0.39.0/src/pattern_matching/pssm/dnamotif.rs","byte_start":643624,"byte_end":643632,"line_start":13,"line_end":13,"column_start":12,"column_end":20},"name":"DNAMotif","qualname":"::pattern_matching::pssm::dnamotif::DNAMotif","value":"DNAMotif { scores, min_score, max_score }","parent":null,"children":[{"krate":0,"index":5417},{"krate":0,"index":5418},{"krate":0,"index":5419}],"decl_id":null,"docs":" Position-specific scoring matrix for DNA sequences\n","sig":null,"attributes":[{"value":"/ Position-specific scoring matrix for DNA sequences","span":{"file_name":"/Users/shelwitz/.cargo/registry/src/github.com-1ecc6299db9ec823/bio-0.39.0/src/pattern_matching/pssm/dnamotif.rs","byte_start":643523,"byte_end":643577,"line_start":11,"line_end":11,"column_start":1,"column_end":55}}]},{"kind":"Field","id":{"krate":0,"index":5417},"span":{"file_name":"/Users/shelwitz/.cargo/registry/src/github.com-1ecc6299db9ec823/bio-0.39.0/src/pattern_matching/pssm/dnamotif.rs","byte_start":643720,"byte_end":643726,"line_start":15,"line_end":15,"column_start":9,"column_end":15},"name":"scores","qualname":"::pattern_matching::pssm::dnamotif::DNAMotif::scores","value":"ndarray::ArrayBase<ndarray::OwnedRepr<f32>, ndarray::Dim<[usize; 2]>>","parent":{"krate":0,"index":5416},"children":[],"decl_id":null,"docs":" matrix holding weights at each position, indexed by [position, base]\n","sig":null,"attributes":[{"value":"/ matrix holding weights at each position, indexed by [position, base]","span":{"file_name":"/Users/shelwitz/.cargo/registry/src/github.com-1ecc6299db9ec823/bio-0.39.0/src/pattern_matching/pssm/dnamotif.rs","byte_start":643639,"byte_end":643711,"line_start":14,"line_end":14,"column_start":5,"column_end":77}}]},{"kind":"Field","id":{"krate":0,"index":5418},"span":{"file_name":"/Users/shelwitz/.cargo/registry/src/github.com-1ecc6299db9ec823/bio-0.39.0/src/pattern_matching/pssm/dnamotif.rs","byte_start":643794,"byte_end":643803,"line_start":17,"line_end":17,"column_start":9,"column_end":18},"name":"min_score","qualname":"::pattern_matching::pssm::dnamotif::DNAMotif::min_score","value":"f32","parent":{"krate":0,"index":5416},"children":[],"decl_id":null,"docs":" sum of \"worst\" base at each position\n","sig":null,"attributes":[{"value":"/ sum of \"worst\" base at each position","span":{"file_name":"/Users/shelwitz/.cargo/registry/src/github.com-1ecc6299db9ec823/bio-0.39.0/src/pattern_matching/pssm/dnamotif.rs","byte_start":643745,"byte_end":643785,"line_start":16,"line_end":16,"column_start":5,"column_end":45}}]},{"kind":"Field","id":{"krate":0,"index":5419},"span":{"file_name":"/Users/shelwitz/.cargo/registry/src/github.com-1ecc6299db9ec823/bio-0.39.0/src/pattern_matching/pssm/dnamotif.rs","byte_start":643862,"byte_end":643871,"line_start":19,"line_end":19,"column_start":9,"column_end":18},"name":"max_score","qualname":"::pattern_matching::pssm::dnamotif::DNAMotif::max_score","value":"f32","parent":{"krate":0,"index":5416},"children":[],"decl_id":null,"docs":" sum of \"best\" base at each position\n","sig":null,"attributes":[{"value":"/ sum of \"best\" base at each position","span":{"file_name":"/Users/shelwitz/.cargo/registry/src/github.com-1ecc6299db9ec823/bio-0.39.0/src/pattern_matching/pssm/dnamotif.rs","byte_start":643814,"byte_end":643853,"line_start":18,"line_end":18,"column_start":5,"column_end":44}}]},{"kind":"Method","id":{"krate":0,"index":2194},"span":{"file_name":"/Users/shelwitz/.cargo/registry/src/github.com-1ecc6299db9ec823/bio-0.39.0/src/pattern_matching/pssm/dnamotif.rs","byte_start":644350,"byte_end":644359,"line_start":32,"line_end":32,"column_start":12,"column_end":21},"name":"from_seqs","qualname":"<DNAMotif>::from_seqs","value":"pub fn from_seqs(&[Vec<u8>], Option<&[f32]>) -> Result<Self>","parent":null,"children":[],"decl_id":null,"docs":" Returns a Motif representing the sequences provided.\n # Arguments\n * `seqs` - sequences incorporated into motif\n * `pseudos` - array slice with a pseudocount for each monomer;\n    defaults to pssm::DEF_PSEUDO for all if None is supplied","sig":null,"attributes":[{"value":"/ Returns a Motif representing the sequences provided.","span":{"file_name":"/Users/shelwitz/.cargo/registry/src/github.com-1ecc6299db9ec823/bio-0.39.0/src/pattern_matching/pssm/dnamotif.rs","byte_start":643901,"byte_end":643957,"line_start":23,"line_end":23,"column_start":5,"column_end":61}},{"value":"/ # Arguments","span":{"file_name":"/Users/shelwitz/.cargo/registry/src/github.com-1ecc6299db9ec823/bio-0.39.0/src/pattern_matching/pssm/dnamotif.rs","byte_start":643962,"byte_end":643977,"line_start":24,"line_end":24,"column_start":5,"column_end":20}},{"value":"/ * `seqs` - sequences incorporated into motif","span":{"file_name":"/Users/shelwitz/.cargo/registry/src/github.com-1ecc6299db9ec823/bio-0.39.0/src/pattern_matching/pssm/dnamotif.rs","byte_start":643982,"byte_end":644030,"line_start":25,"line_end":25,"column_start":5,"column_end":53}},{"value":"/ * `pseudos` - array slice with a pseudocount for each monomer;","span":{"file_name":"/Users/shelwitz/.cargo/registry/src/github.com-1ecc6299db9ec823/bio-0.39.0/src/pattern_matching/pssm/dnamotif.rs","byte_start":644035,"byte_end":644101,"line_start":26,"line_end":26,"column_start":5,"column_end":71}},{"value":"/    defaults to pssm::DEF_PSEUDO for all if None is supplied","span":{"file_name":"/Users/shelwitz/.cargo/registry/src/github.com-1ecc6299db9ec823/bio-0.39.0/src/pattern_matching/pssm/dnamotif.rs","byte_start":644106,"byte_end":644169,"line_start":27,"line_end":27,"column_start":5,"column_end":68}},{"value":"/","span":{"file_name":"/Users/shelwitz/.cargo/registry/src/github.com-1ecc6299db9ec823/bio-0.39.0/src/pattern_matching/pssm/dnamotif.rs","byte_start":644174,"byte_end":644177,"line_start":28,"line_end":28,"column_start":5,"column_end":8}},{"value":"/ FIXME: pseudos should be an array of size MONO_CT, but that","span":{"file_name":"/Users/shelwitz/.cargo/registry/src/github.com-1ecc6299db9ec823/bio-0.39.0/src/pattern_matching/pssm/dnamotif.rs","byte_start":644182,"byte_end":644245,"line_start":29,"line_end":29,"column_start":5,"column_end":68}},{"value":"/ is currently impossible - see","span":{"file_name":"/Users/shelwitz/.cargo/registry/src/github.com-1ecc6299db9ec823/bio-0.39.0/src/pattern_matching/pssm/dnamotif.rs","byte_start":644250,"byte_end":644283,"line_start":30,"line_end":30,"column_start":5,"column_end":38}},{"value":"/ https://github.com/rust-lang/rust/issues/42863","span":{"file_name":"/Users/shelwitz/.cargo/registry/src/github.com-1ecc6299db9ec823/bio-0.39.0/src/pattern_matching/pssm/dnamotif.rs","byte_start":644288,"byte_end":644338,"line_start":31,"line_end":31,"column_start":5,"column_end":55}}]},{"kind":"Mod","id":{"krate":0,"index":2216},"span":{"file_name":"/Users/shelwitz/.cargo/registry/src/github.com-1ecc6299db9ec823/bio-0.39.0/src/pattern_matching/pssm/errors.rs","byte_start":0,"byte_end":0,"line_start":1,"line_end":1,"column_start":1,"column_end":1},"name":"errors","qualname":"::pattern_matching::pssm::errors","value":"/Users/shelwitz/.cargo/registry/src/github.com-1ecc6299db9ec823/bio-0.39.0/src/pattern_matching/pssm/errors.rs","parent":null,"children":[{"krate":0,"index":2217},{"krate":0,"index":5428},{"krate":0,"index":5429},{"krate":0,"index":5430},{"krate":0,"index":5432},{"krate":0,"index":5434},{"krate":0,"index":5435},{"krate":0,"index":2220}],"decl_id":null,"docs":" Error definitions for the `pssm` module.\n","sig":null,"attributes":[{"value":"/ Error definitions for the `pssm` module.","span":{"file_name":"/Users/shelwitz/.cargo/registry/src/github.com-1ecc6299db9ec823/bio-0.39.0/src/pattern_matching/pssm/errors.rs","byte_start":652770,"byte_end":652814,"line_start":6,"line_end":6,"column_start":1,"column_end":45}}]},{"kind":"StructVariant","id":{"krate":0,"index":5438},"span":{"file_name":"/Users/shelwitz/.cargo/registry/src/github.com-1ecc6299db9ec823/bio-0.39.0/src/pattern_matching/pssm/errors.rs","byte_start":653010,"byte_end":653023,"line_start":16,"line_end":16,"column_start":5,"column_end":18},"name":"QueryTooShort","qualname":"::pattern_matching::pssm::errors::Error::QueryTooShort","value":"Error::QueryTooShort { motif_len, query_len }","parent":{"krate":0,"index":5428},"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[{"value":"error(\"query length {} is shorter than motif length {}\", query_len,\n        motif_len)","span":{"file_name":"/Users/shelwitz/.cargo/registry/src/github.com-1ecc6299db9ec823/bio-0.39.0/src/pattern_matching/pssm/errors.rs","byte_start":652894,"byte_end":653005,"line_start":11,"line_end":15,"column_start":5,"column_end":7}}]},{"kind":"TupleVariant","id":{"krate":0,"index":5441},"span":{"file_name":"/Users/shelwitz/.cargo/registry/src/github.com-1ecc6299db9ec823/bio-0.39.0/src/pattern_matching/pssm/errors.rs","byte_start":653150,"byte_end":653165,"line_start":18,"line_end":18,"column_start":5,"column_end":20},"name":"InconsistentLen","qualname":"::pattern_matching::pssm::errors::Error::InconsistentLen","value":"Error::InconsistentLen","parent":{"krate":0,"index":5428},"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[{"value":"error(\"attempted to build a motif from sequences with mismatched lengths\")","span":{"file_name":"/Users/shelwitz/.cargo/registry/src/github.com-1ecc6299db9ec823/bio-0.39.0/src/pattern_matching/pssm/errors.rs","byte_start":653068,"byte_end":653145,"line_start":17,"line_end":17,"column_start":5,"column_end":82}}]},{"kind":"StructVariant","id":{"krate":0,"index":5443},"span":{"file_name":"/Users/shelwitz/.cargo/registry/src/github.com-1ecc6299db9ec823/bio-0.39.0/src/pattern_matching/pssm/errors.rs","byte_start":653230,"byte_end":653244,"line_start":20,"line_end":20,"column_start":5,"column_end":19},"name":"InvalidMonomer","qualname":"::pattern_matching::pssm::errors::Error::InvalidMonomer","value":"Error::InvalidMonomer { mono }","parent":{"krate":0,"index":5428},"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[{"value":"error(\"monomer '{}' is invalid\", char :: from(* mono))","span":{"file_name":"/Users/shelwitz/.cargo/registry/src/github.com-1ecc6299db9ec823/bio-0.39.0/src/pattern_matching/pssm/errors.rs","byte_start":653171,"byte_end":653225,"line_start":19,"line_end":19,"column_start":5,"column_end":59}}]},{"kind":"TupleVariant","id":{"krate":0,"index":5445},"span":{"file_name":"/Users/shelwitz/.cargo/registry/src/github.com-1ecc6299db9ec823/bio-0.39.0/src/pattern_matching/pssm/errors.rs","byte_start":653323,"byte_end":653333,"line_start":22,"line_end":22,"column_start":5,"column_end":15},"name":"EmptyMotif","qualname":"::pattern_matching::pssm::errors::Error::EmptyMotif","value":"Error::EmptyMotif","parent":{"krate":0,"index":5428},"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[{"value":"error(\"motif cannot be created from zero sequences\")","span":{"file_name":"/Users/shelwitz/.cargo/registry/src/github.com-1ecc6299db9ec823/bio-0.39.0/src/pattern_matching/pssm/errors.rs","byte_start":653263,"byte_end":653318,"line_start":21,"line_end":21,"column_start":5,"column_end":60}}]},{"kind":"TupleVariant","id":{"krate":0,"index":5447},"span":{"file_name":"/Users/shelwitz/.cargo/registry/src/github.com-1ecc6299db9ec823/bio-0.39.0/src/pattern_matching/pssm/errors.rs","byte_start":653488,"byte_end":653497,"line_start":24,"line_end":24,"column_start":5,"column_end":14},"name":"NullMotif","qualname":"::pattern_matching::pssm::errors::Error::NullMotif","value":"Error::NullMotif","parent":{"krate":0,"index":5428},"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[{"value":"error(\"information-free motif: a motif in which every monomer is equally likely at every position will result in a divide-by-zero exception\")","span":{"file_name":"/Users/shelwitz/.cargo/registry/src/github.com-1ecc6299db9ec823/bio-0.39.0/src/pattern_matching/pssm/errors.rs","byte_start":653339,"byte_end":653483,"line_start":23,"line_end":23,"column_start":5,"column_end":149}}]},{"kind":"StructVariant","id":{"krate":0,"index":5449},"span":{"file_name":"/Users/shelwitz/.cargo/registry/src/github.com-1ecc6299db9ec823/bio-0.39.0/src/pattern_matching/pssm/errors.rs","byte_start":653588,"byte_end":653602,"line_start":26,"line_end":26,"column_start":5,"column_end":19},"name":"InvalidPseudos","qualname":"::pattern_matching::pssm::errors::Error::InvalidPseudos","value":"Error::InvalidPseudos { expected, received }","parent":{"krate":0,"index":5428},"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[{"value":"error(\"expected pseudo-score array of length {}; got {}\", expected,\n        received)","span":{"file_name":"/Users/shelwitz/.cargo/registry/src/github.com-1ecc6299db9ec823/bio-0.39.0/src/pattern_matching/pssm/errors.rs","byte_start":653503,"byte_end":653583,"line_start":25,"line_end":25,"column_start":5,"column_end":85}}]},{"kind":"Enum","id":{"krate":0,"index":5428},"span":{"file_name":"/Users/shelwitz/.cargo/registry/src/github.com-1ecc6299db9ec823/bio-0.39.0/src/pattern_matching/pssm/errors.rs","byte_start":652882,"byte_end":652887,"line_start":10,"line_end":10,"column_start":10,"column_end":15},"name":"Error","qualname":"::pattern_matching::pssm::errors::Error","value":"pub enum Error {\n    QueryTooShort {\n        motif_len: usize,\n        query_len: usize,\n    },\n    InconsistentLen,\n    InvalidMonomer {\n        mono: u8,\n    },\n    EmptyMotif,\n    NullMotif,\n    InvalidPseudos {\n        expected: u8,\n        received: u8,\n    },\n}","parent":null,"children":[{"krate":0,"index":5438},{"krate":0,"index":5441},{"krate":0,"index":5443},{"krate":0,"index":5445},{"krate":0,"index":5447},{"krate":0,"index":5449}],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Type","id":{"krate":0,"index":2220},"span":{"file_name":"/Users/shelwitz/.cargo/registry/src/github.com-1ecc6299db9ec823/bio-0.39.0/src/pattern_matching/pssm/errors.rs","byte_start":653647,"byte_end":653653,"line_start":29,"line_end":29,"column_start":10,"column_end":16},"name":"Result","qualname":"::pattern_matching::pssm::errors::Result","value":"std::result::Result<T, E>","parent":null,"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Struct","id":{"krate":0,"index":5452},"span":{"file_name":"/Users/shelwitz/.cargo/registry/src/github.com-1ecc6299db9ec823/bio-0.39.0/src/pattern_matching/pssm/protmotif.rs","byte_start":654100,"byte_end":654109,"line_start":13,"line_end":13,"column_start":12,"column_end":21},"name":"ProtMotif","qualname":"::pattern_matching::pssm::protmotif::ProtMotif","value":"ProtMotif { scores, min_score, max_score }","parent":null,"children":[{"krate":0,"index":5453},{"krate":0,"index":5454},{"krate":0,"index":5455}],"decl_id":null,"docs":" Position-specific scoring matrix for protein sequences\n","sig":null,"attributes":[{"value":"/ Position-specific scoring matrix for protein sequences","span":{"file_name":"/Users/shelwitz/.cargo/registry/src/github.com-1ecc6299db9ec823/bio-0.39.0/src/pattern_matching/pssm/protmotif.rs","byte_start":653995,"byte_end":654053,"line_start":11,"line_end":11,"column_start":1,"column_end":59}}]},{"kind":"Field","id":{"krate":0,"index":5453},"span":{"file_name":"/Users/shelwitz/.cargo/registry/src/github.com-1ecc6299db9ec823/bio-0.39.0/src/pattern_matching/pssm/protmotif.rs","byte_start":654197,"byte_end":654203,"line_start":15,"line_end":15,"column_start":9,"column_end":15},"name":"scores","qualname":"::pattern_matching::pssm::protmotif::ProtMotif::scores","value":"ndarray::ArrayBase<ndarray::OwnedRepr<f32>, ndarray::Dim<[usize; 2]>>","parent":{"krate":0,"index":5452},"children":[],"decl_id":null,"docs":" matrix holding weights at each position, indexed by [position, base]\n","sig":null,"attributes":[{"value":"/ matrix holding weights at each position, indexed by [position, base]","span":{"file_name":"/Users/shelwitz/.cargo/registry/src/github.com-1ecc6299db9ec823/bio-0.39.0/src/pattern_matching/pssm/protmotif.rs","byte_start":654116,"byte_end":654188,"line_start":14,"line_end":14,"column_start":5,"column_end":77}}]},{"kind":"Field","id":{"krate":0,"index":5454},"span":{"file_name":"/Users/shelwitz/.cargo/registry/src/github.com-1ecc6299db9ec823/bio-0.39.0/src/pattern_matching/pssm/protmotif.rs","byte_start":654271,"byte_end":654280,"line_start":17,"line_end":17,"column_start":9,"column_end":18},"name":"min_score","qualname":"::pattern_matching::pssm::protmotif::ProtMotif::min_score","value":"f32","parent":{"krate":0,"index":5452},"children":[],"decl_id":null,"docs":" sum of \"worst\" base at each position\n","sig":null,"attributes":[{"value":"/ sum of \"worst\" base at each position","span":{"file_name":"/Users/shelwitz/.cargo/registry/src/github.com-1ecc6299db9ec823/bio-0.39.0/src/pattern_matching/pssm/protmotif.rs","byte_start":654222,"byte_end":654262,"line_start":16,"line_end":16,"column_start":5,"column_end":45}}]},{"kind":"Field","id":{"krate":0,"index":5455},"span":{"file_name":"/Users/shelwitz/.cargo/registry/src/github.com-1ecc6299db9ec823/bio-0.39.0/src/pattern_matching/pssm/protmotif.rs","byte_start":654339,"byte_end":654348,"line_start":19,"line_end":19,"column_start":9,"column_end":18},"name":"max_score","qualname":"::pattern_matching::pssm::protmotif::ProtMotif::max_score","value":"f32","parent":{"krate":0,"index":5452},"children":[],"decl_id":null,"docs":" sum of \"best\" base at each position\n","sig":null,"attributes":[{"value":"/ sum of \"best\" base at each position","span":{"file_name":"/Users/shelwitz/.cargo/registry/src/github.com-1ecc6299db9ec823/bio-0.39.0/src/pattern_matching/pssm/protmotif.rs","byte_start":654291,"byte_end":654330,"line_start":18,"line_end":18,"column_start":5,"column_end":44}}]},{"kind":"Method","id":{"krate":0,"index":2239},"span":{"file_name":"/Users/shelwitz/.cargo/registry/src/github.com-1ecc6299db9ec823/bio-0.39.0/src/pattern_matching/pssm/protmotif.rs","byte_start":654828,"byte_end":654837,"line_start":32,"line_end":32,"column_start":12,"column_end":21},"name":"from_seqs","qualname":"<ProtMotif>::from_seqs","value":"pub fn from_seqs(&[Vec<u8>], Option<&[f32]>) -> Result<Self>","parent":null,"children":[],"decl_id":null,"docs":" Returns a Motif representing the sequences provided.\n # Arguments\n * `seqs` - sequences incorporated into motif\n * `pseudos` - array slice with a pseudocount for each monomer;\n    defaults to pssm::DEF_PSEUDO for all if None is supplied","sig":null,"attributes":[{"value":"/ Returns a Motif representing the sequences provided.","span":{"file_name":"/Users/shelwitz/.cargo/registry/src/github.com-1ecc6299db9ec823/bio-0.39.0/src/pattern_matching/pssm/protmotif.rs","byte_start":654379,"byte_end":654435,"line_start":23,"line_end":23,"column_start":5,"column_end":61}},{"value":"/ # Arguments","span":{"file_name":"/Users/shelwitz/.cargo/registry/src/github.com-1ecc6299db9ec823/bio-0.39.0/src/pattern_matching/pssm/protmotif.rs","byte_start":654440,"byte_end":654455,"line_start":24,"line_end":24,"column_start":5,"column_end":20}},{"value":"/ * `seqs` - sequences incorporated into motif","span":{"file_name":"/Users/shelwitz/.cargo/registry/src/github.com-1ecc6299db9ec823/bio-0.39.0/src/pattern_matching/pssm/protmotif.rs","byte_start":654460,"byte_end":654508,"line_start":25,"line_end":25,"column_start":5,"column_end":53}},{"value":"/ * `pseudos` - array slice with a pseudocount for each monomer;","span":{"file_name":"/Users/shelwitz/.cargo/registry/src/github.com-1ecc6299db9ec823/bio-0.39.0/src/pattern_matching/pssm/protmotif.rs","byte_start":654513,"byte_end":654579,"line_start":26,"line_end":26,"column_start":5,"column_end":71}},{"value":"/    defaults to pssm::DEF_PSEUDO for all if None is supplied","span":{"file_name":"/Users/shelwitz/.cargo/registry/src/github.com-1ecc6299db9ec823/bio-0.39.0/src/pattern_matching/pssm/protmotif.rs","byte_start":654584,"byte_end":654647,"line_start":27,"line_end":27,"column_start":5,"column_end":68}},{"value":"/","span":{"file_name":"/Users/shelwitz/.cargo/registry/src/github.com-1ecc6299db9ec823/bio-0.39.0/src/pattern_matching/pssm/protmotif.rs","byte_start":654652,"byte_end":654655,"line_start":28,"line_end":28,"column_start":5,"column_end":8}},{"value":"/ FIXME: pseudos should be an array of size MONO_CT, but that","span":{"file_name":"/Users/shelwitz/.cargo/registry/src/github.com-1ecc6299db9ec823/bio-0.39.0/src/pattern_matching/pssm/protmotif.rs","byte_start":654660,"byte_end":654723,"line_start":29,"line_end":29,"column_start":5,"column_end":68}},{"value":"/ is currently impossible - see","span":{"file_name":"/Users/shelwitz/.cargo/registry/src/github.com-1ecc6299db9ec823/bio-0.39.0/src/pattern_matching/pssm/protmotif.rs","byte_start":654728,"byte_end":654761,"line_start":30,"line_end":30,"column_start":5,"column_end":38}},{"value":"/ https://github.com/rust-lang/rust/issues/42863","span":{"file_name":"/Users/shelwitz/.cargo/registry/src/github.com-1ecc6299db9ec823/bio-0.39.0/src/pattern_matching/pssm/protmotif.rs","byte_start":654766,"byte_end":654816,"line_start":31,"line_end":31,"column_start":5,"column_end":55}}]},{"kind":"Const","id":{"krate":0,"index":2273},"span":{"file_name":"/Users/shelwitz/.cargo/registry/src/github.com-1ecc6299db9ec823/bio-0.39.0/src/pattern_matching/pssm/mod.rs","byte_start":634747,"byte_end":634757,"line_start":50,"line_end":50,"column_start":11,"column_end":21},"name":"DEF_PSEUDO","qualname":"::pattern_matching::pssm::DEF_PSEUDO","value":"f32","parent":null,"children":[],"decl_id":null,"docs":" default pseudocount - used to prevent 0 tallies\n","sig":null,"attributes":[{"value":"/ default pseudocount - used to prevent 0 tallies","span":{"file_name":"/Users/shelwitz/.cargo/registry/src/github.com-1ecc6299db9ec823/bio-0.39.0/src/pattern_matching/pssm/mod.rs","byte_start":634685,"byte_end":634736,"line_start":49,"line_end":49,"column_start":1,"column_end":52}}]},{"kind":"Const","id":{"krate":0,"index":2274},"span":{"file_name":"/Users/shelwitz/.cargo/registry/src/github.com-1ecc6299db9ec823/bio-0.39.0/src/pattern_matching/pssm/mod.rs","byte_start":634803,"byte_end":634810,"line_start":52,"line_end":52,"column_start":11,"column_end":18},"name":"EPSILON","qualname":"::pattern_matching::pssm::EPSILON","value":"f32","parent":null,"children":[],"decl_id":null,"docs":" approximately zero\n","sig":null,"attributes":[{"value":"/ approximately zero","span":{"file_name":"/Users/shelwitz/.cargo/registry/src/github.com-1ecc6299db9ec823/bio-0.39.0/src/pattern_matching/pssm/mod.rs","byte_start":634770,"byte_end":634792,"line_start":51,"line_end":51,"column_start":1,"column_end":23}}]},{"kind":"Const","id":{"krate":0,"index":2275},"span":{"file_name":"/Users/shelwitz/.cargo/registry/src/github.com-1ecc6299db9ec823/bio-0.39.0/src/pattern_matching/pssm/mod.rs","byte_start":634892,"byte_end":634904,"line_start":54,"line_end":54,"column_start":11,"column_end":23},"name":"INVALID_MONO","qualname":"::pattern_matching::pssm::INVALID_MONO","value":"u8","parent":null,"children":[],"decl_id":null,"docs":" value representing an invalid monomer in lookup table\n","sig":null,"attributes":[{"value":"/ value representing an invalid monomer in lookup table","span":{"file_name":"/Users/shelwitz/.cargo/registry/src/github.com-1ecc6299db9ec823/bio-0.39.0/src/pattern_matching/pssm/mod.rs","byte_start":634824,"byte_end":634881,"line_start":53,"line_end":53,"column_start":1,"column_end":58}}]},{"kind":"Struct","id":{"krate":0,"index":5464},"span":{"file_name":"/Users/shelwitz/.cargo/registry/src/github.com-1ecc6299db9ec823/bio-0.39.0/src/pattern_matching/pssm/mod.rs","byte_start":635010,"byte_end":635019,"line_start":58,"line_end":58,"column_start":12,"column_end":21},"name":"ScoredPos","qualname":"::pattern_matching::pssm::ScoredPos","value":"ScoredPos { loc, sum, scores }","parent":null,"children":[{"krate":0,"index":5465},{"krate":0,"index":5466},{"krate":0,"index":5467}],"decl_id":null,"docs":" Represents motif score & location of match\n","sig":null,"attributes":[{"value":"/ Represents motif score & location of match","span":{"file_name":"/Users/shelwitz/.cargo/registry/src/github.com-1ecc6299db9ec823/bio-0.39.0/src/pattern_matching/pssm/mod.rs","byte_start":634917,"byte_end":634963,"line_start":56,"line_end":56,"column_start":1,"column_end":47}}]},{"kind":"Field","id":{"krate":0,"index":5465},"span":{"file_name":"/Users/shelwitz/.cargo/registry/src/github.com-1ecc6299db9ec823/bio-0.39.0/src/pattern_matching/pssm/mod.rs","byte_start":635030,"byte_end":635033,"line_start":59,"line_end":59,"column_start":9,"column_end":12},"name":"loc","qualname":"::pattern_matching::pssm::ScoredPos::loc","value":"usize","parent":{"krate":0,"index":5464},"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Field","id":{"krate":0,"index":5466},"span":{"file_name":"/Users/shelwitz/.cargo/registry/src/github.com-1ecc6299db9ec823/bio-0.39.0/src/pattern_matching/pssm/mod.rs","byte_start":635050,"byte_end":635053,"line_start":60,"line_end":60,"column_start":9,"column_end":12},"name":"sum","qualname":"::pattern_matching::pssm::ScoredPos::sum","value":"f32","parent":{"krate":0,"index":5464},"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Field","id":{"krate":0,"index":5467},"span":{"file_name":"/Users/shelwitz/.cargo/registry/src/github.com-1ecc6299db9ec823/bio-0.39.0/src/pattern_matching/pssm/mod.rs","byte_start":635068,"byte_end":635074,"line_start":61,"line_end":61,"column_start":9,"column_end":15},"name":"scores","qualname":"::pattern_matching::pssm::ScoredPos::scores","value":"std::vec::Vec<f32>","parent":{"krate":0,"index":5464},"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Trait","id":{"krate":0,"index":2278},"span":{"file_name":"/Users/shelwitz/.cargo/registry/src/github.com-1ecc6299db9ec823/bio-0.39.0/src/pattern_matching/pssm/mod.rs","byte_start":635400,"byte_end":635405,"line_start":76,"line_end":76,"column_start":11,"column_end":16},"name":"Motif","qualname":"::pattern_matching::pssm::Motif","value":"Motif","parent":null,"children":[{"krate":0,"index":2279},{"krate":0,"index":2282},{"krate":0,"index":2283},{"krate":0,"index":2284},{"krate":0,"index":2285},{"krate":0,"index":2286},{"krate":0,"index":2287},{"krate":0,"index":2288},{"krate":0,"index":2289},{"krate":0,"index":2290},{"krate":0,"index":2291},{"krate":0,"index":2292},{"krate":0,"index":2293},{"krate":0,"index":2294},{"krate":0,"index":2299},{"krate":0,"index":2303}],"decl_id":null,"docs":" Trait containing code shared between DNA and protein implementations\n of the position-specific scoring matrix.\n","sig":null,"attributes":[{"value":"/ Trait containing code shared between DNA and protein implementations","span":{"file_name":"/Users/shelwitz/.cargo/registry/src/github.com-1ecc6299db9ec823/bio-0.39.0/src/pattern_matching/pssm/mod.rs","byte_start":635272,"byte_end":635344,"line_start":74,"line_end":74,"column_start":1,"column_end":73}},{"value":"/ of the position-specific scoring matrix.","span":{"file_name":"/Users/shelwitz/.cargo/registry/src/github.com-1ecc6299db9ec823/bio-0.39.0/src/pattern_matching/pssm/mod.rs","byte_start":635345,"byte_end":635389,"line_start":75,"line_end":75,"column_start":1,"column_end":45}}]},{"kind":"Const","id":{"krate":0,"index":2279},"span":{"file_name":"/Users/shelwitz/.cargo/registry/src/github.com-1ecc6299db9ec823/bio-0.39.0/src/pattern_matching/pssm/mod.rs","byte_start":635464,"byte_end":635466,"line_start":78,"line_end":78,"column_start":11,"column_end":13},"name":"LK","qualname":"::pattern_matching::pssm::Motif::LK","value":"[u8; ]","parent":{"krate":0,"index":2278},"children":[],"decl_id":null,"docs":" Lookup table mapping monomer -> index\n","sig":null,"attributes":[{"value":"/ Lookup table mapping monomer -> index","span":{"file_name":"/Users/shelwitz/.cargo/registry/src/github.com-1ecc6299db9ec823/bio-0.39.0/src/pattern_matching/pssm/mod.rs","byte_start":635412,"byte_end":635453,"line_start":77,"line_end":77,"column_start":5,"column_end":46}}]},{"kind":"Const","id":{"krate":0,"index":2282},"span":{"file_name":"/Users/shelwitz/.cargo/registry/src/github.com-1ecc6299db9ec823/bio-0.39.0/src/pattern_matching/pssm/mod.rs","byte_start":635572,"byte_end":635577,"line_start":80,"line_end":80,"column_start":11,"column_end":16},"name":"MONOS","qualname":"::pattern_matching::pssm::Motif::MONOS","value":"&'static [u8]","parent":{"krate":0,"index":2278},"children":[],"decl_id":null,"docs":" All monomers, in order corresponding to lookup table\n","sig":null,"attributes":[{"value":"/ All monomers, in order corresponding to lookup table","span":{"file_name":"/Users/shelwitz/.cargo/registry/src/github.com-1ecc6299db9ec823/bio-0.39.0/src/pattern_matching/pssm/mod.rs","byte_start":635505,"byte_end":635561,"line_start":79,"line_end":79,"column_start":5,"column_end":61}}]},{"kind":"Const","id":{"krate":0,"index":2283},"span":{"file_name":"/Users/shelwitz/.cargo/registry/src/github.com-1ecc6299db9ec823/bio-0.39.0/src/pattern_matching/pssm/mod.rs","byte_start":635661,"byte_end":635668,"line_start":82,"line_end":82,"column_start":11,"column_end":18},"name":"MONO_CT","qualname":"::pattern_matching::pssm::Motif::MONO_CT","value":"usize","parent":{"krate":0,"index":2278},"children":[],"decl_id":null,"docs":" Monomer count - equal to length of `MONOS`\n","sig":null,"attributes":[{"value":"/ Monomer count - equal to length of `MONOS`","span":{"file_name":"/Users/shelwitz/.cargo/registry/src/github.com-1ecc6299db9ec823/bio-0.39.0/src/pattern_matching/pssm/mod.rs","byte_start":635604,"byte_end":635650,"line_start":81,"line_end":81,"column_start":5,"column_end":51}}]},{"kind":"Method","id":{"krate":0,"index":2284},"span":{"file_name":"/Users/shelwitz/.cargo/registry/src/github.com-1ecc6299db9ec823/bio-0.39.0/src/pattern_matching/pssm/mod.rs","byte_start":636135,"byte_end":636150,"line_start":93,"line_end":93,"column_start":8,"column_end":23},"name":"seqs_to_weights","qualname":"::pattern_matching::pssm::Motif::seqs_to_weights","value":"pub fn seqs_to_weights(&[Vec<u8>], Option<&[f32]>) -> Result<Array2<f32>>","parent":{"krate":0,"index":2278},"children":[],"decl_id":null,"docs":" Returns a weight matrix representing the sequences provided.\n This code is shared by implementations of `from_seqs`\n # Arguments\n * `seqs` - sequences incorporated into motif\n * `pseudos` - array slice with a pseudocount for each monomer;\n    defaults to DEF_PSEUDO for all if None is supplied","sig":null,"attributes":[{"value":"/ Returns a weight matrix representing the sequences provided.","span":{"file_name":"/Users/shelwitz/.cargo/registry/src/github.com-1ecc6299db9ec823/bio-0.39.0/src/pattern_matching/pssm/mod.rs","byte_start":635686,"byte_end":635750,"line_start":84,"line_end":84,"column_start":5,"column_end":69}},{"value":"/ This code is shared by implementations of `from_seqs`","span":{"file_name":"/Users/shelwitz/.cargo/registry/src/github.com-1ecc6299db9ec823/bio-0.39.0/src/pattern_matching/pssm/mod.rs","byte_start":635755,"byte_end":635812,"line_start":85,"line_end":85,"column_start":5,"column_end":62}},{"value":"/ # Arguments","span":{"file_name":"/Users/shelwitz/.cargo/registry/src/github.com-1ecc6299db9ec823/bio-0.39.0/src/pattern_matching/pssm/mod.rs","byte_start":635817,"byte_end":635832,"line_start":86,"line_end":86,"column_start":5,"column_end":20}},{"value":"/ * `seqs` - sequences incorporated into motif","span":{"file_name":"/Users/shelwitz/.cargo/registry/src/github.com-1ecc6299db9ec823/bio-0.39.0/src/pattern_matching/pssm/mod.rs","byte_start":635837,"byte_end":635885,"line_start":87,"line_end":87,"column_start":5,"column_end":53}},{"value":"/ * `pseudos` - array slice with a pseudocount for each monomer;","span":{"file_name":"/Users/shelwitz/.cargo/registry/src/github.com-1ecc6299db9ec823/bio-0.39.0/src/pattern_matching/pssm/mod.rs","byte_start":635890,"byte_end":635956,"line_start":88,"line_end":88,"column_start":5,"column_end":71}},{"value":"/    defaults to DEF_PSEUDO for all if None is supplied","span":{"file_name":"/Users/shelwitz/.cargo/registry/src/github.com-1ecc6299db9ec823/bio-0.39.0/src/pattern_matching/pssm/mod.rs","byte_start":635961,"byte_end":636018,"line_start":89,"line_end":89,"column_start":5,"column_end":62}},{"value":"/","span":{"file_name":"/Users/shelwitz/.cargo/registry/src/github.com-1ecc6299db9ec823/bio-0.39.0/src/pattern_matching/pssm/mod.rs","byte_start":636023,"byte_end":636026,"line_start":90,"line_end":90,"column_start":5,"column_end":8}},{"value":"/ FIXME: pseudos should be an array of size MONO_CT, but that","span":{"file_name":"/Users/shelwitz/.cargo/registry/src/github.com-1ecc6299db9ec823/bio-0.39.0/src/pattern_matching/pssm/mod.rs","byte_start":636031,"byte_end":636094,"line_start":91,"line_end":91,"column_start":5,"column_end":68}},{"value":"/ is currently unsupported","span":{"file_name":"/Users/shelwitz/.cargo/registry/src/github.com-1ecc6299db9ec823/bio-0.39.0/src/pattern_matching/pssm/mod.rs","byte_start":636099,"byte_end":636127,"line_start":92,"line_end":92,"column_start":5,"column_end":33}}]},{"kind":"Method","id":{"krate":0,"index":2285},"span":{"file_name":"/Users/shelwitz/.cargo/registry/src/github.com-1ecc6299db9ec823/bio-0.39.0/src/pattern_matching/pssm/mod.rs","byte_start":637619,"byte_end":637625,"line_start":139,"line_end":139,"column_start":8,"column_end":14},"name":"lookup","qualname":"::pattern_matching::pssm::Motif::lookup","value":"pub fn lookup(u8) -> Result<usize>","parent":{"krate":0,"index":2278},"children":[],"decl_id":null,"docs":" Returns the index of given monomer in the scores matrix using the lookup table `LK`\n # Arguments\n * `mono` - monomer, eg, b'A' for DNA or b'R' for protein\n # Errors\n * `Error::InvalidMonomer(mono)` - `mono` wasn't found in the lookup table\n","sig":null,"attributes":[{"value":"/ Returns the index of given monomer in the scores matrix using the lookup table `LK`","span":{"file_name":"/Users/shelwitz/.cargo/registry/src/github.com-1ecc6299db9ec823/bio-0.39.0/src/pattern_matching/pssm/mod.rs","byte_start":637340,"byte_end":637427,"line_start":134,"line_end":134,"column_start":5,"column_end":92}},{"value":"/ # Arguments","span":{"file_name":"/Users/shelwitz/.cargo/registry/src/github.com-1ecc6299db9ec823/bio-0.39.0/src/pattern_matching/pssm/mod.rs","byte_start":637432,"byte_end":637447,"line_start":135,"line_end":135,"column_start":5,"column_end":20}},{"value":"/ * `mono` - monomer, eg, b'A' for DNA or b'R' for protein","span":{"file_name":"/Users/shelwitz/.cargo/registry/src/github.com-1ecc6299db9ec823/bio-0.39.0/src/pattern_matching/pssm/mod.rs","byte_start":637452,"byte_end":637512,"line_start":136,"line_end":136,"column_start":5,"column_end":65}},{"value":"/ # Errors","span":{"file_name":"/Users/shelwitz/.cargo/registry/src/github.com-1ecc6299db9ec823/bio-0.39.0/src/pattern_matching/pssm/mod.rs","byte_start":637517,"byte_end":637529,"line_start":137,"line_end":137,"column_start":5,"column_end":17}},{"value":"/ * `Error::InvalidMonomer(mono)` - `mono` wasn't found in the lookup table","span":{"file_name":"/Users/shelwitz/.cargo/registry/src/github.com-1ecc6299db9ec823/bio-0.39.0/src/pattern_matching/pssm/mod.rs","byte_start":637534,"byte_end":637611,"line_start":138,"line_end":138,"column_start":5,"column_end":82}}]},{"kind":"Method","id":{"krate":0,"index":2286},"span":{"file_name":"/Users/shelwitz/.cargo/registry/src/github.com-1ecc6299db9ec823/bio-0.39.0/src/pattern_matching/pssm/mod.rs","byte_start":638194,"byte_end":638200,"line_start":156,"line_end":156,"column_start":8,"column_end":14},"name":"rev_lk","qualname":"::pattern_matching::pssm::Motif::rev_lk","value":"pub fn rev_lk(usize) -> u8","parent":{"krate":0,"index":2278},"children":[],"decl_id":null,"docs":" Returns the monomer associated with the given index; the reverse of `lookup`.\n Returns INVALID_MONO if the index isn't associated with a monomer.\n # Arguments\n * `idx` - the index in question\n","sig":null,"attributes":[{"value":"/ Returns the monomer associated with the given index; the reverse of `lookup`.","span":{"file_name":"/Users/shelwitz/.cargo/registry/src/github.com-1ecc6299db9ec823/bio-0.39.0/src/pattern_matching/pssm/mod.rs","byte_start":637970,"byte_end":638051,"line_start":152,"line_end":152,"column_start":5,"column_end":86}},{"value":"/ Returns INVALID_MONO if the index isn't associated with a monomer.","span":{"file_name":"/Users/shelwitz/.cargo/registry/src/github.com-1ecc6299db9ec823/bio-0.39.0/src/pattern_matching/pssm/mod.rs","byte_start":638056,"byte_end":638126,"line_start":153,"line_end":153,"column_start":5,"column_end":75}},{"value":"/ # Arguments","span":{"file_name":"/Users/shelwitz/.cargo/registry/src/github.com-1ecc6299db9ec823/bio-0.39.0/src/pattern_matching/pssm/mod.rs","byte_start":638131,"byte_end":638146,"line_start":154,"line_end":154,"column_start":5,"column_end":20}},{"value":"/ * `idx` - the index in question","span":{"file_name":"/Users/shelwitz/.cargo/registry/src/github.com-1ecc6299db9ec823/bio-0.39.0/src/pattern_matching/pssm/mod.rs","byte_start":638151,"byte_end":638186,"line_start":155,"line_end":155,"column_start":5,"column_end":40}}]},{"kind":"Method","id":{"krate":0,"index":2287},"span":{"file_name":"/Users/shelwitz/.cargo/registry/src/github.com-1ecc6299db9ec823/bio-0.39.0/src/pattern_matching/pssm/mod.rs","byte_start":638264,"byte_end":638267,"line_start":159,"line_end":159,"column_start":8,"column_end":11},"name":"len","qualname":"::pattern_matching::pssm::Motif::len","value":"pub fn len(&Self) -> usize","parent":{"krate":0,"index":2278},"children":[],"decl_id":null,"docs":" Returns the length of motif\n","sig":null,"attributes":[{"value":"/ Returns the length of motif","span":{"file_name":"/Users/shelwitz/.cargo/registry/src/github.com-1ecc6299db9ec823/bio-0.39.0/src/pattern_matching/pssm/mod.rs","byte_start":638225,"byte_end":638256,"line_start":158,"line_end":158,"column_start":5,"column_end":36}}]},{"kind":"Method","id":{"krate":0,"index":2288},"span":{"file_name":"/Users/shelwitz/.cargo/registry/src/github.com-1ecc6299db9ec823/bio-0.39.0/src/pattern_matching/pssm/mod.rs","byte_start":638293,"byte_end":638301,"line_start":161,"line_end":161,"column_start":8,"column_end":16},"name":"is_empty","qualname":"::pattern_matching::pssm::Motif::is_empty","value":"pub fn is_empty(&Self) -> bool","parent":{"krate":0,"index":2278},"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":2289},"span":{"file_name":"/Users/shelwitz/.cargo/registry/src/github.com-1ecc6299db9ec823/bio-0.39.0/src/pattern_matching/pssm/mod.rs","byte_start":638639,"byte_end":638659,"line_start":169,"line_end":169,"column_start":8,"column_end":28},"name":"degenerate_consensus","qualname":"::pattern_matching::pssm::Motif::degenerate_consensus","value":"pub fn degenerate_consensus(&Self) -> Vec<u8>","parent":{"krate":0,"index":2278},"children":[],"decl_id":null,"docs":" Returns a representation of the motif using ambiguous codes.\n Primarily useful for DNA motifs, where ambiguous codes are\n common (eg, 'M' for 'A or C'); less so for proteins, where we\n represent any position without a dominant amino acid as an 'X'\n","sig":null,"attributes":[{"value":"/ Returns a representation of the motif using ambiguous codes.","span":{"file_name":"/Users/shelwitz/.cargo/registry/src/github.com-1ecc6299db9ec823/bio-0.39.0/src/pattern_matching/pssm/mod.rs","byte_start":638359,"byte_end":638423,"line_start":165,"line_end":165,"column_start":5,"column_end":69}},{"value":"/ Primarily useful for DNA motifs, where ambiguous codes are","span":{"file_name":"/Users/shelwitz/.cargo/registry/src/github.com-1ecc6299db9ec823/bio-0.39.0/src/pattern_matching/pssm/mod.rs","byte_start":638428,"byte_end":638490,"line_start":166,"line_end":166,"column_start":5,"column_end":67}},{"value":"/ common (eg, 'M' for 'A or C'); less so for proteins, where we","span":{"file_name":"/Users/shelwitz/.cargo/registry/src/github.com-1ecc6299db9ec823/bio-0.39.0/src/pattern_matching/pssm/mod.rs","byte_start":638495,"byte_end":638560,"line_start":167,"line_end":167,"column_start":5,"column_end":70}},{"value":"/ represent any position without a dominant amino acid as an 'X'","span":{"file_name":"/Users/shelwitz/.cargo/registry/src/github.com-1ecc6299db9ec823/bio-0.39.0/src/pattern_matching/pssm/mod.rs","byte_start":638565,"byte_end":638631,"line_start":168,"line_end":168,"column_start":5,"column_end":71}}]},{"kind":"Method","id":{"krate":0,"index":2290},"span":{"file_name":"/Users/shelwitz/.cargo/registry/src/github.com-1ecc6299db9ec823/bio-0.39.0/src/pattern_matching/pssm/mod.rs","byte_start":638728,"byte_end":638738,"line_start":172,"line_end":172,"column_start":8,"column_end":18},"name":"get_scores","qualname":"::pattern_matching::pssm::Motif::get_scores","value":"pub fn get_scores(&Self) -> &Array2<f32>","parent":{"krate":0,"index":2278},"children":[],"decl_id":null,"docs":" Accessor - returns scores matrix\n","sig":null,"attributes":[{"value":"/ Accessor - returns scores matrix","span":{"file_name":"/Users/shelwitz/.cargo/registry/src/github.com-1ecc6299db9ec823/bio-0.39.0/src/pattern_matching/pssm/mod.rs","byte_start":638684,"byte_end":638720,"line_start":171,"line_end":171,"column_start":5,"column_end":41}}]},{"kind":"Method","id":{"krate":0,"index":2291},"span":{"file_name":"/Users/shelwitz/.cargo/registry/src/github.com-1ecc6299db9ec823/bio-0.39.0/src/pattern_matching/pssm/mod.rs","byte_start":638823,"byte_end":638836,"line_start":175,"line_end":175,"column_start":8,"column_end":21},"name":"get_min_score","qualname":"::pattern_matching::pssm::Motif::get_min_score","value":"pub fn get_min_score(&Self) -> f32","parent":{"krate":0,"index":2278},"children":[],"decl_id":null,"docs":" Return sum of \"worst\" base at each position\n","sig":null,"attributes":[{"value":"/ Return sum of \"worst\" base at each position","span":{"file_name":"/Users/shelwitz/.cargo/registry/src/github.com-1ecc6299db9ec823/bio-0.39.0/src/pattern_matching/pssm/mod.rs","byte_start":638768,"byte_end":638815,"line_start":174,"line_end":174,"column_start":5,"column_end":52}}]},{"kind":"Method","id":{"krate":0,"index":2292},"span":{"file_name":"/Users/shelwitz/.cargo/registry/src/github.com-1ecc6299db9ec823/bio-0.39.0/src/pattern_matching/pssm/mod.rs","byte_start":638911,"byte_end":638924,"line_start":178,"line_end":178,"column_start":8,"column_end":21},"name":"get_max_score","qualname":"::pattern_matching::pssm::Motif::get_max_score","value":"pub fn get_max_score(&Self) -> f32","parent":{"krate":0,"index":2278},"children":[],"decl_id":null,"docs":" Return sum of \"best\" base at each position\n","sig":null,"attributes":[{"value":"/ Return sum of \"best\" base at each position","span":{"file_name":"/Users/shelwitz/.cargo/registry/src/github.com-1ecc6299db9ec823/bio-0.39.0/src/pattern_matching/pssm/mod.rs","byte_start":638857,"byte_end":638903,"line_start":177,"line_end":177,"column_start":5,"column_end":51}}]},{"kind":"Method","id":{"krate":0,"index":2293},"span":{"file_name":"/Users/shelwitz/.cargo/registry/src/github.com-1ecc6299db9ec823/bio-0.39.0/src/pattern_matching/pssm/mod.rs","byte_start":639122,"byte_end":639130,"line_start":183,"line_end":183,"column_start":8,"column_end":16},"name":"get_bits","qualname":"::pattern_matching::pssm::Motif::get_bits","value":"pub fn get_bits() -> f32","parent":{"krate":0,"index":2278},"children":[],"decl_id":null,"docs":" Returns information content of a single position.\n Used `info_content` method.\n FIXME: this should be replaced with a CTFE ... or maybe just a constant\n","sig":null,"attributes":[{"value":"/ Returns information content of a single position.","span":{"file_name":"/Users/shelwitz/.cargo/registry/src/github.com-1ecc6299db9ec823/bio-0.39.0/src/pattern_matching/pssm/mod.rs","byte_start":638945,"byte_end":638998,"line_start":180,"line_end":180,"column_start":5,"column_end":58}},{"value":"/ Used `info_content` method.","span":{"file_name":"/Users/shelwitz/.cargo/registry/src/github.com-1ecc6299db9ec823/bio-0.39.0/src/pattern_matching/pssm/mod.rs","byte_start":639003,"byte_end":639034,"line_start":181,"line_end":181,"column_start":5,"column_end":36}},{"value":"/ FIXME: this should be replaced with a CTFE ... or maybe just a constant","span":{"file_name":"/Users/shelwitz/.cargo/registry/src/github.com-1ecc6299db9ec823/bio-0.39.0/src/pattern_matching/pssm/mod.rs","byte_start":639039,"byte_end":639114,"line_start":182,"line_end":182,"column_start":5,"column_end":80}}]},{"kind":"Method","id":{"krate":0,"index":2294},"span":{"file_name":"/Users/shelwitz/.cargo/registry/src/github.com-1ecc6299db9ec823/bio-0.39.0/src/pattern_matching/pssm/mod.rs","byte_start":639484,"byte_end":639493,"line_start":193,"line_end":193,"column_start":8,"column_end":17},"name":"raw_score","qualname":"::pattern_matching::pssm::Motif::raw_score","value":"pub fn raw_score<C, T>(&Self, T) -> Result<(usize, f32, Vec<f32>)> where\nC: Borrow<u8>, T: IntoIterator<Item = C>","parent":{"krate":0,"index":2278},"children":[],"decl_id":null,"docs":" Returns the un-normalized sum of matching bases, useful for comparing matches from\n motifs of different lengths","sig":null,"attributes":[{"value":"/ Returns the un-normalized sum of matching bases, useful for comparing matches from","span":{"file_name":"/Users/shelwitz/.cargo/registry/src/github.com-1ecc6299db9ec823/bio-0.39.0/src/pattern_matching/pssm/mod.rs","byte_start":639146,"byte_end":639232,"line_start":185,"line_end":185,"column_start":5,"column_end":91}},{"value":"/ motifs of different lengths","span":{"file_name":"/Users/shelwitz/.cargo/registry/src/github.com-1ecc6299db9ec823/bio-0.39.0/src/pattern_matching/pssm/mod.rs","byte_start":639237,"byte_end":639268,"line_start":186,"line_end":186,"column_start":5,"column_end":36}},{"value":"/","span":{"file_name":"/Users/shelwitz/.cargo/registry/src/github.com-1ecc6299db9ec823/bio-0.39.0/src/pattern_matching/pssm/mod.rs","byte_start":639273,"byte_end":639276,"line_start":187,"line_end":187,"column_start":5,"column_end":8}},{"value":"/ # Arguments","span":{"file_name":"/Users/shelwitz/.cargo/registry/src/github.com-1ecc6299db9ec823/bio-0.39.0/src/pattern_matching/pssm/mod.rs","byte_start":639281,"byte_end":639296,"line_start":188,"line_end":188,"column_start":5,"column_end":20}},{"value":"/ * `seq_it` - iterator representing the query sequence","span":{"file_name":"/Users/shelwitz/.cargo/registry/src/github.com-1ecc6299db9ec823/bio-0.39.0/src/pattern_matching/pssm/mod.rs","byte_start":639301,"byte_end":639358,"line_start":189,"line_end":189,"column_start":5,"column_end":62}},{"value":"/","span":{"file_name":"/Users/shelwitz/.cargo/registry/src/github.com-1ecc6299db9ec823/bio-0.39.0/src/pattern_matching/pssm/mod.rs","byte_start":639363,"byte_end":639366,"line_start":190,"line_end":190,"column_start":5,"column_end":8}},{"value":"/ # Errors","span":{"file_name":"/Users/shelwitz/.cargo/registry/src/github.com-1ecc6299db9ec823/bio-0.39.0/src/pattern_matching/pssm/mod.rs","byte_start":639371,"byte_end":639383,"line_start":191,"line_end":191,"column_start":5,"column_end":17}},{"value":"/ * `Error::InvalidMonomer(mono)` - sequence `seq_it` contained invalid monomer `mono`","span":{"file_name":"/Users/shelwitz/.cargo/registry/src/github.com-1ecc6299db9ec823/bio-0.39.0/src/pattern_matching/pssm/mod.rs","byte_start":639388,"byte_end":639476,"line_start":192,"line_end":192,"column_start":5,"column_end":93}}]},{"kind":"Method","id":{"krate":0,"index":2299},"span":{"file_name":"/Users/shelwitz/.cargo/registry/src/github.com-1ecc6299db9ec823/bio-0.39.0/src/pattern_matching/pssm/mod.rs","byte_start":641515,"byte_end":641520,"line_start":248,"line_end":248,"column_start":8,"column_end":13},"name":"score","qualname":"::pattern_matching::pssm::Motif::score","value":"pub fn score<C, T>(&Self, T) -> Result<ScoredPos> where C: Borrow<u8>,\nT: IntoIterator<Item = C>","parent":{"krate":0,"index":2278},"children":[],"decl_id":null,"docs":" Returns a `ScoredPos` struct representing the best match within the query sequence\n see:\n   MATCHTM: a tool for searching transcription factor binding sites in DNA sequences\n   Nucleic Acids Res. 2003 Jul 1; 31(13): 3576–3579\n   https://www.ncbi.nlm.nih.gov/pmc/articles/PMC169193/","sig":null,"attributes":[{"value":"/ Returns a `ScoredPos` struct representing the best match within the query sequence","span":{"file_name":"/Users/shelwitz/.cargo/registry/src/github.com-1ecc6299db9ec823/bio-0.39.0/src/pattern_matching/pssm/mod.rs","byte_start":640592,"byte_end":640678,"line_start":227,"line_end":227,"column_start":5,"column_end":91}},{"value":"/ see:","span":{"file_name":"/Users/shelwitz/.cargo/registry/src/github.com-1ecc6299db9ec823/bio-0.39.0/src/pattern_matching/pssm/mod.rs","byte_start":640683,"byte_end":640691,"line_start":228,"line_end":228,"column_start":5,"column_end":13}},{"value":"/   MATCHTM: a tool for searching transcription factor binding sites in DNA sequences","span":{"file_name":"/Users/shelwitz/.cargo/registry/src/github.com-1ecc6299db9ec823/bio-0.39.0/src/pattern_matching/pssm/mod.rs","byte_start":640696,"byte_end":640783,"line_start":229,"line_end":229,"column_start":5,"column_end":92}},{"value":"/   Nucleic Acids Res. 2003 Jul 1; 31(13): 3576–3579","span":{"file_name":"/Users/shelwitz/.cargo/registry/src/github.com-1ecc6299db9ec823/bio-0.39.0/src/pattern_matching/pssm/mod.rs","byte_start":640788,"byte_end":640844,"line_start":230,"line_end":230,"column_start":5,"column_end":59}},{"value":"/   https://www.ncbi.nlm.nih.gov/pmc/articles/PMC169193/","span":{"file_name":"/Users/shelwitz/.cargo/registry/src/github.com-1ecc6299db9ec823/bio-0.39.0/src/pattern_matching/pssm/mod.rs","byte_start":640849,"byte_end":640907,"line_start":231,"line_end":231,"column_start":5,"column_end":63}},{"value":"/","span":{"file_name":"/Users/shelwitz/.cargo/registry/src/github.com-1ecc6299db9ec823/bio-0.39.0/src/pattern_matching/pssm/mod.rs","byte_start":640912,"byte_end":640915,"line_start":232,"line_end":232,"column_start":5,"column_end":8}},{"value":"/ # Arguments","span":{"file_name":"/Users/shelwitz/.cargo/registry/src/github.com-1ecc6299db9ec823/bio-0.39.0/src/pattern_matching/pssm/mod.rs","byte_start":640920,"byte_end":640935,"line_start":233,"line_end":233,"column_start":5,"column_end":20}},{"value":"/ * `seq_it` - iterator representing the query sequence","span":{"file_name":"/Users/shelwitz/.cargo/registry/src/github.com-1ecc6299db9ec823/bio-0.39.0/src/pattern_matching/pssm/mod.rs","byte_start":640940,"byte_end":640997,"line_start":234,"line_end":234,"column_start":5,"column_end":62}},{"value":"/","span":{"file_name":"/Users/shelwitz/.cargo/registry/src/github.com-1ecc6299db9ec823/bio-0.39.0/src/pattern_matching/pssm/mod.rs","byte_start":641002,"byte_end":641005,"line_start":235,"line_end":235,"column_start":5,"column_end":8}},{"value":"/ # Errors","span":{"file_name":"/Users/shelwitz/.cargo/registry/src/github.com-1ecc6299db9ec823/bio-0.39.0/src/pattern_matching/pssm/mod.rs","byte_start":641010,"byte_end":641022,"line_start":236,"line_end":236,"column_start":5,"column_end":17}},{"value":"/ * `Error::InvalidMonomer(mono)` - sequence `seq_it` contained invalid monomer `mono`","span":{"file_name":"/Users/shelwitz/.cargo/registry/src/github.com-1ecc6299db9ec823/bio-0.39.0/src/pattern_matching/pssm/mod.rs","byte_start":641027,"byte_end":641115,"line_start":237,"line_end":237,"column_start":5,"column_end":93}},{"value":"/ * `Error::QueryTooShort` - sequence `seq_id` was too short","span":{"file_name":"/Users/shelwitz/.cargo/registry/src/github.com-1ecc6299db9ec823/bio-0.39.0/src/pattern_matching/pssm/mod.rs","byte_start":641120,"byte_end":641182,"line_start":238,"line_end":238,"column_start":5,"column_end":67}},{"value":"/","span":{"file_name":"/Users/shelwitz/.cargo/registry/src/github.com-1ecc6299db9ec823/bio-0.39.0/src/pattern_matching/pssm/mod.rs","byte_start":641187,"byte_end":641190,"line_start":239,"line_end":239,"column_start":5,"column_end":8}},{"value":"/ # Example","span":{"file_name":"/Users/shelwitz/.cargo/registry/src/github.com-1ecc6299db9ec823/bio-0.39.0/src/pattern_matching/pssm/mod.rs","byte_start":641195,"byte_end":641208,"line_start":240,"line_end":240,"column_start":5,"column_end":18}},{"value":"/ let pssm = DNAMotif::from_seqs(vec![","span":{"file_name":"/Users/shelwitz/.cargo/registry/src/github.com-1ecc6299db9ec823/bio-0.39.0/src/pattern_matching/pssm/mod.rs","byte_start":641213,"byte_end":641253,"line_start":241,"line_end":241,"column_start":5,"column_end":45}},{"value":"/            b\"AAAA\".to_vec(),","span":{"file_name":"/Users/shelwitz/.cargo/registry/src/github.com-1ecc6299db9ec823/bio-0.39.0/src/pattern_matching/pssm/mod.rs","byte_start":641258,"byte_end":641290,"line_start":242,"line_end":242,"column_start":5,"column_end":37}},{"value":"/            b\"AATA\".to_vec(),","span":{"file_name":"/Users/shelwitz/.cargo/registry/src/github.com-1ecc6299db9ec823/bio-0.39.0/src/pattern_matching/pssm/mod.rs","byte_start":641295,"byte_end":641327,"line_start":243,"line_end":243,"column_start":5,"column_end":37}},{"value":"/            b\"AAGA\".to_vec(),","span":{"file_name":"/Users/shelwitz/.cargo/registry/src/github.com-1ecc6299db9ec823/bio-0.39.0/src/pattern_matching/pssm/mod.rs","byte_start":641332,"byte_end":641364,"line_start":244,"line_end":244,"column_start":5,"column_end":37}},{"value":"/            b\"AAAA\".to_vec(),","span":{"file_name":"/Users/shelwitz/.cargo/registry/src/github.com-1ecc6299db9ec823/bio-0.39.0/src/pattern_matching/pssm/mod.rs","byte_start":641369,"byte_end":641401,"line_start":245,"line_end":245,"column_start":5,"column_end":37}},{"value":"/        ].as_ref(), None).unwrap();","span":{"file_name":"/Users/shelwitz/.cargo/registry/src/github.com-1ecc6299db9ec823/bio-0.39.0/src/pattern_matching/pssm/mod.rs","byte_start":641406,"byte_end":641444,"line_start":246,"line_end":246,"column_start":5,"column_end":43}},{"value":"/ let start_pos = pssm.score(b\"CCCCCAATA\").unwrap().loc;","span":{"file_name":"/Users/shelwitz/.cargo/registry/src/github.com-1ecc6299db9ec823/bio-0.39.0/src/pattern_matching/pssm/mod.rs","byte_start":641449,"byte_end":641507,"line_start":247,"line_end":247,"column_start":5,"column_end":63}}]},{"kind":"Method","id":{"krate":0,"index":2303},"span":{"file_name":"/Users/shelwitz/.cargo/registry/src/github.com-1ecc6299db9ec823/bio-0.39.0/src/pattern_matching/pssm/mod.rs","byte_start":642619,"byte_end":642631,"line_start":281,"line_end":281,"column_start":8,"column_end":20},"name":"info_content","qualname":"::pattern_matching::pssm::Motif::info_content","value":"pub fn info_content(&Self) -> f32","parent":{"krate":0,"index":2278},"children":[],"decl_id":null,"docs":" Returns a float representing the information content of a motif; roughly the\n inverse of Shannon Entropy.\n Adapted from the information content described here:\n    https://en.wikipedia.org/wiki/Sequence_logo#Logo_creation\n","sig":null,"attributes":[{"value":"/ Returns a float representing the information content of a motif; roughly the","span":{"file_name":"/Users/shelwitz/.cargo/registry/src/github.com-1ecc6299db9ec823/bio-0.39.0/src/pattern_matching/pssm/mod.rs","byte_start":642365,"byte_end":642445,"line_start":277,"line_end":277,"column_start":5,"column_end":85}},{"value":"/ inverse of Shannon Entropy.","span":{"file_name":"/Users/shelwitz/.cargo/registry/src/github.com-1ecc6299db9ec823/bio-0.39.0/src/pattern_matching/pssm/mod.rs","byte_start":642450,"byte_end":642481,"line_start":278,"line_end":278,"column_start":5,"column_end":36}},{"value":"/ Adapted from the information content described here:","span":{"file_name":"/Users/shelwitz/.cargo/registry/src/github.com-1ecc6299db9ec823/bio-0.39.0/src/pattern_matching/pssm/mod.rs","byte_start":642486,"byte_end":642542,"line_start":279,"line_end":279,"column_start":5,"column_end":61}},{"value":"/    https://en.wikipedia.org/wiki/Sequence_logo#Logo_creation","span":{"file_name":"/Users/shelwitz/.cargo/registry/src/github.com-1ecc6299db9ec823/bio-0.39.0/src/pattern_matching/pssm/mod.rs","byte_start":642547,"byte_end":642611,"line_start":280,"line_end":280,"column_start":5,"column_end":69}}]},{"kind":"Mod","id":{"krate":0,"index":2308},"span":{"file_name":"/Users/shelwitz/.cargo/registry/src/github.com-1ecc6299db9ec823/bio-0.39.0/src/pattern_matching/shift_and.rs","byte_start":0,"byte_end":0,"line_start":1,"line_end":1,"column_start":1,"column_end":1},"name":"shift_and","qualname":"::pattern_matching::shift_and","value":"/Users/shelwitz/.cargo/registry/src/github.com-1ecc6299db9ec823/bio-0.39.0/src/pattern_matching/shift_and.rs","parent":null,"children":[{"krate":0,"index":2309},{"krate":0,"index":2312},{"krate":0,"index":2315},{"krate":0,"index":2320},{"krate":0,"index":2327},{"krate":0,"index":2332},{"krate":0,"index":2339}],"decl_id":null,"docs":" `ShiftAnd` algorithm for pattern matching.\n Patterns may contain at most 64 symbols.\n Complexity: O(n) with text length n.","sig":null,"attributes":[{"value":"/ `ShiftAnd` algorithm for pattern matching.","span":{"file_name":"/Users/shelwitz/.cargo/registry/src/github.com-1ecc6299db9ec823/bio-0.39.0/src/pattern_matching/shift_and.rs","byte_start":661383,"byte_end":661429,"line_start":6,"line_end":6,"column_start":1,"column_end":47}},{"value":"/ Patterns may contain at most 64 symbols.","span":{"file_name":"/Users/shelwitz/.cargo/registry/src/github.com-1ecc6299db9ec823/bio-0.39.0/src/pattern_matching/shift_and.rs","byte_start":661430,"byte_end":661474,"line_start":7,"line_end":7,"column_start":1,"column_end":45}},{"value":"/ Complexity: O(n) with text length n.","span":{"file_name":"/Users/shelwitz/.cargo/registry/src/github.com-1ecc6299db9ec823/bio-0.39.0/src/pattern_matching/shift_and.rs","byte_start":661475,"byte_end":661515,"line_start":8,"line_end":8,"column_start":1,"column_end":41}},{"value":"/","span":{"file_name":"/Users/shelwitz/.cargo/registry/src/github.com-1ecc6299db9ec823/bio-0.39.0/src/pattern_matching/shift_and.rs","byte_start":661516,"byte_end":661519,"line_start":9,"line_end":9,"column_start":1,"column_end":4}},{"value":"/ # Example","span":{"file_name":"/Users/shelwitz/.cargo/registry/src/github.com-1ecc6299db9ec823/bio-0.39.0/src/pattern_matching/shift_and.rs","byte_start":661520,"byte_end":661533,"line_start":10,"line_end":10,"column_start":1,"column_end":14}},{"value":"/","span":{"file_name":"/Users/shelwitz/.cargo/registry/src/github.com-1ecc6299db9ec823/bio-0.39.0/src/pattern_matching/shift_and.rs","byte_start":661534,"byte_end":661537,"line_start":11,"line_end":11,"column_start":1,"column_end":4}},{"value":"/ ```rust","span":{"file_name":"/Users/shelwitz/.cargo/registry/src/github.com-1ecc6299db9ec823/bio-0.39.0/src/pattern_matching/shift_and.rs","byte_start":661538,"byte_end":661549,"line_start":12,"line_end":12,"column_start":1,"column_end":12}},{"value":"/ use bio::pattern_matching::shift_and;","span":{"file_name":"/Users/shelwitz/.cargo/registry/src/github.com-1ecc6299db9ec823/bio-0.39.0/src/pattern_matching/shift_and.rs","byte_start":661550,"byte_end":661591,"line_start":13,"line_end":13,"column_start":1,"column_end":42}},{"value":"/ let pattern = b\"AAAA\";","span":{"file_name":"/Users/shelwitz/.cargo/registry/src/github.com-1ecc6299db9ec823/bio-0.39.0/src/pattern_matching/shift_and.rs","byte_start":661592,"byte_end":661618,"line_start":14,"line_end":14,"column_start":1,"column_end":27}},{"value":"/ let text = b\"ACGGCTAGAAAAGGCTAG\";","span":{"file_name":"/Users/shelwitz/.cargo/registry/src/github.com-1ecc6299db9ec823/bio-0.39.0/src/pattern_matching/shift_and.rs","byte_start":661619,"byte_end":661656,"line_start":15,"line_end":15,"column_start":1,"column_end":38}},{"value":"/ let shiftand = shift_and::ShiftAnd::new(pattern);","span":{"file_name":"/Users/shelwitz/.cargo/registry/src/github.com-1ecc6299db9ec823/bio-0.39.0/src/pattern_matching/shift_and.rs","byte_start":661657,"byte_end":661710,"line_start":16,"line_end":16,"column_start":1,"column_end":54}},{"value":"/ let occ = shiftand.find_all(text).next().unwrap();","span":{"file_name":"/Users/shelwitz/.cargo/registry/src/github.com-1ecc6299db9ec823/bio-0.39.0/src/pattern_matching/shift_and.rs","byte_start":661711,"byte_end":661765,"line_start":17,"line_end":17,"column_start":1,"column_end":55}},{"value":"/ assert_eq!(occ, 8);","span":{"file_name":"/Users/shelwitz/.cargo/registry/src/github.com-1ecc6299db9ec823/bio-0.39.0/src/pattern_matching/shift_and.rs","byte_start":661766,"byte_end":661789,"line_start":18,"line_end":18,"column_start":1,"column_end":24}},{"value":"/ ```","span":{"file_name":"/Users/shelwitz/.cargo/registry/src/github.com-1ecc6299db9ec823/bio-0.39.0/src/pattern_matching/shift_and.rs","byte_start":661790,"byte_end":661797,"line_start":19,"line_end":19,"column_start":1,"column_end":8}}]},{"kind":"Struct","id":{"krate":0,"index":2315},"span":{"file_name":"/Users/shelwitz/.cargo/registry/src/github.com-1ecc6299db9ec823/bio-0.39.0/src/pattern_matching/shift_and.rs","byte_start":661888,"byte_end":661896,"line_start":25,"line_end":25,"column_start":12,"column_end":20},"name":"ShiftAnd","qualname":"::pattern_matching::shift_and::ShiftAnd","value":"ShiftAnd {  }","parent":null,"children":[{"krate":0,"index":2316},{"krate":0,"index":2317},{"krate":0,"index":2319}],"decl_id":null,"docs":" `ShiftAnd` algorithm.\n","sig":null,"attributes":[{"value":"/ `ShiftAnd` algorithm.","span":{"file_name":"/Users/shelwitz/.cargo/registry/src/github.com-1ecc6299db9ec823/bio-0.39.0/src/pattern_matching/shift_and.rs","byte_start":661851,"byte_end":661876,"line_start":24,"line_end":24,"column_start":1,"column_end":26}}]},{"kind":"Method","id":{"krate":0,"index":2321},"span":{"file_name":"/Users/shelwitz/.cargo/registry/src/github.com-1ecc6299db9ec823/bio-0.39.0/src/pattern_matching/shift_and.rs","byte_start":662042,"byte_end":662045,"line_start":33,"line_end":33,"column_start":12,"column_end":15},"name":"new","qualname":"<ShiftAnd>::new","value":"pub fn new<C, P>(P) -> Self where P::IntoIter: ExactSizeIterator,\nC: Borrow<u8>, P: IntoIterator<Item = C>","parent":null,"children":[],"decl_id":null,"docs":" Create new ShiftAnd instance from a given pattern.\n","sig":null,"attributes":[{"value":"/ Create new ShiftAnd instance from a given pattern.","span":{"file_name":"/Users/shelwitz/.cargo/registry/src/github.com-1ecc6299db9ec823/bio-0.39.0/src/pattern_matching/shift_and.rs","byte_start":661976,"byte_end":662030,"line_start":32,"line_end":32,"column_start":5,"column_end":59}}]},{"kind":"Method","id":{"krate":0,"index":2324},"span":{"file_name":"/Users/shelwitz/.cargo/registry/src/github.com-1ecc6299db9ec823/bio-0.39.0/src/pattern_matching/shift_and.rs","byte_start":662556,"byte_end":662564,"line_start":49,"line_end":49,"column_start":12,"column_end":20},"name":"find_all","qualname":"<ShiftAnd>::find_all","value":"pub fn find_all<C, T>(&Self, T) -> Matches<, C, T::IntoIter> where\nC: Borrow<u8>, T: IntoIterator<Item = C>","parent":null,"children":[],"decl_id":null,"docs":" Find all matches of pattern in the given text. Matches are returned as an iterator\n over start positions.\n","sig":null,"attributes":[{"value":"/ Find all matches of pattern in the given text. Matches are returned as an iterator","span":{"file_name":"/Users/shelwitz/.cargo/registry/src/github.com-1ecc6299db9ec823/bio-0.39.0/src/pattern_matching/shift_and.rs","byte_start":662428,"byte_end":662514,"line_start":47,"line_end":47,"column_start":5,"column_end":91}},{"value":"/ over start positions.","span":{"file_name":"/Users/shelwitz/.cargo/registry/src/github.com-1ecc6299db9ec823/bio-0.39.0/src/pattern_matching/shift_and.rs","byte_start":662519,"byte_end":662544,"line_start":48,"line_end":48,"column_start":5,"column_end":30}}]},{"kind":"Function","id":{"krate":0,"index":2327},"span":{"file_name":"/Users/shelwitz/.cargo/registry/src/github.com-1ecc6299db9ec823/bio-0.39.0/src/pattern_matching/shift_and.rs","byte_start":662962,"byte_end":662967,"line_start":64,"line_end":64,"column_start":8,"column_end":13},"name":"masks","qualname":"::pattern_matching::shift_and::masks","value":"pub fn masks<C, P>(P) -> ([u64; ], u64) where C: Borrow<u8>,\nP: IntoIterator<Item = C>","parent":null,"children":[],"decl_id":null,"docs":" Calculate ShiftAnd masks. This function is called automatically when instantiating\n a new ShiftAnd for a given pattern.\n","sig":null,"attributes":[{"value":"/ Calculate ShiftAnd masks. This function is called automatically when instantiating","span":{"file_name":"/Users/shelwitz/.cargo/registry/src/github.com-1ecc6299db9ec823/bio-0.39.0/src/pattern_matching/shift_and.rs","byte_start":662828,"byte_end":662914,"line_start":62,"line_end":62,"column_start":1,"column_end":87}},{"value":"/ a new ShiftAnd for a given pattern.","span":{"file_name":"/Users/shelwitz/.cargo/registry/src/github.com-1ecc6299db9ec823/bio-0.39.0/src/pattern_matching/shift_and.rs","byte_start":662915,"byte_end":662954,"line_start":63,"line_end":63,"column_start":1,"column_end":40}}]},{"kind":"Struct","id":{"krate":0,"index":2332},"span":{"file_name":"/Users/shelwitz/.cargo/registry/src/github.com-1ecc6299db9ec823/bio-0.39.0/src/pattern_matching/shift_and.rs","byte_start":663290,"byte_end":663297,"line_start":81,"line_end":81,"column_start":12,"column_end":19},"name":"Matches","qualname":"::pattern_matching::shift_and::Matches","value":"Matches {  }","parent":null,"children":[{"krate":0,"index":2336},{"krate":0,"index":2337},{"krate":0,"index":2338}],"decl_id":null,"docs":" Iterator over start positions of matches.\n","sig":null,"attributes":[{"value":"/ Iterator over start positions of matches.","span":{"file_name":"/Users/shelwitz/.cargo/registry/src/github.com-1ecc6299db9ec823/bio-0.39.0/src/pattern_matching/shift_and.rs","byte_start":663233,"byte_end":663278,"line_start":80,"line_end":80,"column_start":1,"column_end":46}}]},{"kind":"Mod","id":{"krate":0,"index":2345},"span":{"file_name":"/Users/shelwitz/.cargo/registry/src/github.com-1ecc6299db9ec823/bio-0.39.0/src/pattern_matching/ukkonen.rs","byte_start":0,"byte_end":0,"line_start":1,"line_end":1,"column_start":1,"column_end":1},"name":"ukkonen","qualname":"::pattern_matching::ukkonen","value":"/Users/shelwitz/.cargo/registry/src/github.com-1ecc6299db9ec823/bio-0.39.0/src/pattern_matching/ukkonen.rs","parent":null,"children":[{"krate":0,"index":2346},{"krate":0,"index":2349},{"krate":0,"index":2352},{"krate":0,"index":2355},{"krate":0,"index":2358},{"krate":0,"index":2361},{"krate":0,"index":2362},{"krate":0,"index":2367},{"krate":0,"index":2375},{"krate":0,"index":2386}],"decl_id":null,"docs":" Bounded version of Ukkonens DP algorithm for approximate pattern matching.\n Complexity: O(n * k) on random texts.","sig":null,"attributes":[{"value":"/ Bounded version of Ukkonens DP algorithm for approximate pattern matching.","span":{"file_name":"/Users/shelwitz/.cargo/registry/src/github.com-1ecc6299db9ec823/bio-0.39.0/src/pattern_matching/ukkonen.rs","byte_start":664886,"byte_end":664964,"line_start":6,"line_end":6,"column_start":1,"column_end":79}},{"value":"/ Complexity: O(n * k) on random texts.","span":{"file_name":"/Users/shelwitz/.cargo/registry/src/github.com-1ecc6299db9ec823/bio-0.39.0/src/pattern_matching/ukkonen.rs","byte_start":664965,"byte_end":665006,"line_start":7,"line_end":7,"column_start":1,"column_end":42}},{"value":"/","span":{"file_name":"/Users/shelwitz/.cargo/registry/src/github.com-1ecc6299db9ec823/bio-0.39.0/src/pattern_matching/ukkonen.rs","byte_start":665007,"byte_end":665010,"line_start":8,"line_end":8,"column_start":1,"column_end":4}},{"value":"/ The algorithm finds all matches of a pattern in a text with up to k errors.","span":{"file_name":"/Users/shelwitz/.cargo/registry/src/github.com-1ecc6299db9ec823/bio-0.39.0/src/pattern_matching/ukkonen.rs","byte_start":665011,"byte_end":665090,"line_start":9,"line_end":9,"column_start":1,"column_end":80}},{"value":"/ Idea is to use dynamic programming to column-wise explore the edit matrix, but to omit","span":{"file_name":"/Users/shelwitz/.cargo/registry/src/github.com-1ecc6299db9ec823/bio-0.39.0/src/pattern_matching/ukkonen.rs","byte_start":665091,"byte_end":665181,"line_start":10,"line_end":10,"column_start":1,"column_end":91}},{"value":"/ parts of the matrix for which the error exceeds k. To achieve this, a value `lastk` is","span":{"file_name":"/Users/shelwitz/.cargo/registry/src/github.com-1ecc6299db9ec823/bio-0.39.0/src/pattern_matching/ukkonen.rs","byte_start":665182,"byte_end":665272,"line_start":11,"line_end":11,"column_start":1,"column_end":91}},{"value":"/ maintained that provides the lower feasible boundary of the matrix.","span":{"file_name":"/Users/shelwitz/.cargo/registry/src/github.com-1ecc6299db9ec823/bio-0.39.0/src/pattern_matching/ukkonen.rs","byte_start":665273,"byte_end":665344,"line_start":12,"line_end":12,"column_start":1,"column_end":72}},{"value":"/ Initially, lastk = min(k, m). In each iteration (over a column), lastk can increase by at most 1.","span":{"file_name":"/Users/shelwitz/.cargo/registry/src/github.com-1ecc6299db9ec823/bio-0.39.0/src/pattern_matching/ukkonen.rs","byte_start":665345,"byte_end":665446,"line_start":13,"line_end":13,"column_start":1,"column_end":102}},{"value":"/","span":{"file_name":"/Users/shelwitz/.cargo/registry/src/github.com-1ecc6299db9ec823/bio-0.39.0/src/pattern_matching/ukkonen.rs","byte_start":665447,"byte_end":665450,"line_start":14,"line_end":14,"column_start":1,"column_end":4}},{"value":"/ # Example","span":{"file_name":"/Users/shelwitz/.cargo/registry/src/github.com-1ecc6299db9ec823/bio-0.39.0/src/pattern_matching/ukkonen.rs","byte_start":665451,"byte_end":665464,"line_start":15,"line_end":15,"column_start":1,"column_end":14}},{"value":"/","span":{"file_name":"/Users/shelwitz/.cargo/registry/src/github.com-1ecc6299db9ec823/bio-0.39.0/src/pattern_matching/ukkonen.rs","byte_start":665465,"byte_end":665468,"line_start":16,"line_end":16,"column_start":1,"column_end":4}},{"value":"/ ```","span":{"file_name":"/Users/shelwitz/.cargo/registry/src/github.com-1ecc6299db9ec823/bio-0.39.0/src/pattern_matching/ukkonen.rs","byte_start":665469,"byte_end":665476,"line_start":17,"line_end":17,"column_start":1,"column_end":8}},{"value":"/ use bio::pattern_matching::ukkonen::{unit_cost, Ukkonen};","span":{"file_name":"/Users/shelwitz/.cargo/registry/src/github.com-1ecc6299db9ec823/bio-0.39.0/src/pattern_matching/ukkonen.rs","byte_start":665477,"byte_end":665538,"line_start":18,"line_end":18,"column_start":1,"column_end":62}},{"value":"/","span":{"file_name":"/Users/shelwitz/.cargo/registry/src/github.com-1ecc6299db9ec823/bio-0.39.0/src/pattern_matching/ukkonen.rs","byte_start":665539,"byte_end":665542,"line_start":19,"line_end":19,"column_start":1,"column_end":4}},{"value":"/ let mut ukkonen = Ukkonen::with_capacity(10, unit_cost);","span":{"file_name":"/Users/shelwitz/.cargo/registry/src/github.com-1ecc6299db9ec823/bio-0.39.0/src/pattern_matching/ukkonen.rs","byte_start":665543,"byte_end":665603,"line_start":20,"line_end":20,"column_start":1,"column_end":61}},{"value":"/ let text = b\"ACCGTGGATGAGCGCCATAG\";","span":{"file_name":"/Users/shelwitz/.cargo/registry/src/github.com-1ecc6299db9ec823/bio-0.39.0/src/pattern_matching/ukkonen.rs","byte_start":665604,"byte_end":665643,"line_start":21,"line_end":21,"column_start":1,"column_end":40}},{"value":"/ let pattern = b\"TGAGCGA\";","span":{"file_name":"/Users/shelwitz/.cargo/registry/src/github.com-1ecc6299db9ec823/bio-0.39.0/src/pattern_matching/ukkonen.rs","byte_start":665644,"byte_end":665673,"line_start":22,"line_end":22,"column_start":1,"column_end":30}},{"value":"/ let occ: Vec<(usize, usize)> = ukkonen.find_all_end(pattern, text, 1).collect();","span":{"file_name":"/Users/shelwitz/.cargo/registry/src/github.com-1ecc6299db9ec823/bio-0.39.0/src/pattern_matching/ukkonen.rs","byte_start":665674,"byte_end":665758,"line_start":23,"line_end":23,"column_start":1,"column_end":85}},{"value":"/ assert_eq!(occ, [(13, 1), (14, 1)]);","span":{"file_name":"/Users/shelwitz/.cargo/registry/src/github.com-1ecc6299db9ec823/bio-0.39.0/src/pattern_matching/ukkonen.rs","byte_start":665759,"byte_end":665799,"line_start":24,"line_end":24,"column_start":1,"column_end":41}},{"value":"/ ```","span":{"file_name":"/Users/shelwitz/.cargo/registry/src/github.com-1ecc6299db9ec823/bio-0.39.0/src/pattern_matching/ukkonen.rs","byte_start":665800,"byte_end":665807,"line_start":25,"line_end":25,"column_start":1,"column_end":8}}]},{"kind":"Function","id":{"krate":0,"index":2361},"span":{"file_name":"/Users/shelwitz/.cargo/registry/src/github.com-1ecc6299db9ec823/bio-0.39.0/src/pattern_matching/ukkonen.rs","byte_start":665969,"byte_end":665978,"line_start":35,"line_end":35,"column_start":8,"column_end":17},"name":"unit_cost","qualname":"::pattern_matching::ukkonen::unit_cost","value":"pub fn unit_cost(u8, u8) -> u32","parent":null,"children":[],"decl_id":null,"docs":" Default cost function (unit costs).\n","sig":null,"attributes":[{"value":"/ Default cost function (unit costs).","span":{"file_name":"/Users/shelwitz/.cargo/registry/src/github.com-1ecc6299db9ec823/bio-0.39.0/src/pattern_matching/ukkonen.rs","byte_start":665922,"byte_end":665961,"line_start":34,"line_end":34,"column_start":1,"column_end":40}}]},{"kind":"Struct","id":{"krate":0,"index":2362},"span":{"file_name":"/Users/shelwitz/.cargo/registry/src/github.com-1ecc6299db9ec823/bio-0.39.0/src/pattern_matching/ukkonen.rs","byte_start":666085,"byte_end":666092,"line_start":41,"line_end":41,"column_start":12,"column_end":19},"name":"Ukkonen","qualname":"::pattern_matching::ukkonen::Ukkonen","value":"Ukkonen {  }","parent":null,"children":[{"krate":0,"index":2364},{"krate":0,"index":2366}],"decl_id":null,"docs":" Ukkonens algorithm.\n","sig":null,"attributes":[{"value":"/ Ukkonens algorithm.","span":{"file_name":"/Users/shelwitz/.cargo/registry/src/github.com-1ecc6299db9ec823/bio-0.39.0/src/pattern_matching/ukkonen.rs","byte_start":666025,"byte_end":666048,"line_start":39,"line_end":39,"column_start":1,"column_end":24}},{"value":"allow(non_snake_case)","span":{"file_name":"/Users/shelwitz/.cargo/registry/src/github.com-1ecc6299db9ec823/bio-0.39.0/src/pattern_matching/ukkonen.rs","byte_start":666049,"byte_end":666073,"line_start":40,"line_end":40,"column_start":1,"column_end":25}}]},{"kind":"Method","id":{"krate":0,"index":2369},"span":{"file_name":"/Users/shelwitz/.cargo/registry/src/github.com-1ecc6299db9ec823/bio-0.39.0/src/pattern_matching/ukkonen.rs","byte_start":666302,"byte_end":666315,"line_start":54,"line_end":54,"column_start":12,"column_end":25},"name":"with_capacity","qualname":"<Ukkonen<F>>::with_capacity","value":"pub fn with_capacity(usize, F) -> Self","parent":null,"children":[],"decl_id":null,"docs":" Initialize algorithm with given capacity and cost function.\n","sig":null,"attributes":[{"value":"/ Initialize algorithm with given capacity and cost function.","span":{"file_name":"/Users/shelwitz/.cargo/registry/src/github.com-1ecc6299db9ec823/bio-0.39.0/src/pattern_matching/ukkonen.rs","byte_start":666227,"byte_end":666290,"line_start":53,"line_end":53,"column_start":5,"column_end":68}}]},{"kind":"Method","id":{"krate":0,"index":2371},"span":{"file_name":"/Users/shelwitz/.cargo/registry/src/github.com-1ecc6299db9ec823/bio-0.39.0/src/pattern_matching/ukkonen.rs","byte_start":666656,"byte_end":666668,"line_start":64,"line_end":64,"column_start":12,"column_end":24},"name":"find_all_end","qualname":"<Ukkonen<F>>::find_all_end","value":"pub fn find_all_end<'a, C, T>(&'a mut Self, TextSlice, T, usize)\n-> Matches<, F, C, T::IntoIter> where C: Borrow<u8>, T: IntoIterator<Item = C>","parent":null,"children":[],"decl_id":null,"docs":" Find all matches between pattern and text with up to k errors.\n Matches are returned as an iterator over pairs of end position and distance.\n","sig":null,"attributes":[{"value":"/ Find all matches between pattern and text with up to k errors.","span":{"file_name":"/Users/shelwitz/.cargo/registry/src/github.com-1ecc6299db9ec823/bio-0.39.0/src/pattern_matching/ukkonen.rs","byte_start":666493,"byte_end":666559,"line_start":62,"line_end":62,"column_start":5,"column_end":71}},{"value":"/ Matches are returned as an iterator over pairs of end position and distance.","span":{"file_name":"/Users/shelwitz/.cargo/registry/src/github.com-1ecc6299db9ec823/bio-0.39.0/src/pattern_matching/ukkonen.rs","byte_start":666564,"byte_end":666644,"line_start":63,"line_end":63,"column_start":5,"column_end":85}}]},{"kind":"Struct","id":{"krate":0,"index":2375},"span":{"file_name":"/Users/shelwitz/.cargo/registry/src/github.com-1ecc6299db9ec823/bio-0.39.0/src/pattern_matching/ukkonen.rs","byte_start":667324,"byte_end":667331,"line_start":91,"line_end":91,"column_start":12,"column_end":19},"name":"Matches","qualname":"::pattern_matching::ukkonen::Matches","value":"Matches {  }","parent":null,"children":[{"krate":0,"index":2380},{"krate":0,"index":2381},{"krate":0,"index":2382},{"krate":0,"index":2383},{"krate":0,"index":2384},{"krate":0,"index":2385}],"decl_id":null,"docs":" Iterator over pairs of end positions and distance of matches.\n","sig":null,"attributes":[{"value":"/ Iterator over pairs of end positions and distance of matches.","span":{"file_name":"/Users/shelwitz/.cargo/registry/src/github.com-1ecc6299db9ec823/bio-0.39.0/src/pattern_matching/ukkonen.rs","byte_start":667247,"byte_end":667312,"line_start":90,"line_end":90,"column_start":1,"column_end":66}}]},{"kind":"Mod","id":{"krate":0,"index":2393},"span":{"file_name":"/Users/shelwitz/.cargo/registry/src/github.com-1ecc6299db9ec823/bio-0.39.0/src/scores/mod.rs","byte_start":0,"byte_end":0,"line_start":1,"line_end":1,"column_start":1,"column_end":1},"name":"scores","qualname":"::scores","value":"/Users/shelwitz/.cargo/registry/src/github.com-1ecc6299db9ec823/bio-0.39.0/src/scores/mod.rs","parent":null,"children":[{"krate":0,"index":2394},{"krate":0,"index":2397},{"krate":0,"index":2400},{"krate":0,"index":2403},{"krate":0,"index":2406},{"krate":0,"index":2409},{"krate":0,"index":2412},{"krate":0,"index":2415},{"krate":0,"index":2418},{"krate":0,"index":2421}],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Mod","id":{"krate":0,"index":2409},"span":{"file_name":"/Users/shelwitz/.cargo/registry/src/github.com-1ecc6299db9ec823/bio-0.39.0/src/scores/blosum62.rs","byte_start":0,"byte_end":0,"line_start":1,"line_end":1,"column_start":1,"column_end":1},"name":"blosum62","qualname":"::scores::blosum62","value":"/Users/shelwitz/.cargo/registry/src/github.com-1ecc6299db9ec823/bio-0.39.0/src/scores/blosum62.rs","parent":null,"children":[{"krate":0,"index":5476},{"krate":0,"index":5478},{"krate":0,"index":5479},{"krate":0,"index":5484},{"krate":0,"index":2410},{"krate":0,"index":2411}],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Function","id":{"krate":0,"index":2411},"span":{"file_name":"/Users/shelwitz/.cargo/registry/src/github.com-1ecc6299db9ec823/bio-0.39.0/src/scores/blosum62.rs","byte_start":674506,"byte_end":674514,"line_start":89,"line_end":89,"column_start":8,"column_end":16},"name":"blosum62","qualname":"::scores::blosum62::blosum62","value":"pub fn blosum62(u8, u8) -> i32","parent":null,"children":[],"decl_id":null,"docs":" Return the BLOSUM62 substitution matrix score of [a, b]","sig":null,"attributes":[{"value":"/ Return the BLOSUM62 substitution matrix score of [a, b]","span":{"file_name":"/Users/shelwitz/.cargo/registry/src/github.com-1ecc6299db9ec823/bio-0.39.0/src/scores/blosum62.rs","byte_start":674328,"byte_end":674387,"line_start":81,"line_end":81,"column_start":1,"column_end":60}},{"value":"/","span":{"file_name":"/Users/shelwitz/.cargo/registry/src/github.com-1ecc6299db9ec823/bio-0.39.0/src/scores/blosum62.rs","byte_start":674388,"byte_end":674391,"line_start":82,"line_end":82,"column_start":1,"column_end":4}},{"value":"/ # Example","span":{"file_name":"/Users/shelwitz/.cargo/registry/src/github.com-1ecc6299db9ec823/bio-0.39.0/src/scores/blosum62.rs","byte_start":674392,"byte_end":674405,"line_start":83,"line_end":83,"column_start":1,"column_end":14}},{"value":"/","span":{"file_name":"/Users/shelwitz/.cargo/registry/src/github.com-1ecc6299db9ec823/bio-0.39.0/src/scores/blosum62.rs","byte_start":674406,"byte_end":674409,"line_start":84,"line_end":84,"column_start":1,"column_end":4}},{"value":"/ ```","span":{"file_name":"/Users/shelwitz/.cargo/registry/src/github.com-1ecc6299db9ec823/bio-0.39.0/src/scores/blosum62.rs","byte_start":674410,"byte_end":674417,"line_start":85,"line_end":85,"column_start":1,"column_end":8}},{"value":"/ use bio::scores::blosum62;","span":{"file_name":"/Users/shelwitz/.cargo/registry/src/github.com-1ecc6299db9ec823/bio-0.39.0/src/scores/blosum62.rs","byte_start":674418,"byte_end":674448,"line_start":86,"line_end":86,"column_start":1,"column_end":31}},{"value":"/ assert_eq!(blosum62(b'H', b'A'), -2);","span":{"file_name":"/Users/shelwitz/.cargo/registry/src/github.com-1ecc6299db9ec823/bio-0.39.0/src/scores/blosum62.rs","byte_start":674449,"byte_end":674490,"line_start":87,"line_end":87,"column_start":1,"column_end":42}},{"value":"/ ```","span":{"file_name":"/Users/shelwitz/.cargo/registry/src/github.com-1ecc6299db9ec823/bio-0.39.0/src/scores/blosum62.rs","byte_start":674491,"byte_end":674498,"line_start":88,"line_end":88,"column_start":1,"column_end":8}}]},{"kind":"Mod","id":{"krate":0,"index":2412},"span":{"file_name":"/Users/shelwitz/.cargo/registry/src/github.com-1ecc6299db9ec823/bio-0.39.0/src/scores/pam120.rs","byte_start":0,"byte_end":0,"line_start":1,"line_end":1,"column_start":1,"column_end":1},"name":"pam120","qualname":"::scores::pam120","value":"/Users/shelwitz/.cargo/registry/src/github.com-1ecc6299db9ec823/bio-0.39.0/src/scores/pam120.rs","parent":null,"children":[{"krate":0,"index":5487},{"krate":0,"index":5489},{"krate":0,"index":5490},{"krate":0,"index":5495},{"krate":0,"index":2413},{"krate":0,"index":2414}],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Function","id":{"krate":0,"index":2414},"span":{"file_name":"/Users/shelwitz/.cargo/registry/src/github.com-1ecc6299db9ec823/bio-0.39.0/src/scores/pam120.rs","byte_start":679393,"byte_end":679399,"line_start":91,"line_end":91,"column_start":8,"column_end":14},"name":"pam120","qualname":"::scores::pam120::pam120","value":"pub fn pam120(u8, u8) -> i32","parent":null,"children":[],"decl_id":null,"docs":" Return the PAM120 substitution matrix score of [a, b]","sig":null,"attributes":[{"value":"/ Return the PAM120 substitution matrix score of [a, b]","span":{"file_name":"/Users/shelwitz/.cargo/registry/src/github.com-1ecc6299db9ec823/bio-0.39.0/src/scores/pam120.rs","byte_start":679221,"byte_end":679278,"line_start":83,"line_end":83,"column_start":1,"column_end":58}},{"value":"/","span":{"file_name":"/Users/shelwitz/.cargo/registry/src/github.com-1ecc6299db9ec823/bio-0.39.0/src/scores/pam120.rs","byte_start":679279,"byte_end":679282,"line_start":84,"line_end":84,"column_start":1,"column_end":4}},{"value":"/ # Example","span":{"file_name":"/Users/shelwitz/.cargo/registry/src/github.com-1ecc6299db9ec823/bio-0.39.0/src/scores/pam120.rs","byte_start":679283,"byte_end":679296,"line_start":85,"line_end":85,"column_start":1,"column_end":14}},{"value":"/","span":{"file_name":"/Users/shelwitz/.cargo/registry/src/github.com-1ecc6299db9ec823/bio-0.39.0/src/scores/pam120.rs","byte_start":679297,"byte_end":679300,"line_start":86,"line_end":86,"column_start":1,"column_end":4}},{"value":"/ ```","span":{"file_name":"/Users/shelwitz/.cargo/registry/src/github.com-1ecc6299db9ec823/bio-0.39.0/src/scores/pam120.rs","byte_start":679301,"byte_end":679308,"line_start":87,"line_end":87,"column_start":1,"column_end":8}},{"value":"/ use bio::scores::pam120;","span":{"file_name":"/Users/shelwitz/.cargo/registry/src/github.com-1ecc6299db9ec823/bio-0.39.0/src/scores/pam120.rs","byte_start":679309,"byte_end":679337,"line_start":88,"line_end":88,"column_start":1,"column_end":29}},{"value":"/ assert_eq!(pam120(b'H', b'A'), -3);","span":{"file_name":"/Users/shelwitz/.cargo/registry/src/github.com-1ecc6299db9ec823/bio-0.39.0/src/scores/pam120.rs","byte_start":679338,"byte_end":679377,"line_start":89,"line_end":89,"column_start":1,"column_end":40}},{"value":"/ ```","span":{"file_name":"/Users/shelwitz/.cargo/registry/src/github.com-1ecc6299db9ec823/bio-0.39.0/src/scores/pam120.rs","byte_start":679378,"byte_end":679385,"line_start":90,"line_end":90,"column_start":1,"column_end":8}}]},{"kind":"Mod","id":{"krate":0,"index":2415},"span":{"file_name":"/Users/shelwitz/.cargo/registry/src/github.com-1ecc6299db9ec823/bio-0.39.0/src/scores/pam200.rs","byte_start":0,"byte_end":0,"line_start":1,"line_end":1,"column_start":1,"column_end":1},"name":"pam200","qualname":"::scores::pam200","value":"/Users/shelwitz/.cargo/registry/src/github.com-1ecc6299db9ec823/bio-0.39.0/src/scores/pam200.rs","parent":null,"children":[{"krate":0,"index":5498},{"krate":0,"index":5500},{"krate":0,"index":5501},{"krate":0,"index":5506},{"krate":0,"index":2416},{"krate":0,"index":2417}],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Function","id":{"krate":0,"index":2417},"span":{"file_name":"/Users/shelwitz/.cargo/registry/src/github.com-1ecc6299db9ec823/bio-0.39.0/src/scores/pam200.rs","byte_start":684263,"byte_end":684269,"line_start":91,"line_end":91,"column_start":8,"column_end":14},"name":"pam200","qualname":"::scores::pam200::pam200","value":"pub fn pam200(u8, u8) -> i32","parent":null,"children":[],"decl_id":null,"docs":" Return the PAM200 substitution matrix score of [a, b]","sig":null,"attributes":[{"value":"/ Return the PAM200 substitution matrix score of [a, b]","span":{"file_name":"/Users/shelwitz/.cargo/registry/src/github.com-1ecc6299db9ec823/bio-0.39.0/src/scores/pam200.rs","byte_start":684091,"byte_end":684148,"line_start":83,"line_end":83,"column_start":1,"column_end":58}},{"value":"/","span":{"file_name":"/Users/shelwitz/.cargo/registry/src/github.com-1ecc6299db9ec823/bio-0.39.0/src/scores/pam200.rs","byte_start":684149,"byte_end":684152,"line_start":84,"line_end":84,"column_start":1,"column_end":4}},{"value":"/ # Example","span":{"file_name":"/Users/shelwitz/.cargo/registry/src/github.com-1ecc6299db9ec823/bio-0.39.0/src/scores/pam200.rs","byte_start":684153,"byte_end":684166,"line_start":85,"line_end":85,"column_start":1,"column_end":14}},{"value":"/","span":{"file_name":"/Users/shelwitz/.cargo/registry/src/github.com-1ecc6299db9ec823/bio-0.39.0/src/scores/pam200.rs","byte_start":684167,"byte_end":684170,"line_start":86,"line_end":86,"column_start":1,"column_end":4}},{"value":"/ ```","span":{"file_name":"/Users/shelwitz/.cargo/registry/src/github.com-1ecc6299db9ec823/bio-0.39.0/src/scores/pam200.rs","byte_start":684171,"byte_end":684178,"line_start":87,"line_end":87,"column_start":1,"column_end":8}},{"value":"/ use bio::scores::pam200;","span":{"file_name":"/Users/shelwitz/.cargo/registry/src/github.com-1ecc6299db9ec823/bio-0.39.0/src/scores/pam200.rs","byte_start":684179,"byte_end":684207,"line_start":88,"line_end":88,"column_start":1,"column_end":29}},{"value":"/ assert_eq!(pam200(b'H', b'A'), -2);","span":{"file_name":"/Users/shelwitz/.cargo/registry/src/github.com-1ecc6299db9ec823/bio-0.39.0/src/scores/pam200.rs","byte_start":684208,"byte_end":684247,"line_start":89,"line_end":89,"column_start":1,"column_end":40}},{"value":"/ ```","span":{"file_name":"/Users/shelwitz/.cargo/registry/src/github.com-1ecc6299db9ec823/bio-0.39.0/src/scores/pam200.rs","byte_start":684248,"byte_end":684255,"line_start":90,"line_end":90,"column_start":1,"column_end":8}}]},{"kind":"Mod","id":{"krate":0,"index":2418},"span":{"file_name":"/Users/shelwitz/.cargo/registry/src/github.com-1ecc6299db9ec823/bio-0.39.0/src/scores/pam250.rs","byte_start":0,"byte_end":0,"line_start":1,"line_end":1,"column_start":1,"column_end":1},"name":"pam250","qualname":"::scores::pam250","value":"/Users/shelwitz/.cargo/registry/src/github.com-1ecc6299db9ec823/bio-0.39.0/src/scores/pam250.rs","parent":null,"children":[{"krate":0,"index":5509},{"krate":0,"index":5511},{"krate":0,"index":5512},{"krate":0,"index":5517},{"krate":0,"index":2419},{"krate":0,"index":2420}],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Function","id":{"krate":0,"index":2420},"span":{"file_name":"/Users/shelwitz/.cargo/registry/src/github.com-1ecc6299db9ec823/bio-0.39.0/src/scores/pam250.rs","byte_start":689135,"byte_end":689141,"line_start":91,"line_end":91,"column_start":8,"column_end":14},"name":"pam250","qualname":"::scores::pam250::pam250","value":"pub fn pam250(u8, u8) -> i32","parent":null,"children":[],"decl_id":null,"docs":" Return the PAM250 substitution matrix score of [a, b]","sig":null,"attributes":[{"value":"/ Return the PAM250 substitution matrix score of [a, b]","span":{"file_name":"/Users/shelwitz/.cargo/registry/src/github.com-1ecc6299db9ec823/bio-0.39.0/src/scores/pam250.rs","byte_start":688963,"byte_end":689020,"line_start":83,"line_end":83,"column_start":1,"column_end":58}},{"value":"/","span":{"file_name":"/Users/shelwitz/.cargo/registry/src/github.com-1ecc6299db9ec823/bio-0.39.0/src/scores/pam250.rs","byte_start":689021,"byte_end":689024,"line_start":84,"line_end":84,"column_start":1,"column_end":4}},{"value":"/ # Example","span":{"file_name":"/Users/shelwitz/.cargo/registry/src/github.com-1ecc6299db9ec823/bio-0.39.0/src/scores/pam250.rs","byte_start":689025,"byte_end":689038,"line_start":85,"line_end":85,"column_start":1,"column_end":14}},{"value":"/","span":{"file_name":"/Users/shelwitz/.cargo/registry/src/github.com-1ecc6299db9ec823/bio-0.39.0/src/scores/pam250.rs","byte_start":689039,"byte_end":689042,"line_start":86,"line_end":86,"column_start":1,"column_end":4}},{"value":"/ ```","span":{"file_name":"/Users/shelwitz/.cargo/registry/src/github.com-1ecc6299db9ec823/bio-0.39.0/src/scores/pam250.rs","byte_start":689043,"byte_end":689050,"line_start":87,"line_end":87,"column_start":1,"column_end":8}},{"value":"/ use bio::scores::pam250;","span":{"file_name":"/Users/shelwitz/.cargo/registry/src/github.com-1ecc6299db9ec823/bio-0.39.0/src/scores/pam250.rs","byte_start":689051,"byte_end":689079,"line_start":88,"line_end":88,"column_start":1,"column_end":29}},{"value":"/ assert_eq!(pam250(b'H', b'A'), -1);","span":{"file_name":"/Users/shelwitz/.cargo/registry/src/github.com-1ecc6299db9ec823/bio-0.39.0/src/scores/pam250.rs","byte_start":689080,"byte_end":689119,"line_start":89,"line_end":89,"column_start":1,"column_end":40}},{"value":"/ ```","span":{"file_name":"/Users/shelwitz/.cargo/registry/src/github.com-1ecc6299db9ec823/bio-0.39.0/src/scores/pam250.rs","byte_start":689120,"byte_end":689127,"line_start":90,"line_end":90,"column_start":1,"column_end":8}}]},{"kind":"Mod","id":{"krate":0,"index":2421},"span":{"file_name":"/Users/shelwitz/.cargo/registry/src/github.com-1ecc6299db9ec823/bio-0.39.0/src/scores/pam40.rs","byte_start":0,"byte_end":0,"line_start":1,"line_end":1,"column_start":1,"column_end":1},"name":"pam40","qualname":"::scores::pam40","value":"/Users/shelwitz/.cargo/registry/src/github.com-1ecc6299db9ec823/bio-0.39.0/src/scores/pam40.rs","parent":null,"children":[{"krate":0,"index":5520},{"krate":0,"index":5522},{"krate":0,"index":5523},{"krate":0,"index":5528},{"krate":0,"index":2422},{"krate":0,"index":2423}],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Function","id":{"krate":0,"index":2423},"span":{"file_name":"/Users/shelwitz/.cargo/registry/src/github.com-1ecc6299db9ec823/bio-0.39.0/src/scores/pam40.rs","byte_start":694613,"byte_end":694618,"line_start":89,"line_end":89,"column_start":8,"column_end":13},"name":"pam40","qualname":"::scores::pam40::pam40","value":"pub fn pam40(u8, u8) -> i32","parent":null,"children":[],"decl_id":null,"docs":" Return the PAM40 substitution matrix score of [a, b]","sig":null,"attributes":[{"value":"/ Return the PAM40 substitution matrix score of [a, b]","span":{"file_name":"/Users/shelwitz/.cargo/registry/src/github.com-1ecc6299db9ec823/bio-0.39.0/src/scores/pam40.rs","byte_start":694444,"byte_end":694500,"line_start":81,"line_end":81,"column_start":1,"column_end":57}},{"value":"/","span":{"file_name":"/Users/shelwitz/.cargo/registry/src/github.com-1ecc6299db9ec823/bio-0.39.0/src/scores/pam40.rs","byte_start":694501,"byte_end":694504,"line_start":82,"line_end":82,"column_start":1,"column_end":4}},{"value":"/ # Example","span":{"file_name":"/Users/shelwitz/.cargo/registry/src/github.com-1ecc6299db9ec823/bio-0.39.0/src/scores/pam40.rs","byte_start":694505,"byte_end":694518,"line_start":83,"line_end":83,"column_start":1,"column_end":14}},{"value":"/","span":{"file_name":"/Users/shelwitz/.cargo/registry/src/github.com-1ecc6299db9ec823/bio-0.39.0/src/scores/pam40.rs","byte_start":694519,"byte_end":694522,"line_start":84,"line_end":84,"column_start":1,"column_end":4}},{"value":"/ ```","span":{"file_name":"/Users/shelwitz/.cargo/registry/src/github.com-1ecc6299db9ec823/bio-0.39.0/src/scores/pam40.rs","byte_start":694523,"byte_end":694530,"line_start":85,"line_end":85,"column_start":1,"column_end":8}},{"value":"/ use bio::scores::pam40;","span":{"file_name":"/Users/shelwitz/.cargo/registry/src/github.com-1ecc6299db9ec823/bio-0.39.0/src/scores/pam40.rs","byte_start":694531,"byte_end":694558,"line_start":86,"line_end":86,"column_start":1,"column_end":28}},{"value":"/ assert_eq!(pam40(b'H', b'A'), -6);","span":{"file_name":"/Users/shelwitz/.cargo/registry/src/github.com-1ecc6299db9ec823/bio-0.39.0/src/scores/pam40.rs","byte_start":694559,"byte_end":694597,"line_start":87,"line_end":87,"column_start":1,"column_end":39}},{"value":"/ ```","span":{"file_name":"/Users/shelwitz/.cargo/registry/src/github.com-1ecc6299db9ec823/bio-0.39.0/src/scores/pam40.rs","byte_start":694598,"byte_end":694605,"line_start":88,"line_end":88,"column_start":1,"column_end":8}}]},{"kind":"Mod","id":{"krate":0,"index":2424},"span":{"file_name":"/Users/shelwitz/.cargo/registry/src/github.com-1ecc6299db9ec823/bio-0.39.0/src/seq_analysis/mod.rs","byte_start":0,"byte_end":0,"line_start":1,"line_end":1,"column_start":1,"column_end":1},"name":"seq_analysis","qualname":"::seq_analysis","value":"/Users/shelwitz/.cargo/registry/src/github.com-1ecc6299db9ec823/bio-0.39.0/src/seq_analysis/mod.rs","parent":null,"children":[{"krate":0,"index":2425},{"krate":0,"index":2439}],"decl_id":null,"docs":" Sequence analysis algorithms.\n","sig":null,"attributes":[{"value":"/ Sequence analysis algorithms.","span":{"file_name":"/Users/shelwitz/.cargo/registry/src/github.com-1ecc6299db9ec823/bio-0.39.0/src/seq_analysis/mod.rs","byte_start":695448,"byte_end":695481,"line_start":6,"line_end":6,"column_start":1,"column_end":34}}]},{"kind":"Mod","id":{"krate":0,"index":2425},"span":{"file_name":"/Users/shelwitz/.cargo/registry/src/github.com-1ecc6299db9ec823/bio-0.39.0/src/seq_analysis/gc.rs","byte_start":0,"byte_end":0,"line_start":1,"line_end":1,"column_start":1,"column_end":1},"name":"gc","qualname":"::seq_analysis::gc","value":"/Users/shelwitz/.cargo/registry/src/github.com-1ecc6299db9ec823/bio-0.39.0/src/seq_analysis/gc.rs","parent":null,"children":[{"krate":0,"index":2426},{"krate":0,"index":2429},{"krate":0,"index":2433},{"krate":0,"index":2436}],"decl_id":null,"docs":" GC counter over an `IntoTextIterator` object.\n Complexity: O(n), where n is the length of the sequence.\n","sig":null,"attributes":[{"value":"/ GC counter over an `IntoTextIterator` object.","span":{"file_name":"/Users/shelwitz/.cargo/registry/src/github.com-1ecc6299db9ec823/bio-0.39.0/src/seq_analysis/gc.rs","byte_start":695732,"byte_end":695781,"line_start":6,"line_end":6,"column_start":1,"column_end":50}},{"value":"/ Complexity: O(n), where n is the length of the sequence.","span":{"file_name":"/Users/shelwitz/.cargo/registry/src/github.com-1ecc6299db9ec823/bio-0.39.0/src/seq_analysis/gc.rs","byte_start":695783,"byte_end":695843,"line_start":8,"line_end":8,"column_start":1,"column_end":61}}]},{"kind":"Function","id":{"krate":0,"index":2433},"span":{"file_name":"/Users/shelwitz/.cargo/registry/src/github.com-1ecc6299db9ec823/bio-0.39.0/src/seq_analysis/gc.rs","byte_start":696643,"byte_end":696653,"line_start":39,"line_end":39,"column_start":8,"column_end":18},"name":"gc_content","qualname":"::seq_analysis::gc::gc_content","value":"pub fn gc_content<C: Borrow<u8>, T: IntoIterator<Item = C>>(T) -> f32","parent":null,"children":[],"decl_id":null,"docs":" Returns the ratio of bases which are guanine or cytososine","sig":null,"attributes":[{"value":"/ Returns the ratio of bases which are guanine or cytososine","span":{"file_name":"/Users/shelwitz/.cargo/registry/src/github.com-1ecc6299db9ec823/bio-0.39.0/src/seq_analysis/gc.rs","byte_start":696270,"byte_end":696332,"line_start":24,"line_end":24,"column_start":1,"column_end":63}},{"value":"/","span":{"file_name":"/Users/shelwitz/.cargo/registry/src/github.com-1ecc6299db9ec823/bio-0.39.0/src/seq_analysis/gc.rs","byte_start":696333,"byte_end":696336,"line_start":25,"line_end":25,"column_start":1,"column_end":4}},{"value":"/ # Arguments","span":{"file_name":"/Users/shelwitz/.cargo/registry/src/github.com-1ecc6299db9ec823/bio-0.39.0/src/seq_analysis/gc.rs","byte_start":696337,"byte_end":696352,"line_start":26,"line_end":26,"column_start":1,"column_end":16}},{"value":"/","span":{"file_name":"/Users/shelwitz/.cargo/registry/src/github.com-1ecc6299db9ec823/bio-0.39.0/src/seq_analysis/gc.rs","byte_start":696353,"byte_end":696356,"line_start":27,"line_end":27,"column_start":1,"column_end":4}},{"value":"/ * `sequence` - A sequence of bases","span":{"file_name":"/Users/shelwitz/.cargo/registry/src/github.com-1ecc6299db9ec823/bio-0.39.0/src/seq_analysis/gc.rs","byte_start":696357,"byte_end":696395,"line_start":28,"line_end":28,"column_start":1,"column_end":39}},{"value":"/","span":{"file_name":"/Users/shelwitz/.cargo/registry/src/github.com-1ecc6299db9ec823/bio-0.39.0/src/seq_analysis/gc.rs","byte_start":696396,"byte_end":696399,"line_start":29,"line_end":29,"column_start":1,"column_end":4}},{"value":"/ # Example","span":{"file_name":"/Users/shelwitz/.cargo/registry/src/github.com-1ecc6299db9ec823/bio-0.39.0/src/seq_analysis/gc.rs","byte_start":696400,"byte_end":696413,"line_start":30,"line_end":30,"column_start":1,"column_end":14}},{"value":"/","span":{"file_name":"/Users/shelwitz/.cargo/registry/src/github.com-1ecc6299db9ec823/bio-0.39.0/src/seq_analysis/gc.rs","byte_start":696414,"byte_end":696417,"line_start":31,"line_end":31,"column_start":1,"column_end":4}},{"value":"/ ```","span":{"file_name":"/Users/shelwitz/.cargo/registry/src/github.com-1ecc6299db9ec823/bio-0.39.0/src/seq_analysis/gc.rs","byte_start":696418,"byte_end":696425,"line_start":32,"line_end":32,"column_start":1,"column_end":8}},{"value":"/ use bio::seq_analysis::gc::gc_content;","span":{"file_name":"/Users/shelwitz/.cargo/registry/src/github.com-1ecc6299db9ec823/bio-0.39.0/src/seq_analysis/gc.rs","byte_start":696426,"byte_end":696468,"line_start":33,"line_end":33,"column_start":1,"column_end":43}},{"value":"/","span":{"file_name":"/Users/shelwitz/.cargo/registry/src/github.com-1ecc6299db9ec823/bio-0.39.0/src/seq_analysis/gc.rs","byte_start":696469,"byte_end":696472,"line_start":34,"line_end":34,"column_start":1,"column_end":4}},{"value":"/ const seq: &'static [u8] = b\"GATATACA\";","span":{"file_name":"/Users/shelwitz/.cargo/registry/src/github.com-1ecc6299db9ec823/bio-0.39.0/src/seq_analysis/gc.rs","byte_start":696473,"byte_end":696516,"line_start":35,"line_end":35,"column_start":1,"column_end":44}},{"value":"/ use approx::assert_relative_eq;","span":{"file_name":"/Users/shelwitz/.cargo/registry/src/github.com-1ecc6299db9ec823/bio-0.39.0/src/seq_analysis/gc.rs","byte_start":696517,"byte_end":696552,"line_start":36,"line_end":36,"column_start":1,"column_end":36}},{"value":"/ assert_relative_eq!(gc_content(seq), 2. / 8., epsilon = f32::EPSILON);","span":{"file_name":"/Users/shelwitz/.cargo/registry/src/github.com-1ecc6299db9ec823/bio-0.39.0/src/seq_analysis/gc.rs","byte_start":696553,"byte_end":696627,"line_start":37,"line_end":37,"column_start":1,"column_end":75}},{"value":"/ ```","span":{"file_name":"/Users/shelwitz/.cargo/registry/src/github.com-1ecc6299db9ec823/bio-0.39.0/src/seq_analysis/gc.rs","byte_start":696628,"byte_end":696635,"line_start":38,"line_end":38,"column_start":1,"column_end":8}}]},{"kind":"Function","id":{"krate":0,"index":2436},"span":{"file_name":"/Users/shelwitz/.cargo/registry/src/github.com-1ecc6299db9ec823/bio-0.39.0/src/seq_analysis/gc.rs","byte_start":697192,"byte_end":697203,"line_start":59,"line_end":59,"column_start":8,"column_end":19},"name":"gc3_content","qualname":"::seq_analysis::gc::gc3_content","value":"pub fn gc3_content<C: Borrow<u8>, T: IntoIterator<Item = C>>(T) -> f32","parent":null,"children":[],"decl_id":null,"docs":" Returns the ratio of bases in the 3rd position which are guanine\n or cytososine.","sig":null,"attributes":[{"value":"/ Returns the ratio of bases in the 3rd position which are guanine","span":{"file_name":"/Users/shelwitz/.cargo/registry/src/github.com-1ecc6299db9ec823/bio-0.39.0/src/seq_analysis/gc.rs","byte_start":696755,"byte_end":696823,"line_start":43,"line_end":43,"column_start":1,"column_end":69}},{"value":"/ or cytososine.","span":{"file_name":"/Users/shelwitz/.cargo/registry/src/github.com-1ecc6299db9ec823/bio-0.39.0/src/seq_analysis/gc.rs","byte_start":696824,"byte_end":696842,"line_start":44,"line_end":44,"column_start":1,"column_end":19}},{"value":"/","span":{"file_name":"/Users/shelwitz/.cargo/registry/src/github.com-1ecc6299db9ec823/bio-0.39.0/src/seq_analysis/gc.rs","byte_start":696843,"byte_end":696846,"line_start":45,"line_end":45,"column_start":1,"column_end":4}},{"value":"/ # Arguments","span":{"file_name":"/Users/shelwitz/.cargo/registry/src/github.com-1ecc6299db9ec823/bio-0.39.0/src/seq_analysis/gc.rs","byte_start":696847,"byte_end":696862,"line_start":46,"line_end":46,"column_start":1,"column_end":16}},{"value":"/","span":{"file_name":"/Users/shelwitz/.cargo/registry/src/github.com-1ecc6299db9ec823/bio-0.39.0/src/seq_analysis/gc.rs","byte_start":696863,"byte_end":696866,"line_start":47,"line_end":47,"column_start":1,"column_end":4}},{"value":"/ * `sequence` - A sequence of bases","span":{"file_name":"/Users/shelwitz/.cargo/registry/src/github.com-1ecc6299db9ec823/bio-0.39.0/src/seq_analysis/gc.rs","byte_start":696867,"byte_end":696905,"line_start":48,"line_end":48,"column_start":1,"column_end":39}},{"value":"/","span":{"file_name":"/Users/shelwitz/.cargo/registry/src/github.com-1ecc6299db9ec823/bio-0.39.0/src/seq_analysis/gc.rs","byte_start":696906,"byte_end":696909,"line_start":49,"line_end":49,"column_start":1,"column_end":4}},{"value":"/ # Example","span":{"file_name":"/Users/shelwitz/.cargo/registry/src/github.com-1ecc6299db9ec823/bio-0.39.0/src/seq_analysis/gc.rs","byte_start":696910,"byte_end":696923,"line_start":50,"line_end":50,"column_start":1,"column_end":14}},{"value":"/","span":{"file_name":"/Users/shelwitz/.cargo/registry/src/github.com-1ecc6299db9ec823/bio-0.39.0/src/seq_analysis/gc.rs","byte_start":696924,"byte_end":696927,"line_start":51,"line_end":51,"column_start":1,"column_end":4}},{"value":"/ ```","span":{"file_name":"/Users/shelwitz/.cargo/registry/src/github.com-1ecc6299db9ec823/bio-0.39.0/src/seq_analysis/gc.rs","byte_start":696928,"byte_end":696935,"line_start":52,"line_end":52,"column_start":1,"column_end":8}},{"value":"/ use approx::assert_relative_eq;","span":{"file_name":"/Users/shelwitz/.cargo/registry/src/github.com-1ecc6299db9ec823/bio-0.39.0/src/seq_analysis/gc.rs","byte_start":696936,"byte_end":696971,"line_start":53,"line_end":53,"column_start":1,"column_end":36}},{"value":"/ use bio::seq_analysis::gc::gc3_content;","span":{"file_name":"/Users/shelwitz/.cargo/registry/src/github.com-1ecc6299db9ec823/bio-0.39.0/src/seq_analysis/gc.rs","byte_start":696972,"byte_end":697015,"line_start":54,"line_end":54,"column_start":1,"column_end":44}},{"value":"/ const seq: &'static [u8] = b\"GATATACA\";","span":{"file_name":"/Users/shelwitz/.cargo/registry/src/github.com-1ecc6299db9ec823/bio-0.39.0/src/seq_analysis/gc.rs","byte_start":697016,"byte_end":697059,"line_start":55,"line_end":55,"column_start":1,"column_end":44}},{"value":"/ //                           ^  ^  ^","span":{"file_name":"/Users/shelwitz/.cargo/registry/src/github.com-1ecc6299db9ec823/bio-0.39.0/src/seq_analysis/gc.rs","byte_start":697060,"byte_end":697100,"line_start":56,"line_end":56,"column_start":1,"column_end":41}},{"value":"/ assert_relative_eq!(gc3_content(seq), 2. / 3., epsilon = f32::EPSILON);","span":{"file_name":"/Users/shelwitz/.cargo/registry/src/github.com-1ecc6299db9ec823/bio-0.39.0/src/seq_analysis/gc.rs","byte_start":697101,"byte_end":697176,"line_start":57,"line_end":57,"column_start":1,"column_end":76}},{"value":"/ ```","span":{"file_name":"/Users/shelwitz/.cargo/registry/src/github.com-1ecc6299db9ec823/bio-0.39.0/src/seq_analysis/gc.rs","byte_start":697177,"byte_end":697184,"line_start":58,"line_end":58,"column_start":1,"column_end":8}}]},{"kind":"Mod","id":{"krate":0,"index":2439},"span":{"file_name":"/Users/shelwitz/.cargo/registry/src/github.com-1ecc6299db9ec823/bio-0.39.0/src/seq_analysis/orf.rs","byte_start":0,"byte_end":0,"line_start":1,"line_end":1,"column_start":1,"column_end":1},"name":"orf","qualname":"::seq_analysis::orf","value":"/Users/shelwitz/.cargo/registry/src/github.com-1ecc6299db9ec823/bio-0.39.0/src/seq_analysis/orf.rs","parent":null,"children":[{"krate":0,"index":2440},{"krate":0,"index":2443},{"krate":0,"index":2446},{"krate":0,"index":2449},{"krate":0,"index":2453},{"krate":0,"index":5531},{"krate":0,"index":5535},{"krate":0,"index":5537},{"krate":0,"index":5538},{"krate":0,"index":2465},{"krate":0,"index":2469},{"krate":0,"index":2471},{"krate":0,"index":2478}],"decl_id":null,"docs":" One-way open reading frame (ORF) finder algorithm.","sig":null,"attributes":[{"value":"/ One-way open reading frame (ORF) finder algorithm.","span":{"file_name":"/Users/shelwitz/.cargo/registry/src/github.com-1ecc6299db9ec823/bio-0.39.0/src/seq_analysis/orf.rs","byte_start":698222,"byte_end":698276,"line_start":6,"line_end":6,"column_start":1,"column_end":55}},{"value":"/","span":{"file_name":"/Users/shelwitz/.cargo/registry/src/github.com-1ecc6299db9ec823/bio-0.39.0/src/seq_analysis/orf.rs","byte_start":698277,"byte_end":698280,"line_start":7,"line_end":7,"column_start":1,"column_end":4}},{"value":"/ Complexity: O(n).","span":{"file_name":"/Users/shelwitz/.cargo/registry/src/github.com-1ecc6299db9ec823/bio-0.39.0/src/seq_analysis/orf.rs","byte_start":698281,"byte_end":698302,"line_start":8,"line_end":8,"column_start":1,"column_end":22}},{"value":"/","span":{"file_name":"/Users/shelwitz/.cargo/registry/src/github.com-1ecc6299db9ec823/bio-0.39.0/src/seq_analysis/orf.rs","byte_start":698303,"byte_end":698306,"line_start":9,"line_end":9,"column_start":1,"column_end":4}},{"value":"/ # Example","span":{"file_name":"/Users/shelwitz/.cargo/registry/src/github.com-1ecc6299db9ec823/bio-0.39.0/src/seq_analysis/orf.rs","byte_start":698307,"byte_end":698320,"line_start":10,"line_end":10,"column_start":1,"column_end":14}},{"value":"/","span":{"file_name":"/Users/shelwitz/.cargo/registry/src/github.com-1ecc6299db9ec823/bio-0.39.0/src/seq_analysis/orf.rs","byte_start":698321,"byte_end":698324,"line_start":11,"line_end":11,"column_start":1,"column_end":4}},{"value":"/ ```","span":{"file_name":"/Users/shelwitz/.cargo/registry/src/github.com-1ecc6299db9ec823/bio-0.39.0/src/seq_analysis/orf.rs","byte_start":698325,"byte_end":698332,"line_start":12,"line_end":12,"column_start":1,"column_end":8}},{"value":"/ use bio::seq_analysis::orf::{Finder, Orf};","span":{"file_name":"/Users/shelwitz/.cargo/registry/src/github.com-1ecc6299db9ec823/bio-0.39.0/src/seq_analysis/orf.rs","byte_start":698333,"byte_end":698379,"line_start":13,"line_end":13,"column_start":1,"column_end":47}},{"value":"/ let start_codons = vec![b\"ATG\"];","span":{"file_name":"/Users/shelwitz/.cargo/registry/src/github.com-1ecc6299db9ec823/bio-0.39.0/src/seq_analysis/orf.rs","byte_start":698380,"byte_end":698416,"line_start":14,"line_end":14,"column_start":1,"column_end":37}},{"value":"/ let stop_codons = vec![b\"TGA\", b\"TAG\", b\"TAA\"];","span":{"file_name":"/Users/shelwitz/.cargo/registry/src/github.com-1ecc6299db9ec823/bio-0.39.0/src/seq_analysis/orf.rs","byte_start":698417,"byte_end":698468,"line_start":15,"line_end":15,"column_start":1,"column_end":52}},{"value":"/ let min_len = 50;","span":{"file_name":"/Users/shelwitz/.cargo/registry/src/github.com-1ecc6299db9ec823/bio-0.39.0/src/seq_analysis/orf.rs","byte_start":698469,"byte_end":698490,"line_start":16,"line_end":16,"column_start":1,"column_end":22}},{"value":"/ let finder = Finder::new(start_codons, stop_codons, min_len);","span":{"file_name":"/Users/shelwitz/.cargo/registry/src/github.com-1ecc6299db9ec823/bio-0.39.0/src/seq_analysis/orf.rs","byte_start":698491,"byte_end":698556,"line_start":17,"line_end":17,"column_start":1,"column_end":66}},{"value":"/","span":{"file_name":"/Users/shelwitz/.cargo/registry/src/github.com-1ecc6299db9ec823/bio-0.39.0/src/seq_analysis/orf.rs","byte_start":698557,"byte_end":698560,"line_start":18,"line_end":18,"column_start":1,"column_end":4}},{"value":"/ let sequence = b\"ACGGCTAGAAAAGGCTAGAAAA\";","span":{"file_name":"/Users/shelwitz/.cargo/registry/src/github.com-1ecc6299db9ec823/bio-0.39.0/src/seq_analysis/orf.rs","byte_start":698561,"byte_end":698606,"line_start":19,"line_end":19,"column_start":1,"column_end":46}},{"value":"/","span":{"file_name":"/Users/shelwitz/.cargo/registry/src/github.com-1ecc6299db9ec823/bio-0.39.0/src/seq_analysis/orf.rs","byte_start":698607,"byte_end":698610,"line_start":20,"line_end":20,"column_start":1,"column_end":4}},{"value":"/ for Orf { start, end, offset } in finder.find_all(sequence) {","span":{"file_name":"/Users/shelwitz/.cargo/registry/src/github.com-1ecc6299db9ec823/bio-0.39.0/src/seq_analysis/orf.rs","byte_start":698611,"byte_end":698676,"line_start":21,"line_end":21,"column_start":1,"column_end":66}},{"value":"/     let orf = &sequence[start..end];","span":{"file_name":"/Users/shelwitz/.cargo/registry/src/github.com-1ecc6299db9ec823/bio-0.39.0/src/seq_analysis/orf.rs","byte_start":698677,"byte_end":698717,"line_start":22,"line_end":22,"column_start":1,"column_end":41}},{"value":"/     //...do something with orf sequence...","span":{"file_name":"/Users/shelwitz/.cargo/registry/src/github.com-1ecc6299db9ec823/bio-0.39.0/src/seq_analysis/orf.rs","byte_start":698718,"byte_end":698764,"line_start":23,"line_end":23,"column_start":1,"column_end":47}},{"value":"/ }","span":{"file_name":"/Users/shelwitz/.cargo/registry/src/github.com-1ecc6299db9ec823/bio-0.39.0/src/seq_analysis/orf.rs","byte_start":698765,"byte_end":698770,"line_start":24,"line_end":24,"column_start":1,"column_end":6}},{"value":"/ ```","span":{"file_name":"/Users/shelwitz/.cargo/registry/src/github.com-1ecc6299db9ec823/bio-0.39.0/src/seq_analysis/orf.rs","byte_start":698771,"byte_end":698778,"line_start":25,"line_end":25,"column_start":1,"column_end":8}},{"value":"/","span":{"file_name":"/Users/shelwitz/.cargo/registry/src/github.com-1ecc6299db9ec823/bio-0.39.0/src/seq_analysis/orf.rs","byte_start":698779,"byte_end":698782,"line_start":26,"line_end":26,"column_start":1,"column_end":4}},{"value":"/ Right now the only way to check the reverse strand for ORF is to use","span":{"file_name":"/Users/shelwitz/.cargo/registry/src/github.com-1ecc6299db9ec823/bio-0.39.0/src/seq_analysis/orf.rs","byte_start":698783,"byte_end":698855,"line_start":27,"line_end":27,"column_start":1,"column_end":73}},{"value":"/ the `alphabet::dna::RevComp` struct and to check for both sequences.","span":{"file_name":"/Users/shelwitz/.cargo/registry/src/github.com-1ecc6299db9ec823/bio-0.39.0/src/seq_analysis/orf.rs","byte_start":698856,"byte_end":698928,"line_start":28,"line_end":28,"column_start":1,"column_end":73}},{"value":"/ But that's not so performance friendly, as the reverse complementation and the ORF research","span":{"file_name":"/Users/shelwitz/.cargo/registry/src/github.com-1ecc6299db9ec823/bio-0.39.0/src/seq_analysis/orf.rs","byte_start":698929,"byte_end":699024,"line_start":29,"line_end":29,"column_start":1,"column_end":96}},{"value":"/ could go on at the same time.","span":{"file_name":"/Users/shelwitz/.cargo/registry/src/github.com-1ecc6299db9ec823/bio-0.39.0/src/seq_analysis/orf.rs","byte_start":699025,"byte_end":699058,"line_start":30,"line_end":30,"column_start":1,"column_end":34}}]},{"kind":"Struct","id":{"krate":0,"index":2449},"span":{"file_name":"/Users/shelwitz/.cargo/registry/src/github.com-1ecc6299db9ec823/bio-0.39.0/src/seq_analysis/orf.rs","byte_start":699440,"byte_end":699446,"line_start":43,"line_end":43,"column_start":12,"column_end":18},"name":"Finder","qualname":"::seq_analysis::orf::Finder","value":"Finder {  }","parent":null,"children":[{"krate":0,"index":2450},{"krate":0,"index":2451},{"krate":0,"index":2452}],"decl_id":null,"docs":" An implementation of a naive algorithm finder\n","sig":null,"attributes":[{"value":"/ An implementation of a naive algorithm finder","span":{"file_name":"/Users/shelwitz/.cargo/registry/src/github.com-1ecc6299db9ec823/bio-0.39.0/src/seq_analysis/orf.rs","byte_start":699133,"byte_end":699182,"line_start":36,"line_end":36,"column_start":1,"column_end":50}}]},{"kind":"Method","id":{"krate":0,"index":2454},"span":{"file_name":"/Users/shelwitz/.cargo/registry/src/github.com-1ecc6299db9ec823/bio-0.39.0/src/seq_analysis/orf.rs","byte_start":699690,"byte_end":699693,"line_start":52,"line_end":52,"column_start":12,"column_end":15},"name":"new","qualname":"<Finder>::new","value":"pub fn new<'a>(Vec<&'a [u8; ]>, Vec<&'a [u8; ]>, usize) -> Self","parent":null,"children":[],"decl_id":null,"docs":" Create a new instance of a finder for the given start and stop codons and the minimum\n length of an ORF.\n","sig":null,"attributes":[{"value":"/ Create a new instance of a finder for the given start and stop codons and the minimum","span":{"file_name":"/Users/shelwitz/.cargo/registry/src/github.com-1ecc6299db9ec823/bio-0.39.0/src/seq_analysis/orf.rs","byte_start":699563,"byte_end":699652,"line_start":50,"line_end":50,"column_start":5,"column_end":94}},{"value":"/ length of an ORF.","span":{"file_name":"/Users/shelwitz/.cargo/registry/src/github.com-1ecc6299db9ec823/bio-0.39.0/src/seq_analysis/orf.rs","byte_start":699657,"byte_end":699678,"line_start":51,"line_end":51,"column_start":5,"column_end":26}}]},{"kind":"Method","id":{"krate":0,"index":2462},"span":{"file_name":"/Users/shelwitz/.cargo/registry/src/github.com-1ecc6299db9ec823/bio-0.39.0/src/seq_analysis/orf.rs","byte_start":700266,"byte_end":700274,"line_start":71,"line_end":71,"column_start":12,"column_end":20},"name":"find_all","qualname":"<Finder>::find_all","value":"pub fn find_all<C, T>(&Self, T) -> Matches<, C, T::IntoIter> where\nC: Borrow<u8>, T: IntoIterator<Item = C>","parent":null,"children":[],"decl_id":null,"docs":" Find all ORFs in the given sequence\n","sig":null,"attributes":[{"value":"/ Find all ORFs in the given sequence","span":{"file_name":"/Users/shelwitz/.cargo/registry/src/github.com-1ecc6299db9ec823/bio-0.39.0/src/seq_analysis/orf.rs","byte_start":700215,"byte_end":700254,"line_start":70,"line_end":70,"column_start":5,"column_end":44}}]},{"kind":"Struct","id":{"krate":0,"index":5531},"span":{"file_name":"/Users/shelwitz/.cargo/registry/src/github.com-1ecc6299db9ec823/bio-0.39.0/src/seq_analysis/orf.rs","byte_start":700763,"byte_end":700766,"line_start":88,"line_end":88,"column_start":12,"column_end":15},"name":"Orf","qualname":"::seq_analysis::orf::Orf","value":"Orf { start, end, offset }","parent":null,"children":[{"krate":0,"index":5532},{"krate":0,"index":5533},{"krate":0,"index":5534}],"decl_id":null,"docs":" An ORF representation with start and end position of said ORF,\n as well as offset of the reading frame (1,2,3) and strand location\n","sig":null,"attributes":[{"value":"/ An ORF representation with start and end position of said ORF,","span":{"file_name":"/Users/shelwitz/.cargo/registry/src/github.com-1ecc6299db9ec823/bio-0.39.0/src/seq_analysis/orf.rs","byte_start":700543,"byte_end":700609,"line_start":84,"line_end":84,"column_start":1,"column_end":67}},{"value":"/ as well as offset of the reading frame (1,2,3) and strand location","span":{"file_name":"/Users/shelwitz/.cargo/registry/src/github.com-1ecc6299db9ec823/bio-0.39.0/src/seq_analysis/orf.rs","byte_start":700610,"byte_end":700680,"line_start":85,"line_end":85,"column_start":1,"column_end":71}}]},{"kind":"Field","id":{"krate":0,"index":5532},"span":{"file_name":"/Users/shelwitz/.cargo/registry/src/github.com-1ecc6299db9ec823/bio-0.39.0/src/seq_analysis/orf.rs","byte_start":700777,"byte_end":700782,"line_start":89,"line_end":89,"column_start":9,"column_end":14},"name":"start","qualname":"::seq_analysis::orf::Orf::start","value":"usize","parent":{"krate":0,"index":5531},"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Field","id":{"krate":0,"index":5533},"span":{"file_name":"/Users/shelwitz/.cargo/registry/src/github.com-1ecc6299db9ec823/bio-0.39.0/src/seq_analysis/orf.rs","byte_start":700799,"byte_end":700802,"line_start":90,"line_end":90,"column_start":9,"column_end":12},"name":"end","qualname":"::seq_analysis::orf::Orf::end","value":"usize","parent":{"krate":0,"index":5531},"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Field","id":{"krate":0,"index":5534},"span":{"file_name":"/Users/shelwitz/.cargo/registry/src/github.com-1ecc6299db9ec823/bio-0.39.0/src/seq_analysis/orf.rs","byte_start":700819,"byte_end":700825,"line_start":91,"line_end":91,"column_start":9,"column_end":15},"name":"offset","qualname":"::seq_analysis::orf::Orf::offset","value":"i8","parent":{"krate":0,"index":5531},"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Struct","id":{"krate":0,"index":2471},"span":{"file_name":"/Users/shelwitz/.cargo/registry/src/github.com-1ecc6299db9ec823/bio-0.39.0/src/seq_analysis/orf.rs","byte_start":701221,"byte_end":701228,"line_start":111,"line_end":111,"column_start":12,"column_end":19},"name":"Matches","qualname":"::seq_analysis::orf::Matches","value":"Matches {  }","parent":null,"children":[{"krate":0,"index":2475},{"krate":0,"index":2476},{"krate":0,"index":2477}],"decl_id":null,"docs":" Iterator over offset, start position, end position and sequence of matched ORFs.\n","sig":null,"attributes":[{"value":"/ Iterator over offset, start position, end position and sequence of matched ORFs.","span":{"file_name":"/Users/shelwitz/.cargo/registry/src/github.com-1ecc6299db9ec823/bio-0.39.0/src/seq_analysis/orf.rs","byte_start":701125,"byte_end":701209,"line_start":110,"line_end":110,"column_start":1,"column_end":85}}]},{"kind":"Mod","id":{"krate":0,"index":2484},"span":{"file_name":"/Users/shelwitz/.cargo/registry/src/github.com-1ecc6299db9ec823/bio-0.39.0/src/stats/mod.rs","byte_start":0,"byte_end":0,"line_start":1,"line_end":1,"column_start":1,"column_end":1},"name":"stats","qualname":"::stats","value":"/Users/shelwitz/.cargo/registry/src/github.com-1ecc6299db9ec823/bio-0.39.0/src/stats/mod.rs","parent":null,"children":[{"krate":0,"index":2485},{"krate":0,"index":2599},{"krate":0,"index":2606},{"krate":0,"index":2816},{"krate":0,"index":3019},{"krate":0,"index":3224},{"krate":0,"index":3225},{"krate":0,"index":3226},{"krate":0,"index":3228},{"krate":0,"index":3229},{"krate":0,"index":3231},{"krate":0,"index":3232}],"decl_id":null,"docs":" Mathematical and statistical tools.\n","sig":null,"attributes":[{"value":"/ Mathematical and statistical tools.","span":{"file_name":"/Users/shelwitz/.cargo/registry/src/github.com-1ecc6299db9ec823/bio-0.39.0/src/stats/mod.rs","byte_start":704753,"byte_end":704792,"line_start":6,"line_end":6,"column_start":1,"column_end":40}}]},{"kind":"Mod","id":{"krate":0,"index":2485},"span":{"file_name":"/Users/shelwitz/.cargo/registry/src/github.com-1ecc6299db9ec823/bio-0.39.0/src/stats/bayesian/mod.rs","byte_start":0,"byte_end":0,"line_start":1,"line_end":1,"column_start":1,"column_end":1},"name":"bayesian","qualname":"::stats::bayesian","value":"/Users/shelwitz/.cargo/registry/src/github.com-1ecc6299db9ec823/bio-0.39.0/src/stats/bayesian/mod.rs","parent":null,"children":[{"krate":0,"index":2486},{"krate":0,"index":2494},{"krate":0,"index":2581},{"krate":0,"index":2582},{"krate":0,"index":2584},{"krate":0,"index":2587},{"krate":0,"index":2590},{"krate":0,"index":2591},{"krate":0,"index":2593},{"krate":0,"index":2594},{"krate":0,"index":2596}],"decl_id":null,"docs":" Utilities for Bayesian statistics.\n","sig":null,"attributes":[{"value":"/ Utilities for Bayesian statistics.","span":{"file_name":"/Users/shelwitz/.cargo/registry/src/github.com-1ecc6299db9ec823/bio-0.39.0/src/stats/bayesian/mod.rs","byte_start":705140,"byte_end":705178,"line_start":6,"line_end":6,"column_start":1,"column_end":39}}]},{"kind":"Mod","id":{"krate":0,"index":2486},"span":{"file_name":"/Users/shelwitz/.cargo/registry/src/github.com-1ecc6299db9ec823/bio-0.39.0/src/stats/bayesian/bayes_factors.rs","byte_start":0,"byte_end":0,"line_start":1,"line_end":1,"column_start":1,"column_end":1},"name":"bayes_factors","qualname":"::stats::bayesian::bayes_factors","value":"/Users/shelwitz/.cargo/registry/src/github.com-1ecc6299db9ec823/bio-0.39.0/src/stats/bayesian/bayes_factors.rs","parent":null,"children":[{"krate":0,"index":2487},{"krate":0,"index":2488},{"krate":0,"index":2490},{"krate":0,"index":5650},{"krate":0,"index":5653},{"krate":0,"index":5654},{"krate":0,"index":5657},{"krate":0,"index":5659},{"krate":0,"index":5660},{"krate":0,"index":5662},{"krate":0,"index":5664},{"krate":0,"index":5666},{"krate":0,"index":5668},{"krate":0,"index":2491}],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Mod","id":{"krate":0,"index":2490},"span":{"file_name":"/Users/shelwitz/.cargo/registry/src/github.com-1ecc6299db9ec823/bio-0.39.0/src/stats/bayesian/bayes_factors.rs","byte_start":707152,"byte_end":707160,"line_start":3,"line_end":3,"column_start":9,"column_end":17},"name":"evidence","qualname":"::stats::bayesian::bayes_factors::evidence","value":"/Users/shelwitz/.cargo/registry/src/github.com-1ecc6299db9ec823/bio-0.39.0/src/stats/bayesian/bayes_factors.rs","parent":null,"children":[{"krate":0,"index":5541},{"krate":0,"index":5542},{"krate":0,"index":5544},{"krate":0,"index":5546},{"krate":0,"index":5548},{"krate":0,"index":5549},{"krate":0,"index":5550},{"krate":0,"index":5552},{"krate":0,"index":5553},{"krate":0,"index":5555},{"krate":0,"index":5557},{"krate":0,"index":5559},{"krate":0,"index":5565},{"krate":0,"index":5610},{"krate":0,"index":5613},{"krate":0,"index":5617},{"krate":0,"index":5619},{"krate":0,"index":5622},{"krate":0,"index":5627},{"krate":0,"index":5629},{"krate":0,"index":5631},{"krate":0,"index":5633},{"krate":0,"index":5635},{"krate":0,"index":5638}],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"TupleVariant","id":{"krate":0,"index":5640},"span":{"file_name":"/Users/shelwitz/.cargo/registry/src/github.com-1ecc6299db9ec823/bio-0.39.0/src/stats/bayesian/bayes_factors.rs","byte_start":707649,"byte_end":707653,"line_start":24,"line_end":24,"column_start":9,"column_end":13},"name":"None","qualname":"::stats::bayesian::bayes_factors::evidence::KassRaftery::None","value":"KassRaftery::None","parent":{"krate":0,"index":5541},"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[{"value":"strum(serialize = \"none\")","span":{"file_name":"/Users/shelwitz/.cargo/registry/src/github.com-1ecc6299db9ec823/bio-0.39.0/src/stats/bayesian/bayes_factors.rs","byte_start":707612,"byte_end":707640,"line_start":23,"line_end":23,"column_start":9,"column_end":37}}]},{"kind":"TupleVariant","id":{"krate":0,"index":5642},"span":{"file_name":"/Users/shelwitz/.cargo/registry/src/github.com-1ecc6299db9ec823/bio-0.39.0/src/stats/bayesian/bayes_factors.rs","byte_start":707702,"byte_end":707708,"line_start":26,"line_end":26,"column_start":9,"column_end":15},"name":"Barely","qualname":"::stats::bayesian::bayes_factors::evidence::KassRaftery::Barely","value":"KassRaftery::Barely","parent":{"krate":0,"index":5541},"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[{"value":"strum(serialize = \"barely\")","span":{"file_name":"/Users/shelwitz/.cargo/registry/src/github.com-1ecc6299db9ec823/bio-0.39.0/src/stats/bayesian/bayes_factors.rs","byte_start":707663,"byte_end":707693,"line_start":25,"line_end":25,"column_start":9,"column_end":39}}]},{"kind":"TupleVariant","id":{"krate":0,"index":5644},"span":{"file_name":"/Users/shelwitz/.cargo/registry/src/github.com-1ecc6299db9ec823/bio-0.39.0/src/stats/bayesian/bayes_factors.rs","byte_start":707759,"byte_end":707767,"line_start":28,"line_end":28,"column_start":9,"column_end":17},"name":"Positive","qualname":"::stats::bayesian::bayes_factors::evidence::KassRaftery::Positive","value":"KassRaftery::Positive","parent":{"krate":0,"index":5541},"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[{"value":"strum(serialize = \"positive\")","span":{"file_name":"/Users/shelwitz/.cargo/registry/src/github.com-1ecc6299db9ec823/bio-0.39.0/src/stats/bayesian/bayes_factors.rs","byte_start":707718,"byte_end":707750,"line_start":27,"line_end":27,"column_start":9,"column_end":41}}]},{"kind":"TupleVariant","id":{"krate":0,"index":5646},"span":{"file_name":"/Users/shelwitz/.cargo/registry/src/github.com-1ecc6299db9ec823/bio-0.39.0/src/stats/bayesian/bayes_factors.rs","byte_start":707816,"byte_end":707822,"line_start":30,"line_end":30,"column_start":9,"column_end":15},"name":"Strong","qualname":"::stats::bayesian::bayes_factors::evidence::KassRaftery::Strong","value":"KassRaftery::Strong","parent":{"krate":0,"index":5541},"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[{"value":"strum(serialize = \"strong\")","span":{"file_name":"/Users/shelwitz/.cargo/registry/src/github.com-1ecc6299db9ec823/bio-0.39.0/src/stats/bayesian/bayes_factors.rs","byte_start":707777,"byte_end":707807,"line_start":29,"line_end":29,"column_start":9,"column_end":39}}]},{"kind":"TupleVariant","id":{"krate":0,"index":5648},"span":{"file_name":"/Users/shelwitz/.cargo/registry/src/github.com-1ecc6299db9ec823/bio-0.39.0/src/stats/bayesian/bayes_factors.rs","byte_start":707876,"byte_end":707886,"line_start":32,"line_end":32,"column_start":9,"column_end":19},"name":"VeryStrong","qualname":"::stats::bayesian::bayes_factors::evidence::KassRaftery::VeryStrong","value":"KassRaftery::VeryStrong","parent":{"krate":0,"index":5541},"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[{"value":"strum(serialize = \"very-strong\")","span":{"file_name":"/Users/shelwitz/.cargo/registry/src/github.com-1ecc6299db9ec823/bio-0.39.0/src/stats/bayesian/bayes_factors.rs","byte_start":707832,"byte_end":707867,"line_start":31,"line_end":31,"column_start":9,"column_end":44}}]},{"kind":"Enum","id":{"krate":0,"index":5541},"span":{"file_name":"/Users/shelwitz/.cargo/registry/src/github.com-1ecc6299db9ec823/bio-0.39.0/src/stats/bayesian/bayes_factors.rs","byte_start":707590,"byte_end":707601,"line_start":22,"line_end":22,"column_start":14,"column_end":25},"name":"KassRaftery","qualname":"::stats::bayesian::bayes_factors::evidence::KassRaftery","value":"pub enum KassRaftery { None, Barely, Positive, Strong, VeryStrong, }","parent":null,"children":[{"krate":0,"index":5640},{"krate":0,"index":5642},{"krate":0,"index":5644},{"krate":0,"index":5646},{"krate":0,"index":5648}],"decl_id":null,"docs":" Scale of evidence as defined by\n [Kass and Raftery 1995](http://www.andrew.cmu.edu/user/kk3n/simplicity/KassRaftery1995.pdf).\n","sig":null,"attributes":[{"value":"/ Scale of evidence as defined by","span":{"file_name":"/Users/shelwitz/.cargo/registry/src/github.com-1ecc6299db9ec823/bio-0.39.0/src/stats/bayesian/bayes_factors.rs","byte_start":707167,"byte_end":707202,"line_start":4,"line_end":4,"column_start":5,"column_end":40}},{"value":"/ [Kass and Raftery 1995](http://www.andrew.cmu.edu/user/kk3n/simplicity/KassRaftery1995.pdf).","span":{"file_name":"/Users/shelwitz/.cargo/registry/src/github.com-1ecc6299db9ec823/bio-0.39.0/src/stats/bayesian/bayes_factors.rs","byte_start":707207,"byte_end":707303,"line_start":5,"line_end":5,"column_start":5,"column_end":101}}]},{"kind":"Struct","id":{"krate":0,"index":5650},"span":{"file_name":"/Users/shelwitz/.cargo/registry/src/github.com-1ecc6299db9ec823/bio-0.39.0/src/stats/bayesian/bayes_factors.rs","byte_start":708113,"byte_end":708124,"line_start":47,"line_end":47,"column_start":16,"column_end":27},"name":"BayesFactor","qualname":"::stats::bayesian::bayes_factors::BayesFactor","value":"","parent":null,"children":[],"decl_id":null,"docs":" A newtype for Bayes factors.\n","sig":null,"attributes":[]},{"kind":"Field","id":{"krate":0,"index":5652},"span":{"file_name":"/Users/shelwitz/.cargo/registry/src/github.com-1ecc6299db9ec823/bio-0.39.0/src/stats/bayesian/bayes_factors.rs","byte_start":708125,"byte_end":708132,"line_start":47,"line_end":47,"column_start":28,"column_end":35},"name":"0","qualname":"::stats::bayesian::bayes_factors::BayesFactor::0","value":"f64","parent":{"krate":0,"index":5650},"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":2492},"span":{"file_name":"/Users/shelwitz/.cargo/registry/src/github.com-1ecc6299db9ec823/bio-0.39.0/src/stats/bayesian/bayes_factors.rs","byte_start":708225,"byte_end":708228,"line_start":52,"line_end":52,"column_start":12,"column_end":15},"name":"new","qualname":"<BayesFactor>::new","value":"pub fn new(LogProb, LogProb) -> Self","parent":null,"children":[],"decl_id":null,"docs":" Calculate Bayes factor from given probabilities.\n","sig":null,"attributes":[{"value":"/ Calculate Bayes factor from given probabilities.","span":{"file_name":"/Users/shelwitz/.cargo/registry/src/github.com-1ecc6299db9ec823/bio-0.39.0/src/stats/bayesian/bayes_factors.rs","byte_start":708161,"byte_end":708213,"line_start":51,"line_end":51,"column_start":5,"column_end":57}}]},{"kind":"Method","id":{"krate":0,"index":2493},"span":{"file_name":"/Users/shelwitz/.cargo/registry/src/github.com-1ecc6299db9ec823/bio-0.39.0/src/stats/bayesian/bayes_factors.rs","byte_start":708470,"byte_end":708491,"line_start":58,"line_end":58,"column_start":12,"column_end":33},"name":"evidence_kass_raftery","qualname":"<BayesFactor>::evidence_kass_raftery","value":"pub fn evidence_kass_raftery(&Self) -> evidence::KassRaftery","parent":null,"children":[],"decl_id":null,"docs":" Calculate strength of evidence as defined by\n [Kass and Raftery 1995](http://www.andrew.cmu.edu/user/kk3n/simplicity/KassRaftery1995.pdf).\n","sig":null,"attributes":[{"value":"/ Calculate strength of evidence as defined by","span":{"file_name":"/Users/shelwitz/.cargo/registry/src/github.com-1ecc6299db9ec823/bio-0.39.0/src/stats/bayesian/bayes_factors.rs","byte_start":708309,"byte_end":708357,"line_start":56,"line_end":56,"column_start":5,"column_end":53}},{"value":"/ [Kass and Raftery 1995](http://www.andrew.cmu.edu/user/kk3n/simplicity/KassRaftery1995.pdf).","span":{"file_name":"/Users/shelwitz/.cargo/registry/src/github.com-1ecc6299db9ec823/bio-0.39.0/src/stats/bayesian/bayes_factors.rs","byte_start":708362,"byte_end":708458,"line_start":57,"line_end":57,"column_start":5,"column_end":101}}]},{"kind":"Mod","id":{"krate":0,"index":2494},"span":{"file_name":"/Users/shelwitz/.cargo/registry/src/github.com-1ecc6299db9ec823/bio-0.39.0/src/stats/bayesian/model.rs","byte_start":0,"byte_end":0,"line_start":1,"line_end":1,"column_start":1,"column_end":1},"name":"model","qualname":"::stats::bayesian::model","value":"/Users/shelwitz/.cargo/registry/src/github.com-1ecc6299db9ec823/bio-0.39.0/src/stats/bayesian/model.rs","parent":null,"children":[{"krate":0,"index":2495},{"krate":0,"index":2496},{"krate":0,"index":2498},{"krate":0,"index":2501},{"krate":0,"index":2502},{"krate":0,"index":2504},{"krate":0,"index":2505},{"krate":0,"index":2507},{"krate":0,"index":2510},{"krate":0,"index":2513},{"krate":0,"index":2514},{"krate":0,"index":2516},{"krate":0,"index":2518},{"krate":0,"index":2523},{"krate":0,"index":2526},{"krate":0,"index":5671},{"krate":0,"index":5677},{"krate":0,"index":5683},{"krate":0,"index":5689},{"krate":0,"index":5697},{"krate":0,"index":2532},{"krate":0,"index":2550},{"krate":0,"index":2556},{"krate":0,"index":2562},{"krate":0,"index":2575},{"krate":0,"index":2580}],"decl_id":null,"docs":" A trait system for Bayesian statistical modelling.\n","sig":null,"attributes":[{"value":"/ A trait system for Bayesian statistical modelling.","span":{"file_name":"/Users/shelwitz/.cargo/registry/src/github.com-1ecc6299db9ec823/bio-0.39.0/src/stats/bayesian/model.rs","byte_start":709424,"byte_end":709478,"line_start":6,"line_end":6,"column_start":1,"column_end":55}}]},{"kind":"Type","id":{"krate":0,"index":2516},"span":{"file_name":"/Users/shelwitz/.cargo/registry/src/github.com-1ecc6299db9ec823/bio-0.39.0/src/stats/bayesian/model.rs","byte_start":709672,"byte_end":709689,"line_start":18,"line_end":18,"column_start":10,"column_end":27},"name":"JointProbUniverse","qualname":"::stats::bayesian::model::JointProbUniverse","value":"HashMap<Event, LogProb>","parent":null,"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Trait","id":{"krate":0,"index":2518},"span":{"file_name":"/Users/shelwitz/.cargo/registry/src/github.com-1ecc6299db9ec823/bio-0.39.0/src/stats/bayesian/model.rs","byte_start":709757,"byte_end":709767,"line_start":21,"line_end":21,"column_start":11,"column_end":21},"name":"Likelihood","qualname":"::stats::bayesian::model::Likelihood","value":"Likelihood<Payload = ()>","parent":null,"children":[{"krate":0,"index":2520},{"krate":0,"index":2521},{"krate":0,"index":2522}],"decl_id":null,"docs":" Likelihood model.\n","sig":null,"attributes":[{"value":"/ Likelihood model.","span":{"file_name":"/Users/shelwitz/.cargo/registry/src/github.com-1ecc6299db9ec823/bio-0.39.0/src/stats/bayesian/model.rs","byte_start":709725,"byte_end":709746,"line_start":20,"line_end":20,"column_start":1,"column_end":22}}]},{"kind":"Type","id":{"krate":0,"index":2520},"span":{"file_name":"/Users/shelwitz/.cargo/registry/src/github.com-1ecc6299db9ec823/bio-0.39.0/src/stats/bayesian/model.rs","byte_start":709793,"byte_end":709798,"line_start":22,"line_end":22,"column_start":10,"column_end":15},"name":"Event","qualname":"::stats::bayesian::model::Likelihood::Event","value":"type Event;","parent":{"krate":0,"index":2518},"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Type","id":{"krate":0,"index":2521},"span":{"file_name":"/Users/shelwitz/.cargo/registry/src/github.com-1ecc6299db9ec823/bio-0.39.0/src/stats/bayesian/model.rs","byte_start":709809,"byte_end":709813,"line_start":23,"line_end":23,"column_start":10,"column_end":14},"name":"Data","qualname":"::stats::bayesian::model::Likelihood::Data","value":"type Data;","parent":{"krate":0,"index":2518},"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":2522},"span":{"file_name":"/Users/shelwitz/.cargo/registry/src/github.com-1ecc6299db9ec823/bio-0.39.0/src/stats/bayesian/model.rs","byte_start":710010,"byte_end":710017,"line_start":27,"line_end":27,"column_start":8,"column_end":15},"name":"compute","qualname":"::stats::bayesian::model::Likelihood::compute","value":"pub fn compute(&Self, &Self::Event, &Self::Data, &mut Payload) -> LogProb","parent":{"krate":0,"index":2518},"children":[],"decl_id":null,"docs":" Compute likelihood of event given the data. Optionally, the passed payload can be used\n to e.g., cache intermediate results. One payload corresponds to one model instance.\n","sig":null,"attributes":[{"value":"/ Compute likelihood of event given the data. Optionally, the passed payload can be used","span":{"file_name":"/Users/shelwitz/.cargo/registry/src/github.com-1ecc6299db9ec823/bio-0.39.0/src/stats/bayesian/model.rs","byte_start":709820,"byte_end":709910,"line_start":25,"line_end":25,"column_start":5,"column_end":95}},{"value":"/ to e.g., cache intermediate results. One payload corresponds to one model instance.","span":{"file_name":"/Users/shelwitz/.cargo/registry/src/github.com-1ecc6299db9ec823/bio-0.39.0/src/stats/bayesian/model.rs","byte_start":709915,"byte_end":710002,"line_start":26,"line_end":26,"column_start":5,"column_end":92}}]},{"kind":"Trait","id":{"krate":0,"index":2523},"span":{"file_name":"/Users/shelwitz/.cargo/registry/src/github.com-1ecc6299db9ec823/bio-0.39.0/src/stats/bayesian/model.rs","byte_start":710130,"byte_end":710135,"line_start":31,"line_end":31,"column_start":11,"column_end":16},"name":"Prior","qualname":"::stats::bayesian::model::Prior","value":"Prior","parent":null,"children":[{"krate":0,"index":2524},{"krate":0,"index":2525}],"decl_id":null,"docs":" Prior model.\n","sig":null,"attributes":[{"value":"/ Prior model.","span":{"file_name":"/Users/shelwitz/.cargo/registry/src/github.com-1ecc6299db9ec823/bio-0.39.0/src/stats/bayesian/model.rs","byte_start":710103,"byte_end":710119,"line_start":30,"line_end":30,"column_start":1,"column_end":17}}]},{"kind":"Type","id":{"krate":0,"index":2524},"span":{"file_name":"/Users/shelwitz/.cargo/registry/src/github.com-1ecc6299db9ec823/bio-0.39.0/src/stats/bayesian/model.rs","byte_start":710147,"byte_end":710152,"line_start":32,"line_end":32,"column_start":10,"column_end":15},"name":"Event","qualname":"::stats::bayesian::model::Prior::Event","value":"type Event;","parent":{"krate":0,"index":2523},"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":2525},"span":{"file_name":"/Users/shelwitz/.cargo/registry/src/github.com-1ecc6299db9ec823/bio-0.39.0/src/stats/bayesian/model.rs","byte_start":710162,"byte_end":710169,"line_start":34,"line_end":34,"column_start":8,"column_end":15},"name":"compute","qualname":"::stats::bayesian::model::Prior::compute","value":"pub fn compute(&Self, &Self::Event) -> LogProb","parent":{"krate":0,"index":2523},"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Trait","id":{"krate":0,"index":2526},"span":{"file_name":"/Users/shelwitz/.cargo/registry/src/github.com-1ecc6299db9ec823/bio-0.39.0/src/stats/bayesian/model.rs","byte_start":710244,"byte_end":710253,"line_start":38,"line_end":38,"column_start":11,"column_end":20},"name":"Posterior","qualname":"::stats::bayesian::model::Posterior","value":"Posterior","parent":null,"children":[{"krate":0,"index":2527},{"krate":0,"index":2528},{"krate":0,"index":2529},{"krate":0,"index":2530}],"decl_id":null,"docs":" Posterior model.\n","sig":null,"attributes":[{"value":"/ Posterior model.","span":{"file_name":"/Users/shelwitz/.cargo/registry/src/github.com-1ecc6299db9ec823/bio-0.39.0/src/stats/bayesian/model.rs","byte_start":710213,"byte_end":710233,"line_start":37,"line_end":37,"column_start":1,"column_end":21}}]},{"kind":"Type","id":{"krate":0,"index":2527},"span":{"file_name":"/Users/shelwitz/.cargo/registry/src/github.com-1ecc6299db9ec823/bio-0.39.0/src/stats/bayesian/model.rs","byte_start":710265,"byte_end":710270,"line_start":39,"line_end":39,"column_start":10,"column_end":15},"name":"Event","qualname":"::stats::bayesian::model::Posterior::Event","value":"type Event;","parent":{"krate":0,"index":2526},"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Type","id":{"krate":0,"index":2528},"span":{"file_name":"/Users/shelwitz/.cargo/registry/src/github.com-1ecc6299db9ec823/bio-0.39.0/src/stats/bayesian/model.rs","byte_start":710281,"byte_end":710290,"line_start":40,"line_end":40,"column_start":10,"column_end":19},"name":"BaseEvent","qualname":"::stats::bayesian::model::Posterior::BaseEvent","value":"type BaseEvent;","parent":{"krate":0,"index":2526},"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Type","id":{"krate":0,"index":2529},"span":{"file_name":"/Users/shelwitz/.cargo/registry/src/github.com-1ecc6299db9ec823/bio-0.39.0/src/stats/bayesian/model.rs","byte_start":710301,"byte_end":710305,"line_start":41,"line_end":41,"column_start":10,"column_end":14},"name":"Data","qualname":"::stats::bayesian::model::Posterior::Data","value":"type Data;","parent":{"krate":0,"index":2526},"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":2530},"span":{"file_name":"/Users/shelwitz/.cargo/registry/src/github.com-1ecc6299db9ec823/bio-0.39.0/src/stats/bayesian/model.rs","byte_start":710315,"byte_end":710322,"line_start":43,"line_end":43,"column_start":8,"column_end":15},"name":"compute","qualname":"::stats::bayesian::model::Posterior::compute","value":"pub fn compute<F: FnMut(&Self::BaseEvent, &Self::Data) ->\n               LogProb>(&Self, &Self::Event, &Self::Data, &mut F) -> LogProb","parent":{"krate":0,"index":2526},"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Struct","id":{"krate":0,"index":5671},"span":{"file_name":"/Users/shelwitz/.cargo/registry/src/github.com-1ecc6299db9ec823/bio-0.39.0/src/stats/bayesian/model.rs","byte_start":710916,"byte_end":710921,"line_start":57,"line_end":57,"column_start":12,"column_end":17},"name":"Model","qualname":"::stats::bayesian::model::Model","value":"Model {  }","parent":null,"children":[{"krate":0,"index":5705},{"krate":0,"index":5706},{"krate":0,"index":5707},{"krate":0,"index":5676}],"decl_id":null,"docs":" Bayesian model, consisting of a prior, a posterior and a likelihood model.\n Thereby, `Payload` is a custom payload of the model instance.\n This can be used to define custom caching mechanisms. See\n [here](https://github.com/varlociraptor/varlociraptor/blob/694e994547e8f523e5b0013fdf951b694f3870fa/src/model/modes/generic.rs#L200)\n for an example.\n","sig":null,"attributes":[{"value":"/ Bayesian model, consisting of a prior, a posterior and a likelihood model.","span":{"file_name":"/Users/shelwitz/.cargo/registry/src/github.com-1ecc6299db9ec823/bio-0.39.0/src/stats/bayesian/model.rs","byte_start":710496,"byte_end":710574,"line_start":51,"line_end":51,"column_start":1,"column_end":79}},{"value":"/ Thereby, `Payload` is a custom payload of the model instance.","span":{"file_name":"/Users/shelwitz/.cargo/registry/src/github.com-1ecc6299db9ec823/bio-0.39.0/src/stats/bayesian/model.rs","byte_start":710575,"byte_end":710640,"line_start":52,"line_end":52,"column_start":1,"column_end":66}},{"value":"/ This can be used to define custom caching mechanisms. See","span":{"file_name":"/Users/shelwitz/.cargo/registry/src/github.com-1ecc6299db9ec823/bio-0.39.0/src/stats/bayesian/model.rs","byte_start":710641,"byte_end":710702,"line_start":53,"line_end":53,"column_start":1,"column_end":62}},{"value":"/ [here](https://github.com/varlociraptor/varlociraptor/blob/694e994547e8f523e5b0013fdf951b694f3870fa/src/model/modes/generic.rs#L200)","span":{"file_name":"/Users/shelwitz/.cargo/registry/src/github.com-1ecc6299db9ec823/bio-0.39.0/src/stats/bayesian/model.rs","byte_start":710703,"byte_end":710839,"line_start":54,"line_end":54,"column_start":1,"column_end":137}},{"value":"/ for an example.","span":{"file_name":"/Users/shelwitz/.cargo/registry/src/github.com-1ecc6299db9ec823/bio-0.39.0/src/stats/bayesian/model.rs","byte_start":710840,"byte_end":710859,"line_start":55,"line_end":55,"column_start":1,"column_end":20}}]},{"kind":"Method","id":{"krate":0,"index":2540},"span":{"file_name":"/Users/shelwitz/.cargo/registry/src/github.com-1ecc6299db9ec823/bio-0.39.0/src/stats/bayesian/model.rs","byte_start":711636,"byte_end":711639,"line_start":86,"line_end":86,"column_start":12,"column_end":15},"name":"new","qualname":"<Model<L, Pr, Po, Payload>>::new","value":"pub fn new(L, Pr, Po) -> Self","parent":null,"children":[],"decl_id":null,"docs":" Create new instance.\n","sig":null,"attributes":[{"value":"/ Create new instance.","span":{"file_name":"/Users/shelwitz/.cargo/registry/src/github.com-1ecc6299db9ec823/bio-0.39.0/src/stats/bayesian/model.rs","byte_start":711600,"byte_end":711624,"line_start":85,"line_end":85,"column_start":5,"column_end":29}}]},{"kind":"Method","id":{"krate":0,"index":2542},"span":{"file_name":"/Users/shelwitz/.cargo/registry/src/github.com-1ecc6299db9ec823/bio-0.39.0/src/stats/bayesian/model.rs","byte_start":712141,"byte_end":712148,"line_start":101,"line_end":101,"column_start":12,"column_end":19},"name":"compute","qualname":"<Model<L, Pr, Po, Payload>>::compute","value":"pub fn compute<U: IntoIterator<Item = PosteriorEvent>>(&Self, U, &Data)\n-> ModelInstance<Event, PosteriorEvent>","parent":null,"children":[],"decl_id":null,"docs":" Compute model for a given universe of events.\n","sig":null,"attributes":[{"value":"/ Compute model for a given universe of events.","span":{"file_name":"/Users/shelwitz/.cargo/registry/src/github.com-1ecc6299db9ec823/bio-0.39.0/src/stats/bayesian/model.rs","byte_start":712080,"byte_end":712129,"line_start":100,"line_end":100,"column_start":5,"column_end":54}}]},{"kind":"Method","id":{"krate":0,"index":2546},"span":{"file_name":"/Users/shelwitz/.cargo/registry/src/github.com-1ecc6299db9ec823/bio-0.39.0/src/stats/bayesian/model.rs","byte_start":713312,"byte_end":713333,"line_start":135,"line_end":135,"column_start":12,"column_end":33},"name":"compute_from_marginal","qualname":"<Model<L, Pr, Po, Payload>>::compute_from_marginal","value":"pub fn compute_from_marginal<M>(&Self, &M, &Data)\n-> ModelInstance<Event, PosteriorEvent> where M: Marginal<Data = Data, Event =\nData, BaseEvent = Data>","parent":null,"children":[],"decl_id":null,"docs":" Compute model via the exploration of the marginal distribution of the data.\n","sig":null,"attributes":[{"value":"/ Compute model via the exploration of the marginal distribution of the data.","span":{"file_name":"/Users/shelwitz/.cargo/registry/src/github.com-1ecc6299db9ec823/bio-0.39.0/src/stats/bayesian/model.rs","byte_start":713221,"byte_end":713300,"line_start":134,"line_end":134,"column_start":5,"column_end":84}}]},{"kind":"Trait","id":{"krate":0,"index":2550},"span":{"file_name":"/Users/shelwitz/.cargo/registry/src/github.com-1ecc6299db9ec823/bio-0.39.0/src/stats/bayesian/model.rs","byte_start":714452,"byte_end":714460,"line_start":171,"line_end":171,"column_start":11,"column_end":19},"name":"Marginal","qualname":"::stats::bayesian::model::Marginal","value":"Marginal","parent":null,"children":[{"krate":0,"index":2551},{"krate":0,"index":2552},{"krate":0,"index":2553},{"krate":0,"index":2554}],"decl_id":null,"docs":" A trait for the exploration of the marginal distribution of the data.\n","sig":null,"attributes":[{"value":"/ A trait for the exploration of the marginal distribution of the data.","span":{"file_name":"/Users/shelwitz/.cargo/registry/src/github.com-1ecc6299db9ec823/bio-0.39.0/src/stats/bayesian/model.rs","byte_start":714368,"byte_end":714441,"line_start":170,"line_end":170,"column_start":1,"column_end":74}}]},{"kind":"Type","id":{"krate":0,"index":2551},"span":{"file_name":"/Users/shelwitz/.cargo/registry/src/github.com-1ecc6299db9ec823/bio-0.39.0/src/stats/bayesian/model.rs","byte_start":714472,"byte_end":714477,"line_start":172,"line_end":172,"column_start":10,"column_end":15},"name":"Event","qualname":"::stats::bayesian::model::Marginal::Event","value":"type Event;","parent":{"krate":0,"index":2550},"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Type","id":{"krate":0,"index":2552},"span":{"file_name":"/Users/shelwitz/.cargo/registry/src/github.com-1ecc6299db9ec823/bio-0.39.0/src/stats/bayesian/model.rs","byte_start":714488,"byte_end":714497,"line_start":173,"line_end":173,"column_start":10,"column_end":19},"name":"BaseEvent","qualname":"::stats::bayesian::model::Marginal::BaseEvent","value":"type BaseEvent;","parent":{"krate":0,"index":2550},"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Type","id":{"krate":0,"index":2553},"span":{"file_name":"/Users/shelwitz/.cargo/registry/src/github.com-1ecc6299db9ec823/bio-0.39.0/src/stats/bayesian/model.rs","byte_start":714508,"byte_end":714512,"line_start":174,"line_end":174,"column_start":10,"column_end":14},"name":"Data","qualname":"::stats::bayesian::model::Marginal::Data","value":"type Data;","parent":{"krate":0,"index":2550},"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":2554},"span":{"file_name":"/Users/shelwitz/.cargo/registry/src/github.com-1ecc6299db9ec823/bio-0.39.0/src/stats/bayesian/model.rs","byte_start":714522,"byte_end":714529,"line_start":176,"line_end":176,"column_start":8,"column_end":15},"name":"compute","qualname":"::stats::bayesian::model::Marginal::compute","value":"pub fn compute<F: FnMut(&Self::Event, &Self::Data) ->\n               LogProb>(&Self, &Self::Data, &mut F) -> LogProb","parent":{"krate":0,"index":2550},"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Struct","id":{"krate":0,"index":2556},"span":{"file_name":"/Users/shelwitz/.cargo/registry/src/github.com-1ecc6299db9ec823/bio-0.39.0/src/stats/bayesian/model.rs","byte_start":714808,"byte_end":714821,"line_start":185,"line_end":185,"column_start":12,"column_end":25},"name":"ModelInstance","qualname":"::stats::bayesian::model::ModelInstance","value":"ModelInstance {  }","parent":null,"children":[{"krate":0,"index":2559},{"krate":0,"index":2560},{"krate":0,"index":2561}],"decl_id":null,"docs":" Instance of a model for given data and event universe.\n From the instance, posterior, marginal and MAP can be computed.\n","sig":null,"attributes":[{"value":"/ Instance of a model for given data and event universe.","span":{"file_name":"/Users/shelwitz/.cargo/registry/src/github.com-1ecc6299db9ec823/bio-0.39.0/src/stats/bayesian/model.rs","byte_start":714670,"byte_end":714728,"line_start":183,"line_end":183,"column_start":1,"column_end":59}},{"value":"/ From the instance, posterior, marginal and MAP can be computed.","span":{"file_name":"/Users/shelwitz/.cargo/registry/src/github.com-1ecc6299db9ec823/bio-0.39.0/src/stats/bayesian/model.rs","byte_start":714729,"byte_end":714796,"line_start":184,"line_end":184,"column_start":1,"column_end":68}}]},{"kind":"Method","id":{"krate":0,"index":2565},"span":{"file_name":"/Users/shelwitz/.cargo/registry/src/github.com-1ecc6299db9ec823/bio-0.39.0/src/stats/bayesian/model.rs","byte_start":715212,"byte_end":715221,"line_start":201,"line_end":201,"column_start":12,"column_end":21},"name":"posterior","qualname":"<ModelInstance<Event, PosteriorEvent>>::posterior","value":"pub fn posterior(&Self, &PosteriorEvent) -> Option<LogProb>","parent":null,"children":[],"decl_id":null,"docs":" Posterior probability of given event.\n","sig":null,"attributes":[{"value":"/ Posterior probability of given event.","span":{"file_name":"/Users/shelwitz/.cargo/registry/src/github.com-1ecc6299db9ec823/bio-0.39.0/src/stats/bayesian/model.rs","byte_start":715159,"byte_end":715200,"line_start":200,"line_end":200,"column_start":5,"column_end":46}}]},{"kind":"Method","id":{"krate":0,"index":2567},"span":{"file_name":"/Users/shelwitz/.cargo/registry/src/github.com-1ecc6299db9ec823/bio-0.39.0/src/stats/bayesian/model.rs","byte_start":715389,"byte_end":715397,"line_start":206,"line_end":206,"column_start":12,"column_end":20},"name":"marginal","qualname":"<ModelInstance<Event, PosteriorEvent>>::marginal","value":"pub fn marginal(&Self) -> LogProb","parent":null,"children":[],"decl_id":null,"docs":" Marginal probability.\n","sig":null,"attributes":[{"value":"/ Marginal probability.","span":{"file_name":"/Users/shelwitz/.cargo/registry/src/github.com-1ecc6299db9ec823/bio-0.39.0/src/stats/bayesian/model.rs","byte_start":715352,"byte_end":715377,"line_start":205,"line_end":205,"column_start":5,"column_end":30}}]},{"kind":"Method","id":{"krate":0,"index":2568},"span":{"file_name":"/Users/shelwitz/.cargo/registry/src/github.com-1ecc6299db9ec823/bio-0.39.0/src/stats/bayesian/model.rs","byte_start":715497,"byte_end":715514,"line_start":211,"line_end":211,"column_start":12,"column_end":29},"name":"maximum_posterior","qualname":"<ModelInstance<Event, PosteriorEvent>>::maximum_posterior","value":"pub fn maximum_posterior(&Self) -> Option<&Event>","parent":null,"children":[],"decl_id":null,"docs":" Maximum a posteriori estimate.\n","sig":null,"attributes":[{"value":"/ Maximum a posteriori estimate.","span":{"file_name":"/Users/shelwitz/.cargo/registry/src/github.com-1ecc6299db9ec823/bio-0.39.0/src/stats/bayesian/model.rs","byte_start":715451,"byte_end":715485,"line_start":210,"line_end":210,"column_start":5,"column_end":39}}]},{"kind":"Method","id":{"krate":0,"index":2571},"span":{"file_name":"/Users/shelwitz/.cargo/registry/src/github.com-1ecc6299db9ec823/bio-0.39.0/src/stats/bayesian/model.rs","byte_start":715762,"byte_end":715778,"line_start":219,"line_end":219,"column_start":12,"column_end":28},"name":"event_posteriors","qualname":"<ModelInstance<Event, PosteriorEvent>>::event_posteriors","value":"pub fn event_posteriors(&Self) -> /*impl Trait*/","parent":null,"children":[],"decl_id":null,"docs":" Event posteriors sorted in descending order.\n","sig":null,"attributes":[{"value":"/ Event posteriors sorted in descending order.","span":{"file_name":"/Users/shelwitz/.cargo/registry/src/github.com-1ecc6299db9ec823/bio-0.39.0/src/stats/bayesian/model.rs","byte_start":715702,"byte_end":715750,"line_start":218,"line_end":218,"column_start":5,"column_end":53}}]},{"kind":"Method","id":{"krate":0,"index":2577},"span":{"file_name":"/Users/shelwitz/.cargo/registry/src/github.com-1ecc6299db9ec823/bio-0.39.0/src/stats/bayesian/model.rs","byte_start":716133,"byte_end":716147,"line_start":231,"line_end":231,"column_start":12,"column_end":26},"name":"expected_value","qualname":"<ModelInstance<NotNan<f64>, PosteriorEvent>>::expected_value","value":"pub fn expected_value(&Self) -> NotNan<f64>","parent":null,"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Function","id":{"krate":0,"index":2596},"span":{"file_name":"/Users/shelwitz/.cargo/registry/src/github.com-1ecc6299db9ec823/bio-0.39.0/src/stats/bayesian/mod.rs","byte_start":705932,"byte_end":705944,"line_start":28,"line_end":28,"column_start":8,"column_end":20},"name":"expected_fdr","qualname":"::stats::bayesian::expected_fdr","value":"pub fn expected_fdr(&[LogProb]) -> Vec<LogProb>","parent":null,"children":[],"decl_id":null,"docs":" For each of the hypothesis tests given as posterior error probabilities\n (PEPs, i.e. the posterior probability of the null hypothesis), estimate the FDR\n for the case that all null hypotheses with at most this PEP are rejected.\n FDR is calculated as presented by Müller, Parmigiani, and Rice,\n \"FDR and Bayesian Multiple Comparisons Rules\" (July 2006).\n Johns Hopkin's University, Dept. of Biostatistics Working Papers. Working Paper 115.","sig":null,"attributes":[{"value":"/ For each of the hypothesis tests given as posterior error probabilities","span":{"file_name":"/Users/shelwitz/.cargo/registry/src/github.com-1ecc6299db9ec823/bio-0.39.0/src/stats/bayesian/mod.rs","byte_start":705377,"byte_end":705452,"line_start":18,"line_end":18,"column_start":1,"column_end":76}},{"value":"/ (PEPs, i.e. the posterior probability of the null hypothesis), estimate the FDR","span":{"file_name":"/Users/shelwitz/.cargo/registry/src/github.com-1ecc6299db9ec823/bio-0.39.0/src/stats/bayesian/mod.rs","byte_start":705453,"byte_end":705536,"line_start":19,"line_end":19,"column_start":1,"column_end":84}},{"value":"/ for the case that all null hypotheses with at most this PEP are rejected.","span":{"file_name":"/Users/shelwitz/.cargo/registry/src/github.com-1ecc6299db9ec823/bio-0.39.0/src/stats/bayesian/mod.rs","byte_start":705537,"byte_end":705614,"line_start":20,"line_end":20,"column_start":1,"column_end":78}},{"value":"/ FDR is calculated as presented by Müller, Parmigiani, and Rice,","span":{"file_name":"/Users/shelwitz/.cargo/registry/src/github.com-1ecc6299db9ec823/bio-0.39.0/src/stats/bayesian/mod.rs","byte_start":705615,"byte_end":705683,"line_start":21,"line_end":21,"column_start":1,"column_end":68}},{"value":"/ \"FDR and Bayesian Multiple Comparisons Rules\" (July 2006).","span":{"file_name":"/Users/shelwitz/.cargo/registry/src/github.com-1ecc6299db9ec823/bio-0.39.0/src/stats/bayesian/mod.rs","byte_start":705684,"byte_end":705746,"line_start":22,"line_end":22,"column_start":1,"column_end":63}},{"value":"/ Johns Hopkin's University, Dept. of Biostatistics Working Papers. Working Paper 115.","span":{"file_name":"/Users/shelwitz/.cargo/registry/src/github.com-1ecc6299db9ec823/bio-0.39.0/src/stats/bayesian/mod.rs","byte_start":705747,"byte_end":705835,"line_start":23,"line_end":23,"column_start":1,"column_end":89}},{"value":"/","span":{"file_name":"/Users/shelwitz/.cargo/registry/src/github.com-1ecc6299db9ec823/bio-0.39.0/src/stats/bayesian/mod.rs","byte_start":705836,"byte_end":705839,"line_start":24,"line_end":24,"column_start":1,"column_end":4}},{"value":"/ # Returns","span":{"file_name":"/Users/shelwitz/.cargo/registry/src/github.com-1ecc6299db9ec823/bio-0.39.0/src/stats/bayesian/mod.rs","byte_start":705840,"byte_end":705853,"line_start":25,"line_end":25,"column_start":1,"column_end":14}},{"value":"/","span":{"file_name":"/Users/shelwitz/.cargo/registry/src/github.com-1ecc6299db9ec823/bio-0.39.0/src/stats/bayesian/mod.rs","byte_start":705854,"byte_end":705857,"line_start":26,"line_end":26,"column_start":1,"column_end":4}},{"value":"/ A vector of expected FDRs in the same order as the given PEPs.","span":{"file_name":"/Users/shelwitz/.cargo/registry/src/github.com-1ecc6299db9ec823/bio-0.39.0/src/stats/bayesian/mod.rs","byte_start":705858,"byte_end":705924,"line_start":27,"line_end":27,"column_start":1,"column_end":67}}]},{"kind":"Mod","id":{"krate":0,"index":2599},"span":{"file_name":"/Users/shelwitz/.cargo/registry/src/github.com-1ecc6299db9ec823/bio-0.39.0/src/stats/combinatorics.rs","byte_start":0,"byte_end":0,"line_start":1,"line_end":1,"column_start":1,"column_end":1},"name":"combinatorics","qualname":"::stats::combinatorics","value":"/Users/shelwitz/.cargo/registry/src/github.com-1ecc6299db9ec823/bio-0.39.0/src/stats/combinatorics.rs","parent":null,"children":[{"krate":0,"index":2600},{"krate":0,"index":2603},{"krate":0,"index":2604},{"krate":0,"index":2605}],"decl_id":null,"docs":" Combinations with and without replacement.\n","sig":null,"attributes":[{"value":"/ Combinations with and without replacement.","span":{"file_name":"/Users/shelwitz/.cargo/registry/src/github.com-1ecc6299db9ec823/bio-0.39.0/src/stats/combinatorics.rs","byte_start":716569,"byte_end":716615,"line_start":6,"line_end":6,"column_start":1,"column_end":47}}]},{"kind":"Function","id":{"krate":0,"index":2603},"span":{"file_name":"/Users/shelwitz/.cargo/registry/src/github.com-1ecc6299db9ec823/bio-0.39.0/src/stats/combinatorics.rs","byte_start":717028,"byte_end":717047,"line_start":20,"line_end":20,"column_start":8,"column_end":27},"name":"scaled_combinations","qualname":"::stats::combinatorics::scaled_combinations","value":"pub fn scaled_combinations(u64, u64, f64) -> f64","parent":null,"children":[],"decl_id":null,"docs":" Calculate the number of combinations when choosing\n k elements from n elements without replacement, multiplied by a scaling factor.\n Time complexity: O(min(k, n - k))","sig":null,"attributes":[{"value":"/ Calculate the number of combinations when choosing","span":{"file_name":"/Users/shelwitz/.cargo/registry/src/github.com-1ecc6299db9ec823/bio-0.39.0/src/stats/combinatorics.rs","byte_start":716632,"byte_end":716686,"line_start":10,"line_end":10,"column_start":1,"column_end":55}},{"value":"/ k elements from n elements without replacement, multiplied by a scaling factor.","span":{"file_name":"/Users/shelwitz/.cargo/registry/src/github.com-1ecc6299db9ec823/bio-0.39.0/src/stats/combinatorics.rs","byte_start":716687,"byte_end":716770,"line_start":11,"line_end":11,"column_start":1,"column_end":84}},{"value":"/ Time complexity: O(min(k, n - k))","span":{"file_name":"/Users/shelwitz/.cargo/registry/src/github.com-1ecc6299db9ec823/bio-0.39.0/src/stats/combinatorics.rs","byte_start":716771,"byte_end":716808,"line_start":12,"line_end":12,"column_start":1,"column_end":38}},{"value":"/","span":{"file_name":"/Users/shelwitz/.cargo/registry/src/github.com-1ecc6299db9ec823/bio-0.39.0/src/stats/combinatorics.rs","byte_start":716809,"byte_end":716812,"line_start":13,"line_end":13,"column_start":1,"column_end":4}},{"value":"/ # Examples","span":{"file_name":"/Users/shelwitz/.cargo/registry/src/github.com-1ecc6299db9ec823/bio-0.39.0/src/stats/combinatorics.rs","byte_start":716813,"byte_end":716827,"line_start":14,"line_end":14,"column_start":1,"column_end":15}},{"value":"/ ```","span":{"file_name":"/Users/shelwitz/.cargo/registry/src/github.com-1ecc6299db9ec823/bio-0.39.0/src/stats/combinatorics.rs","byte_start":716828,"byte_end":716835,"line_start":15,"line_end":15,"column_start":1,"column_end":8}},{"value":"/ use approx::assert_relative_eq;","span":{"file_name":"/Users/shelwitz/.cargo/registry/src/github.com-1ecc6299db9ec823/bio-0.39.0/src/stats/combinatorics.rs","byte_start":716836,"byte_end":716871,"line_start":16,"line_end":16,"column_start":1,"column_end":36}},{"value":"/ use bio::stats::combinatorics::scaled_combinations;","span":{"file_name":"/Users/shelwitz/.cargo/registry/src/github.com-1ecc6299db9ec823/bio-0.39.0/src/stats/combinatorics.rs","byte_start":716872,"byte_end":716927,"line_start":17,"line_end":17,"column_start":1,"column_end":56}},{"value":"/ assert_relative_eq!(scaled_combinations(5, 3, 0.5), 5., epsilon = f64::EPSILON);","span":{"file_name":"/Users/shelwitz/.cargo/registry/src/github.com-1ecc6299db9ec823/bio-0.39.0/src/stats/combinatorics.rs","byte_start":716928,"byte_end":717012,"line_start":18,"line_end":18,"column_start":1,"column_end":85}},{"value":"/ ```","span":{"file_name":"/Users/shelwitz/.cargo/registry/src/github.com-1ecc6299db9ec823/bio-0.39.0/src/stats/combinatorics.rs","byte_start":717013,"byte_end":717020,"line_start":19,"line_end":19,"column_start":1,"column_end":8}}]},{"kind":"Function","id":{"krate":0,"index":2604},"span":{"file_name":"/Users/shelwitz/.cargo/registry/src/github.com-1ecc6299db9ec823/bio-0.39.0/src/stats/combinatorics.rs","byte_start":717711,"byte_end":717723,"line_start":44,"line_end":44,"column_start":8,"column_end":20},"name":"combinations","qualname":"::stats::combinatorics::combinations","value":"pub fn combinations(u64, u64) -> f64","parent":null,"children":[],"decl_id":null,"docs":" Calculate the number of combinations when choosing\n k elements from n elements without replacement.\n This is also known as n over k, or the binomial coefficient.\n Time complexity: O(min(k, n - k))","sig":null,"attributes":[{"value":"/ Calculate the number of combinations when choosing","span":{"file_name":"/Users/shelwitz/.cargo/registry/src/github.com-1ecc6299db9ec823/bio-0.39.0/src/stats/combinatorics.rs","byte_start":717300,"byte_end":717354,"line_start":33,"line_end":33,"column_start":1,"column_end":55}},{"value":"/ k elements from n elements without replacement.","span":{"file_name":"/Users/shelwitz/.cargo/registry/src/github.com-1ecc6299db9ec823/bio-0.39.0/src/stats/combinatorics.rs","byte_start":717355,"byte_end":717406,"line_start":34,"line_end":34,"column_start":1,"column_end":52}},{"value":"/ This is also known as n over k, or the binomial coefficient.","span":{"file_name":"/Users/shelwitz/.cargo/registry/src/github.com-1ecc6299db9ec823/bio-0.39.0/src/stats/combinatorics.rs","byte_start":717407,"byte_end":717471,"line_start":35,"line_end":35,"column_start":1,"column_end":65}},{"value":"/ Time complexity: O(min(k, n - k))","span":{"file_name":"/Users/shelwitz/.cargo/registry/src/github.com-1ecc6299db9ec823/bio-0.39.0/src/stats/combinatorics.rs","byte_start":717472,"byte_end":717509,"line_start":36,"line_end":36,"column_start":1,"column_end":38}},{"value":"/","span":{"file_name":"/Users/shelwitz/.cargo/registry/src/github.com-1ecc6299db9ec823/bio-0.39.0/src/stats/combinatorics.rs","byte_start":717510,"byte_end":717513,"line_start":37,"line_end":37,"column_start":1,"column_end":4}},{"value":"/ # Examples","span":{"file_name":"/Users/shelwitz/.cargo/registry/src/github.com-1ecc6299db9ec823/bio-0.39.0/src/stats/combinatorics.rs","byte_start":717514,"byte_end":717528,"line_start":38,"line_end":38,"column_start":1,"column_end":15}},{"value":"/ ```","span":{"file_name":"/Users/shelwitz/.cargo/registry/src/github.com-1ecc6299db9ec823/bio-0.39.0/src/stats/combinatorics.rs","byte_start":717529,"byte_end":717536,"line_start":39,"line_end":39,"column_start":1,"column_end":8}},{"value":"/ use approx::assert_relative_eq;","span":{"file_name":"/Users/shelwitz/.cargo/registry/src/github.com-1ecc6299db9ec823/bio-0.39.0/src/stats/combinatorics.rs","byte_start":717537,"byte_end":717572,"line_start":40,"line_end":40,"column_start":1,"column_end":36}},{"value":"/ use bio::stats::combinatorics::combinations;","span":{"file_name":"/Users/shelwitz/.cargo/registry/src/github.com-1ecc6299db9ec823/bio-0.39.0/src/stats/combinatorics.rs","byte_start":717573,"byte_end":717621,"line_start":41,"line_end":41,"column_start":1,"column_end":49}},{"value":"/ assert_relative_eq!(combinations(5, 3), 10., epsilon = f64::EPSILON);","span":{"file_name":"/Users/shelwitz/.cargo/registry/src/github.com-1ecc6299db9ec823/bio-0.39.0/src/stats/combinatorics.rs","byte_start":717622,"byte_end":717695,"line_start":42,"line_end":42,"column_start":1,"column_end":74}},{"value":"/ ```","span":{"file_name":"/Users/shelwitz/.cargo/registry/src/github.com-1ecc6299db9ec823/bio-0.39.0/src/stats/combinatorics.rs","byte_start":717696,"byte_end":717703,"line_start":43,"line_end":43,"column_start":1,"column_end":8}}]},{"kind":"Function","id":{"krate":0,"index":2605},"span":{"file_name":"/Users/shelwitz/.cargo/registry/src/github.com-1ecc6299db9ec823/bio-0.39.0/src/stats/combinatorics.rs","byte_start":718150,"byte_end":718172,"line_start":58,"line_end":58,"column_start":8,"column_end":30},"name":"combinations_with_repl","qualname":"::stats::combinatorics::combinations_with_repl","value":"pub fn combinations_with_repl(u64, u64) -> f64","parent":null,"children":[],"decl_id":null,"docs":" Calculate the number of combinations when choosing\n k elements from n elements with replacement.\n Time complexity: O(min(k, n - k))","sig":null,"attributes":[{"value":"/ Calculate the number of combinations when choosing","span":{"file_name":"/Users/shelwitz/.cargo/registry/src/github.com-1ecc6299db9ec823/bio-0.39.0/src/stats/combinatorics.rs","byte_start":717787,"byte_end":717841,"line_start":48,"line_end":48,"column_start":1,"column_end":55}},{"value":"/ k elements from n elements with replacement.","span":{"file_name":"/Users/shelwitz/.cargo/registry/src/github.com-1ecc6299db9ec823/bio-0.39.0/src/stats/combinatorics.rs","byte_start":717842,"byte_end":717890,"line_start":49,"line_end":49,"column_start":1,"column_end":49}},{"value":"/ Time complexity: O(min(k, n - k))","span":{"file_name":"/Users/shelwitz/.cargo/registry/src/github.com-1ecc6299db9ec823/bio-0.39.0/src/stats/combinatorics.rs","byte_start":717891,"byte_end":717928,"line_start":50,"line_end":50,"column_start":1,"column_end":38}},{"value":"/","span":{"file_name":"/Users/shelwitz/.cargo/registry/src/github.com-1ecc6299db9ec823/bio-0.39.0/src/stats/combinatorics.rs","byte_start":717929,"byte_end":717932,"line_start":51,"line_end":51,"column_start":1,"column_end":4}},{"value":"/ # Examples","span":{"file_name":"/Users/shelwitz/.cargo/registry/src/github.com-1ecc6299db9ec823/bio-0.39.0/src/stats/combinatorics.rs","byte_start":717933,"byte_end":717947,"line_start":52,"line_end":52,"column_start":1,"column_end":15}},{"value":"/ ```","span":{"file_name":"/Users/shelwitz/.cargo/registry/src/github.com-1ecc6299db9ec823/bio-0.39.0/src/stats/combinatorics.rs","byte_start":717948,"byte_end":717955,"line_start":53,"line_end":53,"column_start":1,"column_end":8}},{"value":"/ use approx::assert_relative_eq;","span":{"file_name":"/Users/shelwitz/.cargo/registry/src/github.com-1ecc6299db9ec823/bio-0.39.0/src/stats/combinatorics.rs","byte_start":717956,"byte_end":717991,"line_start":54,"line_end":54,"column_start":1,"column_end":36}},{"value":"/ use bio::stats::combinatorics::combinations_with_repl;","span":{"file_name":"/Users/shelwitz/.cargo/registry/src/github.com-1ecc6299db9ec823/bio-0.39.0/src/stats/combinatorics.rs","byte_start":717992,"byte_end":718050,"line_start":55,"line_end":55,"column_start":1,"column_end":59}},{"value":"/ assert_relative_eq!(combinations_with_repl(5, 3), 35., epsilon = f64::EPSILON);","span":{"file_name":"/Users/shelwitz/.cargo/registry/src/github.com-1ecc6299db9ec823/bio-0.39.0/src/stats/combinatorics.rs","byte_start":718051,"byte_end":718134,"line_start":56,"line_end":56,"column_start":1,"column_end":84}},{"value":"/ ```","span":{"file_name":"/Users/shelwitz/.cargo/registry/src/github.com-1ecc6299db9ec823/bio-0.39.0/src/stats/combinatorics.rs","byte_start":718135,"byte_end":718142,"line_start":57,"line_end":57,"column_start":1,"column_end":8}}]},{"kind":"Mod","id":{"krate":0,"index":2606},"span":{"file_name":"/Users/shelwitz/.cargo/registry/src/github.com-1ecc6299db9ec823/bio-0.39.0/src/stats/hmm/mod.rs","byte_start":0,"byte_end":0,"line_start":1,"line_end":1,"column_start":1,"column_end":1},"name":"hmm","qualname":"::stats::hmm","value":"/Users/shelwitz/.cargo/registry/src/github.com-1ecc6299db9ec823/bio-0.39.0/src/stats/hmm/mod.rs","parent":null,"children":[{"krate":0,"index":2607},{"krate":0,"index":2614},{"krate":0,"index":2617},{"krate":0,"index":2618},{"krate":0,"index":2621},{"krate":0,"index":2622},{"krate":0,"index":2624},{"krate":0,"index":2627},{"krate":0,"index":2628},{"krate":0,"index":2631},{"krate":0,"index":2634},{"krate":0,"index":2635},{"krate":0,"index":2637},{"krate":0,"index":2638},{"krate":0,"index":2640},{"krate":0,"index":2641},{"krate":0,"index":2643},{"krate":0,"index":2644},{"krate":0,"index":2646},{"krate":0,"index":2647},{"krate":0,"index":2649},{"krate":0,"index":2652},{"krate":0,"index":5724},{"krate":0,"index":5727},{"krate":0,"index":5728},{"krate":0,"index":5731},{"krate":0,"index":5732},{"krate":0,"index":5734},{"krate":0,"index":5736},{"krate":0,"index":5738},{"krate":0,"index":5740},{"krate":0,"index":2655},{"krate":0,"index":2658},{"krate":0,"index":2660},{"krate":0,"index":5743},{"krate":0,"index":5746},{"krate":0,"index":5748},{"krate":0,"index":5749},{"krate":0,"index":5751},{"krate":0,"index":5752},{"krate":0,"index":2663},{"krate":0,"index":2665},{"krate":0,"index":2669},{"krate":0,"index":2671},{"krate":0,"index":2674},{"krate":0,"index":2685},{"krate":0,"index":2691},{"krate":0,"index":2693},{"krate":0,"index":2696},{"krate":0,"index":2701},{"krate":0,"index":2708},{"krate":0,"index":2717},{"krate":0,"index":2721},{"krate":0,"index":2748},{"krate":0,"index":2783}],"decl_id":null,"docs":" An implementation of Hidden Markov Models in Rust.","sig":null,"attributes":[{"value":"/ An implementation of Hidden Markov Models in Rust.","span":{"file_name":"/Users/shelwitz/.cargo/registry/src/github.com-1ecc6299db9ec823/bio-0.39.0/src/stats/hmm/mod.rs","byte_start":719072,"byte_end":719126,"line_start":6,"line_end":6,"column_start":1,"column_end":55}},{"value":"/","span":{"file_name":"/Users/shelwitz/.cargo/registry/src/github.com-1ecc6299db9ec823/bio-0.39.0/src/stats/hmm/mod.rs","byte_start":719127,"byte_end":719130,"line_start":7,"line_end":7,"column_start":1,"column_end":4}},{"value":"/ ## Examples","span":{"file_name":"/Users/shelwitz/.cargo/registry/src/github.com-1ecc6299db9ec823/bio-0.39.0/src/stats/hmm/mod.rs","byte_start":719131,"byte_end":719146,"line_start":8,"line_end":8,"column_start":1,"column_end":16}},{"value":"/","span":{"file_name":"/Users/shelwitz/.cargo/registry/src/github.com-1ecc6299db9ec823/bio-0.39.0/src/stats/hmm/mod.rs","byte_start":719147,"byte_end":719150,"line_start":9,"line_end":9,"column_start":1,"column_end":4}},{"value":"/ ### Discrete Emission Distribution","span":{"file_name":"/Users/shelwitz/.cargo/registry/src/github.com-1ecc6299db9ec823/bio-0.39.0/src/stats/hmm/mod.rs","byte_start":719151,"byte_end":719189,"line_start":10,"line_end":10,"column_start":1,"column_end":39}},{"value":"/","span":{"file_name":"/Users/shelwitz/.cargo/registry/src/github.com-1ecc6299db9ec823/bio-0.39.0/src/stats/hmm/mod.rs","byte_start":719190,"byte_end":719193,"line_start":11,"line_end":11,"column_start":1,"column_end":4}},{"value":"/ We construct the example from Borodovsky & Ekisheva (2006), pp. 80 (also see","span":{"file_name":"/Users/shelwitz/.cargo/registry/src/github.com-1ecc6299db9ec823/bio-0.39.0/src/stats/hmm/mod.rs","byte_start":719194,"byte_end":719274,"line_start":12,"line_end":12,"column_start":1,"column_end":81}},{"value":"/ [these slides](http://cecas.clemson.edu/~ahoover/ece854/refs/Gonze-ViterbiAlgorithm.pdf).","span":{"file_name":"/Users/shelwitz/.cargo/registry/src/github.com-1ecc6299db9ec823/bio-0.39.0/src/stats/hmm/mod.rs","byte_start":719275,"byte_end":719368,"line_start":13,"line_end":13,"column_start":1,"column_end":94}},{"value":"/","span":{"file_name":"/Users/shelwitz/.cargo/registry/src/github.com-1ecc6299db9ec823/bio-0.39.0/src/stats/hmm/mod.rs","byte_start":719369,"byte_end":719372,"line_start":14,"line_end":14,"column_start":1,"column_end":4}},{"value":"/ ```rust","span":{"file_name":"/Users/shelwitz/.cargo/registry/src/github.com-1ecc6299db9ec823/bio-0.39.0/src/stats/hmm/mod.rs","byte_start":719373,"byte_end":719384,"line_start":15,"line_end":15,"column_start":1,"column_end":12}},{"value":"/ use approx::assert_relative_eq;","span":{"file_name":"/Users/shelwitz/.cargo/registry/src/github.com-1ecc6299db9ec823/bio-0.39.0/src/stats/hmm/mod.rs","byte_start":719385,"byte_end":719420,"line_start":16,"line_end":16,"column_start":1,"column_end":36}},{"value":"/ use bio::stats::hmm::discrete_emission::Model as DiscreteEmissionHMM;","span":{"file_name":"/Users/shelwitz/.cargo/registry/src/github.com-1ecc6299db9ec823/bio-0.39.0/src/stats/hmm/mod.rs","byte_start":719421,"byte_end":719494,"line_start":17,"line_end":17,"column_start":1,"column_end":74}},{"value":"/ use bio::stats::hmm::viterbi;","span":{"file_name":"/Users/shelwitz/.cargo/registry/src/github.com-1ecc6299db9ec823/bio-0.39.0/src/stats/hmm/mod.rs","byte_start":719495,"byte_end":719528,"line_start":18,"line_end":18,"column_start":1,"column_end":34}},{"value":"/ use bio::stats::Prob;","span":{"file_name":"/Users/shelwitz/.cargo/registry/src/github.com-1ecc6299db9ec823/bio-0.39.0/src/stats/hmm/mod.rs","byte_start":719529,"byte_end":719554,"line_start":19,"line_end":19,"column_start":1,"column_end":26}},{"value":"/ use ndarray::array;","span":{"file_name":"/Users/shelwitz/.cargo/registry/src/github.com-1ecc6299db9ec823/bio-0.39.0/src/stats/hmm/mod.rs","byte_start":719555,"byte_end":719578,"line_start":20,"line_end":20,"column_start":1,"column_end":24}},{"value":"/","span":{"file_name":"/Users/shelwitz/.cargo/registry/src/github.com-1ecc6299db9ec823/bio-0.39.0/src/stats/hmm/mod.rs","byte_start":719579,"byte_end":719582,"line_start":21,"line_end":21,"column_start":1,"column_end":4}},{"value":"/ let transition = array![[0.5, 0.5], [0.4, 0.6]];","span":{"file_name":"/Users/shelwitz/.cargo/registry/src/github.com-1ecc6299db9ec823/bio-0.39.0/src/stats/hmm/mod.rs","byte_start":719583,"byte_end":719635,"line_start":22,"line_end":22,"column_start":1,"column_end":53}},{"value":"/ let observation = array![[0.2, 0.3, 0.3, 0.2], [0.3, 0.2, 0.2, 0.3]];","span":{"file_name":"/Users/shelwitz/.cargo/registry/src/github.com-1ecc6299db9ec823/bio-0.39.0/src/stats/hmm/mod.rs","byte_start":719636,"byte_end":719709,"line_start":23,"line_end":23,"column_start":1,"column_end":74}},{"value":"/ let initial = array![0.5, 0.5];","span":{"file_name":"/Users/shelwitz/.cargo/registry/src/github.com-1ecc6299db9ec823/bio-0.39.0/src/stats/hmm/mod.rs","byte_start":719710,"byte_end":719745,"line_start":24,"line_end":24,"column_start":1,"column_end":36}},{"value":"/","span":{"file_name":"/Users/shelwitz/.cargo/registry/src/github.com-1ecc6299db9ec823/bio-0.39.0/src/stats/hmm/mod.rs","byte_start":719746,"byte_end":719749,"line_start":25,"line_end":25,"column_start":1,"column_end":4}},{"value":"/ let hmm = DiscreteEmissionHMM::with_float(&transition, &observation, &initial)","span":{"file_name":"/Users/shelwitz/.cargo/registry/src/github.com-1ecc6299db9ec823/bio-0.39.0/src/stats/hmm/mod.rs","byte_start":719750,"byte_end":719832,"line_start":26,"line_end":26,"column_start":1,"column_end":83}},{"value":"/     .expect(\"Dimensions should be consistent\");","span":{"file_name":"/Users/shelwitz/.cargo/registry/src/github.com-1ecc6299db9ec823/bio-0.39.0/src/stats/hmm/mod.rs","byte_start":719833,"byte_end":719884,"line_start":27,"line_end":27,"column_start":1,"column_end":52}},{"value":"/ let (path, log_prob) = viterbi(&hmm, &vec![2, 2, 1, 0, 1, 3, 2, 0, 0]);","span":{"file_name":"/Users/shelwitz/.cargo/registry/src/github.com-1ecc6299db9ec823/bio-0.39.0/src/stats/hmm/mod.rs","byte_start":719885,"byte_end":719960,"line_start":28,"line_end":28,"column_start":1,"column_end":76}},{"value":"/ let prob = Prob::from(log_prob);","span":{"file_name":"/Users/shelwitz/.cargo/registry/src/github.com-1ecc6299db9ec823/bio-0.39.0/src/stats/hmm/mod.rs","byte_start":719961,"byte_end":719997,"line_start":29,"line_end":29,"column_start":1,"column_end":37}},{"value":"/ assert_relative_eq!(4.25e-8_f64, *prob, epsilon = 1e-9_f64);","span":{"file_name":"/Users/shelwitz/.cargo/registry/src/github.com-1ecc6299db9ec823/bio-0.39.0/src/stats/hmm/mod.rs","byte_start":719998,"byte_end":720062,"line_start":30,"line_end":30,"column_start":1,"column_end":65}},{"value":"/ ```","span":{"file_name":"/Users/shelwitz/.cargo/registry/src/github.com-1ecc6299db9ec823/bio-0.39.0/src/stats/hmm/mod.rs","byte_start":720063,"byte_end":720070,"line_start":31,"line_end":31,"column_start":1,"column_end":8}},{"value":"/","span":{"file_name":"/Users/shelwitz/.cargo/registry/src/github.com-1ecc6299db9ec823/bio-0.39.0/src/stats/hmm/mod.rs","byte_start":720071,"byte_end":720074,"line_start":32,"line_end":32,"column_start":1,"column_end":4}},{"value":"/ ### Continuous (Gaussian) Emission Distribution","span":{"file_name":"/Users/shelwitz/.cargo/registry/src/github.com-1ecc6299db9ec823/bio-0.39.0/src/stats/hmm/mod.rs","byte_start":720075,"byte_end":720126,"line_start":33,"line_end":33,"column_start":1,"column_end":52}},{"value":"/","span":{"file_name":"/Users/shelwitz/.cargo/registry/src/github.com-1ecc6299db9ec823/bio-0.39.0/src/stats/hmm/mod.rs","byte_start":720127,"byte_end":720130,"line_start":34,"line_end":34,"column_start":1,"column_end":4}},{"value":"/ ```rust","span":{"file_name":"/Users/shelwitz/.cargo/registry/src/github.com-1ecc6299db9ec823/bio-0.39.0/src/stats/hmm/mod.rs","byte_start":720131,"byte_end":720142,"line_start":35,"line_end":35,"column_start":1,"column_end":12}},{"value":"/ use approx::assert_relative_eq;","span":{"file_name":"/Users/shelwitz/.cargo/registry/src/github.com-1ecc6299db9ec823/bio-0.39.0/src/stats/hmm/mod.rs","byte_start":720143,"byte_end":720178,"line_start":36,"line_end":36,"column_start":1,"column_end":36}},{"value":"/ use bio::stats::hmm::univariate_continuous_emission::GaussianModel as GaussianHMM;","span":{"file_name":"/Users/shelwitz/.cargo/registry/src/github.com-1ecc6299db9ec823/bio-0.39.0/src/stats/hmm/mod.rs","byte_start":720179,"byte_end":720265,"line_start":37,"line_end":37,"column_start":1,"column_end":87}},{"value":"/ use bio::stats::hmm::viterbi;","span":{"file_name":"/Users/shelwitz/.cargo/registry/src/github.com-1ecc6299db9ec823/bio-0.39.0/src/stats/hmm/mod.rs","byte_start":720266,"byte_end":720299,"line_start":38,"line_end":38,"column_start":1,"column_end":34}},{"value":"/ use bio::stats::Prob;","span":{"file_name":"/Users/shelwitz/.cargo/registry/src/github.com-1ecc6299db9ec823/bio-0.39.0/src/stats/hmm/mod.rs","byte_start":720300,"byte_end":720325,"line_start":39,"line_end":39,"column_start":1,"column_end":26}},{"value":"/ use ndarray::array;","span":{"file_name":"/Users/shelwitz/.cargo/registry/src/github.com-1ecc6299db9ec823/bio-0.39.0/src/stats/hmm/mod.rs","byte_start":720326,"byte_end":720349,"line_start":40,"line_end":40,"column_start":1,"column_end":24}},{"value":"/ use statrs::distribution::Normal;","span":{"file_name":"/Users/shelwitz/.cargo/registry/src/github.com-1ecc6299db9ec823/bio-0.39.0/src/stats/hmm/mod.rs","byte_start":720350,"byte_end":720387,"line_start":41,"line_end":41,"column_start":1,"column_end":38}},{"value":"/","span":{"file_name":"/Users/shelwitz/.cargo/registry/src/github.com-1ecc6299db9ec823/bio-0.39.0/src/stats/hmm/mod.rs","byte_start":720388,"byte_end":720391,"line_start":42,"line_end":42,"column_start":1,"column_end":4}},{"value":"/ let transition = array![[0.5, 0.5], [0.4, 0.6]];","span":{"file_name":"/Users/shelwitz/.cargo/registry/src/github.com-1ecc6299db9ec823/bio-0.39.0/src/stats/hmm/mod.rs","byte_start":720392,"byte_end":720444,"line_start":43,"line_end":43,"column_start":1,"column_end":53}},{"value":"/ let observation = vec![","span":{"file_name":"/Users/shelwitz/.cargo/registry/src/github.com-1ecc6299db9ec823/bio-0.39.0/src/stats/hmm/mod.rs","byte_start":720445,"byte_end":720472,"line_start":44,"line_end":44,"column_start":1,"column_end":28}},{"value":"/     Normal::new(0.0, 1.0).unwrap(),","span":{"file_name":"/Users/shelwitz/.cargo/registry/src/github.com-1ecc6299db9ec823/bio-0.39.0/src/stats/hmm/mod.rs","byte_start":720473,"byte_end":720512,"line_start":45,"line_end":45,"column_start":1,"column_end":40}},{"value":"/     Normal::new(2.0, 1.0).unwrap(),","span":{"file_name":"/Users/shelwitz/.cargo/registry/src/github.com-1ecc6299db9ec823/bio-0.39.0/src/stats/hmm/mod.rs","byte_start":720513,"byte_end":720552,"line_start":46,"line_end":46,"column_start":1,"column_end":40}},{"value":"/ ];","span":{"file_name":"/Users/shelwitz/.cargo/registry/src/github.com-1ecc6299db9ec823/bio-0.39.0/src/stats/hmm/mod.rs","byte_start":720553,"byte_end":720559,"line_start":47,"line_end":47,"column_start":1,"column_end":7}},{"value":"/ let initial = array![0.5, 0.5];","span":{"file_name":"/Users/shelwitz/.cargo/registry/src/github.com-1ecc6299db9ec823/bio-0.39.0/src/stats/hmm/mod.rs","byte_start":720560,"byte_end":720595,"line_start":48,"line_end":48,"column_start":1,"column_end":36}},{"value":"/","span":{"file_name":"/Users/shelwitz/.cargo/registry/src/github.com-1ecc6299db9ec823/bio-0.39.0/src/stats/hmm/mod.rs","byte_start":720596,"byte_end":720599,"line_start":49,"line_end":49,"column_start":1,"column_end":4}},{"value":"/ let hmm = GaussianHMM::with_float(&transition, observation, &initial)","span":{"file_name":"/Users/shelwitz/.cargo/registry/src/github.com-1ecc6299db9ec823/bio-0.39.0/src/stats/hmm/mod.rs","byte_start":720600,"byte_end":720673,"line_start":50,"line_end":50,"column_start":1,"column_end":74}},{"value":"/     .expect(\"Dimensions should be consistent\");","span":{"file_name":"/Users/shelwitz/.cargo/registry/src/github.com-1ecc6299db9ec823/bio-0.39.0/src/stats/hmm/mod.rs","byte_start":720674,"byte_end":720725,"line_start":51,"line_end":51,"column_start":1,"column_end":52}},{"value":"/ let (path, log_prob) = viterbi(","span":{"file_name":"/Users/shelwitz/.cargo/registry/src/github.com-1ecc6299db9ec823/bio-0.39.0/src/stats/hmm/mod.rs","byte_start":720726,"byte_end":720761,"line_start":52,"line_end":52,"column_start":1,"column_end":36}},{"value":"/     &hmm,","span":{"file_name":"/Users/shelwitz/.cargo/registry/src/github.com-1ecc6299db9ec823/bio-0.39.0/src/stats/hmm/mod.rs","byte_start":720762,"byte_end":720775,"line_start":53,"line_end":53,"column_start":1,"column_end":14}},{"value":"/     &vec![-0.1, 0.1, -0.2, 0.5, 0.8, 1.1, 1.2, 1.5, 0.5, 0.2],","span":{"file_name":"/Users/shelwitz/.cargo/registry/src/github.com-1ecc6299db9ec823/bio-0.39.0/src/stats/hmm/mod.rs","byte_start":720776,"byte_end":720842,"line_start":54,"line_end":54,"column_start":1,"column_end":67}},{"value":"/ );","span":{"file_name":"/Users/shelwitz/.cargo/registry/src/github.com-1ecc6299db9ec823/bio-0.39.0/src/stats/hmm/mod.rs","byte_start":720843,"byte_end":720849,"line_start":55,"line_end":55,"column_start":1,"column_end":7}},{"value":"/ let prob = Prob::from(log_prob);","span":{"file_name":"/Users/shelwitz/.cargo/registry/src/github.com-1ecc6299db9ec823/bio-0.39.0/src/stats/hmm/mod.rs","byte_start":720850,"byte_end":720886,"line_start":56,"line_end":56,"column_start":1,"column_end":37}},{"value":"/ assert_relative_eq!(2.64e-8_f64, *prob, epsilon = 1e-9_f64);","span":{"file_name":"/Users/shelwitz/.cargo/registry/src/github.com-1ecc6299db9ec823/bio-0.39.0/src/stats/hmm/mod.rs","byte_start":720887,"byte_end":720951,"line_start":57,"line_end":57,"column_start":1,"column_end":65}},{"value":"/ ```","span":{"file_name":"/Users/shelwitz/.cargo/registry/src/github.com-1ecc6299db9ec823/bio-0.39.0/src/stats/hmm/mod.rs","byte_start":720952,"byte_end":720959,"line_start":58,"line_end":58,"column_start":1,"column_end":8}},{"value":"/","span":{"file_name":"/Users/shelwitz/.cargo/registry/src/github.com-1ecc6299db9ec823/bio-0.39.0/src/stats/hmm/mod.rs","byte_start":720960,"byte_end":720963,"line_start":59,"line_end":59,"column_start":1,"column_end":4}},{"value":"/ ### Trainning a Discrete Emission Model with Baum-Welch algorithm","span":{"file_name":"/Users/shelwitz/.cargo/registry/src/github.com-1ecc6299db9ec823/bio-0.39.0/src/stats/hmm/mod.rs","byte_start":720964,"byte_end":721033,"line_start":60,"line_end":60,"column_start":1,"column_end":70}},{"value":"/","span":{"file_name":"/Users/shelwitz/.cargo/registry/src/github.com-1ecc6299db9ec823/bio-0.39.0/src/stats/hmm/mod.rs","byte_start":721034,"byte_end":721037,"line_start":61,"line_end":61,"column_start":1,"column_end":4}},{"value":"/ We construct the example from Jason Eisner lecture which can be followed along","span":{"file_name":"/Users/shelwitz/.cargo/registry/src/github.com-1ecc6299db9ec823/bio-0.39.0/src/stats/hmm/mod.rs","byte_start":721038,"byte_end":721120,"line_start":62,"line_end":62,"column_start":1,"column_end":83}},{"value":"/ with his spreadsheet ([link](http://www.cs.jhu.edu/~jason/papers/#eisner-2002-tnlp)).","span":{"file_name":"/Users/shelwitz/.cargo/registry/src/github.com-1ecc6299db9ec823/bio-0.39.0/src/stats/hmm/mod.rs","byte_start":721121,"byte_end":721210,"line_start":63,"line_end":63,"column_start":1,"column_end":90}},{"value":"/ Take a look at tests in source file.","span":{"file_name":"/Users/shelwitz/.cargo/registry/src/github.com-1ecc6299db9ec823/bio-0.39.0/src/stats/hmm/mod.rs","byte_start":721211,"byte_end":721251,"line_start":64,"line_end":64,"column_start":1,"column_end":41}},{"value":"/","span":{"file_name":"/Users/shelwitz/.cargo/registry/src/github.com-1ecc6299db9ec823/bio-0.39.0/src/stats/hmm/mod.rs","byte_start":721252,"byte_end":721255,"line_start":65,"line_end":65,"column_start":1,"column_end":4}},{"value":"/ ## Numeric Stability","span":{"file_name":"/Users/shelwitz/.cargo/registry/src/github.com-1ecc6299db9ec823/bio-0.39.0/src/stats/hmm/mod.rs","byte_start":721256,"byte_end":721280,"line_start":66,"line_end":66,"column_start":1,"column_end":25}},{"value":"/","span":{"file_name":"/Users/shelwitz/.cargo/registry/src/github.com-1ecc6299db9ec823/bio-0.39.0/src/stats/hmm/mod.rs","byte_start":721281,"byte_end":721284,"line_start":67,"line_end":67,"column_start":1,"column_end":4}},{"value":"/ The implementation uses log-scale probabilities for numeric stability.","span":{"file_name":"/Users/shelwitz/.cargo/registry/src/github.com-1ecc6299db9ec823/bio-0.39.0/src/stats/hmm/mod.rs","byte_start":721285,"byte_end":721359,"line_start":68,"line_end":68,"column_start":1,"column_end":75}},{"value":"/","span":{"file_name":"/Users/shelwitz/.cargo/registry/src/github.com-1ecc6299db9ec823/bio-0.39.0/src/stats/hmm/mod.rs","byte_start":721360,"byte_end":721363,"line_start":69,"line_end":69,"column_start":1,"column_end":4}},{"value":"/ ## Limitations","span":{"file_name":"/Users/shelwitz/.cargo/registry/src/github.com-1ecc6299db9ec823/bio-0.39.0/src/stats/hmm/mod.rs","byte_start":721364,"byte_end":721382,"line_start":70,"line_end":70,"column_start":1,"column_end":19}},{"value":"/","span":{"file_name":"/Users/shelwitz/.cargo/registry/src/github.com-1ecc6299db9ec823/bio-0.39.0/src/stats/hmm/mod.rs","byte_start":721383,"byte_end":721386,"line_start":71,"line_end":71,"column_start":1,"column_end":4}},{"value":"/ Currently, only discrete and single-variate Gaussian continuous HMMs are implemented.","span":{"file_name":"/Users/shelwitz/.cargo/registry/src/github.com-1ecc6299db9ec823/bio-0.39.0/src/stats/hmm/mod.rs","byte_start":721387,"byte_end":721476,"line_start":72,"line_end":72,"column_start":1,"column_end":90}},{"value":"/ Also, only dense transition matrices and trainning of discrete models are supported.","span":{"file_name":"/Users/shelwitz/.cargo/registry/src/github.com-1ecc6299db9ec823/bio-0.39.0/src/stats/hmm/mod.rs","byte_start":721477,"byte_end":721565,"line_start":73,"line_end":73,"column_start":1,"column_end":89}},{"value":"/","span":{"file_name":"/Users/shelwitz/.cargo/registry/src/github.com-1ecc6299db9ec823/bio-0.39.0/src/stats/hmm/mod.rs","byte_start":721566,"byte_end":721569,"line_start":74,"line_end":74,"column_start":1,"column_end":4}},{"value":"/ ## References","span":{"file_name":"/Users/shelwitz/.cargo/registry/src/github.com-1ecc6299db9ec823/bio-0.39.0/src/stats/hmm/mod.rs","byte_start":721570,"byte_end":721587,"line_start":75,"line_end":75,"column_start":1,"column_end":18}},{"value":"/","span":{"file_name":"/Users/shelwitz/.cargo/registry/src/github.com-1ecc6299db9ec823/bio-0.39.0/src/stats/hmm/mod.rs","byte_start":721588,"byte_end":721591,"line_start":76,"line_end":76,"column_start":1,"column_end":4}},{"value":"/ - Rabiner, Lawrence R. \"A tutorial on hidden Markov models and selected applications","span":{"file_name":"/Users/shelwitz/.cargo/registry/src/github.com-1ecc6299db9ec823/bio-0.39.0/src/stats/hmm/mod.rs","byte_start":721592,"byte_end":721680,"line_start":77,"line_end":77,"column_start":1,"column_end":89}},{"value":"/   in speech recognition.\" Proceedings of the IEEE 77, no. 2 (1989): 257-286.","span":{"file_name":"/Users/shelwitz/.cargo/registry/src/github.com-1ecc6299db9ec823/bio-0.39.0/src/stats/hmm/mod.rs","byte_start":721681,"byte_end":721761,"line_start":78,"line_end":78,"column_start":1,"column_end":81}},{"value":"/ - Eisner, Jason \"An interactive spreadsheet for teaching the forward-backward algorithm.","span":{"file_name":"/Users/shelwitz/.cargo/registry/src/github.com-1ecc6299db9ec823/bio-0.39.0/src/stats/hmm/mod.rs","byte_start":721762,"byte_end":721854,"line_start":79,"line_end":79,"column_start":1,"column_end":93}},{"value":"/   in speech recognition.\" In ACL Workshop on Teaching NLP and CL (2002).","span":{"file_name":"/Users/shelwitz/.cargo/registry/src/github.com-1ecc6299db9ec823/bio-0.39.0/src/stats/hmm/mod.rs","byte_start":721855,"byte_end":721931,"line_start":80,"line_end":80,"column_start":1,"column_end":77}}]},{"kind":"Mod","id":{"krate":0,"index":2607},"span":{"file_name":"/Users/shelwitz/.cargo/registry/src/github.com-1ecc6299db9ec823/bio-0.39.0/src/stats/hmm/errors.rs","byte_start":0,"byte_end":0,"line_start":1,"line_end":1,"column_start":1,"column_end":1},"name":"errors","qualname":"::stats::hmm::errors","value":"/Users/shelwitz/.cargo/registry/src/github.com-1ecc6299db9ec823/bio-0.39.0/src/stats/hmm/errors.rs","parent":null,"children":[{"krate":0,"index":2608},{"krate":0,"index":5708},{"krate":0,"index":5709},{"krate":0,"index":5710},{"krate":0,"index":5712},{"krate":0,"index":5714},{"krate":0,"index":5715},{"krate":0,"index":2611}],"decl_id":null,"docs":" Error definitions for the `hmm` module.\n","sig":null,"attributes":[{"value":"/ Error definitions for the `hmm` module.","span":{"file_name":"/Users/shelwitz/.cargo/registry/src/github.com-1ecc6299db9ec823/bio-0.39.0/src/stats/hmm/errors.rs","byte_start":776850,"byte_end":776893,"line_start":6,"line_end":6,"column_start":1,"column_end":44}}]},{"kind":"StructVariant","id":{"krate":0,"index":5718},"span":{"file_name":"/Users/shelwitz/.cargo/registry/src/github.com-1ecc6299db9ec823/bio-0.39.0/src/stats/hmm/errors.rs","byte_start":777149,"byte_end":777165,"line_start":19,"line_end":19,"column_start":5,"column_end":21},"name":"InvalidDimension","qualname":"::stats::hmm::errors::Error::InvalidDimension","value":"Error::InvalidDimension { an0, an1, bn, bm, pin }","parent":{"krate":0,"index":5708},"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[{"value":"error(\"inferred from A: N_0={}, N_1={} (must be equal), from B: N={}, M={}, from pi: N={}\",\n        an0, an1, bn, bm, pin)","span":{"file_name":"/Users/shelwitz/.cargo/registry/src/github.com-1ecc6299db9ec823/bio-0.39.0/src/stats/hmm/errors.rs","byte_start":776973,"byte_end":777144,"line_start":11,"line_end":18,"column_start":5,"column_end":7}}]},{"kind":"Enum","id":{"krate":0,"index":5708},"span":{"file_name":"/Users/shelwitz/.cargo/registry/src/github.com-1ecc6299db9ec823/bio-0.39.0/src/stats/hmm/errors.rs","byte_start":776961,"byte_end":776966,"line_start":10,"line_end":10,"column_start":10,"column_end":15},"name":"Error","qualname":"::stats::hmm::errors::Error","value":"pub enum Error {\n    InvalidDimension {\n        an0: usize,\n        an1: usize,\n        bn: usize,\n        bm: usize,\n        pin: usize,\n    },\n}","parent":null,"children":[{"krate":0,"index":5718}],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Type","id":{"krate":0,"index":2611},"span":{"file_name":"/Users/shelwitz/.cargo/registry/src/github.com-1ecc6299db9ec823/bio-0.39.0/src/stats/hmm/errors.rs","byte_start":777284,"byte_end":777290,"line_start":27,"line_end":27,"column_start":10,"column_end":16},"name":"Result","qualname":"::stats::hmm::errors::Result","value":"std::result::Result<T, E>","parent":null,"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Struct","id":{"krate":0,"index":5724},"span":{"file_name":"/Users/shelwitz/.cargo/registry/src/github.com-1ecc6299db9ec823/bio-0.39.0/src/stats/hmm/mod.rs","byte_start":722522,"byte_end":722527,"line_start":113,"line_end":113,"column_start":16,"column_end":21},"name":"State","qualname":"::stats::hmm::State","value":"","parent":null,"children":[],"decl_id":null,"docs":" A newtype for HMM states.\n","sig":null,"attributes":[]},{"kind":"Field","id":{"krate":0,"index":5726},"span":{"file_name":"/Users/shelwitz/.cargo/registry/src/github.com-1ecc6299db9ec823/bio-0.39.0/src/stats/hmm/mod.rs","byte_start":722528,"byte_end":722537,"line_start":113,"line_end":113,"column_start":22,"column_end":31},"name":"0","qualname":"::stats::hmm::State::0","value":"usize","parent":{"krate":0,"index":5724},"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Struct","id":{"krate":0,"index":2655},"span":{"file_name":"/Users/shelwitz/.cargo/registry/src/github.com-1ecc6299db9ec823/bio-0.39.0/src/stats/hmm/mod.rs","byte_start":722596,"byte_end":722605,"line_start":117,"line_end":117,"column_start":12,"column_end":21},"name":"StateIter","qualname":"::stats::hmm::StateIter","value":"StateIter {  }","parent":null,"children":[{"krate":0,"index":2656},{"krate":0,"index":2657}],"decl_id":null,"docs":" Iterate over the states of a `Model`.\n","sig":null,"attributes":[{"value":"/ Iterate over the states of a `Model`.","span":{"file_name":"/Users/shelwitz/.cargo/registry/src/github.com-1ecc6299db9ec823/bio-0.39.0/src/stats/hmm/mod.rs","byte_start":722543,"byte_end":722584,"line_start":116,"line_end":116,"column_start":1,"column_end":42}}]},{"kind":"Method","id":{"krate":0,"index":2659},"span":{"file_name":"/Users/shelwitz/.cargo/registry/src/github.com-1ecc6299db9ec823/bio-0.39.0/src/stats/hmm/mod.rs","byte_start":722692,"byte_end":722695,"line_start":124,"line_end":124,"column_start":12,"column_end":15},"name":"new","qualname":"<StateIter>::new","value":"pub fn new(usize) -> Self","parent":null,"children":[],"decl_id":null,"docs":" Constructor.\n","sig":null,"attributes":[{"value":"/ Constructor.","span":{"file_name":"/Users/shelwitz/.cargo/registry/src/github.com-1ecc6299db9ec823/bio-0.39.0/src/stats/hmm/mod.rs","byte_start":722664,"byte_end":722680,"line_start":123,"line_end":123,"column_start":5,"column_end":21}}]},{"kind":"Struct","id":{"krate":0,"index":5743},"span":{"file_name":"/Users/shelwitz/.cargo/registry/src/github.com-1ecc6299db9ec823/bio-0.39.0/src/stats/hmm/mod.rs","byte_start":723178,"byte_end":723193,"line_start":148,"line_end":148,"column_start":12,"column_end":27},"name":"StateTransition","qualname":"::stats::hmm::StateTransition","value":"StateTransition { src, dst }","parent":null,"children":[{"krate":0,"index":5744},{"krate":0,"index":5745}],"decl_id":null,"docs":" Transition between two states in a `Model`.\n","sig":null,"attributes":[{"value":"/ Transition between two states in a `Model`.","span":{"file_name":"/Users/shelwitz/.cargo/registry/src/github.com-1ecc6299db9ec823/bio-0.39.0/src/stats/hmm/mod.rs","byte_start":723078,"byte_end":723125,"line_start":146,"line_end":146,"column_start":1,"column_end":48}}]},{"kind":"Field","id":{"krate":0,"index":5744},"span":{"file_name":"/Users/shelwitz/.cargo/registry/src/github.com-1ecc6299db9ec823/bio-0.39.0/src/stats/hmm/mod.rs","byte_start":723238,"byte_end":723241,"line_start":150,"line_end":150,"column_start":9,"column_end":12},"name":"src","qualname":"::stats::hmm::StateTransition::src","value":"stats::hmm::State","parent":{"krate":0,"index":5743},"children":[],"decl_id":null,"docs":" Source of the transition.\n","sig":null,"attributes":[{"value":"/ Source of the transition.","span":{"file_name":"/Users/shelwitz/.cargo/registry/src/github.com-1ecc6299db9ec823/bio-0.39.0/src/stats/hmm/mod.rs","byte_start":723200,"byte_end":723229,"line_start":149,"line_end":149,"column_start":5,"column_end":34}}]},{"kind":"Field","id":{"krate":0,"index":5745},"span":{"file_name":"/Users/shelwitz/.cargo/registry/src/github.com-1ecc6299db9ec823/bio-0.39.0/src/stats/hmm/mod.rs","byte_start":723297,"byte_end":723300,"line_start":152,"line_end":152,"column_start":9,"column_end":12},"name":"dst","qualname":"::stats::hmm::StateTransition::dst","value":"stats::hmm::State","parent":{"krate":0,"index":5743},"children":[],"decl_id":null,"docs":" Destination of the transition.\n","sig":null,"attributes":[{"value":"/ Destination of the transition.","span":{"file_name":"/Users/shelwitz/.cargo/registry/src/github.com-1ecc6299db9ec823/bio-0.39.0/src/stats/hmm/mod.rs","byte_start":723254,"byte_end":723288,"line_start":151,"line_end":151,"column_start":5,"column_end":39}}]},{"kind":"Method","id":{"krate":0,"index":2664},"span":{"file_name":"/Users/shelwitz/.cargo/registry/src/github.com-1ecc6299db9ec823/bio-0.39.0/src/stats/hmm/mod.rs","byte_start":723367,"byte_end":723370,"line_start":157,"line_end":157,"column_start":12,"column_end":15},"name":"new","qualname":"<StateTransition>::new","value":"pub fn new(State, State) -> Self","parent":null,"children":[],"decl_id":null,"docs":" Constructor.\n","sig":null,"attributes":[{"value":"/ Constructor.","span":{"file_name":"/Users/shelwitz/.cargo/registry/src/github.com-1ecc6299db9ec823/bio-0.39.0/src/stats/hmm/mod.rs","byte_start":723339,"byte_end":723355,"line_start":156,"line_end":156,"column_start":5,"column_end":21}}]},{"kind":"Struct","id":{"krate":0,"index":2665},"span":{"file_name":"/Users/shelwitz/.cargo/registry/src/github.com-1ecc6299db9ec823/bio-0.39.0/src/stats/hmm/mod.rs","byte_start":723504,"byte_end":723523,"line_start":163,"line_end":163,"column_start":12,"column_end":31},"name":"StateTransitionIter","qualname":"::stats::hmm::StateTransitionIter","value":"StateTransitionIter {  }","parent":null,"children":[{"krate":0,"index":2666},{"krate":0,"index":2667},{"krate":0,"index":2668}],"decl_id":null,"docs":" Iterate over all state transitions of a `Model`.\n","sig":null,"attributes":[{"value":"/ Iterate over all state transitions of a `Model`.","span":{"file_name":"/Users/shelwitz/.cargo/registry/src/github.com-1ecc6299db9ec823/bio-0.39.0/src/stats/hmm/mod.rs","byte_start":723440,"byte_end":723492,"line_start":162,"line_end":162,"column_start":1,"column_end":53}}]},{"kind":"Method","id":{"krate":0,"index":2670},"span":{"file_name":"/Users/shelwitz/.cargo/registry/src/github.com-1ecc6299db9ec823/bio-0.39.0/src/stats/hmm/mod.rs","byte_start":723640,"byte_end":723643,"line_start":171,"line_end":171,"column_start":12,"column_end":15},"name":"new","qualname":"<StateTransitionIter>::new","value":"pub fn new(usize) -> Self","parent":null,"children":[],"decl_id":null,"docs":" Constructor.\n","sig":null,"attributes":[{"value":"/ Constructor.","span":{"file_name":"/Users/shelwitz/.cargo/registry/src/github.com-1ecc6299db9ec823/bio-0.39.0/src/stats/hmm/mod.rs","byte_start":723612,"byte_end":723628,"line_start":170,"line_end":170,"column_start":5,"column_end":21}}]},{"kind":"Trait","id":{"krate":0,"index":2674},"span":{"file_name":"/Users/shelwitz/.cargo/registry/src/github.com-1ecc6299db9ec823/bio-0.39.0/src/stats/hmm/mod.rs","byte_start":725172,"byte_end":725177,"line_start":213,"line_end":213,"column_start":11,"column_end":16},"name":"Model","qualname":"::stats::hmm::Model","value":"Model<Observation>","parent":null,"children":[{"krate":0,"index":2676},{"krate":0,"index":2677},{"krate":0,"index":2678},{"krate":0,"index":2679},{"krate":0,"index":2680},{"krate":0,"index":2681},{"krate":0,"index":2682},{"krate":0,"index":2683},{"krate":0,"index":2684}],"decl_id":null,"docs":" A trait for Hidden Markov Models (HMM) with generic `Observation` type.","sig":null,"attributes":[{"value":"/ A trait for Hidden Markov Models (HMM) with generic `Observation` type.","span":{"file_name":"/Users/shelwitz/.cargo/registry/src/github.com-1ecc6299db9ec823/bio-0.39.0/src/stats/hmm/mod.rs","byte_start":724320,"byte_end":724395,"line_start":199,"line_end":199,"column_start":1,"column_end":76}},{"value":"/","span":{"file_name":"/Users/shelwitz/.cargo/registry/src/github.com-1ecc6299db9ec823/bio-0.39.0/src/stats/hmm/mod.rs","byte_start":724396,"byte_end":724399,"line_start":200,"line_end":200,"column_start":1,"column_end":4}},{"value":"/ Rabiner (1989) defines a Hidden Markov Model λ as the tiple (*A*, *B*, π) of transition matrix","span":{"file_name":"/Users/shelwitz/.cargo/registry/src/github.com-1ecc6299db9ec823/bio-0.39.0/src/stats/hmm/mod.rs","byte_start":724400,"byte_end":724500,"line_start":201,"line_end":201,"column_start":1,"column_end":99}},{"value":"/ *A*, emission probabilities *B*, and initial state distribution π.  This has been generalized","span":{"file_name":"/Users/shelwitz/.cargo/registry/src/github.com-1ecc6299db9ec823/bio-0.39.0/src/stats/hmm/mod.rs","byte_start":724501,"byte_end":724599,"line_start":202,"line_end":202,"column_start":1,"column_end":98}},{"value":"/ in `Model` such that you implement `transition_prob()`, `observation_prob()`, and","span":{"file_name":"/Users/shelwitz/.cargo/registry/src/github.com-1ecc6299db9ec823/bio-0.39.0/src/stats/hmm/mod.rs","byte_start":724600,"byte_end":724685,"line_start":203,"line_end":203,"column_start":1,"column_end":86}},{"value":"/ `initial_prob()` (and the other methods; implementation of `transition_prob_idx()` can","span":{"file_name":"/Users/shelwitz/.cargo/registry/src/github.com-1ecc6299db9ec823/bio-0.39.0/src/stats/hmm/mod.rs","byte_start":724686,"byte_end":724776,"line_start":204,"line_end":204,"column_start":1,"column_end":91}},{"value":"/ optionally be implemented and your implementation of `transition_prob()` can then panic).","span":{"file_name":"/Users/shelwitz/.cargo/registry/src/github.com-1ecc6299db9ec823/bio-0.39.0/src/stats/hmm/mod.rs","byte_start":724777,"byte_end":724870,"line_start":205,"line_end":205,"column_start":1,"column_end":94}},{"value":"/","span":{"file_name":"/Users/shelwitz/.cargo/registry/src/github.com-1ecc6299db9ec823/bio-0.39.0/src/stats/hmm/mod.rs","byte_start":724871,"byte_end":724874,"line_start":206,"line_end":206,"column_start":1,"column_end":4}},{"value":"/ The inference algorithm implementations `viterbi()`, `forward()`, and `backward()` will work","span":{"file_name":"/Users/shelwitz/.cargo/registry/src/github.com-1ecc6299db9ec823/bio-0.39.0/src/stats/hmm/mod.rs","byte_start":724875,"byte_end":724971,"line_start":207,"line_end":207,"column_start":1,"column_end":97}},{"value":"/ with any implementation.","span":{"file_name":"/Users/shelwitz/.cargo/registry/src/github.com-1ecc6299db9ec823/bio-0.39.0/src/stats/hmm/mod.rs","byte_start":724972,"byte_end":725000,"line_start":208,"line_end":208,"column_start":1,"column_end":29}},{"value":"/","span":{"file_name":"/Users/shelwitz/.cargo/registry/src/github.com-1ecc6299db9ec823/bio-0.39.0/src/stats/hmm/mod.rs","byte_start":725001,"byte_end":725004,"line_start":209,"line_end":209,"column_start":1,"column_end":4}},{"value":"/ Consequently, this allows for the implementation of HMMs with both discrete and continuous","span":{"file_name":"/Users/shelwitz/.cargo/registry/src/github.com-1ecc6299db9ec823/bio-0.39.0/src/stats/hmm/mod.rs","byte_start":725005,"byte_end":725099,"line_start":210,"line_end":210,"column_start":1,"column_end":95}},{"value":"/ emission distributions.","span":{"file_name":"/Users/shelwitz/.cargo/registry/src/github.com-1ecc6299db9ec823/bio-0.39.0/src/stats/hmm/mod.rs","byte_start":725100,"byte_end":725127,"line_start":211,"line_end":211,"column_start":1,"column_end":28}},{"value":"allow(unconditional_recursion)","span":{"file_name":"/Users/shelwitz/.cargo/registry/src/github.com-1ecc6299db9ec823/bio-0.39.0/src/stats/hmm/mod.rs","byte_start":725128,"byte_end":725161,"line_start":212,"line_end":212,"column_start":1,"column_end":34}}]},{"kind":"Method","id":{"krate":0,"index":2676},"span":{"file_name":"/Users/shelwitz/.cargo/registry/src/github.com-1ecc6299db9ec823/bio-0.39.0/src/stats/hmm/mod.rs","byte_start":725243,"byte_end":725253,"line_start":215,"line_end":215,"column_start":8,"column_end":18},"name":"num_states","qualname":"::stats::hmm::Model::num_states","value":"pub fn num_states(&Self) -> usize","parent":{"krate":0,"index":2674},"children":[],"decl_id":null,"docs":" The number of states in the model.\n","sig":null,"attributes":[{"value":"/ The number of states in the model.","span":{"file_name":"/Users/shelwitz/.cargo/registry/src/github.com-1ecc6299db9ec823/bio-0.39.0/src/stats/hmm/mod.rs","byte_start":725197,"byte_end":725235,"line_start":214,"line_end":214,"column_start":5,"column_end":43}}]},{"kind":"Method","id":{"krate":0,"index":2677},"span":{"file_name":"/Users/shelwitz/.cargo/registry/src/github.com-1ecc6299db9ec823/bio-0.39.0/src/stats/hmm/mod.rs","byte_start":725330,"byte_end":725336,"line_start":218,"line_end":218,"column_start":8,"column_end":14},"name":"states","qualname":"::stats::hmm::Model::states","value":"pub fn states(&Self) -> StateIter","parent":{"krate":0,"index":2674},"children":[],"decl_id":null,"docs":" Return iterator over the states of an HMM.\n","sig":null,"attributes":[{"value":"/ Return iterator over the states of an HMM.","span":{"file_name":"/Users/shelwitz/.cargo/registry/src/github.com-1ecc6299db9ec823/bio-0.39.0/src/stats/hmm/mod.rs","byte_start":725276,"byte_end":725322,"line_start":217,"line_end":217,"column_start":5,"column_end":51}}]},{"kind":"Method","id":{"krate":0,"index":2678},"span":{"file_name":"/Users/shelwitz/.cargo/registry/src/github.com-1ecc6299db9ec823/bio-0.39.0/src/stats/hmm/mod.rs","byte_start":725414,"byte_end":725425,"line_start":221,"line_end":221,"column_start":8,"column_end":19},"name":"transitions","qualname":"::stats::hmm::Model::transitions","value":"pub fn transitions(&Self) -> StateTransitionIter","parent":{"krate":0,"index":2674},"children":[],"decl_id":null,"docs":" Returns an iterator of all transitions.\n","sig":null,"attributes":[{"value":"/ Returns an iterator of all transitions.","span":{"file_name":"/Users/shelwitz/.cargo/registry/src/github.com-1ecc6299db9ec823/bio-0.39.0/src/stats/hmm/mod.rs","byte_start":725363,"byte_end":725406,"line_start":220,"line_end":220,"column_start":5,"column_end":48}}]},{"kind":"Method","id":{"krate":0,"index":2679},"span":{"file_name":"/Users/shelwitz/.cargo/registry/src/github.com-1ecc6299db9ec823/bio-0.39.0/src/stats/hmm/mod.rs","byte_start":725532,"byte_end":725547,"line_start":224,"line_end":224,"column_start":8,"column_end":23},"name":"transition_prob","qualname":"::stats::hmm::Model::transition_prob","value":"pub fn transition_prob(&Self, State, State) -> LogProb","parent":{"krate":0,"index":2674},"children":[],"decl_id":null,"docs":" Transition probability between two states `from` and `to`.\n","sig":null,"attributes":[{"value":"/ Transition probability between two states `from` and `to`.","span":{"file_name":"/Users/shelwitz/.cargo/registry/src/github.com-1ecc6299db9ec823/bio-0.39.0/src/stats/hmm/mod.rs","byte_start":725462,"byte_end":725524,"line_start":223,"line_end":223,"column_start":5,"column_end":67}}]},{"kind":"Method","id":{"krate":0,"index":2680},"span":{"file_name":"/Users/shelwitz/.cargo/registry/src/github.com-1ecc6299db9ec823/bio-0.39.0/src/stats/hmm/mod.rs","byte_start":726101,"byte_end":726120,"line_start":235,"line_end":235,"column_start":8,"column_end":27},"name":"transition_prob_idx","qualname":"::stats::hmm::Model::transition_prob_idx","value":"pub fn transition_prob_idx(&Self, State, State, usize) -> LogProb","parent":{"krate":0,"index":2674},"children":[],"decl_id":null,"docs":" Transition probability between two states `from` and `to` for observation with index\n `_to_idx` (index of `to`).","sig":null,"attributes":[{"value":"/ Transition probability between two states `from` and `to` for observation with index","span":{"file_name":"/Users/shelwitz/.cargo/registry/src/github.com-1ecc6299db9ec823/bio-0.39.0/src/stats/hmm/mod.rs","byte_start":725596,"byte_end":725684,"line_start":226,"line_end":226,"column_start":5,"column_end":93}},{"value":"/ `_to_idx` (index of `to`).","span":{"file_name":"/Users/shelwitz/.cargo/registry/src/github.com-1ecc6299db9ec823/bio-0.39.0/src/stats/hmm/mod.rs","byte_start":725689,"byte_end":725719,"line_start":227,"line_end":227,"column_start":5,"column_end":35}},{"value":"/","span":{"file_name":"/Users/shelwitz/.cargo/registry/src/github.com-1ecc6299db9ec823/bio-0.39.0/src/stats/hmm/mod.rs","byte_start":725724,"byte_end":725727,"line_start":228,"line_end":228,"column_start":5,"column_end":8}},{"value":"/ This feature comes in handy in several applications of HMMs to biological sequences.","span":{"file_name":"/Users/shelwitz/.cargo/registry/src/github.com-1ecc6299db9ec823/bio-0.39.0/src/stats/hmm/mod.rs","byte_start":725732,"byte_end":725820,"line_start":229,"line_end":229,"column_start":5,"column_end":93}},{"value":"/ One prominent one is how XHMM by Fromer et al. (2014) uses the distance between target","span":{"file_name":"/Users/shelwitz/.cargo/registry/src/github.com-1ecc6299db9ec823/bio-0.39.0/src/stats/hmm/mod.rs","byte_start":725825,"byte_end":725915,"line_start":230,"line_end":230,"column_start":5,"column_end":95}},{"value":"/ regions for adjusting the transition probabilities.","span":{"file_name":"/Users/shelwitz/.cargo/registry/src/github.com-1ecc6299db9ec823/bio-0.39.0/src/stats/hmm/mod.rs","byte_start":725920,"byte_end":725975,"line_start":231,"line_end":231,"column_start":5,"column_end":60}},{"value":"/","span":{"file_name":"/Users/shelwitz/.cargo/registry/src/github.com-1ecc6299db9ec823/bio-0.39.0/src/stats/hmm/mod.rs","byte_start":725980,"byte_end":725983,"line_start":232,"line_end":232,"column_start":5,"column_end":8}},{"value":"/ The default implementation return the result of the position-independent","span":{"file_name":"/Users/shelwitz/.cargo/registry/src/github.com-1ecc6299db9ec823/bio-0.39.0/src/stats/hmm/mod.rs","byte_start":725988,"byte_end":726064,"line_start":233,"line_end":233,"column_start":5,"column_end":81}},{"value":"/ `transition_prob()`.","span":{"file_name":"/Users/shelwitz/.cargo/registry/src/github.com-1ecc6299db9ec823/bio-0.39.0/src/stats/hmm/mod.rs","byte_start":726069,"byte_end":726093,"line_start":234,"line_end":234,"column_start":5,"column_end":29}}]},{"kind":"Method","id":{"krate":0,"index":2681},"span":{"file_name":"/Users/shelwitz/.cargo/registry/src/github.com-1ecc6299db9ec823/bio-0.39.0/src/stats/hmm/mod.rs","byte_start":726285,"byte_end":726297,"line_start":240,"line_end":240,"column_start":8,"column_end":20},"name":"initial_prob","qualname":"::stats::hmm::Model::initial_prob","value":"pub fn initial_prob(&Self, State) -> LogProb","parent":{"krate":0,"index":2674},"children":[],"decl_id":null,"docs":" Initial probability given the HMM `state`.\n","sig":null,"attributes":[{"value":"/ Initial probability given the HMM `state`.","span":{"file_name":"/Users/shelwitz/.cargo/registry/src/github.com-1ecc6299db9ec823/bio-0.39.0/src/stats/hmm/mod.rs","byte_start":726231,"byte_end":726277,"line_start":239,"line_end":239,"column_start":5,"column_end":51}}]},{"kind":"Method","id":{"krate":0,"index":2682},"span":{"file_name":"/Users/shelwitz/.cargo/registry/src/github.com-1ecc6299db9ec823/bio-0.39.0/src/stats/hmm/mod.rs","byte_start":726405,"byte_end":726421,"line_start":243,"line_end":243,"column_start":8,"column_end":24},"name":"observation_prob","qualname":"::stats::hmm::Model::observation_prob","value":"pub fn observation_prob(&Self, State, &Observation) -> LogProb","parent":{"krate":0,"index":2674},"children":[],"decl_id":null,"docs":" Probability for the given observation in the given state.\n","sig":null,"attributes":[{"value":"/ Probability for the given observation in the given state.","span":{"file_name":"/Users/shelwitz/.cargo/registry/src/github.com-1ecc6299db9ec823/bio-0.39.0/src/stats/hmm/mod.rs","byte_start":726336,"byte_end":726397,"line_start":242,"line_end":242,"column_start":5,"column_end":66}}]},{"kind":"Method","id":{"krate":0,"index":2683},"span":{"file_name":"/Users/shelwitz/.cargo/registry/src/github.com-1ecc6299db9ec823/bio-0.39.0/src/stats/hmm/mod.rs","byte_start":726537,"byte_end":726545,"line_start":246,"line_end":246,"column_start":8,"column_end":16},"name":"end_prob","qualname":"::stats::hmm::Model::end_prob","value":"pub fn end_prob(&Self, State) -> LogProb","parent":{"krate":0,"index":2674},"children":[],"decl_id":null,"docs":" End probability given the HMM `state`.\n","sig":null,"attributes":[{"value":"/ End probability given the HMM `state`.","span":{"file_name":"/Users/shelwitz/.cargo/registry/src/github.com-1ecc6299db9ec823/bio-0.39.0/src/stats/hmm/mod.rs","byte_start":726487,"byte_end":726529,"line_start":245,"line_end":245,"column_start":5,"column_end":47}}]},{"kind":"Method","id":{"krate":0,"index":2684},"span":{"file_name":"/Users/shelwitz/.cargo/registry/src/github.com-1ecc6299db9ec823/bio-0.39.0/src/stats/hmm/mod.rs","byte_start":726625,"byte_end":726638,"line_start":250,"line_end":250,"column_start":8,"column_end":21},"name":"has_end_state","qualname":"::stats::hmm::Model::has_end_state","value":"pub fn has_end_state(&Self) -> bool","parent":{"krate":0,"index":2674},"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Function","id":{"krate":0,"index":2693},"span":{"file_name":"/Users/shelwitz/.cargo/registry/src/github.com-1ecc6299db9ec823/bio-0.39.0/src/stats/hmm/mod.rs","byte_start":729952,"byte_end":729959,"line_start":348,"line_end":348,"column_start":8,"column_end":15},"name":"viterbi","qualname":"::stats::hmm::viterbi","value":"pub fn viterbi<O, M: Model<O>>(&M, &[O]) -> (Vec<State>, LogProb)","parent":null,"children":[],"decl_id":null,"docs":" Execute Viterbi algorithm on the given slice of `Observation` values to get the maximum a\n posteriori (MAP) probability.","sig":null,"attributes":[{"value":"/ Execute Viterbi algorithm on the given slice of `Observation` values to get the maximum a","span":{"file_name":"/Users/shelwitz/.cargo/registry/src/github.com-1ecc6299db9ec823/bio-0.39.0/src/stats/hmm/mod.rs","byte_start":729375,"byte_end":729468,"line_start":331,"line_end":331,"column_start":1,"column_end":94}},{"value":"/ posteriori (MAP) probability.","span":{"file_name":"/Users/shelwitz/.cargo/registry/src/github.com-1ecc6299db9ec823/bio-0.39.0/src/stats/hmm/mod.rs","byte_start":729469,"byte_end":729502,"line_start":332,"line_end":332,"column_start":1,"column_end":34}},{"value":"/","span":{"file_name":"/Users/shelwitz/.cargo/registry/src/github.com-1ecc6299db9ec823/bio-0.39.0/src/stats/hmm/mod.rs","byte_start":729503,"byte_end":729506,"line_start":333,"line_end":333,"column_start":1,"column_end":4}},{"value":"/ ## Arguments","span":{"file_name":"/Users/shelwitz/.cargo/registry/src/github.com-1ecc6299db9ec823/bio-0.39.0/src/stats/hmm/mod.rs","byte_start":729507,"byte_end":729523,"line_start":334,"line_end":334,"column_start":1,"column_end":17}},{"value":"/","span":{"file_name":"/Users/shelwitz/.cargo/registry/src/github.com-1ecc6299db9ec823/bio-0.39.0/src/stats/hmm/mod.rs","byte_start":729524,"byte_end":729527,"line_start":335,"line_end":335,"column_start":1,"column_end":4}},{"value":"/ - `hmm` - the `Model` to run the Viterbi algorithm on","span":{"file_name":"/Users/shelwitz/.cargo/registry/src/github.com-1ecc6299db9ec823/bio-0.39.0/src/stats/hmm/mod.rs","byte_start":729528,"byte_end":729585,"line_start":336,"line_end":336,"column_start":1,"column_end":58}},{"value":"/ - `observations` - a slice of observation values to use in the algorithm","span":{"file_name":"/Users/shelwitz/.cargo/registry/src/github.com-1ecc6299db9ec823/bio-0.39.0/src/stats/hmm/mod.rs","byte_start":729586,"byte_end":729662,"line_start":337,"line_end":337,"column_start":1,"column_end":77}},{"value":"/","span":{"file_name":"/Users/shelwitz/.cargo/registry/src/github.com-1ecc6299db9ec823/bio-0.39.0/src/stats/hmm/mod.rs","byte_start":729663,"byte_end":729666,"line_start":338,"line_end":338,"column_start":1,"column_end":4}},{"value":"/ ## Result","span":{"file_name":"/Users/shelwitz/.cargo/registry/src/github.com-1ecc6299db9ec823/bio-0.39.0/src/stats/hmm/mod.rs","byte_start":729667,"byte_end":729680,"line_start":339,"line_end":339,"column_start":1,"column_end":14}},{"value":"/","span":{"file_name":"/Users/shelwitz/.cargo/registry/src/github.com-1ecc6299db9ec823/bio-0.39.0/src/stats/hmm/mod.rs","byte_start":729681,"byte_end":729684,"line_start":340,"line_end":340,"column_start":1,"column_end":4}},{"value":"/ The resulting pair *(s, p)* is the `Vec<State>` of most probable states given `hmm`","span":{"file_name":"/Users/shelwitz/.cargo/registry/src/github.com-1ecc6299db9ec823/bio-0.39.0/src/stats/hmm/mod.rs","byte_start":729685,"byte_end":729772,"line_start":341,"line_end":341,"column_start":1,"column_end":88}},{"value":"/ and `observations` as well as the probability (as `LogProb`) of path `s`.","span":{"file_name":"/Users/shelwitz/.cargo/registry/src/github.com-1ecc6299db9ec823/bio-0.39.0/src/stats/hmm/mod.rs","byte_start":729773,"byte_end":729850,"line_start":342,"line_end":342,"column_start":1,"column_end":78}},{"value":"/","span":{"file_name":"/Users/shelwitz/.cargo/registry/src/github.com-1ecc6299db9ec823/bio-0.39.0/src/stats/hmm/mod.rs","byte_start":729851,"byte_end":729854,"line_start":343,"line_end":343,"column_start":1,"column_end":4}},{"value":"/ ## Type Parameters","span":{"file_name":"/Users/shelwitz/.cargo/registry/src/github.com-1ecc6299db9ec823/bio-0.39.0/src/stats/hmm/mod.rs","byte_start":729855,"byte_end":729877,"line_start":344,"line_end":344,"column_start":1,"column_end":23}},{"value":"/","span":{"file_name":"/Users/shelwitz/.cargo/registry/src/github.com-1ecc6299db9ec823/bio-0.39.0/src/stats/hmm/mod.rs","byte_start":729878,"byte_end":729881,"line_start":345,"line_end":345,"column_start":1,"column_end":4}},{"value":"/ - `O` - the observation type","span":{"file_name":"/Users/shelwitz/.cargo/registry/src/github.com-1ecc6299db9ec823/bio-0.39.0/src/stats/hmm/mod.rs","byte_start":729882,"byte_end":729914,"line_start":346,"line_end":346,"column_start":1,"column_end":33}},{"value":"/ - `M` - type `Model` type","span":{"file_name":"/Users/shelwitz/.cargo/registry/src/github.com-1ecc6299db9ec823/bio-0.39.0/src/stats/hmm/mod.rs","byte_start":729915,"byte_end":729944,"line_start":347,"line_end":347,"column_start":1,"column_end":30}}]},{"kind":"Function","id":{"krate":0,"index":2696},"span":{"file_name":"/Users/shelwitz/.cargo/registry/src/github.com-1ecc6299db9ec823/bio-0.39.0/src/stats/hmm/mod.rs","byte_start":730744,"byte_end":730751,"line_start":371,"line_end":371,"column_start":8,"column_end":15},"name":"forward","qualname":"::stats::hmm::forward","value":"pub fn forward<O, M: Model<O>>(&M, &[O]) -> (Array2<LogProb>, LogProb)","parent":null,"children":[],"decl_id":null,"docs":" Execute the forward algorithm and return the forward probabilites as `LogProb` values\n and the resulting forward probability.","sig":null,"attributes":[{"value":"/ Execute the forward algorithm and return the forward probabilites as `LogProb` values","span":{"file_name":"/Users/shelwitz/.cargo/registry/src/github.com-1ecc6299db9ec823/bio-0.39.0/src/stats/hmm/mod.rs","byte_start":730129,"byte_end":730218,"line_start":353,"line_end":353,"column_start":1,"column_end":90}},{"value":"/ and the resulting forward probability.","span":{"file_name":"/Users/shelwitz/.cargo/registry/src/github.com-1ecc6299db9ec823/bio-0.39.0/src/stats/hmm/mod.rs","byte_start":730219,"byte_end":730261,"line_start":354,"line_end":354,"column_start":1,"column_end":43}},{"value":"/","span":{"file_name":"/Users/shelwitz/.cargo/registry/src/github.com-1ecc6299db9ec823/bio-0.39.0/src/stats/hmm/mod.rs","byte_start":730262,"byte_end":730265,"line_start":355,"line_end":355,"column_start":1,"column_end":4}},{"value":"/ ## Arguments","span":{"file_name":"/Users/shelwitz/.cargo/registry/src/github.com-1ecc6299db9ec823/bio-0.39.0/src/stats/hmm/mod.rs","byte_start":730266,"byte_end":730282,"line_start":356,"line_end":356,"column_start":1,"column_end":17}},{"value":"/","span":{"file_name":"/Users/shelwitz/.cargo/registry/src/github.com-1ecc6299db9ec823/bio-0.39.0/src/stats/hmm/mod.rs","byte_start":730283,"byte_end":730286,"line_start":357,"line_end":357,"column_start":1,"column_end":4}},{"value":"/ - `hmm` - the `Model` to run the forward algorithm on","span":{"file_name":"/Users/shelwitz/.cargo/registry/src/github.com-1ecc6299db9ec823/bio-0.39.0/src/stats/hmm/mod.rs","byte_start":730287,"byte_end":730344,"line_start":358,"line_end":358,"column_start":1,"column_end":58}},{"value":"/ - `observations` - a slice of observation values to use in the algorithm","span":{"file_name":"/Users/shelwitz/.cargo/registry/src/github.com-1ecc6299db9ec823/bio-0.39.0/src/stats/hmm/mod.rs","byte_start":730345,"byte_end":730421,"line_start":359,"line_end":359,"column_start":1,"column_end":77}},{"value":"/","span":{"file_name":"/Users/shelwitz/.cargo/registry/src/github.com-1ecc6299db9ec823/bio-0.39.0/src/stats/hmm/mod.rs","byte_start":730422,"byte_end":730425,"line_start":360,"line_end":360,"column_start":1,"column_end":4}},{"value":"/ ## Result","span":{"file_name":"/Users/shelwitz/.cargo/registry/src/github.com-1ecc6299db9ec823/bio-0.39.0/src/stats/hmm/mod.rs","byte_start":730426,"byte_end":730439,"line_start":361,"line_end":361,"column_start":1,"column_end":14}},{"value":"/","span":{"file_name":"/Users/shelwitz/.cargo/registry/src/github.com-1ecc6299db9ec823/bio-0.39.0/src/stats/hmm/mod.rs","byte_start":730440,"byte_end":730443,"line_start":362,"line_end":362,"column_start":1,"column_end":4}},{"value":"/ The resulting pair (*P*, *p*) is the forward probability table (`P[[s, o]]` is the entry","span":{"file_name":"/Users/shelwitz/.cargo/registry/src/github.com-1ecc6299db9ec823/bio-0.39.0/src/stats/hmm/mod.rs","byte_start":730444,"byte_end":730536,"line_start":363,"line_end":363,"column_start":1,"column_end":93}},{"value":"/ for state `s` and observation `o`) and the overall probability for `observations` (as","span":{"file_name":"/Users/shelwitz/.cargo/registry/src/github.com-1ecc6299db9ec823/bio-0.39.0/src/stats/hmm/mod.rs","byte_start":730537,"byte_end":730626,"line_start":364,"line_end":364,"column_start":1,"column_end":90}},{"value":"/ `LogProb`).","span":{"file_name":"/Users/shelwitz/.cargo/registry/src/github.com-1ecc6299db9ec823/bio-0.39.0/src/stats/hmm/mod.rs","byte_start":730627,"byte_end":730642,"line_start":365,"line_end":365,"column_start":1,"column_end":16}},{"value":"/","span":{"file_name":"/Users/shelwitz/.cargo/registry/src/github.com-1ecc6299db9ec823/bio-0.39.0/src/stats/hmm/mod.rs","byte_start":730643,"byte_end":730646,"line_start":366,"line_end":366,"column_start":1,"column_end":4}},{"value":"/ ## Type Parameters","span":{"file_name":"/Users/shelwitz/.cargo/registry/src/github.com-1ecc6299db9ec823/bio-0.39.0/src/stats/hmm/mod.rs","byte_start":730647,"byte_end":730669,"line_start":367,"line_end":367,"column_start":1,"column_end":23}},{"value":"/","span":{"file_name":"/Users/shelwitz/.cargo/registry/src/github.com-1ecc6299db9ec823/bio-0.39.0/src/stats/hmm/mod.rs","byte_start":730670,"byte_end":730673,"line_start":368,"line_end":368,"column_start":1,"column_end":4}},{"value":"/ - `O` - the observation type","span":{"file_name":"/Users/shelwitz/.cargo/registry/src/github.com-1ecc6299db9ec823/bio-0.39.0/src/stats/hmm/mod.rs","byte_start":730674,"byte_end":730706,"line_start":369,"line_end":369,"column_start":1,"column_end":33}},{"value":"/ - `M` - type `Model` type","span":{"file_name":"/Users/shelwitz/.cargo/registry/src/github.com-1ecc6299db9ec823/bio-0.39.0/src/stats/hmm/mod.rs","byte_start":730707,"byte_end":730736,"line_start":370,"line_end":370,"column_start":1,"column_end":30}}]},{"kind":"Function","id":{"krate":0,"index":2701},"span":{"file_name":"/Users/shelwitz/.cargo/registry/src/github.com-1ecc6299db9ec823/bio-0.39.0/src/stats/hmm/mod.rs","byte_start":732118,"byte_end":732126,"line_start":412,"line_end":412,"column_start":8,"column_end":16},"name":"backward","qualname":"::stats::hmm::backward","value":"pub fn backward<O, M: Model<O>>(&M, &[O]) -> (Array2<LogProb>, LogProb)","parent":null,"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Function","id":{"krate":0,"index":2708},"span":{"file_name":"/Users/shelwitz/.cargo/registry/src/github.com-1ecc6299db9ec823/bio-0.39.0/src/stats/hmm/mod.rs","byte_start":735715,"byte_end":735725,"line_start":493,"line_end":493,"column_start":8,"column_end":18},"name":"baum_welch","qualname":"::stats::hmm::baum_welch","value":"pub fn baum_welch<O: Debug + Eq + Hash + Ord, M: Model<O>>(&M, &[O])\n-> (Array1<LogProb>, Array2<LogProb>, Array2<LogProb>, Array1<LogProb>)","parent":null,"children":[],"decl_id":null,"docs":" Execute **one step** of Baum-Welch algorithm to find the maximum likelihood estimate of the parameters of a HMM given a set of observed\n feature vector and return the estimated initial state distribution (*π**), estimated transition matrix (*A**),\n  estimated emission probabilities matrix (*B**) and end probabilities vector (if the model has declared an end state beforehand).\n This function doesn't update the HMM parameters in the model and has been implemented for Discrete Emissions Models only.\n It return values as `LogProb`.","sig":null,"attributes":[{"value":"/ Execute **one step** of Baum-Welch algorithm to find the maximum likelihood estimate of the parameters of a HMM given a set of observed","span":{"file_name":"/Users/shelwitz/.cargo/registry/src/github.com-1ecc6299db9ec823/bio-0.39.0/src/stats/hmm/mod.rs","byte_start":734170,"byte_end":734309,"line_start":469,"line_end":469,"column_start":1,"column_end":140}},{"value":"/ feature vector and return the estimated initial state distribution (*π**), estimated transition matrix (*A**),","span":{"file_name":"/Users/shelwitz/.cargo/registry/src/github.com-1ecc6299db9ec823/bio-0.39.0/src/stats/hmm/mod.rs","byte_start":734310,"byte_end":734425,"line_start":470,"line_end":470,"column_start":1,"column_end":115}},{"value":"/  estimated emission probabilities matrix (*B**) and end probabilities vector (if the model has declared an end state beforehand).","span":{"file_name":"/Users/shelwitz/.cargo/registry/src/github.com-1ecc6299db9ec823/bio-0.39.0/src/stats/hmm/mod.rs","byte_start":734426,"byte_end":734559,"line_start":471,"line_end":471,"column_start":1,"column_end":134}},{"value":"/ This function doesn't update the HMM parameters in the model and has been implemented for Discrete Emissions Models only.","span":{"file_name":"/Users/shelwitz/.cargo/registry/src/github.com-1ecc6299db9ec823/bio-0.39.0/src/stats/hmm/mod.rs","byte_start":734560,"byte_end":734685,"line_start":472,"line_end":472,"column_start":1,"column_end":126}},{"value":"/ It return values as `LogProb`.","span":{"file_name":"/Users/shelwitz/.cargo/registry/src/github.com-1ecc6299db9ec823/bio-0.39.0/src/stats/hmm/mod.rs","byte_start":734686,"byte_end":734720,"line_start":473,"line_end":473,"column_start":1,"column_end":35}},{"value":"/","span":{"file_name":"/Users/shelwitz/.cargo/registry/src/github.com-1ecc6299db9ec823/bio-0.39.0/src/stats/hmm/mod.rs","byte_start":734721,"byte_end":734724,"line_start":474,"line_end":474,"column_start":1,"column_end":4}},{"value":"/ ## Arguments","span":{"file_name":"/Users/shelwitz/.cargo/registry/src/github.com-1ecc6299db9ec823/bio-0.39.0/src/stats/hmm/mod.rs","byte_start":734725,"byte_end":734741,"line_start":475,"line_end":475,"column_start":1,"column_end":17}},{"value":"/","span":{"file_name":"/Users/shelwitz/.cargo/registry/src/github.com-1ecc6299db9ec823/bio-0.39.0/src/stats/hmm/mod.rs","byte_start":734742,"byte_end":734745,"line_start":476,"line_end":476,"column_start":1,"column_end":4}},{"value":"/ - `hmm` - the `Model` to run the baum-welch or expected maximization algorithm on. It has to be a Discrete Model with a `Trainable` trait implemented.","span":{"file_name":"/Users/shelwitz/.cargo/registry/src/github.com-1ecc6299db9ec823/bio-0.39.0/src/stats/hmm/mod.rs","byte_start":734746,"byte_end":734900,"line_start":477,"line_end":477,"column_start":1,"column_end":155}},{"value":"/ - `observations` - a slice of observation values to use in the algorithm","span":{"file_name":"/Users/shelwitz/.cargo/registry/src/github.com-1ecc6299db9ec823/bio-0.39.0/src/stats/hmm/mod.rs","byte_start":734901,"byte_end":734977,"line_start":478,"line_end":478,"column_start":1,"column_end":77}},{"value":"/","span":{"file_name":"/Users/shelwitz/.cargo/registry/src/github.com-1ecc6299db9ec823/bio-0.39.0/src/stats/hmm/mod.rs","byte_start":734978,"byte_end":734981,"line_start":479,"line_end":479,"column_start":1,"column_end":4}},{"value":"/ ## Result","span":{"file_name":"/Users/shelwitz/.cargo/registry/src/github.com-1ecc6299db9ec823/bio-0.39.0/src/stats/hmm/mod.rs","byte_start":734982,"byte_end":734995,"line_start":480,"line_end":480,"column_start":1,"column_end":14}},{"value":"/","span":{"file_name":"/Users/shelwitz/.cargo/registry/src/github.com-1ecc6299db9ec823/bio-0.39.0/src/stats/hmm/mod.rs","byte_start":734996,"byte_end":734999,"line_start":481,"line_end":481,"column_start":1,"column_end":4}},{"value":"/ The resulting tuple (*π**, *A**, B*, E*) is the estimated initial probability table (`P[s]`),","span":{"file_name":"/Users/shelwitz/.cargo/registry/src/github.com-1ecc6299db9ec823/bio-0.39.0/src/stats/hmm/mod.rs","byte_start":735000,"byte_end":735098,"line_start":482,"line_end":482,"column_start":1,"column_end":98}},{"value":"/ the estimated transitions probability table (`P[[s, o]]` is the entry","span":{"file_name":"/Users/shelwitz/.cargo/registry/src/github.com-1ecc6299db9ec823/bio-0.39.0/src/stats/hmm/mod.rs","byte_start":735099,"byte_end":735172,"line_start":483,"line_end":483,"column_start":1,"column_end":74}},{"value":"/ for state `s1` and other state `s2`), the estimated emission probability table (`P[[s, s]]` is the entry","span":{"file_name":"/Users/shelwitz/.cargo/registry/src/github.com-1ecc6299db9ec823/bio-0.39.0/src/stats/hmm/mod.rs","byte_start":735173,"byte_end":735281,"line_start":484,"line_end":484,"column_start":1,"column_end":109}},{"value":"/ for state `s` and observation class `o`) and if we specify an end probability when building the model,","span":{"file_name":"/Users/shelwitz/.cargo/registry/src/github.com-1ecc6299db9ec823/bio-0.39.0/src/stats/hmm/mod.rs","byte_start":735282,"byte_end":735388,"line_start":485,"line_end":485,"column_start":1,"column_end":107}},{"value":"/ E* is the estimated end probabilities. Otherwise, E* is a vector with size equal to initial probability","span":{"file_name":"/Users/shelwitz/.cargo/registry/src/github.com-1ecc6299db9ec823/bio-0.39.0/src/stats/hmm/mod.rs","byte_start":735389,"byte_end":735496,"line_start":486,"line_end":486,"column_start":1,"column_end":108}},{"value":"/ and all values set to LogProb(1.0).  The values in all outputs are shown as `LogProb`.","span":{"file_name":"/Users/shelwitz/.cargo/registry/src/github.com-1ecc6299db9ec823/bio-0.39.0/src/stats/hmm/mod.rs","byte_start":735497,"byte_end":735587,"line_start":487,"line_end":487,"column_start":1,"column_end":91}},{"value":"/","span":{"file_name":"/Users/shelwitz/.cargo/registry/src/github.com-1ecc6299db9ec823/bio-0.39.0/src/stats/hmm/mod.rs","byte_start":735588,"byte_end":735591,"line_start":488,"line_end":488,"column_start":1,"column_end":4}},{"value":"/ ## Type Parameters","span":{"file_name":"/Users/shelwitz/.cargo/registry/src/github.com-1ecc6299db9ec823/bio-0.39.0/src/stats/hmm/mod.rs","byte_start":735592,"byte_end":735614,"line_start":489,"line_end":489,"column_start":1,"column_end":23}},{"value":"/","span":{"file_name":"/Users/shelwitz/.cargo/registry/src/github.com-1ecc6299db9ec823/bio-0.39.0/src/stats/hmm/mod.rs","byte_start":735615,"byte_end":735618,"line_start":490,"line_end":490,"column_start":1,"column_end":4}},{"value":"/ - `O` - the observation type (only discrete emissions)","span":{"file_name":"/Users/shelwitz/.cargo/registry/src/github.com-1ecc6299db9ec823/bio-0.39.0/src/stats/hmm/mod.rs","byte_start":735619,"byte_end":735677,"line_start":491,"line_end":491,"column_start":1,"column_end":59}},{"value":"/ - `M` - type `Model` type","span":{"file_name":"/Users/shelwitz/.cargo/registry/src/github.com-1ecc6299db9ec823/bio-0.39.0/src/stats/hmm/mod.rs","byte_start":735678,"byte_end":735707,"line_start":492,"line_end":492,"column_start":1,"column_end":30}}]},{"kind":"Trait","id":{"krate":0,"index":2717},"span":{"file_name":"/Users/shelwitz/.cargo/registry/src/github.com-1ecc6299db9ec823/bio-0.39.0/src/stats/hmm/mod.rs","byte_start":742292,"byte_end":742301,"line_start":655,"line_end":655,"column_start":11,"column_end":20},"name":"Trainable","qualname":"::stats::hmm::Trainable","value":"Trainable<Observation>","parent":null,"children":[{"krate":0,"index":2719},{"krate":0,"index":2720}],"decl_id":null,"docs":" A trait for trainning Hidden Markov Models (HMM) with generic `Observation` type using Baum-Welch algorithm.\n","sig":null,"attributes":[{"value":"/ A trait for trainning Hidden Markov Models (HMM) with generic `Observation` type using Baum-Welch algorithm.","span":{"file_name":"/Users/shelwitz/.cargo/registry/src/github.com-1ecc6299db9ec823/bio-0.39.0/src/stats/hmm/mod.rs","byte_start":742169,"byte_end":742281,"line_start":654,"line_end":654,"column_start":1,"column_end":113}}]},{"kind":"Method","id":{"krate":0,"index":2719},"span":{"file_name":"/Users/shelwitz/.cargo/registry/src/github.com-1ecc6299db9ec823/bio-0.39.0/src/stats/hmm/mod.rs","byte_start":742809,"byte_end":742825,"line_start":661,"line_end":661,"column_start":8,"column_end":24},"name":"train_baum_welch","qualname":"::stats::hmm::Trainable::train_baum_welch","value":"pub fn train_baum_welch(&Self, &[Vec<Observation>], Option<usize>,\n                        Option<f64>)\n-> (Array1<LogProb>, Array2<LogProb>, Array2<LogProb>, Array1<LogProb>)","parent":{"krate":0,"index":2717},"children":[],"decl_id":null,"docs":"  Iterative procedure to train the model using Baum-Welch algorithm given the training sequences.","sig":null,"attributes":[{"value":"/  Iterative procedure to train the model using Baum-Welch algorithm given the training sequences.","span":{"file_name":"/Users/shelwitz/.cargo/registry/src/github.com-1ecc6299db9ec823/bio-0.39.0/src/stats/hmm/mod.rs","byte_start":742321,"byte_end":742421,"line_start":656,"line_end":656,"column_start":5,"column_end":105}},{"value":"/","span":{"file_name":"/Users/shelwitz/.cargo/registry/src/github.com-1ecc6299db9ec823/bio-0.39.0/src/stats/hmm/mod.rs","byte_start":742426,"byte_end":742429,"line_start":657,"line_end":657,"column_start":5,"column_end":8}},{"value":"/ As arguments, a set of sequences (observations) and two optional argumets: maximum number of iterations (`n_iter`) and tolerance (`tol`).","span":{"file_name":"/Users/shelwitz/.cargo/registry/src/github.com-1ecc6299db9ec823/bio-0.39.0/src/stats/hmm/mod.rs","byte_start":742434,"byte_end":742575,"line_start":658,"line_end":658,"column_start":5,"column_end":146}},{"value":"/ The baum-welch iterative training procedure will stop either if it reaches the tolerance of the relative log-likelihood augmentation (default `1e-6`) or","span":{"file_name":"/Users/shelwitz/.cargo/registry/src/github.com-1ecc6299db9ec823/bio-0.39.0/src/stats/hmm/mod.rs","byte_start":742580,"byte_end":742736,"line_start":659,"line_end":659,"column_start":5,"column_end":161}},{"value":"/ exceed the maximum number of iterations (default `500`).","span":{"file_name":"/Users/shelwitz/.cargo/registry/src/github.com-1ecc6299db9ec823/bio-0.39.0/src/stats/hmm/mod.rs","byte_start":742741,"byte_end":742801,"line_start":660,"line_end":660,"column_start":5,"column_end":65}}]},{"kind":"Method","id":{"krate":0,"index":2720},"span":{"file_name":"/Users/shelwitz/.cargo/registry/src/github.com-1ecc6299db9ec823/bio-0.39.0/src/stats/hmm/mod.rs","byte_start":743304,"byte_end":743319,"line_start":677,"line_end":677,"column_start":8,"column_end":23},"name":"update_matrices","qualname":"::stats::hmm::Trainable::update_matrices","value":"pub fn update_matrices(&Self, Array2<LogProb>, Array2<LogProb>,\n                       Array1<LogProb>, Array1<LogProb>)","parent":{"krate":0,"index":2717},"children":[],"decl_id":null,"docs":" This feature comes in handy in Bam-Welch algorithm when doing an update of HMM parameters.","sig":null,"attributes":[{"value":"/ This feature comes in handy in Bam-Welch algorithm when doing an update of HMM parameters.","span":{"file_name":"/Users/shelwitz/.cargo/registry/src/github.com-1ecc6299db9ec823/bio-0.39.0/src/stats/hmm/mod.rs","byte_start":743065,"byte_end":743159,"line_start":673,"line_end":673,"column_start":5,"column_end":99}},{"value":"/","span":{"file_name":"/Users/shelwitz/.cargo/registry/src/github.com-1ecc6299db9ec823/bio-0.39.0/src/stats/hmm/mod.rs","byte_start":743164,"byte_end":743167,"line_start":674,"line_end":674,"column_start":5,"column_end":8}},{"value":"/ After receiving the estimated parameters found after trainning, this method updates the values in the","span":{"file_name":"/Users/shelwitz/.cargo/registry/src/github.com-1ecc6299db9ec823/bio-0.39.0/src/stats/hmm/mod.rs","byte_start":743172,"byte_end":743277,"line_start":675,"line_end":675,"column_start":5,"column_end":110}},{"value":"/ HMM model.","span":{"file_name":"/Users/shelwitz/.cargo/registry/src/github.com-1ecc6299db9ec823/bio-0.39.0/src/stats/hmm/mod.rs","byte_start":743282,"byte_end":743296,"line_start":676,"line_end":676,"column_start":5,"column_end":19}}]},{"kind":"Mod","id":{"krate":0,"index":2721},"span":{"file_name":"/Users/shelwitz/.cargo/registry/src/github.com-1ecc6299db9ec823/bio-0.39.0/src/stats/hmm/mod.rs","byte_start":743601,"byte_end":743618,"line_start":687,"line_end":687,"column_start":9,"column_end":26},"name":"discrete_emission","qualname":"::stats::hmm::discrete_emission","value":"/Users/shelwitz/.cargo/registry/src/github.com-1ecc6299db9ec823/bio-0.39.0/src/stats/hmm/mod.rs","parent":null,"children":[{"krate":0,"index":2722},{"krate":0,"index":2723},{"krate":0,"index":2724},{"krate":0,"index":2726},{"krate":0,"index":2727},{"krate":0,"index":2729},{"krate":0,"index":5755},{"krate":0,"index":5759},{"krate":0,"index":5761},{"krate":0,"index":5762},{"krate":0,"index":2730},{"krate":0,"index":2740}],"decl_id":null,"docs":" Implementation of Hidden Markov Model with emission values from discrete distributions.\n","sig":null,"attributes":[{"value":"/ Implementation of Hidden Markov Model with emission values from discrete distributions.","span":{"file_name":"/Users/shelwitz/.cargo/registry/src/github.com-1ecc6299db9ec823/bio-0.39.0/src/stats/hmm/mod.rs","byte_start":743501,"byte_end":743592,"line_start":686,"line_end":686,"column_start":1,"column_end":92}}]},{"kind":"Struct","id":{"krate":0,"index":5755},"span":{"file_name":"/Users/shelwitz/.cargo/registry/src/github.com-1ecc6299db9ec823/bio-0.39.0/src/stats/hmm/mod.rs","byte_start":744216,"byte_end":744221,"line_start":700,"line_end":700,"column_start":16,"column_end":21},"name":"Model","qualname":"::stats::hmm::discrete_emission::Model","value":"Model {  }","parent":null,"children":[{"krate":0,"index":5756},{"krate":0,"index":5757},{"krate":0,"index":5758}],"decl_id":null,"docs":" Implementation of a `hmm::Model` with emission values from discrete distributions.","sig":null,"attributes":[{"value":"/ Implementation of a `hmm::Model` with emission values from discrete distributions.","span":{"file_name":"/Users/shelwitz/.cargo/registry/src/github.com-1ecc6299db9ec823/bio-0.39.0/src/stats/hmm/mod.rs","byte_start":743683,"byte_end":743769,"line_start":691,"line_end":691,"column_start":5,"column_end":91}},{"value":"/","span":{"file_name":"/Users/shelwitz/.cargo/registry/src/github.com-1ecc6299db9ec823/bio-0.39.0/src/stats/hmm/mod.rs","byte_start":743774,"byte_end":743777,"line_start":692,"line_end":692,"column_start":5,"column_end":8}},{"value":"/ Log-scale probabilities are used for numeric stability.","span":{"file_name":"/Users/shelwitz/.cargo/registry/src/github.com-1ecc6299db9ec823/bio-0.39.0/src/stats/hmm/mod.rs","byte_start":743782,"byte_end":743841,"line_start":693,"line_end":693,"column_start":5,"column_end":64}},{"value":"/","span":{"file_name":"/Users/shelwitz/.cargo/registry/src/github.com-1ecc6299db9ec823/bio-0.39.0/src/stats/hmm/mod.rs","byte_start":743846,"byte_end":743849,"line_start":694,"line_end":694,"column_start":5,"column_end":8}},{"value":"/ In Rabiner's tutorial, a discrete emission value HMM has `N` states and `M` output symbols.","span":{"file_name":"/Users/shelwitz/.cargo/registry/src/github.com-1ecc6299db9ec823/bio-0.39.0/src/stats/hmm/mod.rs","byte_start":743854,"byte_end":743949,"line_start":695,"line_end":695,"column_start":5,"column_end":100}},{"value":"/ The state transition matrix with dimensions `NxN` is `A`, the observation probability","span":{"file_name":"/Users/shelwitz/.cargo/registry/src/github.com-1ecc6299db9ec823/bio-0.39.0/src/stats/hmm/mod.rs","byte_start":743954,"byte_end":744043,"line_start":696,"line_end":696,"column_start":5,"column_end":94}},{"value":"/ distribution is the matrix `B` with dimensions `NxM` and the initial state distribution `pi`","span":{"file_name":"/Users/shelwitz/.cargo/registry/src/github.com-1ecc6299db9ec823/bio-0.39.0/src/stats/hmm/mod.rs","byte_start":744048,"byte_end":744144,"line_start":697,"line_end":697,"column_start":5,"column_end":101}},{"value":"/ has length `N`.","span":{"file_name":"/Users/shelwitz/.cargo/registry/src/github.com-1ecc6299db9ec823/bio-0.39.0/src/stats/hmm/mod.rs","byte_start":744149,"byte_end":744168,"line_start":698,"line_end":698,"column_start":5,"column_end":24}}]},{"kind":"Method","id":{"krate":0,"index":2731},"span":{"file_name":"/Users/shelwitz/.cargo/registry/src/github.com-1ecc6299db9ec823/bio-0.39.0/src/stats/hmm/mod.rs","byte_start":744809,"byte_end":744812,"line_start":714,"line_end":714,"column_start":16,"column_end":19},"name":"new","qualname":"<Model>::new","value":"pub fn new(Array2<LogProb>, Array2<LogProb>, Array1<LogProb>) -> Result<Self>","parent":null,"children":[],"decl_id":null,"docs":" Construct new Hidden MarkovModel with the given transition, observation, and initial\n state matrices and vectors already in log-probability space.\n","sig":null,"attributes":[{"value":"/ Construct new Hidden MarkovModel with the given transition, observation, and initial","span":{"file_name":"/Users/shelwitz/.cargo/registry/src/github.com-1ecc6299db9ec823/bio-0.39.0/src/stats/hmm/mod.rs","byte_start":744632,"byte_end":744720,"line_start":712,"line_end":712,"column_start":9,"column_end":97}},{"value":"/ state matrices and vectors already in log-probability space.","span":{"file_name":"/Users/shelwitz/.cargo/registry/src/github.com-1ecc6299db9ec823/bio-0.39.0/src/stats/hmm/mod.rs","byte_start":744729,"byte_end":744793,"line_start":713,"line_end":713,"column_start":9,"column_end":73}}]},{"kind":"Method","id":{"krate":0,"index":2732},"span":{"file_name":"/Users/shelwitz/.cargo/registry/src/github.com-1ecc6299db9ec823/bio-0.39.0/src/stats/hmm/mod.rs","byte_start":745699,"byte_end":745708,"line_start":742,"line_end":742,"column_start":16,"column_end":25},"name":"with_prob","qualname":"<Model>::with_prob","value":"pub fn with_prob(&Array2<Prob>, &Array2<Prob>, &Array1<Prob>) -> Result<Self>","parent":null,"children":[],"decl_id":null,"docs":" Construct new Hidden MarkovModel with the given transition, observation, and initial\n state matrices and vectors already as `Prob` values.\n","sig":null,"attributes":[{"value":"/ Construct new Hidden MarkovModel with the given transition, observation, and initial","span":{"file_name":"/Users/shelwitz/.cargo/registry/src/github.com-1ecc6299db9ec823/bio-0.39.0/src/stats/hmm/mod.rs","byte_start":745530,"byte_end":745618,"line_start":740,"line_end":740,"column_start":9,"column_end":97}},{"value":"/ state matrices and vectors already as `Prob` values.","span":{"file_name":"/Users/shelwitz/.cargo/registry/src/github.com-1ecc6299db9ec823/bio-0.39.0/src/stats/hmm/mod.rs","byte_start":745627,"byte_end":745683,"line_start":741,"line_end":741,"column_start":9,"column_end":65}}]},{"kind":"Method","id":{"krate":0,"index":2736},"span":{"file_name":"/Users/shelwitz/.cargo/registry/src/github.com-1ecc6299db9ec823/bio-0.39.0/src/stats/hmm/mod.rs","byte_start":746251,"byte_end":746261,"line_start":756,"line_end":756,"column_start":16,"column_end":26},"name":"with_float","qualname":"<Model>::with_float","value":"pub fn with_float(&Array2<f64>, &Array2<f64>, &Array1<f64>) -> Result<Self>","parent":null,"children":[],"decl_id":null,"docs":" Construct new Hidden MarkovModel with the given transition, observation, and initial\n state matrices and vectors with probabilities as `f64` values.\n","sig":null,"attributes":[{"value":"/ Construct new Hidden MarkovModel with the given transition, observation, and initial","span":{"file_name":"/Users/shelwitz/.cargo/registry/src/github.com-1ecc6299db9ec823/bio-0.39.0/src/stats/hmm/mod.rs","byte_start":746072,"byte_end":746160,"line_start":754,"line_end":754,"column_start":9,"column_end":97}},{"value":"/ state matrices and vectors with probabilities as `f64` values.","span":{"file_name":"/Users/shelwitz/.cargo/registry/src/github.com-1ecc6299db9ec823/bio-0.39.0/src/stats/hmm/mod.rs","byte_start":746169,"byte_end":746235,"line_start":755,"line_end":755,"column_start":9,"column_end":75}}]},{"kind":"Mod","id":{"krate":0,"index":2748},"span":{"file_name":"/Users/shelwitz/.cargo/registry/src/github.com-1ecc6299db9ec823/bio-0.39.0/src/stats/hmm/mod.rs","byte_start":747843,"byte_end":747868,"line_start":809,"line_end":809,"column_start":9,"column_end":34},"name":"discrete_emission_opt_end","qualname":"::stats::hmm::discrete_emission_opt_end","value":"/Users/shelwitz/.cargo/registry/src/github.com-1ecc6299db9ec823/bio-0.39.0/src/stats/hmm/mod.rs","parent":null,"children":[{"krate":0,"index":2749},{"krate":0,"index":2750},{"krate":0,"index":2751},{"krate":0,"index":2753},{"krate":0,"index":2754},{"krate":0,"index":2756},{"krate":0,"index":5765},{"krate":0,"index":5771},{"krate":0,"index":5773},{"krate":0,"index":5774},{"krate":0,"index":2757},{"krate":0,"index":2771},{"krate":0,"index":2780}],"decl_id":null,"docs":" Implementation of Hidden Markov Model with emission values from discrete distributions and an optional explicity end state.\n This module also implements the `Trainable` trait allowing to be trainned by Baum-Welch algorithm.\n","sig":null,"attributes":[{"value":"/ Implementation of Hidden Markov Model with emission values from discrete distributions and an optional explicity end state.","span":{"file_name":"/Users/shelwitz/.cargo/registry/src/github.com-1ecc6299db9ec823/bio-0.39.0/src/stats/hmm/mod.rs","byte_start":747604,"byte_end":747731,"line_start":807,"line_end":807,"column_start":1,"column_end":128}},{"value":"/ This module also implements the `Trainable` trait allowing to be trainned by Baum-Welch algorithm.","span":{"file_name":"/Users/shelwitz/.cargo/registry/src/github.com-1ecc6299db9ec823/bio-0.39.0/src/stats/hmm/mod.rs","byte_start":747732,"byte_end":747834,"line_start":808,"line_end":808,"column_start":1,"column_end":103}}]},{"kind":"Struct","id":{"krate":0,"index":5765},"span":{"file_name":"/Users/shelwitz/.cargo/registry/src/github.com-1ecc6299db9ec823/bio-0.39.0/src/stats/hmm/mod.rs","byte_start":748821,"byte_end":748826,"line_start":824,"line_end":824,"column_start":16,"column_end":21},"name":"Model","qualname":"::stats::hmm::discrete_emission_opt_end::Model","value":"Model {  }","parent":null,"children":[{"krate":0,"index":5766},{"krate":0,"index":5767},{"krate":0,"index":5768},{"krate":0,"index":5769},{"krate":0,"index":5770}],"decl_id":null,"docs":" Implementation of a `hmm::Model` with emission values from discrete distributions and an optional declared end state.","sig":null,"attributes":[{"value":"/ Implementation of a `hmm::Model` with emission values from discrete distributions and an optional declared end state.","span":{"file_name":"/Users/shelwitz/.cargo/registry/src/github.com-1ecc6299db9ec823/bio-0.39.0/src/stats/hmm/mod.rs","byte_start":747933,"byte_end":748054,"line_start":813,"line_end":813,"column_start":5,"column_end":126}},{"value":"/","span":{"file_name":"/Users/shelwitz/.cargo/registry/src/github.com-1ecc6299db9ec823/bio-0.39.0/src/stats/hmm/mod.rs","byte_start":748059,"byte_end":748062,"line_start":814,"line_end":814,"column_start":5,"column_end":8}},{"value":"/ Log-scale probabilities are used for numeric stability.","span":{"file_name":"/Users/shelwitz/.cargo/registry/src/github.com-1ecc6299db9ec823/bio-0.39.0/src/stats/hmm/mod.rs","byte_start":748067,"byte_end":748126,"line_start":815,"line_end":815,"column_start":5,"column_end":64}},{"value":"/","span":{"file_name":"/Users/shelwitz/.cargo/registry/src/github.com-1ecc6299db9ec823/bio-0.39.0/src/stats/hmm/mod.rs","byte_start":748131,"byte_end":748134,"line_start":816,"line_end":816,"column_start":5,"column_end":8}},{"value":"/ In Rabiner's tutorial, a discrete emission value HMM has `N` states and `M` output symbols.","span":{"file_name":"/Users/shelwitz/.cargo/registry/src/github.com-1ecc6299db9ec823/bio-0.39.0/src/stats/hmm/mod.rs","byte_start":748139,"byte_end":748234,"line_start":817,"line_end":817,"column_start":5,"column_end":100}},{"value":"/ The state transition matrix with dimensions `NxN` is `A`, the observation probability","span":{"file_name":"/Users/shelwitz/.cargo/registry/src/github.com-1ecc6299db9ec823/bio-0.39.0/src/stats/hmm/mod.rs","byte_start":748239,"byte_end":748328,"line_start":818,"line_end":818,"column_start":5,"column_end":94}},{"value":"/ distribution is the matrix `B` with dimensions `NxM` and the initial state distribution `pi`","span":{"file_name":"/Users/shelwitz/.cargo/registry/src/github.com-1ecc6299db9ec823/bio-0.39.0/src/stats/hmm/mod.rs","byte_start":748333,"byte_end":748429,"line_start":819,"line_end":819,"column_start":5,"column_end":101}},{"value":"/ has length `N`. We also included a silent end state `ε` with vector length `N` that do not emit symbols for","span":{"file_name":"/Users/shelwitz/.cargo/registry/src/github.com-1ecc6299db9ec823/bio-0.39.0/src/stats/hmm/mod.rs","byte_start":748434,"byte_end":748546,"line_start":820,"line_end":820,"column_start":5,"column_end":116}},{"value":"/ modelling the end of sequences. It's optional to supply the end probabilities at the creation of the model.","span":{"file_name":"/Users/shelwitz/.cargo/registry/src/github.com-1ecc6299db9ec823/bio-0.39.0/src/stats/hmm/mod.rs","byte_start":748551,"byte_end":748662,"line_start":821,"line_end":821,"column_start":5,"column_end":116}},{"value":"/ If this happens, we'll create a dummy end state to simulate as if the end state has not been included.","span":{"file_name":"/Users/shelwitz/.cargo/registry/src/github.com-1ecc6299db9ec823/bio-0.39.0/src/stats/hmm/mod.rs","byte_start":748667,"byte_end":748773,"line_start":822,"line_end":822,"column_start":5,"column_end":111}}]},{"kind":"Method","id":{"krate":0,"index":2758},"span":{"file_name":"/Users/shelwitz/.cargo/registry/src/github.com-1ecc6299db9ec823/bio-0.39.0/src/stats/hmm/mod.rs","byte_start":749511,"byte_end":749514,"line_start":842,"line_end":842,"column_start":16,"column_end":19},"name":"new","qualname":"<Model>::new","value":"pub fn new(RefCell<Array2<LogProb>>, RefCell<Array2<LogProb>>,\n           RefCell<Array1<LogProb>>, RefCell<Array1<LogProb>>, bool)\n-> Result<Self>","parent":null,"children":[],"decl_id":null,"docs":" Construct new Hidden MarkovModel with the given transition, observation, and initial\n state matrices and vectors already in log-probability space.\n","sig":null,"attributes":[{"value":"/ Construct new Hidden MarkovModel with the given transition, observation, and initial","span":{"file_name":"/Users/shelwitz/.cargo/registry/src/github.com-1ecc6299db9ec823/bio-0.39.0/src/stats/hmm/mod.rs","byte_start":749334,"byte_end":749422,"line_start":840,"line_end":840,"column_start":9,"column_end":97}},{"value":"/ state matrices and vectors already in log-probability space.","span":{"file_name":"/Users/shelwitz/.cargo/registry/src/github.com-1ecc6299db9ec823/bio-0.39.0/src/stats/hmm/mod.rs","byte_start":749431,"byte_end":749495,"line_start":841,"line_end":841,"column_start":9,"column_end":73}}]},{"kind":"Method","id":{"krate":0,"index":2759},"span":{"file_name":"/Users/shelwitz/.cargo/registry/src/github.com-1ecc6299db9ec823/bio-0.39.0/src/stats/hmm/mod.rs","byte_start":750591,"byte_end":750600,"line_start":874,"line_end":874,"column_start":16,"column_end":25},"name":"with_prob","qualname":"<Model>::with_prob","value":"pub fn with_prob(&Array2<Prob>, &Array2<Prob>, &Array1<Prob>,\n                 Option<&Array1<Prob>>) -> Result<Self>","parent":null,"children":[],"decl_id":null,"docs":" Construct new Hidden MarkovModel with the given transition, observation, and initial\n state matrices and vectors already as `Prob` values.\n","sig":null,"attributes":[{"value":"/ Construct new Hidden MarkovModel with the given transition, observation, and initial","span":{"file_name":"/Users/shelwitz/.cargo/registry/src/github.com-1ecc6299db9ec823/bio-0.39.0/src/stats/hmm/mod.rs","byte_start":750422,"byte_end":750510,"line_start":872,"line_end":872,"column_start":9,"column_end":97}},{"value":"/ state matrices and vectors already as `Prob` values.","span":{"file_name":"/Users/shelwitz/.cargo/registry/src/github.com-1ecc6299db9ec823/bio-0.39.0/src/stats/hmm/mod.rs","byte_start":750519,"byte_end":750575,"line_start":873,"line_end":873,"column_start":9,"column_end":65}}]},{"kind":"Method","id":{"krate":0,"index":2765},"span":{"file_name":"/Users/shelwitz/.cargo/registry/src/github.com-1ecc6299db9ec823/bio-0.39.0/src/stats/hmm/mod.rs","byte_start":751800,"byte_end":751810,"line_start":909,"line_end":909,"column_start":16,"column_end":26},"name":"with_float","qualname":"<Model>::with_float","value":"pub fn with_float(&Array2<f64>, &Array2<f64>, &Array1<f64>,\n                  Option<&Array1<f64>>) -> Result<Self>","parent":null,"children":[],"decl_id":null,"docs":" Construct new Hidden MarkovModel with the given transition, observation, and initial\n state matrices and vectors with probabilities as `f64` values.\n","sig":null,"attributes":[{"value":"/ Construct new Hidden MarkovModel with the given transition, observation, and initial","span":{"file_name":"/Users/shelwitz/.cargo/registry/src/github.com-1ecc6299db9ec823/bio-0.39.0/src/stats/hmm/mod.rs","byte_start":751621,"byte_end":751709,"line_start":907,"line_end":907,"column_start":9,"column_end":97}},{"value":"/ state matrices and vectors with probabilities as `f64` values.","span":{"file_name":"/Users/shelwitz/.cargo/registry/src/github.com-1ecc6299db9ec823/bio-0.39.0/src/stats/hmm/mod.rs","byte_start":751718,"byte_end":751784,"line_start":908,"line_end":908,"column_start":9,"column_end":75}}]},{"kind":"Mod","id":{"krate":0,"index":2783},"span":{"file_name":"/Users/shelwitz/.cargo/registry/src/github.com-1ecc6299db9ec823/bio-0.39.0/src/stats/hmm/mod.rs","byte_start":758652,"byte_end":758682,"line_start":1107,"line_end":1107,"column_start":9,"column_end":39},"name":"univariate_continuous_emission","qualname":"::stats::hmm::univariate_continuous_emission","value":"/Users/shelwitz/.cargo/registry/src/github.com-1ecc6299db9ec823/bio-0.39.0/src/stats/hmm/mod.rs","parent":null,"children":[{"krate":0,"index":2784},{"krate":0,"index":2785},{"krate":0,"index":2786},{"krate":0,"index":2788},{"krate":0,"index":2789},{"krate":0,"index":2791},{"krate":0,"index":2792},{"krate":0,"index":2797},{"krate":0,"index":2806},{"krate":0,"index":2815}],"decl_id":null,"docs":" Implementation of Hidden Markov Models with emission values from univariate continuous\n distributions.\n","sig":null,"attributes":[{"value":"/ Implementation of Hidden Markov Models with emission values from univariate continuous","span":{"file_name":"/Users/shelwitz/.cargo/registry/src/github.com-1ecc6299db9ec823/bio-0.39.0/src/stats/hmm/mod.rs","byte_start":758534,"byte_end":758624,"line_start":1105,"line_end":1105,"column_start":1,"column_end":91}},{"value":"/ distributions.","span":{"file_name":"/Users/shelwitz/.cargo/registry/src/github.com-1ecc6299db9ec823/bio-0.39.0/src/stats/hmm/mod.rs","byte_start":758625,"byte_end":758643,"line_start":1106,"line_end":1106,"column_start":1,"column_end":19}}]},{"kind":"Struct","id":{"krate":0,"index":2792},"span":{"file_name":"/Users/shelwitz/.cargo/registry/src/github.com-1ecc6299db9ec823/bio-0.39.0/src/stats/hmm/mod.rs","byte_start":758934,"byte_end":758939,"line_start":1114,"line_end":1114,"column_start":16,"column_end":21},"name":"Model","qualname":"::stats::hmm::univariate_continuous_emission::Model","value":"Model {  }","parent":null,"children":[{"krate":0,"index":2794},{"krate":0,"index":2795},{"krate":0,"index":2796}],"decl_id":null,"docs":" Implementation of a `hmm::Model` with emission values from univariate continuous distributions.","sig":null,"attributes":[{"value":"/ Implementation of a `hmm::Model` with emission values from univariate continuous distributions.","span":{"file_name":"/Users/shelwitz/.cargo/registry/src/github.com-1ecc6299db9ec823/bio-0.39.0/src/stats/hmm/mod.rs","byte_start":758747,"byte_end":758846,"line_start":1111,"line_end":1111,"column_start":5,"column_end":104}},{"value":"/","span":{"file_name":"/Users/shelwitz/.cargo/registry/src/github.com-1ecc6299db9ec823/bio-0.39.0/src/stats/hmm/mod.rs","byte_start":758851,"byte_end":758854,"line_start":1112,"line_end":1112,"column_start":5,"column_end":8}},{"value":"/ Log-scale probabilities are used for numeric stability.","span":{"file_name":"/Users/shelwitz/.cargo/registry/src/github.com-1ecc6299db9ec823/bio-0.39.0/src/stats/hmm/mod.rs","byte_start":758859,"byte_end":758918,"line_start":1113,"line_end":1113,"column_start":5,"column_end":64}}]},{"kind":"Method","id":{"krate":0,"index":2799},"span":{"file_name":"/Users/shelwitz/.cargo/registry/src/github.com-1ecc6299db9ec823/bio-0.39.0/src/stats/hmm/mod.rs","byte_start":759534,"byte_end":759537,"line_start":1128,"line_end":1128,"column_start":16,"column_end":19},"name":"new","qualname":"<Model<Dist>>::new","value":"pub fn new(Array2<LogProb>, Vec<Dist>, Array1<LogProb>) -> Result<Self>","parent":null,"children":[],"decl_id":null,"docs":" Construct new Hidden MarkovModel with the given transition, observation, and initial\n state matrices and vectors already in log-probability space.\n","sig":null,"attributes":[{"value":"/ Construct new Hidden MarkovModel with the given transition, observation, and initial","span":{"file_name":"/Users/shelwitz/.cargo/registry/src/github.com-1ecc6299db9ec823/bio-0.39.0/src/stats/hmm/mod.rs","byte_start":759357,"byte_end":759445,"line_start":1126,"line_end":1126,"column_start":9,"column_end":97}},{"value":"/ state matrices and vectors already in log-probability space.","span":{"file_name":"/Users/shelwitz/.cargo/registry/src/github.com-1ecc6299db9ec823/bio-0.39.0/src/stats/hmm/mod.rs","byte_start":759454,"byte_end":759518,"line_start":1127,"line_end":1127,"column_start":9,"column_end":73}}]},{"kind":"Method","id":{"krate":0,"index":2800},"span":{"file_name":"/Users/shelwitz/.cargo/registry/src/github.com-1ecc6299db9ec823/bio-0.39.0/src/stats/hmm/mod.rs","byte_start":760416,"byte_end":760425,"line_start":1156,"line_end":1156,"column_start":16,"column_end":25},"name":"with_prob","qualname":"<Model<Dist>>::with_prob","value":"pub fn with_prob(&Array2<Prob>, Vec<Dist>, &Array1<Prob>) -> Result<Self>","parent":null,"children":[],"decl_id":null,"docs":" Construct new Hidden MarkovModel with the given transition, observation, and initial\n state matrices and vectors already as `Prob` values.\n","sig":null,"attributes":[{"value":"/ Construct new Hidden MarkovModel with the given transition, observation, and initial","span":{"file_name":"/Users/shelwitz/.cargo/registry/src/github.com-1ecc6299db9ec823/bio-0.39.0/src/stats/hmm/mod.rs","byte_start":760247,"byte_end":760335,"line_start":1154,"line_end":1154,"column_start":9,"column_end":97}},{"value":"/ state matrices and vectors already as `Prob` values.","span":{"file_name":"/Users/shelwitz/.cargo/registry/src/github.com-1ecc6299db9ec823/bio-0.39.0/src/stats/hmm/mod.rs","byte_start":760344,"byte_end":760400,"line_start":1155,"line_end":1155,"column_start":9,"column_end":65}}]},{"kind":"Method","id":{"krate":0,"index":2803},"span":{"file_name":"/Users/shelwitz/.cargo/registry/src/github.com-1ecc6299db9ec823/bio-0.39.0/src/stats/hmm/mod.rs","byte_start":760937,"byte_end":760947,"line_start":1170,"line_end":1170,"column_start":16,"column_end":26},"name":"with_float","qualname":"<Model<Dist>>::with_float","value":"pub fn with_float(&Array2<f64>, Vec<Dist>, &Array1<f64>) -> Result<Self>","parent":null,"children":[],"decl_id":null,"docs":" Construct new Hidden MarkovModel with the given transition, observation, and initial\n state matrices and vectors with probabilities as `f64` values.\n","sig":null,"attributes":[{"value":"/ Construct new Hidden MarkovModel with the given transition, observation, and initial","span":{"file_name":"/Users/shelwitz/.cargo/registry/src/github.com-1ecc6299db9ec823/bio-0.39.0/src/stats/hmm/mod.rs","byte_start":760758,"byte_end":760846,"line_start":1168,"line_end":1168,"column_start":9,"column_end":97}},{"value":"/ state matrices and vectors with probabilities as `f64` values.","span":{"file_name":"/Users/shelwitz/.cargo/registry/src/github.com-1ecc6299db9ec823/bio-0.39.0/src/stats/hmm/mod.rs","byte_start":760855,"byte_end":760921,"line_start":1169,"line_end":1169,"column_start":9,"column_end":75}}]},{"kind":"Type","id":{"krate":0,"index":2815},"span":{"file_name":"/Users/shelwitz/.cargo/registry/src/github.com-1ecc6299db9ec823/bio-0.39.0/src/stats/hmm/mod.rs","byte_start":762400,"byte_end":762413,"line_start":1221,"line_end":1221,"column_start":14,"column_end":27},"name":"GaussianModel","qualname":"::stats::hmm::univariate_continuous_emission::GaussianModel","value":"Model<statrs::distribution::Normal>","parent":null,"children":[],"decl_id":null,"docs":" Shortcut for HMM with emission values from a Gaussian distribution.\n","sig":null,"attributes":[{"value":"/ Shortcut for HMM with emission values from a Gaussian distribution.","span":{"file_name":"/Users/shelwitz/.cargo/registry/src/github.com-1ecc6299db9ec823/bio-0.39.0/src/stats/hmm/mod.rs","byte_start":762315,"byte_end":762386,"line_start":1220,"line_end":1220,"column_start":5,"column_end":76}}]},{"kind":"Mod","id":{"krate":0,"index":2816},"span":{"file_name":"/Users/shelwitz/.cargo/registry/src/github.com-1ecc6299db9ec823/bio-0.39.0/src/stats/pairhmm/mod.rs","byte_start":0,"byte_end":0,"line_start":1,"line_end":1,"column_start":1,"column_end":1},"name":"pairhmm","qualname":"::stats::pairhmm","value":"/Users/shelwitz/.cargo/registry/src/github.com-1ecc6299db9ec823/bio-0.39.0/src/stats/pairhmm/mod.rs","parent":null,"children":[{"krate":0,"index":2817},{"krate":0,"index":2818},{"krate":0,"index":2821},{"krate":0,"index":2824},{"krate":0,"index":2827},{"krate":0,"index":2828},{"krate":0,"index":2830},{"krate":0,"index":2965},{"krate":0,"index":2998},{"krate":0,"index":3004},{"krate":0,"index":3007},{"krate":0,"index":3012},{"krate":0,"index":5872},{"krate":0,"index":5879},{"krate":0,"index":3016}],"decl_id":null,"docs":" This module contains the implementation of a classic `PairHMM` as described in\n Durbin, R., Eddy, S., Krogh, A., & Mitchison, G. (1998). Biological Sequence Analysis.\n Current Topics in Genome Analysis 2008. http://doi.org/10.1017/CBO9780511790492.\n It also contains a modified variant `HomopolyPairHMM` with additional homopolymer states suited\n for dealing with homopolymer runs in sequencing as often encountered in Oxford Nanopore\n sequencing data.","sig":null,"attributes":[{"value":"/ This module contains the implementation of a classic `PairHMM` as described in","span":{"file_name":"/Users/shelwitz/.cargo/registry/src/github.com-1ecc6299db9ec823/bio-0.39.0/src/stats/pairhmm/mod.rs","byte_start":777335,"byte_end":777417,"line_start":1,"line_end":1,"column_start":1,"column_end":83}},{"value":"/ Durbin, R., Eddy, S., Krogh, A., & Mitchison, G. (1998). Biological Sequence Analysis.","span":{"file_name":"/Users/shelwitz/.cargo/registry/src/github.com-1ecc6299db9ec823/bio-0.39.0/src/stats/pairhmm/mod.rs","byte_start":777418,"byte_end":777508,"line_start":2,"line_end":2,"column_start":1,"column_end":91}},{"value":"/ Current Topics in Genome Analysis 2008. http://doi.org/10.1017/CBO9780511790492.","span":{"file_name":"/Users/shelwitz/.cargo/registry/src/github.com-1ecc6299db9ec823/bio-0.39.0/src/stats/pairhmm/mod.rs","byte_start":777509,"byte_end":777593,"line_start":3,"line_end":3,"column_start":1,"column_end":85}},{"value":"/ It also contains a modified variant `HomopolyPairHMM` with additional homopolymer states suited","span":{"file_name":"/Users/shelwitz/.cargo/registry/src/github.com-1ecc6299db9ec823/bio-0.39.0/src/stats/pairhmm/mod.rs","byte_start":777594,"byte_end":777693,"line_start":4,"line_end":4,"column_start":1,"column_end":100}},{"value":"/ for dealing with homopolymer runs in sequencing as often encountered in Oxford Nanopore","span":{"file_name":"/Users/shelwitz/.cargo/registry/src/github.com-1ecc6299db9ec823/bio-0.39.0/src/stats/pairhmm/mod.rs","byte_start":777694,"byte_end":777785,"line_start":5,"line_end":5,"column_start":1,"column_end":92}},{"value":"/ sequencing data.","span":{"file_name":"/Users/shelwitz/.cargo/registry/src/github.com-1ecc6299db9ec823/bio-0.39.0/src/stats/pairhmm/mod.rs","byte_start":777786,"byte_end":777806,"line_start":6,"line_end":6,"column_start":1,"column_end":21}},{"value":"/","span":{"file_name":"/Users/shelwitz/.cargo/registry/src/github.com-1ecc6299db9ec823/bio-0.39.0/src/stats/pairhmm/mod.rs","byte_start":777807,"byte_end":777810,"line_start":7,"line_end":7,"column_start":1,"column_end":4}},{"value":"/ Traits defined in this module apply to both `PairHMM` and `HomopolyPairHMM`.","span":{"file_name":"/Users/shelwitz/.cargo/registry/src/github.com-1ecc6299db9ec823/bio-0.39.0/src/stats/pairhmm/mod.rs","byte_start":777811,"byte_end":777891,"line_start":8,"line_end":8,"column_start":1,"column_end":81}},{"value":"/","span":{"file_name":"/Users/shelwitz/.cargo/registry/src/github.com-1ecc6299db9ec823/bio-0.39.0/src/stats/pairhmm/mod.rs","byte_start":777892,"byte_end":777895,"line_start":9,"line_end":9,"column_start":1,"column_end":4}},{"value":"/ # Examples","span":{"file_name":"/Users/shelwitz/.cargo/registry/src/github.com-1ecc6299db9ec823/bio-0.39.0/src/stats/pairhmm/mod.rs","byte_start":777896,"byte_end":777910,"line_start":10,"line_end":10,"column_start":1,"column_end":15}},{"value":"/ ```","span":{"file_name":"/Users/shelwitz/.cargo/registry/src/github.com-1ecc6299db9ec823/bio-0.39.0/src/stats/pairhmm/mod.rs","byte_start":777911,"byte_end":777918,"line_start":11,"line_end":11,"column_start":1,"column_end":8}},{"value":"/ use approx::assert_relative_eq;","span":{"file_name":"/Users/shelwitz/.cargo/registry/src/github.com-1ecc6299db9ec823/bio-0.39.0/src/stats/pairhmm/mod.rs","byte_start":777919,"byte_end":777954,"line_start":12,"line_end":12,"column_start":1,"column_end":36}},{"value":"/ use bio::stats::pairhmm::{","span":{"file_name":"/Users/shelwitz/.cargo/registry/src/github.com-1ecc6299db9ec823/bio-0.39.0/src/stats/pairhmm/mod.rs","byte_start":777955,"byte_end":777985,"line_start":13,"line_end":13,"column_start":1,"column_end":31}},{"value":"/     EmissionParameters, GapParameters, PairHMM, StartEndGapParameters, XYEmission,","span":{"file_name":"/Users/shelwitz/.cargo/registry/src/github.com-1ecc6299db9ec823/bio-0.39.0/src/stats/pairhmm/mod.rs","byte_start":777986,"byte_end":778072,"line_start":14,"line_end":14,"column_start":1,"column_end":87}},{"value":"/ };","span":{"file_name":"/Users/shelwitz/.cargo/registry/src/github.com-1ecc6299db9ec823/bio-0.39.0/src/stats/pairhmm/mod.rs","byte_start":778073,"byte_end":778079,"line_start":15,"line_end":15,"column_start":1,"column_end":7}},{"value":"/ use bio::stats::{LogProb, Prob};","span":{"file_name":"/Users/shelwitz/.cargo/registry/src/github.com-1ecc6299db9ec823/bio-0.39.0/src/stats/pairhmm/mod.rs","byte_start":778080,"byte_end":778116,"line_start":16,"line_end":16,"column_start":1,"column_end":37}},{"value":"/ use num_traits::Zero;","span":{"file_name":"/Users/shelwitz/.cargo/registry/src/github.com-1ecc6299db9ec823/bio-0.39.0/src/stats/pairhmm/mod.rs","byte_start":778117,"byte_end":778142,"line_start":17,"line_end":17,"column_start":1,"column_end":26}},{"value":"/","span":{"file_name":"/Users/shelwitz/.cargo/registry/src/github.com-1ecc6299db9ec823/bio-0.39.0/src/stats/pairhmm/mod.rs","byte_start":778143,"byte_end":778146,"line_start":18,"line_end":18,"column_start":1,"column_end":4}},{"value":"/ // Two sequences for which we'd like to know if they are likely related.","span":{"file_name":"/Users/shelwitz/.cargo/registry/src/github.com-1ecc6299db9ec823/bio-0.39.0/src/stats/pairhmm/mod.rs","byte_start":778147,"byte_end":778223,"line_start":19,"line_end":19,"column_start":1,"column_end":77}},{"value":"/ let x = b\"AAAA\";","span":{"file_name":"/Users/shelwitz/.cargo/registry/src/github.com-1ecc6299db9ec823/bio-0.39.0/src/stats/pairhmm/mod.rs","byte_start":778224,"byte_end":778244,"line_start":20,"line_end":20,"column_start":1,"column_end":21}},{"value":"/ let y = b\"AAAT\";","span":{"file_name":"/Users/shelwitz/.cargo/registry/src/github.com-1ecc6299db9ec823/bio-0.39.0/src/stats/pairhmm/mod.rs","byte_start":778245,"byte_end":778265,"line_start":21,"line_end":21,"column_start":1,"column_end":21}},{"value":"/","span":{"file_name":"/Users/shelwitz/.cargo/registry/src/github.com-1ecc6299db9ec823/bio-0.39.0/src/stats/pairhmm/mod.rs","byte_start":778266,"byte_end":778269,"line_start":22,"line_end":22,"column_start":1,"column_end":4}},{"value":"/ // For this example, we disallow gaps, so all probabilities are zero here.","span":{"file_name":"/Users/shelwitz/.cargo/registry/src/github.com-1ecc6299db9ec823/bio-0.39.0/src/stats/pairhmm/mod.rs","byte_start":778270,"byte_end":778348,"line_start":23,"line_end":23,"column_start":1,"column_end":79}},{"value":"/ struct GapParams;","span":{"file_name":"/Users/shelwitz/.cargo/registry/src/github.com-1ecc6299db9ec823/bio-0.39.0/src/stats/pairhmm/mod.rs","byte_start":778349,"byte_end":778370,"line_start":24,"line_end":24,"column_start":1,"column_end":22}},{"value":"/ impl GapParameters for GapParams {","span":{"file_name":"/Users/shelwitz/.cargo/registry/src/github.com-1ecc6299db9ec823/bio-0.39.0/src/stats/pairhmm/mod.rs","byte_start":778371,"byte_end":778409,"line_start":25,"line_end":25,"column_start":1,"column_end":39}},{"value":"/     fn prob_gap_x(&self) -> LogProb {","span":{"file_name":"/Users/shelwitz/.cargo/registry/src/github.com-1ecc6299db9ec823/bio-0.39.0/src/stats/pairhmm/mod.rs","byte_start":778410,"byte_end":778451,"line_start":26,"line_end":26,"column_start":1,"column_end":42}},{"value":"/         LogProb::zero()","span":{"file_name":"/Users/shelwitz/.cargo/registry/src/github.com-1ecc6299db9ec823/bio-0.39.0/src/stats/pairhmm/mod.rs","byte_start":778452,"byte_end":778479,"line_start":27,"line_end":27,"column_start":1,"column_end":28}},{"value":"/     }","span":{"file_name":"/Users/shelwitz/.cargo/registry/src/github.com-1ecc6299db9ec823/bio-0.39.0/src/stats/pairhmm/mod.rs","byte_start":778480,"byte_end":778489,"line_start":28,"line_end":28,"column_start":1,"column_end":10}},{"value":"/     fn prob_gap_y(&self) -> LogProb {","span":{"file_name":"/Users/shelwitz/.cargo/registry/src/github.com-1ecc6299db9ec823/bio-0.39.0/src/stats/pairhmm/mod.rs","byte_start":778490,"byte_end":778531,"line_start":29,"line_end":29,"column_start":1,"column_end":42}},{"value":"/         LogProb::zero()","span":{"file_name":"/Users/shelwitz/.cargo/registry/src/github.com-1ecc6299db9ec823/bio-0.39.0/src/stats/pairhmm/mod.rs","byte_start":778532,"byte_end":778559,"line_start":30,"line_end":30,"column_start":1,"column_end":28}},{"value":"/     }","span":{"file_name":"/Users/shelwitz/.cargo/registry/src/github.com-1ecc6299db9ec823/bio-0.39.0/src/stats/pairhmm/mod.rs","byte_start":778560,"byte_end":778569,"line_start":31,"line_end":31,"column_start":1,"column_end":10}},{"value":"/     fn prob_gap_x_extend(&self) -> LogProb {","span":{"file_name":"/Users/shelwitz/.cargo/registry/src/github.com-1ecc6299db9ec823/bio-0.39.0/src/stats/pairhmm/mod.rs","byte_start":778570,"byte_end":778618,"line_start":32,"line_end":32,"column_start":1,"column_end":49}},{"value":"/         LogProb::zero()","span":{"file_name":"/Users/shelwitz/.cargo/registry/src/github.com-1ecc6299db9ec823/bio-0.39.0/src/stats/pairhmm/mod.rs","byte_start":778619,"byte_end":778646,"line_start":33,"line_end":33,"column_start":1,"column_end":28}},{"value":"/     }","span":{"file_name":"/Users/shelwitz/.cargo/registry/src/github.com-1ecc6299db9ec823/bio-0.39.0/src/stats/pairhmm/mod.rs","byte_start":778647,"byte_end":778656,"line_start":34,"line_end":34,"column_start":1,"column_end":10}},{"value":"/     fn prob_gap_y_extend(&self) -> LogProb {","span":{"file_name":"/Users/shelwitz/.cargo/registry/src/github.com-1ecc6299db9ec823/bio-0.39.0/src/stats/pairhmm/mod.rs","byte_start":778657,"byte_end":778705,"line_start":35,"line_end":35,"column_start":1,"column_end":49}},{"value":"/         LogProb::zero()","span":{"file_name":"/Users/shelwitz/.cargo/registry/src/github.com-1ecc6299db9ec823/bio-0.39.0/src/stats/pairhmm/mod.rs","byte_start":778706,"byte_end":778733,"line_start":36,"line_end":36,"column_start":1,"column_end":28}},{"value":"/     }","span":{"file_name":"/Users/shelwitz/.cargo/registry/src/github.com-1ecc6299db9ec823/bio-0.39.0/src/stats/pairhmm/mod.rs","byte_start":778734,"byte_end":778743,"line_start":37,"line_end":37,"column_start":1,"column_end":10}},{"value":"/ }","span":{"file_name":"/Users/shelwitz/.cargo/registry/src/github.com-1ecc6299db9ec823/bio-0.39.0/src/stats/pairhmm/mod.rs","byte_start":778744,"byte_end":778749,"line_start":38,"line_end":38,"column_start":1,"column_end":6}},{"value":"/ let gap_params = GapParams;","span":{"file_name":"/Users/shelwitz/.cargo/registry/src/github.com-1ecc6299db9ec823/bio-0.39.0/src/stats/pairhmm/mod.rs","byte_start":778750,"byte_end":778781,"line_start":39,"line_end":39,"column_start":1,"column_end":32}},{"value":"/","span":{"file_name":"/Users/shelwitz/.cargo/registry/src/github.com-1ecc6299db9ec823/bio-0.39.0/src/stats/pairhmm/mod.rs","byte_start":778782,"byte_end":778785,"line_start":40,"line_end":40,"column_start":1,"column_end":4}},{"value":"/ // The PairHMM instance stores the gap params, since these are constant.","span":{"file_name":"/Users/shelwitz/.cargo/registry/src/github.com-1ecc6299db9ec823/bio-0.39.0/src/stats/pairhmm/mod.rs","byte_start":778786,"byte_end":778862,"line_start":41,"line_end":41,"column_start":1,"column_end":77}},{"value":"/ let mut pairhmm = PairHMM::new(&gap_params);","span":{"file_name":"/Users/shelwitz/.cargo/registry/src/github.com-1ecc6299db9ec823/bio-0.39.0/src/stats/pairhmm/mod.rs","byte_start":778863,"byte_end":778911,"line_start":42,"line_end":42,"column_start":1,"column_end":49}},{"value":"/","span":{"file_name":"/Users/shelwitz/.cargo/registry/src/github.com-1ecc6299db9ec823/bio-0.39.0/src/stats/pairhmm/mod.rs","byte_start":778912,"byte_end":778915,"line_start":43,"line_end":43,"column_start":1,"column_end":4}},{"value":"/ // However, emission parameters depend on the actual sequences","span":{"file_name":"/Users/shelwitz/.cargo/registry/src/github.com-1ecc6299db9ec823/bio-0.39.0/src/stats/pairhmm/mod.rs","byte_start":778916,"byte_end":778982,"line_start":44,"line_end":44,"column_start":1,"column_end":67}},{"value":"/ struct EmissionParams {","span":{"file_name":"/Users/shelwitz/.cargo/registry/src/github.com-1ecc6299db9ec823/bio-0.39.0/src/stats/pairhmm/mod.rs","byte_start":778983,"byte_end":779010,"line_start":45,"line_end":45,"column_start":1,"column_end":28}},{"value":"/     x: &'static [u8],","span":{"file_name":"/Users/shelwitz/.cargo/registry/src/github.com-1ecc6299db9ec823/bio-0.39.0/src/stats/pairhmm/mod.rs","byte_start":779011,"byte_end":779036,"line_start":46,"line_end":46,"column_start":1,"column_end":26}},{"value":"/     y: &'static [u8],","span":{"file_name":"/Users/shelwitz/.cargo/registry/src/github.com-1ecc6299db9ec823/bio-0.39.0/src/stats/pairhmm/mod.rs","byte_start":779037,"byte_end":779062,"line_start":47,"line_end":47,"column_start":1,"column_end":26}},{"value":"/ }","span":{"file_name":"/Users/shelwitz/.cargo/registry/src/github.com-1ecc6299db9ec823/bio-0.39.0/src/stats/pairhmm/mod.rs","byte_start":779063,"byte_end":779068,"line_start":48,"line_end":48,"column_start":1,"column_end":6}},{"value":"/","span":{"file_name":"/Users/shelwitz/.cargo/registry/src/github.com-1ecc6299db9ec823/bio-0.39.0/src/stats/pairhmm/mod.rs","byte_start":779069,"byte_end":779072,"line_start":49,"line_end":49,"column_start":1,"column_end":4}},{"value":"/ const PROB_SUBSTITUTION: f64 = 0.1;","span":{"file_name":"/Users/shelwitz/.cargo/registry/src/github.com-1ecc6299db9ec823/bio-0.39.0/src/stats/pairhmm/mod.rs","byte_start":779073,"byte_end":779112,"line_start":50,"line_end":50,"column_start":1,"column_end":40}},{"value":"/ const PROB_NO_SUBSTITUION: f64 = 1. - PROB_SUBSTITUTION;","span":{"file_name":"/Users/shelwitz/.cargo/registry/src/github.com-1ecc6299db9ec823/bio-0.39.0/src/stats/pairhmm/mod.rs","byte_start":779113,"byte_end":779173,"line_start":51,"line_end":51,"column_start":1,"column_end":61}},{"value":"/ impl EmissionParameters for EmissionParams {","span":{"file_name":"/Users/shelwitz/.cargo/registry/src/github.com-1ecc6299db9ec823/bio-0.39.0/src/stats/pairhmm/mod.rs","byte_start":779174,"byte_end":779222,"line_start":52,"line_end":52,"column_start":1,"column_end":49}},{"value":"/     fn prob_emit_xy(&self, i: usize, j: usize) -> XYEmission {","span":{"file_name":"/Users/shelwitz/.cargo/registry/src/github.com-1ecc6299db9ec823/bio-0.39.0/src/stats/pairhmm/mod.rs","byte_start":779223,"byte_end":779289,"line_start":53,"line_end":53,"column_start":1,"column_end":67}},{"value":"/         if self.x[i] == self.y[j] {","span":{"file_name":"/Users/shelwitz/.cargo/registry/src/github.com-1ecc6299db9ec823/bio-0.39.0/src/stats/pairhmm/mod.rs","byte_start":779290,"byte_end":779329,"line_start":54,"line_end":54,"column_start":1,"column_end":40}},{"value":"/             // if two bases match, emit a Match!","span":{"file_name":"/Users/shelwitz/.cargo/registry/src/github.com-1ecc6299db9ec823/bio-0.39.0/src/stats/pairhmm/mod.rs","byte_start":779330,"byte_end":779382,"line_start":55,"line_end":55,"column_start":1,"column_end":53}},{"value":"/             XYEmission::Match(LogProb::from(Prob(PROB_NO_SUBSTITUION)))","span":{"file_name":"/Users/shelwitz/.cargo/registry/src/github.com-1ecc6299db9ec823/bio-0.39.0/src/stats/pairhmm/mod.rs","byte_start":779383,"byte_end":779458,"line_start":56,"line_end":56,"column_start":1,"column_end":76}},{"value":"/         } else {","span":{"file_name":"/Users/shelwitz/.cargo/registry/src/github.com-1ecc6299db9ec823/bio-0.39.0/src/stats/pairhmm/mod.rs","byte_start":779459,"byte_end":779479,"line_start":57,"line_end":57,"column_start":1,"column_end":21}},{"value":"/             // otherwise emit a Mismatch!","span":{"file_name":"/Users/shelwitz/.cargo/registry/src/github.com-1ecc6299db9ec823/bio-0.39.0/src/stats/pairhmm/mod.rs","byte_start":779480,"byte_end":779525,"line_start":58,"line_end":58,"column_start":1,"column_end":46}},{"value":"/             // Note that the probability here is `mismatch / 3`, since probabilities should sum","span":{"file_name":"/Users/shelwitz/.cargo/registry/src/github.com-1ecc6299db9ec823/bio-0.39.0/src/stats/pairhmm/mod.rs","byte_start":779526,"byte_end":779625,"line_start":59,"line_end":59,"column_start":1,"column_end":100}},{"value":"/             // to 1 and there are 3 possible mismatch configurations","span":{"file_name":"/Users/shelwitz/.cargo/registry/src/github.com-1ecc6299db9ec823/bio-0.39.0/src/stats/pairhmm/mod.rs","byte_start":779626,"byte_end":779698,"line_start":60,"line_end":60,"column_start":1,"column_end":73}},{"value":"/             XYEmission::Mismatch(LogProb::from(Prob(PROB_SUBSTITUTION / 3.)))","span":{"file_name":"/Users/shelwitz/.cargo/registry/src/github.com-1ecc6299db9ec823/bio-0.39.0/src/stats/pairhmm/mod.rs","byte_start":779699,"byte_end":779780,"line_start":61,"line_end":61,"column_start":1,"column_end":82}},{"value":"/         }","span":{"file_name":"/Users/shelwitz/.cargo/registry/src/github.com-1ecc6299db9ec823/bio-0.39.0/src/stats/pairhmm/mod.rs","byte_start":779781,"byte_end":779794,"line_start":62,"line_end":62,"column_start":1,"column_end":14}},{"value":"/     }","span":{"file_name":"/Users/shelwitz/.cargo/registry/src/github.com-1ecc6299db9ec823/bio-0.39.0/src/stats/pairhmm/mod.rs","byte_start":779795,"byte_end":779804,"line_start":63,"line_end":63,"column_start":1,"column_end":10}},{"value":"/","span":{"file_name":"/Users/shelwitz/.cargo/registry/src/github.com-1ecc6299db9ec823/bio-0.39.0/src/stats/pairhmm/mod.rs","byte_start":779805,"byte_end":779808,"line_start":64,"line_end":64,"column_start":1,"column_end":4}},{"value":"/     // In this example, emitting x[i] is as likely as not observing a mismatch.","span":{"file_name":"/Users/shelwitz/.cargo/registry/src/github.com-1ecc6299db9ec823/bio-0.39.0/src/stats/pairhmm/mod.rs","byte_start":779809,"byte_end":779892,"line_start":65,"line_end":65,"column_start":1,"column_end":84}},{"value":"/     // In more complex cases, this might e.g. depend on base qualities reported by the sequencer","span":{"file_name":"/Users/shelwitz/.cargo/registry/src/github.com-1ecc6299db9ec823/bio-0.39.0/src/stats/pairhmm/mod.rs","byte_start":779893,"byte_end":779993,"line_start":66,"line_end":66,"column_start":1,"column_end":101}},{"value":"/     fn prob_emit_x(&self, i: usize) -> LogProb {","span":{"file_name":"/Users/shelwitz/.cargo/registry/src/github.com-1ecc6299db9ec823/bio-0.39.0/src/stats/pairhmm/mod.rs","byte_start":779994,"byte_end":780046,"line_start":67,"line_end":67,"column_start":1,"column_end":53}},{"value":"/         LogProb::from(Prob(PROB_NO_SUBSTITUION))","span":{"file_name":"/Users/shelwitz/.cargo/registry/src/github.com-1ecc6299db9ec823/bio-0.39.0/src/stats/pairhmm/mod.rs","byte_start":780047,"byte_end":780099,"line_start":68,"line_end":68,"column_start":1,"column_end":53}},{"value":"/     }","span":{"file_name":"/Users/shelwitz/.cargo/registry/src/github.com-1ecc6299db9ec823/bio-0.39.0/src/stats/pairhmm/mod.rs","byte_start":780100,"byte_end":780109,"line_start":69,"line_end":69,"column_start":1,"column_end":10}},{"value":"/     fn prob_emit_y(&self, j: usize) -> LogProb {","span":{"file_name":"/Users/shelwitz/.cargo/registry/src/github.com-1ecc6299db9ec823/bio-0.39.0/src/stats/pairhmm/mod.rs","byte_start":780110,"byte_end":780162,"line_start":70,"line_end":70,"column_start":1,"column_end":53}},{"value":"/         LogProb::from(Prob(PROB_NO_SUBSTITUION))","span":{"file_name":"/Users/shelwitz/.cargo/registry/src/github.com-1ecc6299db9ec823/bio-0.39.0/src/stats/pairhmm/mod.rs","byte_start":780163,"byte_end":780215,"line_start":71,"line_end":71,"column_start":1,"column_end":53}},{"value":"/     }","span":{"file_name":"/Users/shelwitz/.cargo/registry/src/github.com-1ecc6299db9ec823/bio-0.39.0/src/stats/pairhmm/mod.rs","byte_start":780216,"byte_end":780225,"line_start":72,"line_end":72,"column_start":1,"column_end":10}},{"value":"/","span":{"file_name":"/Users/shelwitz/.cargo/registry/src/github.com-1ecc6299db9ec823/bio-0.39.0/src/stats/pairhmm/mod.rs","byte_start":780226,"byte_end":780229,"line_start":73,"line_end":73,"column_start":1,"column_end":4}},{"value":"/     fn len_x(&self) -> usize {","span":{"file_name":"/Users/shelwitz/.cargo/registry/src/github.com-1ecc6299db9ec823/bio-0.39.0/src/stats/pairhmm/mod.rs","byte_start":780230,"byte_end":780264,"line_start":74,"line_end":74,"column_start":1,"column_end":35}},{"value":"/         self.x.len()","span":{"file_name":"/Users/shelwitz/.cargo/registry/src/github.com-1ecc6299db9ec823/bio-0.39.0/src/stats/pairhmm/mod.rs","byte_start":780265,"byte_end":780289,"line_start":75,"line_end":75,"column_start":1,"column_end":25}},{"value":"/     }","span":{"file_name":"/Users/shelwitz/.cargo/registry/src/github.com-1ecc6299db9ec823/bio-0.39.0/src/stats/pairhmm/mod.rs","byte_start":780290,"byte_end":780299,"line_start":76,"line_end":76,"column_start":1,"column_end":10}},{"value":"/     fn len_y(&self) -> usize {","span":{"file_name":"/Users/shelwitz/.cargo/registry/src/github.com-1ecc6299db9ec823/bio-0.39.0/src/stats/pairhmm/mod.rs","byte_start":780300,"byte_end":780334,"line_start":77,"line_end":77,"column_start":1,"column_end":35}},{"value":"/         self.y.len()","span":{"file_name":"/Users/shelwitz/.cargo/registry/src/github.com-1ecc6299db9ec823/bio-0.39.0/src/stats/pairhmm/mod.rs","byte_start":780335,"byte_end":780359,"line_start":78,"line_end":78,"column_start":1,"column_end":25}},{"value":"/     }","span":{"file_name":"/Users/shelwitz/.cargo/registry/src/github.com-1ecc6299db9ec823/bio-0.39.0/src/stats/pairhmm/mod.rs","byte_start":780360,"byte_end":780369,"line_start":79,"line_end":79,"column_start":1,"column_end":10}},{"value":"/ }","span":{"file_name":"/Users/shelwitz/.cargo/registry/src/github.com-1ecc6299db9ec823/bio-0.39.0/src/stats/pairhmm/mod.rs","byte_start":780370,"byte_end":780375,"line_start":80,"line_end":80,"column_start":1,"column_end":6}},{"value":"/","span":{"file_name":"/Users/shelwitz/.cargo/registry/src/github.com-1ecc6299db9ec823/bio-0.39.0/src/stats/pairhmm/mod.rs","byte_start":780376,"byte_end":780379,"line_start":81,"line_end":81,"column_start":1,"column_end":4}},{"value":"/ // Since we want to do global alignment here, disallow free start and end gaps in x.","span":{"file_name":"/Users/shelwitz/.cargo/registry/src/github.com-1ecc6299db9ec823/bio-0.39.0/src/stats/pairhmm/mod.rs","byte_start":780380,"byte_end":780468,"line_start":82,"line_end":82,"column_start":1,"column_end":89}},{"value":"/ struct GlobalAlignmentMode;","span":{"file_name":"/Users/shelwitz/.cargo/registry/src/github.com-1ecc6299db9ec823/bio-0.39.0/src/stats/pairhmm/mod.rs","byte_start":780469,"byte_end":780500,"line_start":83,"line_end":83,"column_start":1,"column_end":32}},{"value":"/ impl StartEndGapParameters for GlobalAlignmentMode {","span":{"file_name":"/Users/shelwitz/.cargo/registry/src/github.com-1ecc6299db9ec823/bio-0.39.0/src/stats/pairhmm/mod.rs","byte_start":780501,"byte_end":780557,"line_start":84,"line_end":84,"column_start":1,"column_end":57}},{"value":"/     fn free_start_gap_x(&self) -> bool {","span":{"file_name":"/Users/shelwitz/.cargo/registry/src/github.com-1ecc6299db9ec823/bio-0.39.0/src/stats/pairhmm/mod.rs","byte_start":780558,"byte_end":780602,"line_start":85,"line_end":85,"column_start":1,"column_end":45}},{"value":"/         false","span":{"file_name":"/Users/shelwitz/.cargo/registry/src/github.com-1ecc6299db9ec823/bio-0.39.0/src/stats/pairhmm/mod.rs","byte_start":780603,"byte_end":780620,"line_start":86,"line_end":86,"column_start":1,"column_end":18}},{"value":"/     }","span":{"file_name":"/Users/shelwitz/.cargo/registry/src/github.com-1ecc6299db9ec823/bio-0.39.0/src/stats/pairhmm/mod.rs","byte_start":780621,"byte_end":780630,"line_start":87,"line_end":87,"column_start":1,"column_end":10}},{"value":"/     fn free_end_gap_x(&self) -> bool {","span":{"file_name":"/Users/shelwitz/.cargo/registry/src/github.com-1ecc6299db9ec823/bio-0.39.0/src/stats/pairhmm/mod.rs","byte_start":780631,"byte_end":780673,"line_start":88,"line_end":88,"column_start":1,"column_end":43}},{"value":"/         false","span":{"file_name":"/Users/shelwitz/.cargo/registry/src/github.com-1ecc6299db9ec823/bio-0.39.0/src/stats/pairhmm/mod.rs","byte_start":780674,"byte_end":780691,"line_start":89,"line_end":89,"column_start":1,"column_end":18}},{"value":"/     }","span":{"file_name":"/Users/shelwitz/.cargo/registry/src/github.com-1ecc6299db9ec823/bio-0.39.0/src/stats/pairhmm/mod.rs","byte_start":780692,"byte_end":780701,"line_start":90,"line_end":90,"column_start":1,"column_end":10}},{"value":"/ }","span":{"file_name":"/Users/shelwitz/.cargo/registry/src/github.com-1ecc6299db9ec823/bio-0.39.0/src/stats/pairhmm/mod.rs","byte_start":780702,"byte_end":780707,"line_start":91,"line_end":91,"column_start":1,"column_end":6}},{"value":"/","span":{"file_name":"/Users/shelwitz/.cargo/registry/src/github.com-1ecc6299db9ec823/bio-0.39.0/src/stats/pairhmm/mod.rs","byte_start":780708,"byte_end":780711,"line_start":92,"line_end":92,"column_start":1,"column_end":4}},{"value":"/ // Finally calculate the probability of relatedness between x and y!","span":{"file_name":"/Users/shelwitz/.cargo/registry/src/github.com-1ecc6299db9ec823/bio-0.39.0/src/stats/pairhmm/mod.rs","byte_start":780712,"byte_end":780784,"line_start":93,"line_end":93,"column_start":1,"column_end":73}},{"value":"/ let prob_related = pairhmm.prob_related(&EmissionParams { x, y }, &GlobalAlignmentMode, None);","span":{"file_name":"/Users/shelwitz/.cargo/registry/src/github.com-1ecc6299db9ec823/bio-0.39.0/src/stats/pairhmm/mod.rs","byte_start":780785,"byte_end":780883,"line_start":94,"line_end":94,"column_start":1,"column_end":99}},{"value":"/","span":{"file_name":"/Users/shelwitz/.cargo/registry/src/github.com-1ecc6299db9ec823/bio-0.39.0/src/stats/pairhmm/mod.rs","byte_start":780884,"byte_end":780887,"line_start":95,"line_end":95,"column_start":1,"column_end":4}},{"value":"/ // … and compare it to a rough estimation","span":{"file_name":"/Users/shelwitz/.cargo/registry/src/github.com-1ecc6299db9ec823/bio-0.39.0/src/stats/pairhmm/mod.rs","byte_start":780888,"byte_end":780935,"line_start":96,"line_end":96,"column_start":1,"column_end":46}},{"value":"/ let prob_expected = LogProb::from(Prob(PROB_NO_SUBSTITUION.powi(3) * PROB_SUBSTITUTION / 3.));","span":{"file_name":"/Users/shelwitz/.cargo/registry/src/github.com-1ecc6299db9ec823/bio-0.39.0/src/stats/pairhmm/mod.rs","byte_start":780936,"byte_end":781034,"line_start":97,"line_end":97,"column_start":1,"column_end":99}},{"value":"/ assert_relative_eq!(*prob_related, *prob_expected, epsilon = 1e-5);","span":{"file_name":"/Users/shelwitz/.cargo/registry/src/github.com-1ecc6299db9ec823/bio-0.39.0/src/stats/pairhmm/mod.rs","byte_start":781035,"byte_end":781106,"line_start":98,"line_end":98,"column_start":1,"column_end":72}},{"value":"/ ```","span":{"file_name":"/Users/shelwitz/.cargo/registry/src/github.com-1ecc6299db9ec823/bio-0.39.0/src/stats/pairhmm/mod.rs","byte_start":781107,"byte_end":781114,"line_start":99,"line_end":99,"column_start":1,"column_end":8}}]},{"kind":"Trait","id":{"krate":0,"index":2903},"span":{"file_name":"/Users/shelwitz/.cargo/registry/src/github.com-1ecc6299db9ec823/bio-0.39.0/src/stats/pairhmm/homopolypairhmm.rs","byte_start":791035,"byte_end":791048,"line_start":154,"line_end":154,"column_start":11,"column_end":24},"name":"HopParameters","qualname":"::stats::pairhmm::homopolypairhmm::HopParameters","value":"HopParameters","parent":null,"children":[{"krate":0,"index":2904},{"krate":0,"index":2905},{"krate":0,"index":2906},{"krate":0,"index":2907}],"decl_id":null,"docs":" Trait for parametrization of `PairHMM` hop behavior.\n","sig":null,"attributes":[{"value":"/ Trait for parametrization of `PairHMM` hop behavior.","span":{"file_name":"/Users/shelwitz/.cargo/registry/src/github.com-1ecc6299db9ec823/bio-0.39.0/src/stats/pairhmm/homopolypairhmm.rs","byte_start":790968,"byte_end":791024,"line_start":153,"line_end":153,"column_start":1,"column_end":57}}]},{"kind":"Method","id":{"krate":0,"index":2904},"span":{"file_name":"/Users/shelwitz/.cargo/registry/src/github.com-1ecc6299db9ec823/bio-0.39.0/src/stats/pairhmm/homopolypairhmm.rs","byte_start":791097,"byte_end":791107,"line_start":156,"line_end":156,"column_start":8,"column_end":18},"name":"prob_hop_x","qualname":"::stats::pairhmm::homopolypairhmm::HopParameters::prob_hop_x","value":"pub fn prob_hop_x(&Self) -> LogProb","parent":{"krate":0,"index":2903},"children":[],"decl_id":null,"docs":" Probability to start hop in x.\n","sig":null,"attributes":[{"value":"/ Probability to start hop in x.","span":{"file_name":"/Users/shelwitz/.cargo/registry/src/github.com-1ecc6299db9ec823/bio-0.39.0/src/stats/pairhmm/homopolypairhmm.rs","byte_start":791055,"byte_end":791089,"line_start":155,"line_end":155,"column_start":5,"column_end":39}}]},{"kind":"Method","id":{"krate":0,"index":2905},"span":{"file_name":"/Users/shelwitz/.cargo/registry/src/github.com-1ecc6299db9ec823/bio-0.39.0/src/stats/pairhmm/homopolypairhmm.rs","byte_start":791174,"byte_end":791184,"line_start":159,"line_end":159,"column_start":8,"column_end":18},"name":"prob_hop_y","qualname":"::stats::pairhmm::homopolypairhmm::HopParameters::prob_hop_y","value":"pub fn prob_hop_y(&Self) -> LogProb","parent":{"krate":0,"index":2903},"children":[],"decl_id":null,"docs":" Probability to start hop in y.\n","sig":null,"attributes":[{"value":"/ Probability to start hop in y.","span":{"file_name":"/Users/shelwitz/.cargo/registry/src/github.com-1ecc6299db9ec823/bio-0.39.0/src/stats/pairhmm/homopolypairhmm.rs","byte_start":791132,"byte_end":791166,"line_start":158,"line_end":158,"column_start":5,"column_end":39}}]},{"kind":"Method","id":{"krate":0,"index":2906},"span":{"file_name":"/Users/shelwitz/.cargo/registry/src/github.com-1ecc6299db9ec823/bio-0.39.0/src/stats/pairhmm/homopolypairhmm.rs","byte_start":791252,"byte_end":791269,"line_start":162,"line_end":162,"column_start":8,"column_end":25},"name":"prob_hop_x_extend","qualname":"::stats::pairhmm::homopolypairhmm::HopParameters::prob_hop_x_extend","value":"pub fn prob_hop_x_extend(&Self) -> LogProb","parent":{"krate":0,"index":2903},"children":[],"decl_id":null,"docs":" Probability to extend hop in x.\n","sig":null,"attributes":[{"value":"/ Probability to extend hop in x.","span":{"file_name":"/Users/shelwitz/.cargo/registry/src/github.com-1ecc6299db9ec823/bio-0.39.0/src/stats/pairhmm/homopolypairhmm.rs","byte_start":791209,"byte_end":791244,"line_start":161,"line_end":161,"column_start":5,"column_end":40}}]},{"kind":"Method","id":{"krate":0,"index":2907},"span":{"file_name":"/Users/shelwitz/.cargo/registry/src/github.com-1ecc6299db9ec823/bio-0.39.0/src/stats/pairhmm/homopolypairhmm.rs","byte_start":791337,"byte_end":791354,"line_start":165,"line_end":165,"column_start":8,"column_end":25},"name":"prob_hop_y_extend","qualname":"::stats::pairhmm::homopolypairhmm::HopParameters::prob_hop_y_extend","value":"pub fn prob_hop_y_extend(&Self) -> LogProb","parent":{"krate":0,"index":2903},"children":[],"decl_id":null,"docs":" Probability to extend hop in y.\n","sig":null,"attributes":[{"value":"/ Probability to extend hop in y.","span":{"file_name":"/Users/shelwitz/.cargo/registry/src/github.com-1ecc6299db9ec823/bio-0.39.0/src/stats/pairhmm/homopolypairhmm.rs","byte_start":791294,"byte_end":791329,"line_start":164,"line_end":164,"column_start":5,"column_end":40}}]},{"kind":"Struct","id":{"krate":0,"index":5837},"span":{"file_name":"/Users/shelwitz/.cargo/registry/src/github.com-1ecc6299db9ec823/bio-0.39.0/src/stats/pairhmm/homopolypairhmm.rs","byte_start":791787,"byte_end":791802,"line_start":174,"line_end":174,"column_start":12,"column_end":27},"name":"HomopolyPairHMM","qualname":"::stats::pairhmm::homopolypairhmm::HomopolyPairHMM","value":"HomopolyPairHMM {  }","parent":null,"children":[{"krate":0,"index":5838}],"decl_id":null,"docs":" A pair Hidden Markov Model for comparing sequences x and y as described by\n Durbin, R., Eddy, S., Krogh, A., & Mitchison, G. (1998). Biological Sequence Analysis.\n Current Topics in Genome Analysis 2008. http://doi.org/10.1017/CBO9780511790492.\n The default model has been extended to consider homopolymer errors, at the cost of more states\n and transitions.\n","sig":null,"attributes":[{"value":"/ A pair Hidden Markov Model for comparing sequences x and y as described by","span":{"file_name":"/Users/shelwitz/.cargo/registry/src/github.com-1ecc6299db9ec823/bio-0.39.0/src/stats/pairhmm/homopolypairhmm.rs","byte_start":791377,"byte_end":791455,"line_start":168,"line_end":168,"column_start":1,"column_end":79}},{"value":"/ Durbin, R., Eddy, S., Krogh, A., & Mitchison, G. (1998). Biological Sequence Analysis.","span":{"file_name":"/Users/shelwitz/.cargo/registry/src/github.com-1ecc6299db9ec823/bio-0.39.0/src/stats/pairhmm/homopolypairhmm.rs","byte_start":791456,"byte_end":791546,"line_start":169,"line_end":169,"column_start":1,"column_end":91}},{"value":"/ Current Topics in Genome Analysis 2008. http://doi.org/10.1017/CBO9780511790492.","span":{"file_name":"/Users/shelwitz/.cargo/registry/src/github.com-1ecc6299db9ec823/bio-0.39.0/src/stats/pairhmm/homopolypairhmm.rs","byte_start":791547,"byte_end":791631,"line_start":170,"line_end":170,"column_start":1,"column_end":85}},{"value":"/ The default model has been extended to consider homopolymer errors, at the cost of more states","span":{"file_name":"/Users/shelwitz/.cargo/registry/src/github.com-1ecc6299db9ec823/bio-0.39.0/src/stats/pairhmm/homopolypairhmm.rs","byte_start":791632,"byte_end":791730,"line_start":171,"line_end":171,"column_start":1,"column_end":99}},{"value":"/ and transitions.","span":{"file_name":"/Users/shelwitz/.cargo/registry/src/github.com-1ecc6299db9ec823/bio-0.39.0/src/stats/pairhmm/homopolypairhmm.rs","byte_start":791731,"byte_end":791751,"line_start":172,"line_end":172,"column_start":1,"column_end":21}}]},{"kind":"Method","id":{"krate":0,"index":2909},"span":{"file_name":"/Users/shelwitz/.cargo/registry/src/github.com-1ecc6299db9ec823/bio-0.39.0/src/stats/pairhmm/homopolypairhmm.rs","byte_start":792101,"byte_end":792104,"line_start":184,"line_end":184,"column_start":12,"column_end":15},"name":"new","qualname":"<HomopolyPairHMM>::new","value":"pub fn new<G, H>(&G, &H) -> Self where G: GapParameters, H: HopParameters","parent":null,"children":[],"decl_id":null,"docs":" Create a new instance of a HomopolyPairHMM.\n # Arguments","sig":null,"attributes":[{"value":"/ Create a new instance of a HomopolyPairHMM.","span":{"file_name":"/Users/shelwitz/.cargo/registry/src/github.com-1ecc6299db9ec823/bio-0.39.0/src/stats/pairhmm/homopolypairhmm.rs","byte_start":791882,"byte_end":791929,"line_start":179,"line_end":179,"column_start":5,"column_end":52}},{"value":"/ # Arguments","span":{"file_name":"/Users/shelwitz/.cargo/registry/src/github.com-1ecc6299db9ec823/bio-0.39.0/src/stats/pairhmm/homopolypairhmm.rs","byte_start":791934,"byte_end":791949,"line_start":180,"line_end":180,"column_start":5,"column_end":20}},{"value":"/","span":{"file_name":"/Users/shelwitz/.cargo/registry/src/github.com-1ecc6299db9ec823/bio-0.39.0/src/stats/pairhmm/homopolypairhmm.rs","byte_start":791954,"byte_end":791957,"line_start":181,"line_end":181,"column_start":5,"column_end":8}},{"value":"/ * `gap_params` - parameters for opening or extending gaps","span":{"file_name":"/Users/shelwitz/.cargo/registry/src/github.com-1ecc6299db9ec823/bio-0.39.0/src/stats/pairhmm/homopolypairhmm.rs","byte_start":791962,"byte_end":792023,"line_start":182,"line_end":182,"column_start":5,"column_end":66}},{"value":"/ * `hop_params` - parameters for opening or extending hops","span":{"file_name":"/Users/shelwitz/.cargo/registry/src/github.com-1ecc6299db9ec823/bio-0.39.0/src/stats/pairhmm/homopolypairhmm.rs","byte_start":792028,"byte_end":792089,"line_start":183,"line_end":183,"column_start":5,"column_end":66}}]},{"kind":"Method","id":{"krate":0,"index":2912},"span":{"file_name":"/Users/shelwitz/.cargo/registry/src/github.com-1ecc6299db9ec823/bio-0.39.0/src/stats/pairhmm/homopolypairhmm.rs","byte_start":792683,"byte_end":792695,"line_start":201,"line_end":201,"column_start":12,"column_end":24},"name":"prob_related","qualname":"<HomopolyPairHMM>::prob_related","value":"pub fn prob_related<E, A>(&Self, &E, &A, Option<usize>) -> LogProb where\nE: EmissionParameters + Emission, A: StartEndGapParameters","parent":null,"children":[],"decl_id":null,"docs":" Calculate the probability of sequence x being related to y via any alignment.","sig":null,"attributes":[{"value":"/ Calculate the probability of sequence x being related to y via any alignment.","span":{"file_name":"/Users/shelwitz/.cargo/registry/src/github.com-1ecc6299db9ec823/bio-0.39.0/src/stats/pairhmm/homopolypairhmm.rs","byte_start":792333,"byte_end":792414,"line_start":194,"line_end":194,"column_start":5,"column_end":86}},{"value":"/","span":{"file_name":"/Users/shelwitz/.cargo/registry/src/github.com-1ecc6299db9ec823/bio-0.39.0/src/stats/pairhmm/homopolypairhmm.rs","byte_start":792419,"byte_end":792422,"line_start":195,"line_end":195,"column_start":5,"column_end":8}},{"value":"/ # Arguments","span":{"file_name":"/Users/shelwitz/.cargo/registry/src/github.com-1ecc6299db9ec823/bio-0.39.0/src/stats/pairhmm/homopolypairhmm.rs","byte_start":792427,"byte_end":792442,"line_start":196,"line_end":196,"column_start":5,"column_end":20}},{"value":"/","span":{"file_name":"/Users/shelwitz/.cargo/registry/src/github.com-1ecc6299db9ec823/bio-0.39.0/src/stats/pairhmm/homopolypairhmm.rs","byte_start":792447,"byte_end":792450,"line_start":197,"line_end":197,"column_start":5,"column_end":8}},{"value":"/ * `emission_params` - parameters for emission","span":{"file_name":"/Users/shelwitz/.cargo/registry/src/github.com-1ecc6299db9ec823/bio-0.39.0/src/stats/pairhmm/homopolypairhmm.rs","byte_start":792455,"byte_end":792504,"line_start":198,"line_end":198,"column_start":5,"column_end":54}},{"value":"/ * `alignment_mode` - parameters for free end/start gaps","span":{"file_name":"/Users/shelwitz/.cargo/registry/src/github.com-1ecc6299db9ec823/bio-0.39.0/src/stats/pairhmm/homopolypairhmm.rs","byte_start":792509,"byte_end":792568,"line_start":199,"line_end":199,"column_start":5,"column_end":64}},{"value":"/ * `max_edit_dist` - maximum edit distance to consider; if not `None`, perform banded alignment","span":{"file_name":"/Users/shelwitz/.cargo/registry/src/github.com-1ecc6299db9ec823/bio-0.39.0/src/stats/pairhmm/homopolypairhmm.rs","byte_start":792573,"byte_end":792671,"line_start":200,"line_end":200,"column_start":5,"column_end":103}}]},{"kind":"Struct","id":{"krate":0,"index":5843},"span":{"file_name":"/Users/shelwitz/.cargo/registry/src/github.com-1ecc6299db9ec823/bio-0.39.0/src/stats/pairhmm/pairhmm.rs","byte_start":825341,"byte_end":825348,"line_start":48,"line_end":48,"column_start":12,"column_end":19},"name":"PairHMM","qualname":"::stats::pairhmm::pairhmm::PairHMM","value":"PairHMM {  }","parent":null,"children":[{"krate":0,"index":5844},{"krate":0,"index":5846},{"krate":0,"index":5848},{"krate":0,"index":5850},{"krate":0,"index":5852},{"krate":0,"index":5853}],"decl_id":null,"docs":" A pair Hidden Markov Model for comparing sequences x and y as described by\n Durbin, R., Eddy, S., Krogh, A., & Mitchison, G. (1998). Biological Sequence Analysis.\n Current Topics in Genome Analysis 2008. http://doi.org/10.1017/CBO9780511790492.\n","sig":null,"attributes":[{"value":"/ A pair Hidden Markov Model for comparing sequences x and y as described by","span":{"file_name":"/Users/shelwitz/.cargo/registry/src/github.com-1ecc6299db9ec823/bio-0.39.0/src/stats/pairhmm/pairhmm.rs","byte_start":825051,"byte_end":825129,"line_start":44,"line_end":44,"column_start":1,"column_end":79}},{"value":"/ Durbin, R., Eddy, S., Krogh, A., & Mitchison, G. (1998). Biological Sequence Analysis.","span":{"file_name":"/Users/shelwitz/.cargo/registry/src/github.com-1ecc6299db9ec823/bio-0.39.0/src/stats/pairhmm/pairhmm.rs","byte_start":825130,"byte_end":825220,"line_start":45,"line_end":45,"column_start":1,"column_end":91}},{"value":"/ Current Topics in Genome Analysis 2008. http://doi.org/10.1017/CBO9780511790492.","span":{"file_name":"/Users/shelwitz/.cargo/registry/src/github.com-1ecc6299db9ec823/bio-0.39.0/src/stats/pairhmm/pairhmm.rs","byte_start":825221,"byte_end":825305,"line_start":46,"line_end":46,"column_start":1,"column_end":85}}]},{"kind":"Method","id":{"krate":0,"index":2993},"span":{"file_name":"/Users/shelwitz/.cargo/registry/src/github.com-1ecc6299db9ec823/bio-0.39.0/src/stats/pairhmm/pairhmm.rs","byte_start":825871,"byte_end":825874,"line_start":71,"line_end":71,"column_start":12,"column_end":15},"name":"new","qualname":"<PairHMM>::new","value":"pub fn new<G>(&G) -> Self where G: GapParameters","parent":null,"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":2995},"span":{"file_name":"/Users/shelwitz/.cargo/registry/src/github.com-1ecc6299db9ec823/bio-0.39.0/src/stats/pairhmm/pairhmm.rs","byte_start":827338,"byte_end":827350,"line_start":106,"line_end":106,"column_start":12,"column_end":24},"name":"prob_related","qualname":"<PairHMM>::prob_related","value":"pub fn prob_related<E, A>(&mut Self, &E, &A, Option<usize>) -> LogProb where\nE: EmissionParameters, A: StartEndGapParameters","parent":null,"children":[],"decl_id":null,"docs":" Calculate the probability of sequence x being related to y via any alignment.","sig":null,"attributes":[{"value":"/ Calculate the probability of sequence x being related to y via any alignment.","span":{"file_name":"/Users/shelwitz/.cargo/registry/src/github.com-1ecc6299db9ec823/bio-0.39.0/src/stats/pairhmm/pairhmm.rs","byte_start":826986,"byte_end":827067,"line_start":99,"line_end":99,"column_start":5,"column_end":86}},{"value":"/","span":{"file_name":"/Users/shelwitz/.cargo/registry/src/github.com-1ecc6299db9ec823/bio-0.39.0/src/stats/pairhmm/pairhmm.rs","byte_start":827072,"byte_end":827075,"line_start":100,"line_end":100,"column_start":5,"column_end":8}},{"value":"/ # Arguments","span":{"file_name":"/Users/shelwitz/.cargo/registry/src/github.com-1ecc6299db9ec823/bio-0.39.0/src/stats/pairhmm/pairhmm.rs","byte_start":827080,"byte_end":827095,"line_start":101,"line_end":101,"column_start":5,"column_end":20}},{"value":"/","span":{"file_name":"/Users/shelwitz/.cargo/registry/src/github.com-1ecc6299db9ec823/bio-0.39.0/src/stats/pairhmm/pairhmm.rs","byte_start":827100,"byte_end":827103,"line_start":102,"line_end":102,"column_start":5,"column_end":8}},{"value":"/ * `gap_params` - parameters for opening or extending gaps","span":{"file_name":"/Users/shelwitz/.cargo/registry/src/github.com-1ecc6299db9ec823/bio-0.39.0/src/stats/pairhmm/pairhmm.rs","byte_start":827108,"byte_end":827169,"line_start":103,"line_end":103,"column_start":5,"column_end":66}},{"value":"/ * `emission_params` - parameters for emission","span":{"file_name":"/Users/shelwitz/.cargo/registry/src/github.com-1ecc6299db9ec823/bio-0.39.0/src/stats/pairhmm/pairhmm.rs","byte_start":827174,"byte_end":827223,"line_start":104,"line_end":104,"column_start":5,"column_end":54}},{"value":"/ * `max_edit_dist` - maximum edit distance to consider; if not `None`, perform banded alignment","span":{"file_name":"/Users/shelwitz/.cargo/registry/src/github.com-1ecc6299db9ec823/bio-0.39.0/src/stats/pairhmm/pairhmm.rs","byte_start":827228,"byte_end":827326,"line_start":105,"line_end":105,"column_start":5,"column_end":103}}]},{"kind":"Trait","id":{"krate":0,"index":2998},"span":{"file_name":"/Users/shelwitz/.cargo/registry/src/github.com-1ecc6299db9ec823/bio-0.39.0/src/stats/pairhmm/mod.rs","byte_start":781381,"byte_end":781399,"line_start":111,"line_end":111,"column_start":11,"column_end":29},"name":"EmissionParameters","qualname":"::stats::pairhmm::EmissionParameters","value":"EmissionParameters","parent":null,"children":[{"krate":0,"index":2999},{"krate":0,"index":3000},{"krate":0,"index":3001},{"krate":0,"index":3002},{"krate":0,"index":3003}],"decl_id":null,"docs":" Trait for parametrization of `PairHMM` emission behavior.\n","sig":null,"attributes":[{"value":"/ Trait for parametrization of `PairHMM` emission behavior.","span":{"file_name":"/Users/shelwitz/.cargo/registry/src/github.com-1ecc6299db9ec823/bio-0.39.0/src/stats/pairhmm/mod.rs","byte_start":781309,"byte_end":781370,"line_start":110,"line_end":110,"column_start":1,"column_end":62}}]},{"kind":"Method","id":{"krate":0,"index":2999},"span":{"file_name":"/Users/shelwitz/.cargo/registry/src/github.com-1ecc6299db9ec823/bio-0.39.0/src/stats/pairhmm/mod.rs","byte_start":781598,"byte_end":781610,"line_start":115,"line_end":115,"column_start":8,"column_end":20},"name":"prob_emit_xy","qualname":"::stats::pairhmm::EmissionParameters::prob_emit_xy","value":"pub fn prob_emit_xy(&Self, usize, usize) -> XYEmission","parent":{"krate":0,"index":2998},"children":[],"decl_id":null,"docs":" Emission probability for `(x[i], y[j])`.\n Returns a tuple with probability and a boolean indicating whether emissions match\n (e.g., are the same DNA alphabet letter).\n","sig":null,"attributes":[{"value":"/ Emission probability for `(x[i], y[j])`.","span":{"file_name":"/Users/shelwitz/.cargo/registry/src/github.com-1ecc6299db9ec823/bio-0.39.0/src/stats/pairhmm/mod.rs","byte_start":781406,"byte_end":781450,"line_start":112,"line_end":112,"column_start":5,"column_end":49}},{"value":"/ Returns a tuple with probability and a boolean indicating whether emissions match","span":{"file_name":"/Users/shelwitz/.cargo/registry/src/github.com-1ecc6299db9ec823/bio-0.39.0/src/stats/pairhmm/mod.rs","byte_start":781455,"byte_end":781540,"line_start":113,"line_end":113,"column_start":5,"column_end":90}},{"value":"/ (e.g., are the same DNA alphabet letter).","span":{"file_name":"/Users/shelwitz/.cargo/registry/src/github.com-1ecc6299db9ec823/bio-0.39.0/src/stats/pairhmm/mod.rs","byte_start":781545,"byte_end":781590,"line_start":114,"line_end":114,"column_start":5,"column_end":50}}]},{"kind":"Method","id":{"krate":0,"index":3000},"span":{"file_name":"/Users/shelwitz/.cargo/registry/src/github.com-1ecc6299db9ec823/bio-0.39.0/src/stats/pairhmm/mod.rs","byte_start":781707,"byte_end":781718,"line_start":118,"line_end":118,"column_start":8,"column_end":19},"name":"prob_emit_x","qualname":"::stats::pairhmm::EmissionParameters::prob_emit_x","value":"pub fn prob_emit_x(&Self, usize) -> LogProb","parent":{"krate":0,"index":2998},"children":[],"decl_id":null,"docs":" Emission probability for `(x[i], -)`.\n","sig":null,"attributes":[{"value":"/ Emission probability for `(x[i], -)`.","span":{"file_name":"/Users/shelwitz/.cargo/registry/src/github.com-1ecc6299db9ec823/bio-0.39.0/src/stats/pairhmm/mod.rs","byte_start":781658,"byte_end":781699,"line_start":117,"line_end":117,"column_start":5,"column_end":46}}]},{"kind":"Method","id":{"krate":0,"index":3001},"span":{"file_name":"/Users/shelwitz/.cargo/registry/src/github.com-1ecc6299db9ec823/bio-0.39.0/src/stats/pairhmm/mod.rs","byte_start":781802,"byte_end":781813,"line_start":121,"line_end":121,"column_start":8,"column_end":19},"name":"prob_emit_y","qualname":"::stats::pairhmm::EmissionParameters::prob_emit_y","value":"pub fn prob_emit_y(&Self, usize) -> LogProb","parent":{"krate":0,"index":2998},"children":[],"decl_id":null,"docs":" Emission probability for `(-, y[j])`.\n","sig":null,"attributes":[{"value":"/ Emission probability for `(-, y[j])`.","span":{"file_name":"/Users/shelwitz/.cargo/registry/src/github.com-1ecc6299db9ec823/bio-0.39.0/src/stats/pairhmm/mod.rs","byte_start":781753,"byte_end":781794,"line_start":120,"line_end":120,"column_start":5,"column_end":46}}]},{"kind":"Method","id":{"krate":0,"index":3002},"span":{"file_name":"/Users/shelwitz/.cargo/registry/src/github.com-1ecc6299db9ec823/bio-0.39.0/src/stats/pairhmm/mod.rs","byte_start":781851,"byte_end":781856,"line_start":123,"line_end":123,"column_start":8,"column_end":13},"name":"len_x","qualname":"::stats::pairhmm::EmissionParameters::len_x","value":"pub fn len_x(&Self) -> usize","parent":{"krate":0,"index":2998},"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":3003},"span":{"file_name":"/Users/shelwitz/.cargo/registry/src/github.com-1ecc6299db9ec823/bio-0.39.0/src/stats/pairhmm/mod.rs","byte_start":781882,"byte_end":781887,"line_start":125,"line_end":125,"column_start":8,"column_end":13},"name":"len_y","qualname":"::stats::pairhmm::EmissionParameters::len_y","value":"pub fn len_y(&Self) -> usize","parent":{"krate":0,"index":2998},"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Trait","id":{"krate":0,"index":3004},"span":{"file_name":"/Users/shelwitz/.cargo/registry/src/github.com-1ecc6299db9ec823/bio-0.39.0/src/stats/pairhmm/mod.rs","byte_start":782064,"byte_end":782072,"line_start":129,"line_end":129,"column_start":11,"column_end":19},"name":"Emission","qualname":"::stats::pairhmm::Emission","value":"Emission","parent":null,"children":[{"krate":0,"index":3005},{"krate":0,"index":3006}],"decl_id":null,"docs":" Trait needed for the `HomopolyPairHMM`, because its implementation details\n depend on the actual bases to distinguish between Match states.\n","sig":null,"attributes":[{"value":"/ Trait needed for the `HomopolyPairHMM`, because its implementation details","span":{"file_name":"/Users/shelwitz/.cargo/registry/src/github.com-1ecc6299db9ec823/bio-0.39.0/src/stats/pairhmm/mod.rs","byte_start":781907,"byte_end":781985,"line_start":127,"line_end":127,"column_start":1,"column_end":79}},{"value":"/ depend on the actual bases to distinguish between Match states.","span":{"file_name":"/Users/shelwitz/.cargo/registry/src/github.com-1ecc6299db9ec823/bio-0.39.0/src/stats/pairhmm/mod.rs","byte_start":781986,"byte_end":782053,"line_start":128,"line_end":128,"column_start":1,"column_end":68}}]},{"kind":"Method","id":{"krate":0,"index":3005},"span":{"file_name":"/Users/shelwitz/.cargo/registry/src/github.com-1ecc6299db9ec823/bio-0.39.0/src/stats/pairhmm/mod.rs","byte_start":782178,"byte_end":782188,"line_start":132,"line_end":132,"column_start":8,"column_end":18},"name":"emission_x","qualname":"::stats::pairhmm::Emission::emission_x","value":"pub fn emission_x(&Self, usize) -> u8","parent":{"krate":0,"index":3004},"children":[],"decl_id":null,"docs":" Base emitted at `i` in sequence `x`.\n Should be one of b'A', b'C', b'G' or b'T'.\n","sig":null,"attributes":[{"value":"/ Base emitted at `i` in sequence `x`.","span":{"file_name":"/Users/shelwitz/.cargo/registry/src/github.com-1ecc6299db9ec823/bio-0.39.0/src/stats/pairhmm/mod.rs","byte_start":782079,"byte_end":782119,"line_start":130,"line_end":130,"column_start":5,"column_end":45}},{"value":"/ Should be one of b'A', b'C', b'G' or b'T'.","span":{"file_name":"/Users/shelwitz/.cargo/registry/src/github.com-1ecc6299db9ec823/bio-0.39.0/src/stats/pairhmm/mod.rs","byte_start":782124,"byte_end":782170,"line_start":131,"line_end":131,"column_start":5,"column_end":51}}]},{"kind":"Method","id":{"krate":0,"index":3006},"span":{"file_name":"/Users/shelwitz/.cargo/registry/src/github.com-1ecc6299db9ec823/bio-0.39.0/src/stats/pairhmm/mod.rs","byte_start":782316,"byte_end":782326,"line_start":135,"line_end":135,"column_start":8,"column_end":18},"name":"emission_y","qualname":"::stats::pairhmm::Emission::emission_y","value":"pub fn emission_y(&Self, usize) -> u8","parent":{"krate":0,"index":3004},"children":[],"decl_id":null,"docs":" Base emitted at `i` in sequence `y`.\n Should be one of b'A', b'C', b'G' or b'T'.\n","sig":null,"attributes":[{"value":"/ Base emitted at `i` in sequence `y`.","span":{"file_name":"/Users/shelwitz/.cargo/registry/src/github.com-1ecc6299db9ec823/bio-0.39.0/src/stats/pairhmm/mod.rs","byte_start":782217,"byte_end":782257,"line_start":133,"line_end":133,"column_start":5,"column_end":45}},{"value":"/ Should be one of b'A', b'C', b'G' or b'T'.","span":{"file_name":"/Users/shelwitz/.cargo/registry/src/github.com-1ecc6299db9ec823/bio-0.39.0/src/stats/pairhmm/mod.rs","byte_start":782262,"byte_end":782308,"line_start":134,"line_end":134,"column_start":5,"column_end":51}}]},{"kind":"Trait","id":{"krate":0,"index":3007},"span":{"file_name":"/Users/shelwitz/.cargo/registry/src/github.com-1ecc6299db9ec823/bio-0.39.0/src/stats/pairhmm/mod.rs","byte_start":782421,"byte_end":782434,"line_start":139,"line_end":139,"column_start":11,"column_end":24},"name":"GapParameters","qualname":"::stats::pairhmm::GapParameters","value":"GapParameters","parent":null,"children":[{"krate":0,"index":3008},{"krate":0,"index":3009},{"krate":0,"index":3010},{"krate":0,"index":3011}],"decl_id":null,"docs":" Trait for parametrization of `PairHMM` gap behavior.\n","sig":null,"attributes":[{"value":"/ Trait for parametrization of `PairHMM` gap behavior.","span":{"file_name":"/Users/shelwitz/.cargo/registry/src/github.com-1ecc6299db9ec823/bio-0.39.0/src/stats/pairhmm/mod.rs","byte_start":782354,"byte_end":782410,"line_start":138,"line_end":138,"column_start":1,"column_end":57}}]},{"kind":"Method","id":{"krate":0,"index":3008},"span":{"file_name":"/Users/shelwitz/.cargo/registry/src/github.com-1ecc6299db9ec823/bio-0.39.0/src/stats/pairhmm/mod.rs","byte_start":782482,"byte_end":782492,"line_start":141,"line_end":141,"column_start":8,"column_end":18},"name":"prob_gap_x","qualname":"::stats::pairhmm::GapParameters::prob_gap_x","value":"pub fn prob_gap_x(&Self) -> LogProb","parent":{"krate":0,"index":3007},"children":[],"decl_id":null,"docs":" Probability to open gap in x.\n","sig":null,"attributes":[{"value":"/ Probability to open gap in x.","span":{"file_name":"/Users/shelwitz/.cargo/registry/src/github.com-1ecc6299db9ec823/bio-0.39.0/src/stats/pairhmm/mod.rs","byte_start":782441,"byte_end":782474,"line_start":140,"line_end":140,"column_start":5,"column_end":38}}]},{"kind":"Method","id":{"krate":0,"index":3009},"span":{"file_name":"/Users/shelwitz/.cargo/registry/src/github.com-1ecc6299db9ec823/bio-0.39.0/src/stats/pairhmm/mod.rs","byte_start":782558,"byte_end":782568,"line_start":144,"line_end":144,"column_start":8,"column_end":18},"name":"prob_gap_y","qualname":"::stats::pairhmm::GapParameters::prob_gap_y","value":"pub fn prob_gap_y(&Self) -> LogProb","parent":{"krate":0,"index":3007},"children":[],"decl_id":null,"docs":" Probability to open gap in y.\n","sig":null,"attributes":[{"value":"/ Probability to open gap in y.","span":{"file_name":"/Users/shelwitz/.cargo/registry/src/github.com-1ecc6299db9ec823/bio-0.39.0/src/stats/pairhmm/mod.rs","byte_start":782517,"byte_end":782550,"line_start":143,"line_end":143,"column_start":5,"column_end":38}}]},{"kind":"Method","id":{"krate":0,"index":3010},"span":{"file_name":"/Users/shelwitz/.cargo/registry/src/github.com-1ecc6299db9ec823/bio-0.39.0/src/stats/pairhmm/mod.rs","byte_start":782636,"byte_end":782653,"line_start":147,"line_end":147,"column_start":8,"column_end":25},"name":"prob_gap_x_extend","qualname":"::stats::pairhmm::GapParameters::prob_gap_x_extend","value":"pub fn prob_gap_x_extend(&Self) -> LogProb","parent":{"krate":0,"index":3007},"children":[],"decl_id":null,"docs":" Probability to extend gap in x.\n","sig":null,"attributes":[{"value":"/ Probability to extend gap in x.","span":{"file_name":"/Users/shelwitz/.cargo/registry/src/github.com-1ecc6299db9ec823/bio-0.39.0/src/stats/pairhmm/mod.rs","byte_start":782593,"byte_end":782628,"line_start":146,"line_end":146,"column_start":5,"column_end":40}}]},{"kind":"Method","id":{"krate":0,"index":3011},"span":{"file_name":"/Users/shelwitz/.cargo/registry/src/github.com-1ecc6299db9ec823/bio-0.39.0/src/stats/pairhmm/mod.rs","byte_start":782721,"byte_end":782738,"line_start":150,"line_end":150,"column_start":8,"column_end":25},"name":"prob_gap_y_extend","qualname":"::stats::pairhmm::GapParameters::prob_gap_y_extend","value":"pub fn prob_gap_y_extend(&Self) -> LogProb","parent":{"krate":0,"index":3007},"children":[],"decl_id":null,"docs":" Probability to extend gap in y.\n","sig":null,"attributes":[{"value":"/ Probability to extend gap in y.","span":{"file_name":"/Users/shelwitz/.cargo/registry/src/github.com-1ecc6299db9ec823/bio-0.39.0/src/stats/pairhmm/mod.rs","byte_start":782678,"byte_end":782713,"line_start":149,"line_end":149,"column_start":5,"column_end":40}}]},{"kind":"Trait","id":{"krate":0,"index":3012},"span":{"file_name":"/Users/shelwitz/.cargo/registry/src/github.com-1ecc6299db9ec823/bio-0.39.0/src/stats/pairhmm/mod.rs","byte_start":783048,"byte_end":783069,"line_start":158,"line_end":158,"column_start":11,"column_end":32},"name":"StartEndGapParameters","qualname":"::stats::pairhmm::StartEndGapParameters","value":"StartEndGapParameters","parent":null,"children":[{"krate":0,"index":3013},{"krate":0,"index":3014},{"krate":0,"index":3015}],"decl_id":null,"docs":" Trait for parametrization of `PairHMM` start and end gap behavior.\n This trait can be used to implement global and semiglobal alignments.","sig":null,"attributes":[{"value":"/ Trait for parametrization of `PairHMM` start and end gap behavior.","span":{"file_name":"/Users/shelwitz/.cargo/registry/src/github.com-1ecc6299db9ec823/bio-0.39.0/src/stats/pairhmm/mod.rs","byte_start":782761,"byte_end":782831,"line_start":153,"line_end":153,"column_start":1,"column_end":71}},{"value":"/ This trait can be used to implement global and semiglobal alignments.","span":{"file_name":"/Users/shelwitz/.cargo/registry/src/github.com-1ecc6299db9ec823/bio-0.39.0/src/stats/pairhmm/mod.rs","byte_start":782832,"byte_end":782905,"line_start":154,"line_end":154,"column_start":1,"column_end":74}},{"value":"/","span":{"file_name":"/Users/shelwitz/.cargo/registry/src/github.com-1ecc6299db9ec823/bio-0.39.0/src/stats/pairhmm/mod.rs","byte_start":782906,"byte_end":782909,"line_start":155,"line_end":155,"column_start":1,"column_end":4}},{"value":"/ * global: methods return `false` and `LogProb::ln_zero()`.","span":{"file_name":"/Users/shelwitz/.cargo/registry/src/github.com-1ecc6299db9ec823/bio-0.39.0/src/stats/pairhmm/mod.rs","byte_start":782910,"byte_end":782972,"line_start":156,"line_end":156,"column_start":1,"column_end":63}},{"value":"/ * semiglobal: methods return `true` and `LogProb::ln_one()`.","span":{"file_name":"/Users/shelwitz/.cargo/registry/src/github.com-1ecc6299db9ec823/bio-0.39.0/src/stats/pairhmm/mod.rs","byte_start":782973,"byte_end":783037,"line_start":157,"line_end":157,"column_start":1,"column_end":65}}]},{"kind":"Method","id":{"krate":0,"index":3013},"span":{"file_name":"/Users/shelwitz/.cargo/registry/src/github.com-1ecc6299db9ec823/bio-0.39.0/src/stats/pairhmm/mod.rs","byte_start":783251,"byte_end":783267,"line_start":163,"line_end":163,"column_start":8,"column_end":24},"name":"prob_start_gap_x","qualname":"::stats::pairhmm::StartEndGapParameters::prob_start_gap_x","value":"pub fn prob_start_gap_x(&Self, usize) -> LogProb","parent":{"krate":0,"index":3012},"children":[],"decl_id":null,"docs":" Probability to start at `x[i]`. This can be left unchanged if you use `free_start_gap_x` and\n `free_end_gap_x`.\n","sig":null,"attributes":[{"value":"/ Probability to start at `x[i]`. This can be left unchanged if you use `free_start_gap_x` and","span":{"file_name":"/Users/shelwitz/.cargo/registry/src/github.com-1ecc6299db9ec823/bio-0.39.0/src/stats/pairhmm/mod.rs","byte_start":783076,"byte_end":783172,"line_start":159,"line_end":159,"column_start":5,"column_end":101}},{"value":"/ `free_end_gap_x`.","span":{"file_name":"/Users/shelwitz/.cargo/registry/src/github.com-1ecc6299db9ec823/bio-0.39.0/src/stats/pairhmm/mod.rs","byte_start":783177,"byte_end":783198,"line_start":160,"line_end":160,"column_start":5,"column_end":26}},{"value":"inline","span":{"file_name":"/Users/shelwitz/.cargo/registry/src/github.com-1ecc6299db9ec823/bio-0.39.0/src/stats/pairhmm/mod.rs","byte_start":783203,"byte_end":783212,"line_start":161,"line_end":161,"column_start":5,"column_end":14}},{"value":"allow(unused_variables)","span":{"file_name":"/Users/shelwitz/.cargo/registry/src/github.com-1ecc6299db9ec823/bio-0.39.0/src/stats/pairhmm/mod.rs","byte_start":783217,"byte_end":783243,"line_start":162,"line_end":162,"column_start":5,"column_end":31}}]},{"kind":"Method","id":{"krate":0,"index":3014},"span":{"file_name":"/Users/shelwitz/.cargo/registry/src/github.com-1ecc6299db9ec823/bio-0.39.0/src/stats/pairhmm/mod.rs","byte_start":783533,"byte_end":783549,"line_start":173,"line_end":173,"column_start":8,"column_end":24},"name":"free_start_gap_x","qualname":"::stats::pairhmm::StartEndGapParameters::free_start_gap_x","value":"pub fn free_start_gap_x(&Self) -> bool","parent":{"krate":0,"index":3012},"children":[],"decl_id":null,"docs":" Allow free start gap in x.\n","sig":null,"attributes":[{"value":"/ Allow free start gap in x.","span":{"file_name":"/Users/shelwitz/.cargo/registry/src/github.com-1ecc6299db9ec823/bio-0.39.0/src/stats/pairhmm/mod.rs","byte_start":783495,"byte_end":783525,"line_start":172,"line_end":172,"column_start":5,"column_end":35}}]},{"kind":"Method","id":{"krate":0,"index":3015},"span":{"file_name":"/Users/shelwitz/.cargo/registry/src/github.com-1ecc6299db9ec823/bio-0.39.0/src/stats/pairhmm/mod.rs","byte_start":783607,"byte_end":783621,"line_start":176,"line_end":176,"column_start":8,"column_end":22},"name":"free_end_gap_x","qualname":"::stats::pairhmm::StartEndGapParameters::free_end_gap_x","value":"pub fn free_end_gap_x(&Self) -> bool","parent":{"krate":0,"index":3012},"children":[],"decl_id":null,"docs":" Allow free end gap in x.\n","sig":null,"attributes":[{"value":"/ Allow free end gap in x.","span":{"file_name":"/Users/shelwitz/.cargo/registry/src/github.com-1ecc6299db9ec823/bio-0.39.0/src/stats/pairhmm/mod.rs","byte_start":783571,"byte_end":783599,"line_start":175,"line_end":175,"column_start":5,"column_end":33}}]},{"kind":"TupleVariant","id":{"krate":0,"index":5873},"span":{"file_name":"/Users/shelwitz/.cargo/registry/src/github.com-1ecc6299db9ec823/bio-0.39.0/src/stats/pairhmm/mod.rs","byte_start":783684,"byte_end":783689,"line_start":181,"line_end":181,"column_start":5,"column_end":10},"name":"Match","qualname":"::stats::pairhmm::XYEmission::Match","value":"XYEmission::Match(LogProb)","parent":{"krate":0,"index":5872},"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"TupleVariant","id":{"krate":0,"index":5876},"span":{"file_name":"/Users/shelwitz/.cargo/registry/src/github.com-1ecc6299db9ec823/bio-0.39.0/src/stats/pairhmm/mod.rs","byte_start":783704,"byte_end":783712,"line_start":182,"line_end":182,"column_start":5,"column_end":13},"name":"Mismatch","qualname":"::stats::pairhmm::XYEmission::Mismatch","value":"XYEmission::Mismatch(LogProb)","parent":{"krate":0,"index":5872},"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Enum","id":{"krate":0,"index":5872},"span":{"file_name":"/Users/shelwitz/.cargo/registry/src/github.com-1ecc6299db9ec823/bio-0.39.0/src/stats/pairhmm/mod.rs","byte_start":783667,"byte_end":783677,"line_start":180,"line_end":180,"column_start":10,"column_end":20},"name":"XYEmission","qualname":"::stats::pairhmm::XYEmission","value":"pub enum XYEmission { Match(LogProb), Mismatch(LogProb), }","parent":null,"children":[{"krate":0,"index":5873},{"krate":0,"index":5876}],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":3017},"span":{"file_name":"/Users/shelwitz/.cargo/registry/src/github.com-1ecc6299db9ec823/bio-0.39.0/src/stats/pairhmm/mod.rs","byte_start":783755,"byte_end":783759,"line_start":186,"line_end":186,"column_start":12,"column_end":16},"name":"prob","qualname":"<XYEmission>::prob","value":"pub fn prob(&Self) -> LogProb","parent":null,"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":3018},"span":{"file_name":"/Users/shelwitz/.cargo/registry/src/github.com-1ecc6299db9ec823/bio-0.39.0/src/stats/pairhmm/mod.rs","byte_start":783911,"byte_end":783919,"line_start":193,"line_end":193,"column_start":12,"column_end":20},"name":"is_match","qualname":"<XYEmission>::is_match","value":"pub fn is_match(&Self) -> bool","parent":null,"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Mod","id":{"krate":0,"index":3019},"span":{"file_name":"/Users/shelwitz/.cargo/registry/src/github.com-1ecc6299db9ec823/bio-0.39.0/src/stats/probs/mod.rs","byte_start":0,"byte_end":0,"line_start":1,"line_end":1,"column_start":1,"column_end":1},"name":"probs","qualname":"::stats::probs","value":"/Users/shelwitz/.cargo/registry/src/github.com-1ecc6299db9ec823/bio-0.39.0/src/stats/probs/mod.rs","parent":null,"children":[{"krate":0,"index":3020},{"krate":0,"index":3086},{"krate":0,"index":3093},{"krate":0,"index":3096},{"krate":0,"index":3099},{"krate":0,"index":3102},{"krate":0,"index":3103},{"krate":0,"index":3106},{"krate":0,"index":3109},{"krate":0,"index":3112},{"krate":0,"index":3115},{"krate":0,"index":3118},{"krate":0,"index":3121},{"krate":0,"index":3124},{"krate":0,"index":3127},{"krate":0,"index":3128},{"krate":0,"index":3131},{"krate":0,"index":3134},{"krate":0,"index":3137},{"krate":0,"index":3140},{"krate":0,"index":3141},{"krate":0,"index":3144},{"krate":0,"index":3147},{"krate":0,"index":3148},{"krate":0,"index":3149},{"krate":0,"index":6029},{"krate":0,"index":6032},{"krate":0,"index":6038},{"krate":0,"index":6016},{"krate":0,"index":6017},{"krate":0,"index":6020},{"krate":0,"index":6022},{"krate":0,"index":6023},{"krate":0,"index":6025},{"krate":0,"index":6027},{"krate":0,"index":6057},{"krate":0,"index":6059},{"krate":0,"index":6061},{"krate":0,"index":6064},{"krate":0,"index":6067},{"krate":0,"index":6071},{"krate":0,"index":6075},{"krate":0,"index":6079},{"krate":0,"index":6082},{"krate":0,"index":6086},{"krate":0,"index":6090},{"krate":0,"index":6094},{"krate":0,"index":6097},{"krate":0,"index":6101},{"krate":0,"index":6105},{"krate":0,"index":6109},{"krate":0,"index":6112},{"krate":0,"index":6116},{"krate":0,"index":6120},{"krate":0,"index":3150},{"krate":0,"index":6135},{"krate":0,"index":6138},{"krate":0,"index":6144},{"krate":0,"index":6124},{"krate":0,"index":6125},{"krate":0,"index":6128},{"krate":0,"index":6130},{"krate":0,"index":6131},{"krate":0,"index":6133},{"krate":0,"index":6163},{"krate":0,"index":6165},{"krate":0,"index":6167},{"krate":0,"index":6170},{"krate":0,"index":6173},{"krate":0,"index":6177},{"krate":0,"index":6181},{"krate":0,"index":6185},{"krate":0,"index":6188},{"krate":0,"index":6192},{"krate":0,"index":6196},{"krate":0,"index":6211},{"krate":0,"index":6214},{"krate":0,"index":6220},{"krate":0,"index":6200},{"krate":0,"index":6201},{"krate":0,"index":6204},{"krate":0,"index":6206},{"krate":0,"index":6207},{"krate":0,"index":6209},{"krate":0,"index":6239},{"krate":0,"index":6241},{"krate":0,"index":6243},{"krate":0,"index":6246},{"krate":0,"index":6249},{"krate":0,"index":6253},{"krate":0,"index":6257},{"krate":0,"index":6261},{"krate":0,"index":6264},{"krate":0,"index":6268},{"krate":0,"index":6272},{"krate":0,"index":3152},{"krate":0,"index":3154},{"krate":0,"index":3155},{"krate":0,"index":3156},{"krate":0,"index":3181},{"krate":0,"index":3186},{"krate":0,"index":3191},{"krate":0,"index":3193},{"krate":0,"index":3195},{"krate":0,"index":3197},{"krate":0,"index":3199},{"krate":0,"index":3201},{"krate":0,"index":3203},{"krate":0,"index":3205},{"krate":0,"index":3207},{"krate":0,"index":3209},{"krate":0,"index":3211},{"krate":0,"index":3213},{"krate":0,"index":3215},{"krate":0,"index":3218},{"krate":0,"index":3221}],"decl_id":null,"docs":" Handling log-probabilities. Log probabilities are an important tool to deal with probabilities\n in a numerically stable way, in particular when having probabilities close to zero.\n","sig":null,"attributes":[{"value":"/ Handling log-probabilities. Log probabilities are an important tool to deal with probabilities","span":{"file_name":"/Users/shelwitz/.cargo/registry/src/github.com-1ecc6299db9ec823/bio-0.39.0/src/stats/probs/mod.rs","byte_start":843933,"byte_end":844031,"line_start":6,"line_end":6,"column_start":1,"column_end":99}},{"value":"/ in a numerically stable way, in particular when having probabilities close to zero.","span":{"file_name":"/Users/shelwitz/.cargo/registry/src/github.com-1ecc6299db9ec823/bio-0.39.0/src/stats/probs/mod.rs","byte_start":844032,"byte_end":844119,"line_start":7,"line_end":7,"column_start":1,"column_end":88}}]},{"kind":"Mod","id":{"krate":0,"index":3020},"span":{"file_name":"/Users/shelwitz/.cargo/registry/src/github.com-1ecc6299db9ec823/bio-0.39.0/src/stats/probs/cdf.rs","byte_start":0,"byte_end":0,"line_start":1,"line_end":1,"column_start":1,"column_end":1},"name":"cdf","qualname":"::stats::probs::cdf","value":"/Users/shelwitz/.cargo/registry/src/github.com-1ecc6299db9ec823/bio-0.39.0/src/stats/probs/cdf.rs","parent":null,"children":[{"krate":0,"index":3021},{"krate":0,"index":3024},{"krate":0,"index":3027},{"krate":0,"index":3030},{"krate":0,"index":3033},{"krate":0,"index":3036},{"krate":0,"index":3037},{"krate":0,"index":3039},{"krate":0,"index":3040},{"krate":0,"index":5881},{"krate":0,"index":5885},{"krate":0,"index":5888},{"krate":0,"index":5891},{"krate":0,"index":5898},{"krate":0,"index":3042},{"krate":0,"index":5944},{"krate":0,"index":5947},{"krate":0,"index":5950},{"krate":0,"index":5953},{"krate":0,"index":5960},{"krate":0,"index":3045},{"krate":0,"index":3074},{"krate":0,"index":3083}],"decl_id":null,"docs":" Support for discrete probability distributions in terms of cumulative distribution\n functions (CDF).","sig":null,"attributes":[{"value":"/ Support for discrete probability distributions in terms of cumulative distribution","span":{"file_name":"/Users/shelwitz/.cargo/registry/src/github.com-1ecc6299db9ec823/bio-0.39.0/src/stats/probs/cdf.rs","byte_start":860641,"byte_end":860727,"line_start":6,"line_end":6,"column_start":1,"column_end":87}},{"value":"/ functions (CDF).","span":{"file_name":"/Users/shelwitz/.cargo/registry/src/github.com-1ecc6299db9ec823/bio-0.39.0/src/stats/probs/cdf.rs","byte_start":860728,"byte_end":860748,"line_start":7,"line_end":7,"column_start":1,"column_end":21}},{"value":"/","span":{"file_name":"/Users/shelwitz/.cargo/registry/src/github.com-1ecc6299db9ec823/bio-0.39.0/src/stats/probs/cdf.rs","byte_start":860749,"byte_end":860752,"line_start":8,"line_end":8,"column_start":1,"column_end":4}},{"value":"/ # Examples","span":{"file_name":"/Users/shelwitz/.cargo/registry/src/github.com-1ecc6299db9ec823/bio-0.39.0/src/stats/probs/cdf.rs","byte_start":860753,"byte_end":860767,"line_start":9,"line_end":9,"column_start":1,"column_end":15}},{"value":"/","span":{"file_name":"/Users/shelwitz/.cargo/registry/src/github.com-1ecc6299db9ec823/bio-0.39.0/src/stats/probs/cdf.rs","byte_start":860768,"byte_end":860771,"line_start":10,"line_end":10,"column_start":1,"column_end":4}},{"value":"/ Example usage of all CDF functions:","span":{"file_name":"/Users/shelwitz/.cargo/registry/src/github.com-1ecc6299db9ec823/bio-0.39.0/src/stats/probs/cdf.rs","byte_start":860772,"byte_end":860811,"line_start":11,"line_end":11,"column_start":1,"column_end":40}},{"value":"/ ```","span":{"file_name":"/Users/shelwitz/.cargo/registry/src/github.com-1ecc6299db9ec823/bio-0.39.0/src/stats/probs/cdf.rs","byte_start":860812,"byte_end":860819,"line_start":12,"line_end":12,"column_start":1,"column_end":8}},{"value":"/ use approx::assert_relative_eq;","span":{"file_name":"/Users/shelwitz/.cargo/registry/src/github.com-1ecc6299db9ec823/bio-0.39.0/src/stats/probs/cdf.rs","byte_start":860820,"byte_end":860855,"line_start":13,"line_end":13,"column_start":1,"column_end":36}},{"value":"/ use bio::stats::probs::cdf::{Entry, CDF};","span":{"file_name":"/Users/shelwitz/.cargo/registry/src/github.com-1ecc6299db9ec823/bio-0.39.0/src/stats/probs/cdf.rs","byte_start":860856,"byte_end":860901,"line_start":14,"line_end":14,"column_start":1,"column_end":46}},{"value":"/ use bio::stats::probs::{LogProb, Prob};","span":{"file_name":"/Users/shelwitz/.cargo/registry/src/github.com-1ecc6299db9ec823/bio-0.39.0/src/stats/probs/cdf.rs","byte_start":860902,"byte_end":860945,"line_start":15,"line_end":15,"column_start":1,"column_end":44}},{"value":"/ use ordered_float::NotNan;","span":{"file_name":"/Users/shelwitz/.cargo/registry/src/github.com-1ecc6299db9ec823/bio-0.39.0/src/stats/probs/cdf.rs","byte_start":860946,"byte_end":860976,"line_start":16,"line_end":16,"column_start":1,"column_end":31}},{"value":"/ use std::ops::Range;","span":{"file_name":"/Users/shelwitz/.cargo/registry/src/github.com-1ecc6299db9ec823/bio-0.39.0/src/stats/probs/cdf.rs","byte_start":860977,"byte_end":861001,"line_start":17,"line_end":17,"column_start":1,"column_end":25}},{"value":"/ // pmf1 is an example PMF with `LogProb(0.0)` at `0`, with `LogProb(0.1)`","span":{"file_name":"/Users/shelwitz/.cargo/registry/src/github.com-1ecc6299db9ec823/bio-0.39.0/src/stats/probs/cdf.rs","byte_start":861002,"byte_end":861079,"line_start":18,"line_end":18,"column_start":1,"column_end":78}},{"value":"/ // at `{1, 2, ..., 8}` and LogProb(0.2) at `10`","span":{"file_name":"/Users/shelwitz/.cargo/registry/src/github.com-1ecc6299db9ec823/bio-0.39.0/src/stats/probs/cdf.rs","byte_start":861080,"byte_end":861131,"line_start":19,"line_end":19,"column_start":1,"column_end":52}},{"value":"/ let mut pmf1 = vec![Entry::new(0, LogProb((0.0 as f64).ln()))];","span":{"file_name":"/Users/shelwitz/.cargo/registry/src/github.com-1ecc6299db9ec823/bio-0.39.0/src/stats/probs/cdf.rs","byte_start":861132,"byte_end":861199,"line_start":20,"line_end":20,"column_start":1,"column_end":68}},{"value":"/ for i in 1..=8 {","span":{"file_name":"/Users/shelwitz/.cargo/registry/src/github.com-1ecc6299db9ec823/bio-0.39.0/src/stats/probs/cdf.rs","byte_start":861200,"byte_end":861220,"line_start":21,"line_end":21,"column_start":1,"column_end":21}},{"value":"/     pmf1.push(Entry::new(i, LogProb((0.1 as f64).ln())));","span":{"file_name":"/Users/shelwitz/.cargo/registry/src/github.com-1ecc6299db9ec823/bio-0.39.0/src/stats/probs/cdf.rs","byte_start":861221,"byte_end":861282,"line_start":22,"line_end":22,"column_start":1,"column_end":62}},{"value":"/ }","span":{"file_name":"/Users/shelwitz/.cargo/registry/src/github.com-1ecc6299db9ec823/bio-0.39.0/src/stats/probs/cdf.rs","byte_start":861283,"byte_end":861288,"line_start":23,"line_end":23,"column_start":1,"column_end":6}},{"value":"/ pmf1.push(Entry::new(10, LogProb((0.2 as f64).ln())));","span":{"file_name":"/Users/shelwitz/.cargo/registry/src/github.com-1ecc6299db9ec823/bio-0.39.0/src/stats/probs/cdf.rs","byte_start":861289,"byte_end":861347,"line_start":24,"line_end":24,"column_start":1,"column_end":59}},{"value":"/","span":{"file_name":"/Users/shelwitz/.cargo/registry/src/github.com-1ecc6299db9ec823/bio-0.39.0/src/stats/probs/cdf.rs","byte_start":861348,"byte_end":861351,"line_start":25,"line_end":25,"column_start":1,"column_end":4}},{"value":"/ // create the cumulative distribution function from the probability mass function","span":{"file_name":"/Users/shelwitz/.cargo/registry/src/github.com-1ecc6299db9ec823/bio-0.39.0/src/stats/probs/cdf.rs","byte_start":861352,"byte_end":861437,"line_start":26,"line_end":26,"column_start":1,"column_end":86}},{"value":"/ let cdf = CDF::from_pmf(pmf1.clone());","span":{"file_name":"/Users/shelwitz/.cargo/registry/src/github.com-1ecc6299db9ec823/bio-0.39.0/src/stats/probs/cdf.rs","byte_start":861438,"byte_end":861480,"line_start":27,"line_end":27,"column_start":1,"column_end":43}},{"value":"/ assert_relative_eq!(*cdf.get(&0).unwrap(), (0.0 as f64).ln(), epsilon = 0.0);","span":{"file_name":"/Users/shelwitz/.cargo/registry/src/github.com-1ecc6299db9ec823/bio-0.39.0/src/stats/probs/cdf.rs","byte_start":861481,"byte_end":861562,"line_start":28,"line_end":28,"column_start":1,"column_end":82}},{"value":"/ assert_relative_eq!(","span":{"file_name":"/Users/shelwitz/.cargo/registry/src/github.com-1ecc6299db9ec823/bio-0.39.0/src/stats/probs/cdf.rs","byte_start":861563,"byte_end":861587,"line_start":29,"line_end":29,"column_start":1,"column_end":25}},{"value":"/     *cdf.get(&3).unwrap(),","span":{"file_name":"/Users/shelwitz/.cargo/registry/src/github.com-1ecc6299db9ec823/bio-0.39.0/src/stats/probs/cdf.rs","byte_start":861588,"byte_end":861618,"line_start":30,"line_end":30,"column_start":1,"column_end":31}},{"value":"/     (0.3 as f64).ln(),","span":{"file_name":"/Users/shelwitz/.cargo/registry/src/github.com-1ecc6299db9ec823/bio-0.39.0/src/stats/probs/cdf.rs","byte_start":861619,"byte_end":861645,"line_start":31,"line_end":31,"column_start":1,"column_end":27}},{"value":"/     epsilon = 0.0000000001","span":{"file_name":"/Users/shelwitz/.cargo/registry/src/github.com-1ecc6299db9ec823/bio-0.39.0/src/stats/probs/cdf.rs","byte_start":861646,"byte_end":861676,"line_start":32,"line_end":32,"column_start":1,"column_end":31}},{"value":"/ );","span":{"file_name":"/Users/shelwitz/.cargo/registry/src/github.com-1ecc6299db9ec823/bio-0.39.0/src/stats/probs/cdf.rs","byte_start":861677,"byte_end":861683,"line_start":33,"line_end":33,"column_start":1,"column_end":7}},{"value":"/","span":{"file_name":"/Users/shelwitz/.cargo/registry/src/github.com-1ecc6299db9ec823/bio-0.39.0/src/stats/probs/cdf.rs","byte_start":861684,"byte_end":861687,"line_start":34,"line_end":34,"column_start":1,"column_end":4}},{"value":"/ // get back the original probability mass value at 7","span":{"file_name":"/Users/shelwitz/.cargo/registry/src/github.com-1ecc6299db9ec823/bio-0.39.0/src/stats/probs/cdf.rs","byte_start":861688,"byte_end":861744,"line_start":35,"line_end":35,"column_start":1,"column_end":57}},{"value":"/ assert_relative_eq!(","span":{"file_name":"/Users/shelwitz/.cargo/registry/src/github.com-1ecc6299db9ec823/bio-0.39.0/src/stats/probs/cdf.rs","byte_start":861745,"byte_end":861769,"line_start":36,"line_end":36,"column_start":1,"column_end":25}},{"value":"/     *cdf.get_pmf(&7).unwrap(),","span":{"file_name":"/Users/shelwitz/.cargo/registry/src/github.com-1ecc6299db9ec823/bio-0.39.0/src/stats/probs/cdf.rs","byte_start":861770,"byte_end":861804,"line_start":37,"line_end":37,"column_start":1,"column_end":35}},{"value":"/     (0.1 as f64).ln(),","span":{"file_name":"/Users/shelwitz/.cargo/registry/src/github.com-1ecc6299db9ec823/bio-0.39.0/src/stats/probs/cdf.rs","byte_start":861805,"byte_end":861831,"line_start":38,"line_end":38,"column_start":1,"column_end":27}},{"value":"/     epsilon = 0.00001","span":{"file_name":"/Users/shelwitz/.cargo/registry/src/github.com-1ecc6299db9ec823/bio-0.39.0/src/stats/probs/cdf.rs","byte_start":861832,"byte_end":861857,"line_start":39,"line_end":39,"column_start":1,"column_end":26}},{"value":"/ );","span":{"file_name":"/Users/shelwitz/.cargo/registry/src/github.com-1ecc6299db9ec823/bio-0.39.0/src/stats/probs/cdf.rs","byte_start":861858,"byte_end":861864,"line_start":40,"line_end":40,"column_start":1,"column_end":7}},{"value":"/","span":{"file_name":"/Users/shelwitz/.cargo/registry/src/github.com-1ecc6299db9ec823/bio-0.39.0/src/stats/probs/cdf.rs","byte_start":861865,"byte_end":861868,"line_start":41,"line_end":41,"column_start":1,"column_end":4}},{"value":"/ // Check that cdf sums up to 1.0","span":{"file_name":"/Users/shelwitz/.cargo/registry/src/github.com-1ecc6299db9ec823/bio-0.39.0/src/stats/probs/cdf.rs","byte_start":861869,"byte_end":861905,"line_start":42,"line_end":42,"column_start":1,"column_end":37}},{"value":"/ assert_relative_eq!(","span":{"file_name":"/Users/shelwitz/.cargo/registry/src/github.com-1ecc6299db9ec823/bio-0.39.0/src/stats/probs/cdf.rs","byte_start":861906,"byte_end":861930,"line_start":43,"line_end":43,"column_start":1,"column_end":25}},{"value":"/     f64::from(cdf.total_prob()),","span":{"file_name":"/Users/shelwitz/.cargo/registry/src/github.com-1ecc6299db9ec823/bio-0.39.0/src/stats/probs/cdf.rs","byte_start":861931,"byte_end":861967,"line_start":44,"line_end":44,"column_start":1,"column_end":37}},{"value":"/     (1.0 as f64).ln(),","span":{"file_name":"/Users/shelwitz/.cargo/registry/src/github.com-1ecc6299db9ec823/bio-0.39.0/src/stats/probs/cdf.rs","byte_start":861968,"byte_end":861994,"line_start":45,"line_end":45,"column_start":1,"column_end":27}},{"value":"/     epsilon = 0.0","span":{"file_name":"/Users/shelwitz/.cargo/registry/src/github.com-1ecc6299db9ec823/bio-0.39.0/src/stats/probs/cdf.rs","byte_start":861995,"byte_end":862016,"line_start":46,"line_end":46,"column_start":1,"column_end":22}},{"value":"/ );","span":{"file_name":"/Users/shelwitz/.cargo/registry/src/github.com-1ecc6299db9ec823/bio-0.39.0/src/stats/probs/cdf.rs","byte_start":862017,"byte_end":862023,"line_start":47,"line_end":47,"column_start":1,"column_end":7}},{"value":"/","span":{"file_name":"/Users/shelwitz/.cargo/registry/src/github.com-1ecc6299db9ec823/bio-0.39.0/src/stats/probs/cdf.rs","byte_start":862024,"byte_end":862027,"line_start":48,"line_end":48,"column_start":1,"column_end":4}},{"value":"/ // copy a CDF via its iter() function","span":{"file_name":"/Users/shelwitz/.cargo/registry/src/github.com-1ecc6299db9ec823/bio-0.39.0/src/stats/probs/cdf.rs","byte_start":862028,"byte_end":862069,"line_start":49,"line_end":49,"column_start":1,"column_end":42}},{"value":"/ let mut cdf_copy = CDF::from_cdf(cdf.iter().cloned());","span":{"file_name":"/Users/shelwitz/.cargo/registry/src/github.com-1ecc6299db9ec823/bio-0.39.0/src/stats/probs/cdf.rs","byte_start":862070,"byte_end":862128,"line_start":50,"line_end":50,"column_start":1,"column_end":59}},{"value":"/ assert_eq!(cdf.len(), cdf_copy.len());","span":{"file_name":"/Users/shelwitz/.cargo/registry/src/github.com-1ecc6299db9ec823/bio-0.39.0/src/stats/probs/cdf.rs","byte_start":862129,"byte_end":862171,"line_start":51,"line_end":51,"column_start":1,"column_end":43}},{"value":"/","span":{"file_name":"/Users/shelwitz/.cargo/registry/src/github.com-1ecc6299db9ec823/bio-0.39.0/src/stats/probs/cdf.rs","byte_start":862172,"byte_end":862175,"line_start":52,"line_end":52,"column_start":1,"column_end":4}},{"value":"/ // get the maximum a posteriori probability estimate","span":{"file_name":"/Users/shelwitz/.cargo/registry/src/github.com-1ecc6299db9ec823/bio-0.39.0/src/stats/probs/cdf.rs","byte_start":862176,"byte_end":862232,"line_start":53,"line_end":53,"column_start":1,"column_end":57}},{"value":"/ assert_eq!(cdf_copy.map().unwrap(), &10);","span":{"file_name":"/Users/shelwitz/.cargo/registry/src/github.com-1ecc6299db9ec823/bio-0.39.0/src/stats/probs/cdf.rs","byte_start":862233,"byte_end":862278,"line_start":54,"line_end":54,"column_start":1,"column_end":46}},{"value":"/","span":{"file_name":"/Users/shelwitz/.cargo/registry/src/github.com-1ecc6299db9ec823/bio-0.39.0/src/stats/probs/cdf.rs","byte_start":862279,"byte_end":862282,"line_start":55,"line_end":55,"column_start":1,"column_end":4}},{"value":"/ // get the 50% credible interval","span":{"file_name":"/Users/shelwitz/.cargo/registry/src/github.com-1ecc6299db9ec823/bio-0.39.0/src/stats/probs/cdf.rs","byte_start":862283,"byte_end":862319,"line_start":56,"line_end":56,"column_start":1,"column_end":37}},{"value":"/ assert_eq!(cdf_copy.credible_interval(0.5).unwrap(), &2..&8);","span":{"file_name":"/Users/shelwitz/.cargo/registry/src/github.com-1ecc6299db9ec823/bio-0.39.0/src/stats/probs/cdf.rs","byte_start":862320,"byte_end":862385,"line_start":57,"line_end":57,"column_start":1,"column_end":66}},{"value":"/","span":{"file_name":"/Users/shelwitz/.cargo/registry/src/github.com-1ecc6299db9ec823/bio-0.39.0/src/stats/probs/cdf.rs","byte_start":862386,"byte_end":862389,"line_start":58,"line_end":58,"column_start":1,"column_end":4}},{"value":"/ // cdf_vec is an example Entry vector with `LogProb(0.0)` at `ordered_float::NotNan`","span":{"file_name":"/Users/shelwitz/.cargo/registry/src/github.com-1ecc6299db9ec823/bio-0.39.0/src/stats/probs/cdf.rs","byte_start":862390,"byte_end":862478,"line_start":59,"line_end":59,"column_start":1,"column_end":89}},{"value":"/ // values `{0.0, 1.0, 2.0}` and increasing by `LogProb(0.2)` at each to `{3.0, 4.0, ..., 7.0}`","span":{"file_name":"/Users/shelwitz/.cargo/registry/src/github.com-1ecc6299db9ec823/bio-0.39.0/src/stats/probs/cdf.rs","byte_start":862479,"byte_end":862577,"line_start":60,"line_end":60,"column_start":1,"column_end":99}},{"value":"/ let mut cdf_vec = Vec::new();","span":{"file_name":"/Users/shelwitz/.cargo/registry/src/github.com-1ecc6299db9ec823/bio-0.39.0/src/stats/probs/cdf.rs","byte_start":862578,"byte_end":862611,"line_start":61,"line_end":61,"column_start":1,"column_end":34}},{"value":"/ for i in 0..=2 {","span":{"file_name":"/Users/shelwitz/.cargo/registry/src/github.com-1ecc6299db9ec823/bio-0.39.0/src/stats/probs/cdf.rs","byte_start":862612,"byte_end":862632,"line_start":62,"line_end":62,"column_start":1,"column_end":21}},{"value":"/     cdf_vec.push(Entry::new(","span":{"file_name":"/Users/shelwitz/.cargo/registry/src/github.com-1ecc6299db9ec823/bio-0.39.0/src/stats/probs/cdf.rs","byte_start":862633,"byte_end":862665,"line_start":63,"line_end":63,"column_start":1,"column_end":33}},{"value":"/         NotNan::new(i as f64).unwrap(),","span":{"file_name":"/Users/shelwitz/.cargo/registry/src/github.com-1ecc6299db9ec823/bio-0.39.0/src/stats/probs/cdf.rs","byte_start":862666,"byte_end":862709,"line_start":64,"line_end":64,"column_start":1,"column_end":44}},{"value":"/         LogProb::ln_zero(),","span":{"file_name":"/Users/shelwitz/.cargo/registry/src/github.com-1ecc6299db9ec823/bio-0.39.0/src/stats/probs/cdf.rs","byte_start":862710,"byte_end":862741,"line_start":65,"line_end":65,"column_start":1,"column_end":32}},{"value":"/     ))","span":{"file_name":"/Users/shelwitz/.cargo/registry/src/github.com-1ecc6299db9ec823/bio-0.39.0/src/stats/probs/cdf.rs","byte_start":862742,"byte_end":862752,"line_start":66,"line_end":66,"column_start":1,"column_end":11}},{"value":"/ }","span":{"file_name":"/Users/shelwitz/.cargo/registry/src/github.com-1ecc6299db9ec823/bio-0.39.0/src/stats/probs/cdf.rs","byte_start":862753,"byte_end":862758,"line_start":67,"line_end":67,"column_start":1,"column_end":6}},{"value":"/ for i in 3..=7 {","span":{"file_name":"/Users/shelwitz/.cargo/registry/src/github.com-1ecc6299db9ec823/bio-0.39.0/src/stats/probs/cdf.rs","byte_start":862759,"byte_end":862779,"line_start":68,"line_end":68,"column_start":1,"column_end":21}},{"value":"/     cdf_vec.push(Entry::new(","span":{"file_name":"/Users/shelwitz/.cargo/registry/src/github.com-1ecc6299db9ec823/bio-0.39.0/src/stats/probs/cdf.rs","byte_start":862780,"byte_end":862812,"line_start":69,"line_end":69,"column_start":1,"column_end":33}},{"value":"/         NotNan::new(i as f64).unwrap(),","span":{"file_name":"/Users/shelwitz/.cargo/registry/src/github.com-1ecc6299db9ec823/bio-0.39.0/src/stats/probs/cdf.rs","byte_start":862813,"byte_end":862856,"line_start":70,"line_end":70,"column_start":1,"column_end":44}},{"value":"/         LogProb(((i - 2) as f64 * 0.2f64).ln()),","span":{"file_name":"/Users/shelwitz/.cargo/registry/src/github.com-1ecc6299db9ec823/bio-0.39.0/src/stats/probs/cdf.rs","byte_start":862857,"byte_end":862909,"line_start":71,"line_end":71,"column_start":1,"column_end":53}},{"value":"/     ));","span":{"file_name":"/Users/shelwitz/.cargo/registry/src/github.com-1ecc6299db9ec823/bio-0.39.0/src/stats/probs/cdf.rs","byte_start":862910,"byte_end":862921,"line_start":72,"line_end":72,"column_start":1,"column_end":12}},{"value":"/ }","span":{"file_name":"/Users/shelwitz/.cargo/registry/src/github.com-1ecc6299db9ec823/bio-0.39.0/src/stats/probs/cdf.rs","byte_start":862922,"byte_end":862927,"line_start":73,"line_end":73,"column_start":1,"column_end":6}},{"value":"/","span":{"file_name":"/Users/shelwitz/.cargo/registry/src/github.com-1ecc6299db9ec823/bio-0.39.0/src/stats/probs/cdf.rs","byte_start":862928,"byte_end":862931,"line_start":74,"line_end":74,"column_start":1,"column_end":4}},{"value":"/ // create cdf from vector of `Entry`s","span":{"file_name":"/Users/shelwitz/.cargo/registry/src/github.com-1ecc6299db9ec823/bio-0.39.0/src/stats/probs/cdf.rs","byte_start":862932,"byte_end":862973,"line_start":75,"line_end":75,"column_start":1,"column_end":42}},{"value":"/ let mut cdf_from_vec = CDF::from_cdf(cdf_vec.into_iter());","span":{"file_name":"/Users/shelwitz/.cargo/registry/src/github.com-1ecc6299db9ec823/bio-0.39.0/src/stats/probs/cdf.rs","byte_start":862974,"byte_end":863036,"line_start":76,"line_end":76,"column_start":1,"column_end":63}},{"value":"/","span":{"file_name":"/Users/shelwitz/.cargo/registry/src/github.com-1ecc6299db9ec823/bio-0.39.0/src/stats/probs/cdf.rs","byte_start":863037,"byte_end":863040,"line_start":77,"line_end":77,"column_start":1,"column_end":4}},{"value":"/ assert_relative_eq!(","span":{"file_name":"/Users/shelwitz/.cargo/registry/src/github.com-1ecc6299db9ec823/bio-0.39.0/src/stats/probs/cdf.rs","byte_start":863041,"byte_end":863065,"line_start":78,"line_end":78,"column_start":1,"column_end":25}},{"value":"/     *cdf_from_vec.get(&NotNan::new(2.0).unwrap()).unwrap(),","span":{"file_name":"/Users/shelwitz/.cargo/registry/src/github.com-1ecc6299db9ec823/bio-0.39.0/src/stats/probs/cdf.rs","byte_start":863066,"byte_end":863129,"line_start":79,"line_end":79,"column_start":1,"column_end":64}},{"value":"/     LogProb::ln_zero(),","span":{"file_name":"/Users/shelwitz/.cargo/registry/src/github.com-1ecc6299db9ec823/bio-0.39.0/src/stats/probs/cdf.rs","byte_start":863130,"byte_end":863157,"line_start":80,"line_end":80,"column_start":1,"column_end":28}},{"value":"/     epsilon = 0.0","span":{"file_name":"/Users/shelwitz/.cargo/registry/src/github.com-1ecc6299db9ec823/bio-0.39.0/src/stats/probs/cdf.rs","byte_start":863158,"byte_end":863179,"line_start":81,"line_end":81,"column_start":1,"column_end":22}},{"value":"/ );","span":{"file_name":"/Users/shelwitz/.cargo/registry/src/github.com-1ecc6299db9ec823/bio-0.39.0/src/stats/probs/cdf.rs","byte_start":863180,"byte_end":863186,"line_start":82,"line_end":82,"column_start":1,"column_end":7}},{"value":"/ assert_relative_eq!(","span":{"file_name":"/Users/shelwitz/.cargo/registry/src/github.com-1ecc6299db9ec823/bio-0.39.0/src/stats/probs/cdf.rs","byte_start":863187,"byte_end":863211,"line_start":83,"line_end":83,"column_start":1,"column_end":25}},{"value":"/     *cdf_from_vec.get(&NotNan::new(4.0).unwrap()).unwrap(),","span":{"file_name":"/Users/shelwitz/.cargo/registry/src/github.com-1ecc6299db9ec823/bio-0.39.0/src/stats/probs/cdf.rs","byte_start":863212,"byte_end":863275,"line_start":84,"line_end":84,"column_start":1,"column_end":64}},{"value":"/     LogProb((0.4 as f64).ln()),","span":{"file_name":"/Users/shelwitz/.cargo/registry/src/github.com-1ecc6299db9ec823/bio-0.39.0/src/stats/probs/cdf.rs","byte_start":863276,"byte_end":863311,"line_start":85,"line_end":85,"column_start":1,"column_end":36}},{"value":"/     epsilon = 0.0","span":{"file_name":"/Users/shelwitz/.cargo/registry/src/github.com-1ecc6299db9ec823/bio-0.39.0/src/stats/probs/cdf.rs","byte_start":863312,"byte_end":863333,"line_start":86,"line_end":86,"column_start":1,"column_end":22}},{"value":"/ );","span":{"file_name":"/Users/shelwitz/.cargo/registry/src/github.com-1ecc6299db9ec823/bio-0.39.0/src/stats/probs/cdf.rs","byte_start":863334,"byte_end":863340,"line_start":87,"line_end":87,"column_start":1,"column_end":7}},{"value":"/","span":{"file_name":"/Users/shelwitz/.cargo/registry/src/github.com-1ecc6299db9ec823/bio-0.39.0/src/stats/probs/cdf.rs","byte_start":863341,"byte_end":863344,"line_start":88,"line_end":88,"column_start":1,"column_end":4}},{"value":"/ // get the number of `Entry`s in cdf_from_vec","span":{"file_name":"/Users/shelwitz/.cargo/registry/src/github.com-1ecc6299db9ec823/bio-0.39.0/src/stats/probs/cdf.rs","byte_start":863345,"byte_end":863394,"line_start":89,"line_end":89,"column_start":1,"column_end":50}},{"value":"/ assert_eq!(cdf_from_vec.len(), 8);","span":{"file_name":"/Users/shelwitz/.cargo/registry/src/github.com-1ecc6299db9ec823/bio-0.39.0/src/stats/probs/cdf.rs","byte_start":863395,"byte_end":863433,"line_start":90,"line_end":90,"column_start":1,"column_end":39}},{"value":"/","span":{"file_name":"/Users/shelwitz/.cargo/registry/src/github.com-1ecc6299db9ec823/bio-0.39.0/src/stats/probs/cdf.rs","byte_start":863434,"byte_end":863437,"line_start":91,"line_end":91,"column_start":1,"column_end":4}},{"value":"/ // remove three zero values at `{0.0, 1.0, 2.0}` with `CDF::reduce()`","span":{"file_name":"/Users/shelwitz/.cargo/registry/src/github.com-1ecc6299db9ec823/bio-0.39.0/src/stats/probs/cdf.rs","byte_start":863438,"byte_end":863511,"line_start":92,"line_end":92,"column_start":1,"column_end":74}},{"value":"/ cdf_from_vec = CDF::reduce(cdf_from_vec);","span":{"file_name":"/Users/shelwitz/.cargo/registry/src/github.com-1ecc6299db9ec823/bio-0.39.0/src/stats/probs/cdf.rs","byte_start":863512,"byte_end":863557,"line_start":93,"line_end":93,"column_start":1,"column_end":46}},{"value":"/ assert_eq!(cdf_from_vec.len(), 5);","span":{"file_name":"/Users/shelwitz/.cargo/registry/src/github.com-1ecc6299db9ec823/bio-0.39.0/src/stats/probs/cdf.rs","byte_start":863558,"byte_end":863596,"line_start":94,"line_end":94,"column_start":1,"column_end":39}},{"value":"/ ```","span":{"file_name":"/Users/shelwitz/.cargo/registry/src/github.com-1ecc6299db9ec823/bio-0.39.0/src/stats/probs/cdf.rs","byte_start":863597,"byte_end":863604,"line_start":95,"line_end":95,"column_start":1,"column_end":8}}]},{"kind":"Struct","id":{"krate":0,"index":5881},"span":{"file_name":"/Users/shelwitz/.cargo/registry/src/github.com-1ecc6299db9ec823/bio-0.39.0/src/stats/probs/cdf.rs","byte_start":864017,"byte_end":864022,"line_start":110,"line_end":110,"column_start":12,"column_end":17},"name":"Entry","qualname":"::stats::probs::cdf::Entry","value":"Entry { value, prob }","parent":null,"children":[{"krate":0,"index":5883},{"krate":0,"index":5884}],"decl_id":null,"docs":" An `Entry` associates a `LogProb` with a value on an ordered axis. It can for example be\n used to set up probability mass functions or cumulative distribution functions ([CDF](struct.CDF)).\n","sig":null,"attributes":[{"value":"/ An `Entry` associates a `LogProb` with a value on an ordered axis. It can for example be","span":{"file_name":"/Users/shelwitz/.cargo/registry/src/github.com-1ecc6299db9ec823/bio-0.39.0/src/stats/probs/cdf.rs","byte_start":863761,"byte_end":863853,"line_start":107,"line_end":107,"column_start":1,"column_end":93}},{"value":"/ used to set up probability mass functions or cumulative distribution functions ([CDF](struct.CDF)).","span":{"file_name":"/Users/shelwitz/.cargo/registry/src/github.com-1ecc6299db9ec823/bio-0.39.0/src/stats/probs/cdf.rs","byte_start":863854,"byte_end":863957,"line_start":108,"line_end":108,"column_start":1,"column_end":104}}]},{"kind":"Field","id":{"krate":0,"index":5883},"span":{"file_name":"/Users/shelwitz/.cargo/registry/src/github.com-1ecc6299db9ec823/bio-0.39.0/src/stats/probs/cdf.rs","byte_start":864189,"byte_end":864194,"line_start":112,"line_end":112,"column_start":9,"column_end":14},"name":"value","qualname":"::stats::probs::cdf::Entry::value","value":"T","parent":{"krate":0,"index":5881},"children":[],"decl_id":null,"docs":" A `value` on the ordered axis, which has to have the Trait [`std::cmp::Ord`](https://doc.rust-lang.org/std/cmp/trait.Ord.html) implemented.\n","sig":null,"attributes":[{"value":"/ A `value` on the ordered axis, which has to have the Trait [`std::cmp::Ord`](https://doc.rust-lang.org/std/cmp/trait.Ord.html) implemented.","span":{"file_name":"/Users/shelwitz/.cargo/registry/src/github.com-1ecc6299db9ec823/bio-0.39.0/src/stats/probs/cdf.rs","byte_start":864037,"byte_end":864180,"line_start":111,"line_end":111,"column_start":5,"column_end":148}}]},{"kind":"Field","id":{"krate":0,"index":5884},"span":{"file_name":"/Users/shelwitz/.cargo/registry/src/github.com-1ecc6299db9ec823/bio-0.39.0/src/stats/probs/cdf.rs","byte_start":864270,"byte_end":864274,"line_start":114,"line_end":114,"column_start":9,"column_end":13},"name":"prob","qualname":"::stats::probs::cdf::Entry::prob","value":"stats::probs::LogProb","parent":{"krate":0,"index":5881},"children":[],"decl_id":null,"docs":" A probability at that `value` / point x on the x-axis.\n","sig":null,"attributes":[{"value":"/ A probability at that `value` / point x on the x-axis.","span":{"file_name":"/Users/shelwitz/.cargo/registry/src/github.com-1ecc6299db9ec823/bio-0.39.0/src/stats/probs/cdf.rs","byte_start":864203,"byte_end":864261,"line_start":113,"line_end":113,"column_start":5,"column_end":63}}]},{"kind":"Method","id":{"krate":0,"index":3044},"span":{"file_name":"/Users/shelwitz/.cargo/registry/src/github.com-1ecc6299db9ec823/bio-0.39.0/src/stats/probs/cdf.rs","byte_start":864957,"byte_end":864960,"line_start":133,"line_end":133,"column_start":12,"column_end":15},"name":"new","qualname":"<Entry<T>>::new","value":"pub fn new(T, LogProb) -> Self","parent":null,"children":[],"decl_id":null,"docs":" Create a new `Entry` for `prob` at `value`.","sig":null,"attributes":[{"value":"/ Create a new `Entry` for `prob` at `value`.","span":{"file_name":"/Users/shelwitz/.cargo/registry/src/github.com-1ecc6299db9ec823/bio-0.39.0/src/stats/probs/cdf.rs","byte_start":864316,"byte_end":864363,"line_start":118,"line_end":118,"column_start":5,"column_end":52}},{"value":"/","span":{"file_name":"/Users/shelwitz/.cargo/registry/src/github.com-1ecc6299db9ec823/bio-0.39.0/src/stats/probs/cdf.rs","byte_start":864368,"byte_end":864371,"line_start":119,"line_end":119,"column_start":5,"column_end":8}},{"value":"/ `value` needs to have the Trait [`std::cmp::Ord`](https://doc.rust-lang.org/std/cmp/trait.Ord.html)","span":{"file_name":"/Users/shelwitz/.cargo/registry/src/github.com-1ecc6299db9ec823/bio-0.39.0/src/stats/probs/cdf.rs","byte_start":864376,"byte_end":864479,"line_start":120,"line_end":120,"column_start":5,"column_end":108}},{"value":"/ implemented. As `f64` only has PartialOrd, use something like the [`ordered_float` crate](https://docs.rs/ordered-float/1.0.2/ordered_float/)","span":{"file_name":"/Users/shelwitz/.cargo/registry/src/github.com-1ecc6299db9ec823/bio-0.39.0/src/stats/probs/cdf.rs","byte_start":864484,"byte_end":864629,"line_start":121,"line_end":121,"column_start":5,"column_end":150}},{"value":"/ if you want to use floating point numbers.","span":{"file_name":"/Users/shelwitz/.cargo/registry/src/github.com-1ecc6299db9ec823/bio-0.39.0/src/stats/probs/cdf.rs","byte_start":864634,"byte_end":864680,"line_start":122,"line_end":122,"column_start":5,"column_end":51}},{"value":"/","span":{"file_name":"/Users/shelwitz/.cargo/registry/src/github.com-1ecc6299db9ec823/bio-0.39.0/src/stats/probs/cdf.rs","byte_start":864685,"byte_end":864688,"line_start":123,"line_end":123,"column_start":5,"column_end":8}},{"value":"/ # Example","span":{"file_name":"/Users/shelwitz/.cargo/registry/src/github.com-1ecc6299db9ec823/bio-0.39.0/src/stats/probs/cdf.rs","byte_start":864693,"byte_end":864706,"line_start":124,"line_end":124,"column_start":5,"column_end":18}},{"value":"/","span":{"file_name":"/Users/shelwitz/.cargo/registry/src/github.com-1ecc6299db9ec823/bio-0.39.0/src/stats/probs/cdf.rs","byte_start":864711,"byte_end":864714,"line_start":125,"line_end":125,"column_start":5,"column_end":8}},{"value":"/ ```","span":{"file_name":"/Users/shelwitz/.cargo/registry/src/github.com-1ecc6299db9ec823/bio-0.39.0/src/stats/probs/cdf.rs","byte_start":864719,"byte_end":864726,"line_start":126,"line_end":126,"column_start":5,"column_end":12}},{"value":"/ use bio::stats::probs::cdf::Entry;","span":{"file_name":"/Users/shelwitz/.cargo/registry/src/github.com-1ecc6299db9ec823/bio-0.39.0/src/stats/probs/cdf.rs","byte_start":864731,"byte_end":864769,"line_start":127,"line_end":127,"column_start":5,"column_end":43}},{"value":"/ use bio::stats::LogProb;","span":{"file_name":"/Users/shelwitz/.cargo/registry/src/github.com-1ecc6299db9ec823/bio-0.39.0/src/stats/probs/cdf.rs","byte_start":864774,"byte_end":864802,"line_start":128,"line_end":128,"column_start":5,"column_end":33}},{"value":"/ let entry = Entry::new(5, LogProb(0.6));","span":{"file_name":"/Users/shelwitz/.cargo/registry/src/github.com-1ecc6299db9ec823/bio-0.39.0/src/stats/probs/cdf.rs","byte_start":864807,"byte_end":864851,"line_start":129,"line_end":129,"column_start":5,"column_end":49}},{"value":"/ assert_eq!(entry.value, 5);","span":{"file_name":"/Users/shelwitz/.cargo/registry/src/github.com-1ecc6299db9ec823/bio-0.39.0/src/stats/probs/cdf.rs","byte_start":864856,"byte_end":864887,"line_start":130,"line_end":130,"column_start":5,"column_end":36}},{"value":"/ assert_eq!(entry.prob, LogProb(0.6));","span":{"file_name":"/Users/shelwitz/.cargo/registry/src/github.com-1ecc6299db9ec823/bio-0.39.0/src/stats/probs/cdf.rs","byte_start":864892,"byte_end":864933,"line_start":131,"line_end":131,"column_start":5,"column_end":46}},{"value":"/ ```","span":{"file_name":"/Users/shelwitz/.cargo/registry/src/github.com-1ecc6299db9ec823/bio-0.39.0/src/stats/probs/cdf.rs","byte_start":864938,"byte_end":864945,"line_start":132,"line_end":132,"column_start":5,"column_end":12}}]},{"kind":"Struct","id":{"krate":0,"index":5944},"span":{"file_name":"/Users/shelwitz/.cargo/registry/src/github.com-1ecc6299db9ec823/bio-0.39.0/src/stats/probs/cdf.rs","byte_start":865176,"byte_end":865179,"line_start":140,"line_end":140,"column_start":12,"column_end":15},"name":"CDF","qualname":"::stats::probs::cdf::CDF","value":"CDF {  }","parent":null,"children":[{"krate":0,"index":5946}],"decl_id":null,"docs":" Implementation of a cumulative distribution function as a vector of `Entry`s.\n","sig":null,"attributes":[{"value":"/ Implementation of a cumulative distribution function as a vector of `Entry`s.","span":{"file_name":"/Users/shelwitz/.cargo/registry/src/github.com-1ecc6299db9ec823/bio-0.39.0/src/stats/probs/cdf.rs","byte_start":865035,"byte_end":865116,"line_start":138,"line_end":138,"column_start":1,"column_end":82}}]},{"kind":"Method","id":{"krate":0,"index":3047},"span":{"file_name":"/Users/shelwitz/.cargo/registry/src/github.com-1ecc6299db9ec823/bio-0.39.0/src/stats/probs/cdf.rs","byte_start":865674,"byte_end":865682,"line_start":154,"line_end":154,"column_start":12,"column_end":20},"name":"from_pmf","qualname":"<CDF<T>>::from_pmf","value":"pub fn from_pmf(Vec<Entry<T>>) -> Self","parent":null,"children":[],"decl_id":null,"docs":" Create CDF from a vector representing a probability mass function (PMF).\n The PMF may contain duplicate values the probabilities of which are summed\n during generation of the CDF.","sig":null,"attributes":[{"value":"/ Create CDF from a vector representing a probability mass function (PMF).","span":{"file_name":"/Users/shelwitz/.cargo/registry/src/github.com-1ecc6299db9ec823/bio-0.39.0/src/stats/probs/cdf.rs","byte_start":865245,"byte_end":865321,"line_start":145,"line_end":145,"column_start":5,"column_end":81}},{"value":"/ The PMF may contain duplicate values the probabilities of which are summed","span":{"file_name":"/Users/shelwitz/.cargo/registry/src/github.com-1ecc6299db9ec823/bio-0.39.0/src/stats/probs/cdf.rs","byte_start":865326,"byte_end":865404,"line_start":146,"line_end":146,"column_start":5,"column_end":83}},{"value":"/ during generation of the CDF.","span":{"file_name":"/Users/shelwitz/.cargo/registry/src/github.com-1ecc6299db9ec823/bio-0.39.0/src/stats/probs/cdf.rs","byte_start":865409,"byte_end":865442,"line_start":147,"line_end":147,"column_start":5,"column_end":38}},{"value":"/","span":{"file_name":"/Users/shelwitz/.cargo/registry/src/github.com-1ecc6299db9ec823/bio-0.39.0/src/stats/probs/cdf.rs","byte_start":865447,"byte_end":865450,"line_start":148,"line_end":148,"column_start":5,"column_end":8}},{"value":"/ Runtime complexity: O(n log n), where n is the number of `entries`.","span":{"file_name":"/Users/shelwitz/.cargo/registry/src/github.com-1ecc6299db9ec823/bio-0.39.0/src/stats/probs/cdf.rs","byte_start":865455,"byte_end":865526,"line_start":149,"line_end":149,"column_start":5,"column_end":76}},{"value":"/","span":{"file_name":"/Users/shelwitz/.cargo/registry/src/github.com-1ecc6299db9ec823/bio-0.39.0/src/stats/probs/cdf.rs","byte_start":865531,"byte_end":865534,"line_start":150,"line_end":150,"column_start":5,"column_end":8}},{"value":"/ # Arguments","span":{"file_name":"/Users/shelwitz/.cargo/registry/src/github.com-1ecc6299db9ec823/bio-0.39.0/src/stats/probs/cdf.rs","byte_start":865539,"byte_end":865554,"line_start":151,"line_end":151,"column_start":5,"column_end":20}},{"value":"/","span":{"file_name":"/Users/shelwitz/.cargo/registry/src/github.com-1ecc6299db9ec823/bio-0.39.0/src/stats/probs/cdf.rs","byte_start":865559,"byte_end":865562,"line_start":152,"line_end":152,"column_start":5,"column_end":8}},{"value":"/ * `entries` - The PMF as a vector of `Entry` objects (values with an associated `LogProb`).","span":{"file_name":"/Users/shelwitz/.cargo/registry/src/github.com-1ecc6299db9ec823/bio-0.39.0/src/stats/probs/cdf.rs","byte_start":865567,"byte_end":865662,"line_start":153,"line_end":153,"column_start":5,"column_end":100}}]},{"kind":"Method","id":{"krate":0,"index":3050},"span":{"file_name":"/Users/shelwitz/.cargo/registry/src/github.com-1ecc6299db9ec823/bio-0.39.0/src/stats/probs/cdf.rs","byte_start":866772,"byte_end":866780,"line_start":186,"line_end":186,"column_start":12,"column_end":20},"name":"from_cdf","qualname":"<CDF<T>>::from_cdf","value":"pub fn from_cdf<I: Iterator<Item = Entry<T>>>(I) -> Self","parent":null,"children":[],"decl_id":null,"docs":" Create CDF from iterator. This can be used to replace the values of a CDF.","sig":null,"attributes":[{"value":"/ Create CDF from iterator. This can be used to replace the values of a CDF.","span":{"file_name":"/Users/shelwitz/.cargo/registry/src/github.com-1ecc6299db9ec823/bio-0.39.0/src/stats/probs/cdf.rs","byte_start":866493,"byte_end":866571,"line_start":179,"line_end":179,"column_start":5,"column_end":83}},{"value":"/","span":{"file_name":"/Users/shelwitz/.cargo/registry/src/github.com-1ecc6299db9ec823/bio-0.39.0/src/stats/probs/cdf.rs","byte_start":866576,"byte_end":866579,"line_start":180,"line_end":180,"column_start":5,"column_end":8}},{"value":"/ Runtime complexity: O(n), where n is the number of `entries`.","span":{"file_name":"/Users/shelwitz/.cargo/registry/src/github.com-1ecc6299db9ec823/bio-0.39.0/src/stats/probs/cdf.rs","byte_start":866584,"byte_end":866649,"line_start":181,"line_end":181,"column_start":5,"column_end":70}},{"value":"/","span":{"file_name":"/Users/shelwitz/.cargo/registry/src/github.com-1ecc6299db9ec823/bio-0.39.0/src/stats/probs/cdf.rs","byte_start":866654,"byte_end":866657,"line_start":182,"line_end":182,"column_start":5,"column_end":8}},{"value":"/ # Arguments","span":{"file_name":"/Users/shelwitz/.cargo/registry/src/github.com-1ecc6299db9ec823/bio-0.39.0/src/stats/probs/cdf.rs","byte_start":866662,"byte_end":866677,"line_start":183,"line_end":183,"column_start":5,"column_end":20}},{"value":"/","span":{"file_name":"/Users/shelwitz/.cargo/registry/src/github.com-1ecc6299db9ec823/bio-0.39.0/src/stats/probs/cdf.rs","byte_start":866682,"byte_end":866685,"line_start":184,"line_end":184,"column_start":5,"column_end":8}},{"value":"/ * `entries` - An iterator over `Entry<T>` values, where T requires","span":{"file_name":"/Users/shelwitz/.cargo/registry/src/github.com-1ecc6299db9ec823/bio-0.39.0/src/stats/probs/cdf.rs","byte_start":866690,"byte_end":866760,"line_start":185,"line_end":185,"column_start":5,"column_end":75}}]},{"kind":"Method","id":{"krate":0,"index":3052},"span":{"file_name":"/Users/shelwitz/.cargo/registry/src/github.com-1ecc6299db9ec823/bio-0.39.0/src/stats/probs/cdf.rs","byte_start":867075,"byte_end":867081,"line_start":195,"line_end":195,"column_start":12,"column_end":18},"name":"reduce","qualname":"<CDF<T>>::reduce","value":"pub fn reduce(Self) -> Self","parent":null,"children":[],"decl_id":null,"docs":" Reduce CDF by omitting values with zero probability.","sig":null,"attributes":[{"value":"/ Reduce CDF by omitting values with zero probability.","span":{"file_name":"/Users/shelwitz/.cargo/registry/src/github.com-1ecc6299db9ec823/bio-0.39.0/src/stats/probs/cdf.rs","byte_start":866910,"byte_end":866966,"line_start":192,"line_end":192,"column_start":5,"column_end":61}},{"value":"/","span":{"file_name":"/Users/shelwitz/.cargo/registry/src/github.com-1ecc6299db9ec823/bio-0.39.0/src/stats/probs/cdf.rs","byte_start":866971,"byte_end":866974,"line_start":193,"line_end":193,"column_start":5,"column_end":8}},{"value":"/ Runtime complexity: O(n), where n is the number of `value`s with `prob` of zero.","span":{"file_name":"/Users/shelwitz/.cargo/registry/src/github.com-1ecc6299db9ec823/bio-0.39.0/src/stats/probs/cdf.rs","byte_start":866979,"byte_end":867063,"line_start":194,"line_end":194,"column_start":5,"column_end":89}}]},{"kind":"Method","id":{"krate":0,"index":3053},"span":{"file_name":"/Users/shelwitz/.cargo/registry/src/github.com-1ecc6299db9ec823/bio-0.39.0/src/stats/probs/cdf.rs","byte_start":867677,"byte_end":867683,"line_start":215,"line_end":215,"column_start":12,"column_end":18},"name":"sample","qualname":"<CDF<T>>::sample","value":"pub fn sample(Self, usize) -> Self","parent":null,"children":[],"decl_id":null,"docs":" Downsample CDF to n entries. Panics if n <= 1 and returns identity if n is greater\n than the number of entries.","sig":null,"attributes":[{"value":"/ Downsample CDF to n entries. Panics if n <= 1 and returns identity if n is greater","span":{"file_name":"/Users/shelwitz/.cargo/registry/src/github.com-1ecc6299db9ec823/bio-0.39.0/src/stats/probs/cdf.rs","byte_start":867358,"byte_end":867444,"line_start":207,"line_end":207,"column_start":5,"column_end":91}},{"value":"/ than the number of entries.","span":{"file_name":"/Users/shelwitz/.cargo/registry/src/github.com-1ecc6299db9ec823/bio-0.39.0/src/stats/probs/cdf.rs","byte_start":867449,"byte_end":867480,"line_start":208,"line_end":208,"column_start":5,"column_end":36}},{"value":"/","span":{"file_name":"/Users/shelwitz/.cargo/registry/src/github.com-1ecc6299db9ec823/bio-0.39.0/src/stats/probs/cdf.rs","byte_start":867485,"byte_end":867488,"line_start":209,"line_end":209,"column_start":5,"column_end":8}},{"value":"/ Runtime complexity: O(m), where m is the original number of `Entry`s in `CDF`.","span":{"file_name":"/Users/shelwitz/.cargo/registry/src/github.com-1ecc6299db9ec823/bio-0.39.0/src/stats/probs/cdf.rs","byte_start":867493,"byte_end":867575,"line_start":210,"line_end":210,"column_start":5,"column_end":87}},{"value":"/","span":{"file_name":"/Users/shelwitz/.cargo/registry/src/github.com-1ecc6299db9ec823/bio-0.39.0/src/stats/probs/cdf.rs","byte_start":867580,"byte_end":867583,"line_start":211,"line_end":211,"column_start":5,"column_end":8}},{"value":"/ # Arguments","span":{"file_name":"/Users/shelwitz/.cargo/registry/src/github.com-1ecc6299db9ec823/bio-0.39.0/src/stats/probs/cdf.rs","byte_start":867588,"byte_end":867603,"line_start":212,"line_end":212,"column_start":5,"column_end":20}},{"value":"/","span":{"file_name":"/Users/shelwitz/.cargo/registry/src/github.com-1ecc6299db9ec823/bio-0.39.0/src/stats/probs/cdf.rs","byte_start":867608,"byte_end":867611,"line_start":213,"line_end":213,"column_start":5,"column_end":8}},{"value":"/ * `n` - Number of entries after downsampling.","span":{"file_name":"/Users/shelwitz/.cargo/registry/src/github.com-1ecc6299db9ec823/bio-0.39.0/src/stats/probs/cdf.rs","byte_start":867616,"byte_end":867665,"line_start":214,"line_end":214,"column_start":5,"column_end":54}}]},{"kind":"Method","id":{"krate":0,"index":3054},"span":{"file_name":"/Users/shelwitz/.cargo/registry/src/github.com-1ecc6299db9ec823/bio-0.39.0/src/stats/probs/cdf.rs","byte_start":868107,"byte_end":868111,"line_start":229,"line_end":229,"column_start":12,"column_end":16},"name":"iter","qualname":"<CDF<T>>::iter","value":"pub fn iter(&Self) -> slice::Iter<, Entry<T>>","parent":null,"children":[],"decl_id":null,"docs":" Provide an iterator for the CDF.\n","sig":null,"attributes":[{"value":"/ Provide an iterator for the CDF.","span":{"file_name":"/Users/shelwitz/.cargo/registry/src/github.com-1ecc6299db9ec823/bio-0.39.0/src/stats/probs/cdf.rs","byte_start":868059,"byte_end":868095,"line_start":228,"line_end":228,"column_start":5,"column_end":41}}]},{"kind":"Method","id":{"krate":0,"index":3055},"span":{"file_name":"/Users/shelwitz/.cargo/registry/src/github.com-1ecc6299db9ec823/bio-0.39.0/src/stats/probs/cdf.rs","byte_start":868391,"byte_end":868399,"line_start":237,"line_end":237,"column_start":12,"column_end":20},"name":"iter_mut","qualname":"<CDF<T>>::iter_mut","value":"pub fn iter_mut(&mut Self) -> slice::IterMut<, Entry<T>>","parent":null,"children":[],"decl_id":null,"docs":" Provide a mutable iterator over entries.","sig":null,"attributes":[{"value":"/ Provide a mutable iterator over entries.","span":{"file_name":"/Users/shelwitz/.cargo/registry/src/github.com-1ecc6299db9ec823/bio-0.39.0/src/stats/probs/cdf.rs","byte_start":868187,"byte_end":868231,"line_start":233,"line_end":233,"column_start":5,"column_end":49}},{"value":"/","span":{"file_name":"/Users/shelwitz/.cargo/registry/src/github.com-1ecc6299db9ec823/bio-0.39.0/src/stats/probs/cdf.rs","byte_start":868236,"byte_end":868239,"line_start":234,"line_end":234,"column_start":5,"column_end":8}},{"value":"/ This does not check for consistency. In other words, you","span":{"file_name":"/Users/shelwitz/.cargo/registry/src/github.com-1ecc6299db9ec823/bio-0.39.0/src/stats/probs/cdf.rs","byte_start":868244,"byte_end":868304,"line_start":235,"line_end":235,"column_start":5,"column_end":65}},{"value":"/ should not change the order of the entries, nor the probabilities!","span":{"file_name":"/Users/shelwitz/.cargo/registry/src/github.com-1ecc6299db9ec823/bio-0.39.0/src/stats/probs/cdf.rs","byte_start":868309,"byte_end":868379,"line_start":236,"line_end":236,"column_start":5,"column_end":75}}]},{"kind":"Method","id":{"krate":0,"index":3056},"span":{"file_name":"/Users/shelwitz/.cargo/registry/src/github.com-1ecc6299db9ec823/bio-0.39.0/src/stats/probs/cdf.rs","byte_start":868561,"byte_end":868569,"line_start":242,"line_end":242,"column_start":12,"column_end":20},"name":"iter_pmf","qualname":"<CDF<T>>::iter_pmf","value":"pub fn iter_pmf(&Self) -> CDFPMFIter<, T>","parent":null,"children":[],"decl_id":null,"docs":" Provide an iterator over the PMF corresponding to this CDF.\n","sig":null,"attributes":[{"value":"/ Provide an iterator over the PMF corresponding to this CDF.","span":{"file_name":"/Users/shelwitz/.cargo/registry/src/github.com-1ecc6299db9ec823/bio-0.39.0/src/stats/probs/cdf.rs","byte_start":868486,"byte_end":868549,"line_start":241,"line_end":241,"column_start":5,"column_end":68}}]},{"kind":"Method","id":{"krate":0,"index":3060},"span":{"file_name":"/Users/shelwitz/.cargo/registry/src/github.com-1ecc6299db9ec823/bio-0.39.0/src/stats/probs/cdf.rs","byte_start":869306,"byte_end":869309,"line_start":262,"line_end":262,"column_start":12,"column_end":15},"name":"get","qualname":"<CDF<T>>::get","value":"pub fn get(&Self, &T) -> Option<LogProb>","parent":null,"children":[],"decl_id":null,"docs":" Get cumulative probability for a given value.","sig":null,"attributes":[{"value":"/ Get cumulative probability for a given value.","span":{"file_name":"/Users/shelwitz/.cargo/registry/src/github.com-1ecc6299db9ec823/bio-0.39.0/src/stats/probs/cdf.rs","byte_start":868953,"byte_end":869002,"line_start":254,"line_end":254,"column_start":5,"column_end":54}},{"value":"/","span":{"file_name":"/Users/shelwitz/.cargo/registry/src/github.com-1ecc6299db9ec823/bio-0.39.0/src/stats/probs/cdf.rs","byte_start":869007,"byte_end":869010,"line_start":255,"line_end":255,"column_start":5,"column_end":8}},{"value":"/ If the value is not present, return the probability of the previous value.","span":{"file_name":"/Users/shelwitz/.cargo/registry/src/github.com-1ecc6299db9ec823/bio-0.39.0/src/stats/probs/cdf.rs","byte_start":869015,"byte_end":869093,"line_start":256,"line_end":256,"column_start":5,"column_end":83}},{"value":"/ Time complexity: O(log n), where n is the number of `Entry`s in `CDF`.","span":{"file_name":"/Users/shelwitz/.cargo/registry/src/github.com-1ecc6299db9ec823/bio-0.39.0/src/stats/probs/cdf.rs","byte_start":869098,"byte_end":869172,"line_start":257,"line_end":257,"column_start":5,"column_end":79}},{"value":"/","span":{"file_name":"/Users/shelwitz/.cargo/registry/src/github.com-1ecc6299db9ec823/bio-0.39.0/src/stats/probs/cdf.rs","byte_start":869177,"byte_end":869180,"line_start":258,"line_end":258,"column_start":5,"column_end":8}},{"value":"/ # Arguments","span":{"file_name":"/Users/shelwitz/.cargo/registry/src/github.com-1ecc6299db9ec823/bio-0.39.0/src/stats/probs/cdf.rs","byte_start":869185,"byte_end":869200,"line_start":259,"line_end":259,"column_start":5,"column_end":20}},{"value":"/","span":{"file_name":"/Users/shelwitz/.cargo/registry/src/github.com-1ecc6299db9ec823/bio-0.39.0/src/stats/probs/cdf.rs","byte_start":869205,"byte_end":869208,"line_start":260,"line_end":260,"column_start":5,"column_end":8}},{"value":"/ * `value` - A value at which you're interested in the cumulative probability.","span":{"file_name":"/Users/shelwitz/.cargo/registry/src/github.com-1ecc6299db9ec823/bio-0.39.0/src/stats/probs/cdf.rs","byte_start":869213,"byte_end":869294,"line_start":261,"line_end":261,"column_start":5,"column_end":86}}]},{"kind":"Method","id":{"krate":0,"index":3062},"span":{"file_name":"/Users/shelwitz/.cargo/registry/src/github.com-1ecc6299db9ec823/bio-0.39.0/src/stats/probs/cdf.rs","byte_start":869957,"byte_end":869964,"line_start":282,"line_end":282,"column_start":12,"column_end":19},"name":"get_pmf","qualname":"<CDF<T>>::get_pmf","value":"pub fn get_pmf(&Self, &T) -> Option<LogProb>","parent":null,"children":[],"decl_id":null,"docs":" Get probability (i.e. probability mass) for a given `value`.","sig":null,"attributes":[{"value":"/ Get probability (i.e. probability mass) for a given `value`.","span":{"file_name":"/Users/shelwitz/.cargo/registry/src/github.com-1ecc6299db9ec823/bio-0.39.0/src/stats/probs/cdf.rs","byte_start":869794,"byte_end":869858,"line_start":279,"line_end":279,"column_start":5,"column_end":69}},{"value":"/","span":{"file_name":"/Users/shelwitz/.cargo/registry/src/github.com-1ecc6299db9ec823/bio-0.39.0/src/stats/probs/cdf.rs","byte_start":869863,"byte_end":869866,"line_start":280,"line_end":280,"column_start":5,"column_end":8}},{"value":"/ Time complexity: O(log n), where n is the number of `Entry`s in `CDF`.","span":{"file_name":"/Users/shelwitz/.cargo/registry/src/github.com-1ecc6299db9ec823/bio-0.39.0/src/stats/probs/cdf.rs","byte_start":869871,"byte_end":869945,"line_start":281,"line_end":281,"column_start":5,"column_end":79}}]},{"kind":"Method","id":{"krate":0,"index":3064},"span":{"file_name":"/Users/shelwitz/.cargo/registry/src/github.com-1ecc6299db9ec823/bio-0.39.0/src/stats/probs/cdf.rs","byte_start":870745,"byte_end":870755,"line_start":308,"line_end":308,"column_start":12,"column_end":22},"name":"total_prob","qualname":"<CDF<T>>::total_prob","value":"pub fn total_prob(&Self) -> LogProb","parent":null,"children":[],"decl_id":null,"docs":" Return total probability of the `CDF`.","sig":null,"attributes":[{"value":"/ Return total probability of the `CDF`.","span":{"file_name":"/Users/shelwitz/.cargo/registry/src/github.com-1ecc6299db9ec823/bio-0.39.0/src/stats/probs/cdf.rs","byte_start":870652,"byte_end":870694,"line_start":305,"line_end":305,"column_start":5,"column_end":47}},{"value":"/","span":{"file_name":"/Users/shelwitz/.cargo/registry/src/github.com-1ecc6299db9ec823/bio-0.39.0/src/stats/probs/cdf.rs","byte_start":870699,"byte_end":870702,"line_start":306,"line_end":306,"column_start":5,"column_end":8}},{"value":"/ Time complexity: O(1).","span":{"file_name":"/Users/shelwitz/.cargo/registry/src/github.com-1ecc6299db9ec823/bio-0.39.0/src/stats/probs/cdf.rs","byte_start":870707,"byte_end":870733,"line_start":307,"line_end":307,"column_start":5,"column_end":31}}]},{"kind":"Method","id":{"krate":0,"index":3066},"span":{"file_name":"/Users/shelwitz/.cargo/registry/src/github.com-1ecc6299db9ec823/bio-0.39.0/src/stats/probs/cdf.rs","byte_start":871006,"byte_end":871009,"line_start":315,"line_end":315,"column_start":12,"column_end":15},"name":"map","qualname":"<CDF<T>>::map","value":"pub fn map(&Self) -> Option<&T>","parent":null,"children":[],"decl_id":null,"docs":" Return maximum a posteriori probability estimate (MAP).","sig":null,"attributes":[{"value":"/ Return maximum a posteriori probability estimate (MAP).","span":{"file_name":"/Users/shelwitz/.cargo/registry/src/github.com-1ecc6299db9ec823/bio-0.39.0/src/stats/probs/cdf.rs","byte_start":870852,"byte_end":870911,"line_start":312,"line_end":312,"column_start":5,"column_end":64}},{"value":"/","span":{"file_name":"/Users/shelwitz/.cargo/registry/src/github.com-1ecc6299db9ec823/bio-0.39.0/src/stats/probs/cdf.rs","byte_start":870916,"byte_end":870919,"line_start":313,"line_end":313,"column_start":5,"column_end":8}},{"value":"/ Time complexity: O(n), where n is the number of `Entry`s in `CDF`.","span":{"file_name":"/Users/shelwitz/.cargo/registry/src/github.com-1ecc6299db9ec823/bio-0.39.0/src/stats/probs/cdf.rs","byte_start":870924,"byte_end":870994,"line_start":314,"line_end":314,"column_start":5,"column_end":75}}]},{"kind":"Method","id":{"krate":0,"index":3067},"span":{"file_name":"/Users/shelwitz/.cargo/registry/src/github.com-1ecc6299db9ec823/bio-0.39.0/src/stats/probs/cdf.rs","byte_start":871683,"byte_end":871700,"line_start":336,"line_end":336,"column_start":12,"column_end":29},"name":"credible_interval","qualname":"<CDF<T>>::credible_interval","value":"pub fn credible_interval(&Self, f64) -> Option<Range<&T>>","parent":null,"children":[],"decl_id":null,"docs":" Return w%-credible interval. The width w is a float between 0 and 1. Panics otherwise.\n E.g. provide `width=0.95` for the 95% credible interval.","sig":null,"attributes":[{"value":"/ Return w%-credible interval. The width w is a float between 0 and 1. Panics otherwise.","span":{"file_name":"/Users/shelwitz/.cargo/registry/src/github.com-1ecc6299db9ec823/bio-0.39.0/src/stats/probs/cdf.rs","byte_start":871312,"byte_end":871402,"line_start":328,"line_end":328,"column_start":5,"column_end":95}},{"value":"/ E.g. provide `width=0.95` for the 95% credible interval.","span":{"file_name":"/Users/shelwitz/.cargo/registry/src/github.com-1ecc6299db9ec823/bio-0.39.0/src/stats/probs/cdf.rs","byte_start":871407,"byte_end":871467,"line_start":329,"line_end":329,"column_start":5,"column_end":65}},{"value":"/","span":{"file_name":"/Users/shelwitz/.cargo/registry/src/github.com-1ecc6299db9ec823/bio-0.39.0/src/stats/probs/cdf.rs","byte_start":871472,"byte_end":871475,"line_start":330,"line_end":330,"column_start":5,"column_end":8}},{"value":"/ Runtime complexity: O(log n), where n is the number of `Entry`s in `CDF`.","span":{"file_name":"/Users/shelwitz/.cargo/registry/src/github.com-1ecc6299db9ec823/bio-0.39.0/src/stats/probs/cdf.rs","byte_start":871480,"byte_end":871557,"line_start":331,"line_end":331,"column_start":5,"column_end":82}},{"value":"/","span":{"file_name":"/Users/shelwitz/.cargo/registry/src/github.com-1ecc6299db9ec823/bio-0.39.0/src/stats/probs/cdf.rs","byte_start":871562,"byte_end":871565,"line_start":332,"line_end":332,"column_start":5,"column_end":8}},{"value":"/ # Arguments","span":{"file_name":"/Users/shelwitz/.cargo/registry/src/github.com-1ecc6299db9ec823/bio-0.39.0/src/stats/probs/cdf.rs","byte_start":871570,"byte_end":871585,"line_start":333,"line_end":333,"column_start":5,"column_end":20}},{"value":"/","span":{"file_name":"/Users/shelwitz/.cargo/registry/src/github.com-1ecc6299db9ec823/bio-0.39.0/src/stats/probs/cdf.rs","byte_start":871590,"byte_end":871593,"line_start":334,"line_end":334,"column_start":5,"column_end":8}},{"value":"/ * `width` - wanted width of the credible interval as a fraction of 1.","span":{"file_name":"/Users/shelwitz/.cargo/registry/src/github.com-1ecc6299db9ec823/bio-0.39.0/src/stats/probs/cdf.rs","byte_start":871598,"byte_end":871671,"line_start":335,"line_end":335,"column_start":5,"column_end":78}}]},{"kind":"Method","id":{"krate":0,"index":3072},"span":{"file_name":"/Users/shelwitz/.cargo/registry/src/github.com-1ecc6299db9ec823/bio-0.39.0/src/stats/probs/cdf.rs","byte_start":872586,"byte_end":872589,"line_start":364,"line_end":364,"column_start":12,"column_end":15},"name":"len","qualname":"<CDF<T>>::len","value":"pub fn len(&Self) -> usize","parent":null,"children":[],"decl_id":null,"docs":" Number of `Entry`s in the `CDF`.","sig":null,"attributes":[{"value":"/ Number of `Entry`s in the `CDF`.","span":{"file_name":"/Users/shelwitz/.cargo/registry/src/github.com-1ecc6299db9ec823/bio-0.39.0/src/stats/probs/cdf.rs","byte_start":872500,"byte_end":872536,"line_start":361,"line_end":361,"column_start":5,"column_end":41}},{"value":"/","span":{"file_name":"/Users/shelwitz/.cargo/registry/src/github.com-1ecc6299db9ec823/bio-0.39.0/src/stats/probs/cdf.rs","byte_start":872541,"byte_end":872544,"line_start":362,"line_end":362,"column_start":5,"column_end":8}},{"value":"/ Time complexity: O(1)","span":{"file_name":"/Users/shelwitz/.cargo/registry/src/github.com-1ecc6299db9ec823/bio-0.39.0/src/stats/probs/cdf.rs","byte_start":872549,"byte_end":872574,"line_start":363,"line_end":363,"column_start":5,"column_end":30}}]},{"kind":"Method","id":{"krate":0,"index":3073},"span":{"file_name":"/Users/shelwitz/.cargo/registry/src/github.com-1ecc6299db9ec823/bio-0.39.0/src/stats/probs/cdf.rs","byte_start":872748,"byte_end":872756,"line_start":371,"line_end":371,"column_start":12,"column_end":20},"name":"is_empty","qualname":"<CDF<T>>::is_empty","value":"pub fn is_empty(&Self) -> bool","parent":null,"children":[],"decl_id":null,"docs":" Returns `true` if a CDF is empty, false otherwise.","sig":null,"attributes":[{"value":"/ Returns `true` if a CDF is empty, false otherwise.","span":{"file_name":"/Users/shelwitz/.cargo/registry/src/github.com-1ecc6299db9ec823/bio-0.39.0/src/stats/probs/cdf.rs","byte_start":872644,"byte_end":872698,"line_start":368,"line_end":368,"column_start":5,"column_end":59}},{"value":"/","span":{"file_name":"/Users/shelwitz/.cargo/registry/src/github.com-1ecc6299db9ec823/bio-0.39.0/src/stats/probs/cdf.rs","byte_start":872703,"byte_end":872706,"line_start":369,"line_end":369,"column_start":5,"column_end":8}},{"value":"/ Time complexity: O(1)","span":{"file_name":"/Users/shelwitz/.cargo/registry/src/github.com-1ecc6299db9ec823/bio-0.39.0/src/stats/probs/cdf.rs","byte_start":872711,"byte_end":872736,"line_start":370,"line_end":370,"column_start":5,"column_end":30}}]},{"kind":"Method","id":{"krate":0,"index":3076},"span":{"file_name":"/Users/shelwitz/.cargo/registry/src/github.com-1ecc6299db9ec823/bio-0.39.0/src/stats/probs/cdf.rs","byte_start":872998,"byte_end":873012,"line_start":383,"line_end":383,"column_start":12,"column_end":26},"name":"expected_value","qualname":"<CDF<T>>::expected_value","value":"pub fn expected_value(&Self) -> f64","parent":null,"children":[],"decl_id":null,"docs":" Calculate expected value.","sig":null,"attributes":[{"value":"/ Calculate expected value.","span":{"file_name":"/Users/shelwitz/.cargo/registry/src/github.com-1ecc6299db9ec823/bio-0.39.0/src/stats/probs/cdf.rs","byte_start":872871,"byte_end":872900,"line_start":380,"line_end":380,"column_start":5,"column_end":34}},{"value":"/","span":{"file_name":"/Users/shelwitz/.cargo/registry/src/github.com-1ecc6299db9ec823/bio-0.39.0/src/stats/probs/cdf.rs","byte_start":872905,"byte_end":872908,"line_start":381,"line_end":381,"column_start":5,"column_end":8}},{"value":"/ Runtime complexity: O(n), where n is the number of `Entry`s in `CDF`.","span":{"file_name":"/Users/shelwitz/.cargo/registry/src/github.com-1ecc6299db9ec823/bio-0.39.0/src/stats/probs/cdf.rs","byte_start":872913,"byte_end":872986,"line_start":382,"line_end":382,"column_start":5,"column_end":78}}]},{"kind":"Method","id":{"krate":0,"index":3079},"span":{"file_name":"/Users/shelwitz/.cargo/registry/src/github.com-1ecc6299db9ec823/bio-0.39.0/src/stats/probs/cdf.rs","byte_start":873289,"byte_end":873297,"line_start":392,"line_end":392,"column_start":12,"column_end":20},"name":"variance","qualname":"<CDF<T>>::variance","value":"pub fn variance(&Self) -> f64","parent":null,"children":[],"decl_id":null,"docs":" Calculate variance.","sig":null,"attributes":[{"value":"/ Calculate variance.","span":{"file_name":"/Users/shelwitz/.cargo/registry/src/github.com-1ecc6299db9ec823/bio-0.39.0/src/stats/probs/cdf.rs","byte_start":873168,"byte_end":873191,"line_start":389,"line_end":389,"column_start":5,"column_end":28}},{"value":"/","span":{"file_name":"/Users/shelwitz/.cargo/registry/src/github.com-1ecc6299db9ec823/bio-0.39.0/src/stats/probs/cdf.rs","byte_start":873196,"byte_end":873199,"line_start":390,"line_end":390,"column_start":5,"column_end":8}},{"value":"/ Runtime complexity: O(n), where n is the number of `Entry`s in `CDF`.","span":{"file_name":"/Users/shelwitz/.cargo/registry/src/github.com-1ecc6299db9ec823/bio-0.39.0/src/stats/probs/cdf.rs","byte_start":873204,"byte_end":873277,"line_start":391,"line_end":391,"column_start":5,"column_end":78}}]},{"kind":"Method","id":{"krate":0,"index":3082},"span":{"file_name":"/Users/shelwitz/.cargo/registry/src/github.com-1ecc6299db9ec823/bio-0.39.0/src/stats/probs/cdf.rs","byte_start":873636,"byte_end":873654,"line_start":402,"line_end":402,"column_start":12,"column_end":30},"name":"standard_deviation","qualname":"<CDF<T>>::standard_deviation","value":"pub fn standard_deviation(&Self) -> f64","parent":null,"children":[],"decl_id":null,"docs":" Calculate standard deviation.","sig":null,"attributes":[{"value":"/ Calculate standard deviation.","span":{"file_name":"/Users/shelwitz/.cargo/registry/src/github.com-1ecc6299db9ec823/bio-0.39.0/src/stats/probs/cdf.rs","byte_start":873505,"byte_end":873538,"line_start":399,"line_end":399,"column_start":5,"column_end":38}},{"value":"/","span":{"file_name":"/Users/shelwitz/.cargo/registry/src/github.com-1ecc6299db9ec823/bio-0.39.0/src/stats/probs/cdf.rs","byte_start":873543,"byte_end":873546,"line_start":400,"line_end":400,"column_start":5,"column_end":8}},{"value":"/ Runtime complexity: O(n), where n is the number of `Entry`s in `CDF`.","span":{"file_name":"/Users/shelwitz/.cargo/registry/src/github.com-1ecc6299db9ec823/bio-0.39.0/src/stats/probs/cdf.rs","byte_start":873551,"byte_end":873624,"line_start":401,"line_end":401,"column_start":5,"column_end":78}}]},{"kind":"Type","id":{"krate":0,"index":3083},"span":{"file_name":"/Users/shelwitz/.cargo/registry/src/github.com-1ecc6299db9ec823/bio-0.39.0/src/stats/probs/cdf.rs","byte_start":873720,"byte_end":873730,"line_start":407,"line_end":407,"column_start":10,"column_end":20},"name":"CDFPMFIter","qualname":"::stats::probs::cdf::CDFPMFIter","value":"iter::Scan<slice::Iter, LogProb,\n           fn(: &mut LogProb, : &'a Entry<T>) -> Option<Entry<&'a T>>>","parent":null,"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Mod","id":{"krate":0,"index":3086},"span":{"file_name":"/Users/shelwitz/.cargo/registry/src/github.com-1ecc6299db9ec823/bio-0.39.0/src/stats/probs/errors.rs","byte_start":0,"byte_end":0,"line_start":1,"line_end":1,"column_start":1,"column_end":1},"name":"errors","qualname":"::stats::probs::errors","value":"/Users/shelwitz/.cargo/registry/src/github.com-1ecc6299db9ec823/bio-0.39.0/src/stats/probs/errors.rs","parent":null,"children":[{"krate":0,"index":3087},{"krate":0,"index":6004},{"krate":0,"index":6005},{"krate":0,"index":6006},{"krate":0,"index":6008},{"krate":0,"index":6010},{"krate":0,"index":6011},{"krate":0,"index":3090}],"decl_id":null,"docs":" Error definitions for the `probs` module.\n","sig":null,"attributes":[{"value":"/ Error definitions for the `probs` module.","span":{"file_name":"/Users/shelwitz/.cargo/registry/src/github.com-1ecc6299db9ec823/bio-0.39.0/src/stats/probs/errors.rs","byte_start":875473,"byte_end":875518,"line_start":6,"line_end":6,"column_start":1,"column_end":46}}]},{"kind":"StructVariant","id":{"krate":0,"index":6014},"span":{"file_name":"/Users/shelwitz/.cargo/registry/src/github.com-1ecc6299db9ec823/bio-0.39.0/src/stats/probs/errors.rs","byte_start":875656,"byte_end":875667,"line_start":12,"line_end":12,"column_start":5,"column_end":16},"name":"InvalidProb","qualname":"::stats::probs::errors::Error::InvalidProb","value":"Error::InvalidProb { prob }","parent":{"krate":0,"index":6004},"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[{"value":"error(\"probabilty {} not in interval [0,1]\", prob)","span":{"file_name":"/Users/shelwitz/.cargo/registry/src/github.com-1ecc6299db9ec823/bio-0.39.0/src/stats/probs/errors.rs","byte_start":875598,"byte_end":875651,"line_start":11,"line_end":11,"column_start":5,"column_end":58}}]},{"kind":"Enum","id":{"krate":0,"index":6004},"span":{"file_name":"/Users/shelwitz/.cargo/registry/src/github.com-1ecc6299db9ec823/bio-0.39.0/src/stats/probs/errors.rs","byte_start":875586,"byte_end":875591,"line_start":10,"line_end":10,"column_start":10,"column_end":15},"name":"Error","qualname":"::stats::probs::errors::Error","value":"pub enum Error {\n    InvalidProb {\n        prob: f64,\n    },\n}","parent":null,"children":[{"krate":0,"index":6014}],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Type","id":{"krate":0,"index":3090},"span":{"file_name":"/Users/shelwitz/.cargo/registry/src/github.com-1ecc6299db9ec823/bio-0.39.0/src/stats/probs/errors.rs","byte_start":875694,"byte_end":875700,"line_start":14,"line_end":14,"column_start":10,"column_end":16},"name":"Result","qualname":"::stats::probs::errors::Result","value":"std::result::Result<T, E>","parent":null,"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Struct","id":{"krate":0,"index":6029},"span":{"file_name":"/Users/shelwitz/.cargo/registry/src/github.com-1ecc6299db9ec823/bio-0.39.0/src/stats/probs/mod.rs","byte_start":845795,"byte_end":845799,"line_start":76,"line_end":76,"column_start":16,"column_end":20},"name":"Prob","qualname":"::stats::probs::Prob","value":"","parent":null,"children":[],"decl_id":null,"docs":" A newtype for probabilities.","sig":null,"attributes":[]},{"kind":"Field","id":{"krate":0,"index":6031},"span":{"file_name":"/Users/shelwitz/.cargo/registry/src/github.com-1ecc6299db9ec823/bio-0.39.0/src/stats/probs/mod.rs","byte_start":845800,"byte_end":845807,"line_start":76,"line_end":76,"column_start":21,"column_end":28},"name":"0","qualname":"::stats::probs::Prob::0","value":"f64","parent":{"krate":0,"index":6029},"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":3151},"span":{"file_name":"/Users/shelwitz/.cargo/registry/src/github.com-1ecc6299db9ec823/bio-0.39.0/src/stats/probs/mod.rs","byte_start":845836,"byte_end":845843,"line_start":80,"line_end":80,"column_start":12,"column_end":19},"name":"checked","qualname":"<Prob>::checked","value":"pub fn checked(f64) -> Result<Self>","parent":null,"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Struct","id":{"krate":0,"index":6135},"span":{"file_name":"/Users/shelwitz/.cargo/registry/src/github.com-1ecc6299db9ec823/bio-0.39.0/src/stats/probs/mod.rs","byte_start":847172,"byte_end":847179,"line_start":127,"line_end":127,"column_start":16,"column_end":23},"name":"LogProb","qualname":"::stats::probs::LogProb","value":"","parent":null,"children":[],"decl_id":null,"docs":" A newtype for log-scale probabilities.\n For performance reasons, we use an approximation of the exp method\n implemented in `bio::utils::FastExp`. This can lead to slight\n errors, but should not matter given that most of the probability differences\n are reflected within the integer part of the log probability.","sig":null,"attributes":[]},{"kind":"Field","id":{"krate":0,"index":6137},"span":{"file_name":"/Users/shelwitz/.cargo/registry/src/github.com-1ecc6299db9ec823/bio-0.39.0/src/stats/probs/mod.rs","byte_start":847180,"byte_end":847187,"line_start":127,"line_end":127,"column_start":24,"column_end":31},"name":"0","qualname":"::stats::probs::LogProb::0","value":"f64","parent":{"krate":0,"index":6135},"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Struct","id":{"krate":0,"index":6211},"span":{"file_name":"/Users/shelwitz/.cargo/registry/src/github.com-1ecc6299db9ec823/bio-0.39.0/src/stats/probs/mod.rs","byte_start":847834,"byte_end":847843,"line_start":159,"line_end":159,"column_start":16,"column_end":25},"name":"PHREDProb","qualname":"::stats::probs::PHREDProb","value":"","parent":null,"children":[],"decl_id":null,"docs":" A newtype for PHRED-scale probabilities.","sig":null,"attributes":[]},{"kind":"Field","id":{"krate":0,"index":6213},"span":{"file_name":"/Users/shelwitz/.cargo/registry/src/github.com-1ecc6299db9ec823/bio-0.39.0/src/stats/probs/mod.rs","byte_start":847844,"byte_end":847851,"line_start":159,"line_end":159,"column_start":26,"column_end":33},"name":"0","qualname":"::stats::probs::PHREDProb::0","value":"f64","parent":{"krate":0,"index":6211},"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Type","id":{"krate":0,"index":3152},"span":{"file_name":"/Users/shelwitz/.cargo/registry/src/github.com-1ecc6299db9ec823/bio-0.39.0/src/stats/probs/mod.rs","byte_start":847912,"byte_end":847920,"line_start":163,"line_end":163,"column_start":10,"column_end":18},"name":"ScanIter","qualname":"::stats::probs::ScanIter","value":"iter::Scan<<I as IntoIterator>::IntoIter, LogProb,\n           fn(: &mut LogProb, : LogProb) -> Option<LogProb>>","parent":null,"children":[],"decl_id":null,"docs":" Iterator returned by scans over logprobs.\n","sig":null,"attributes":[{"value":"/ Iterator returned by scans over logprobs.","span":{"file_name":"/Users/shelwitz/.cargo/registry/src/github.com-1ecc6299db9ec823/bio-0.39.0/src/stats/probs/mod.rs","byte_start":847857,"byte_end":847902,"line_start":162,"line_end":162,"column_start":1,"column_end":46}}]},{"kind":"Method","id":{"krate":0,"index":3157},"span":{"file_name":"/Users/shelwitz/.cargo/registry/src/github.com-1ecc6299db9ec823/bio-0.39.0/src/stats/probs/mod.rs","byte_start":848176,"byte_end":848184,"line_start":173,"line_end":173,"column_start":12,"column_end":20},"name":"is_valid","qualname":"<LogProb>::is_valid","value":"pub fn is_valid(&Self) -> bool","parent":null,"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":3158},"span":{"file_name":"/Users/shelwitz/.cargo/registry/src/github.com-1ecc6299db9ec823/bio-0.39.0/src/stats/probs/mod.rs","byte_start":848315,"byte_end":848322,"line_start":179,"line_end":179,"column_start":12,"column_end":19},"name":"ln_zero","qualname":"<LogProb>::ln_zero","value":"pub fn ln_zero() -> LogProb","parent":null,"children":[],"decl_id":null,"docs":" Log-space representation of Pr=0\n","sig":null,"attributes":[{"value":"/ Log-space representation of Pr=0","span":{"file_name":"/Users/shelwitz/.cargo/registry/src/github.com-1ecc6299db9ec823/bio-0.39.0/src/stats/probs/mod.rs","byte_start":848253,"byte_end":848289,"line_start":177,"line_end":177,"column_start":5,"column_end":41}},{"value":"inline","span":{"file_name":"/Users/shelwitz/.cargo/registry/src/github.com-1ecc6299db9ec823/bio-0.39.0/src/stats/probs/mod.rs","byte_start":848294,"byte_end":848303,"line_start":178,"line_end":178,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":3159},"span":{"file_name":"/Users/shelwitz/.cargo/registry/src/github.com-1ecc6299db9ec823/bio-0.39.0/src/stats/probs/mod.rs","byte_start":848435,"byte_end":848441,"line_start":185,"line_end":185,"column_start":12,"column_end":18},"name":"ln_one","qualname":"<LogProb>::ln_one","value":"pub fn ln_one() -> LogProb","parent":null,"children":[],"decl_id":null,"docs":" Log-space representation of Pr=1\n","sig":null,"attributes":[{"value":"/ Log-space representation of Pr=1","span":{"file_name":"/Users/shelwitz/.cargo/registry/src/github.com-1ecc6299db9ec823/bio-0.39.0/src/stats/probs/mod.rs","byte_start":848373,"byte_end":848409,"line_start":183,"line_end":183,"column_start":5,"column_end":41}},{"value":"inline","span":{"file_name":"/Users/shelwitz/.cargo/registry/src/github.com-1ecc6299db9ec823/bio-0.39.0/src/stats/probs/mod.rs","byte_start":848414,"byte_end":848423,"line_start":184,"line_end":184,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":3160},"span":{"file_name":"/Users/shelwitz/.cargo/registry/src/github.com-1ecc6299db9ec823/bio-0.39.0/src/stats/probs/mod.rs","byte_start":848791,"byte_end":848814,"line_start":194,"line_end":194,"column_start":12,"column_end":35},"name":"cap_numerical_overshoot","qualname":"<LogProb>::cap_numerical_overshoot","value":"pub fn cap_numerical_overshoot(&Self, f64) -> LogProb","parent":null,"children":[],"decl_id":null,"docs":" sums of LogProbs, e.g. with `ln_sum_exp()` can end up\n slightly above the maximum of `LogProb <= 0` due to\n numerical imprecisions -- this function can rescue such\n values before panics due to asserts in other functions\n handling LogProbs, e.g. `ln_1m_exp`\n","sig":null,"attributes":[{"value":"/ sums of LogProbs, e.g. with `ln_sum_exp()` can end up","span":{"file_name":"/Users/shelwitz/.cargo/registry/src/github.com-1ecc6299db9ec823/bio-0.39.0/src/stats/probs/mod.rs","byte_start":848491,"byte_end":848548,"line_start":189,"line_end":189,"column_start":5,"column_end":62}},{"value":"/ slightly above the maximum of `LogProb <= 0` due to","span":{"file_name":"/Users/shelwitz/.cargo/registry/src/github.com-1ecc6299db9ec823/bio-0.39.0/src/stats/probs/mod.rs","byte_start":848553,"byte_end":848608,"line_start":190,"line_end":190,"column_start":5,"column_end":60}},{"value":"/ numerical imprecisions -- this function can rescue such","span":{"file_name":"/Users/shelwitz/.cargo/registry/src/github.com-1ecc6299db9ec823/bio-0.39.0/src/stats/probs/mod.rs","byte_start":848613,"byte_end":848672,"line_start":191,"line_end":191,"column_start":5,"column_end":64}},{"value":"/ values before panics due to asserts in other functions","span":{"file_name":"/Users/shelwitz/.cargo/registry/src/github.com-1ecc6299db9ec823/bio-0.39.0/src/stats/probs/mod.rs","byte_start":848677,"byte_end":848735,"line_start":192,"line_end":192,"column_start":5,"column_end":63}},{"value":"/ handling LogProbs, e.g. `ln_1m_exp`","span":{"file_name":"/Users/shelwitz/.cargo/registry/src/github.com-1ecc6299db9ec823/bio-0.39.0/src/stats/probs/mod.rs","byte_start":848740,"byte_end":848779,"line_start":193,"line_end":193,"column_start":5,"column_end":44}}]},{"kind":"Method","id":{"krate":0,"index":3161},"span":{"file_name":"/Users/shelwitz/.cargo/registry/src/github.com-1ecc6299db9ec823/bio-0.39.0/src/stats/probs/mod.rs","byte_start":849327,"byte_end":849343,"line_start":211,"line_end":211,"column_start":12,"column_end":28},"name":"ln_one_minus_exp","qualname":"<LogProb>::ln_one_minus_exp","value":"pub fn ln_one_minus_exp(&Self) -> LogProb","parent":null,"children":[],"decl_id":null,"docs":" Numerically stable calculation of 1 - p in log-space.\n","sig":null,"attributes":[{"value":"/ Numerically stable calculation of 1 - p in log-space.","span":{"file_name":"/Users/shelwitz/.cargo/registry/src/github.com-1ecc6299db9ec823/bio-0.39.0/src/stats/probs/mod.rs","byte_start":849258,"byte_end":849315,"line_start":210,"line_end":210,"column_start":5,"column_end":62}}]},{"kind":"Method","id":{"krate":0,"index":3162},"span":{"file_name":"/Users/shelwitz/.cargo/registry/src/github.com-1ecc6299db9ec823/bio-0.39.0/src/stats/probs/mod.rs","byte_start":849479,"byte_end":849489,"line_start":216,"line_end":216,"column_start":12,"column_end":22},"name":"ln_sum_exp","qualname":"<LogProb>::ln_sum_exp","value":"pub fn ln_sum_exp(&[LogProb]) -> LogProb","parent":null,"children":[],"decl_id":null,"docs":" Numerically stable sum of probabilities in log-space.\n","sig":null,"attributes":[{"value":"/ Numerically stable sum of probabilities in log-space.","span":{"file_name":"/Users/shelwitz/.cargo/registry/src/github.com-1ecc6299db9ec823/bio-0.39.0/src/stats/probs/mod.rs","byte_start":849410,"byte_end":849467,"line_start":215,"line_end":215,"column_start":5,"column_end":62}}]},{"kind":"Method","id":{"krate":0,"index":3164},"span":{"file_name":"/Users/shelwitz/.cargo/registry/src/github.com-1ecc6299db9ec823/bio-0.39.0/src/stats/probs/mod.rs","byte_start":850657,"byte_end":850667,"line_start":252,"line_end":252,"column_start":12,"column_end":22},"name":"ln_add_exp","qualname":"<LogProb>::ln_add_exp","value":"pub fn ln_add_exp(Self, LogProb) -> LogProb","parent":null,"children":[],"decl_id":null,"docs":" Numerically stable addition of probabilities in log-space.\n","sig":null,"attributes":[{"value":"/ Numerically stable addition of probabilities in log-space.","span":{"file_name":"/Users/shelwitz/.cargo/registry/src/github.com-1ecc6299db9ec823/bio-0.39.0/src/stats/probs/mod.rs","byte_start":850583,"byte_end":850645,"line_start":251,"line_end":251,"column_start":5,"column_end":67}}]},{"kind":"Method","id":{"krate":0,"index":3165},"span":{"file_name":"/Users/shelwitz/.cargo/registry/src/github.com-1ecc6299db9ec823/bio-0.39.0/src/stats/probs/mod.rs","byte_start":851281,"byte_end":851291,"line_start":272,"line_end":272,"column_start":12,"column_end":22},"name":"ln_sub_exp","qualname":"<LogProb>::ln_sub_exp","value":"pub fn ln_sub_exp(Self, LogProb) -> LogProb","parent":null,"children":[],"decl_id":null,"docs":" Numerically stable subtraction of probabilities in log-space.\n","sig":null,"attributes":[{"value":"/ Numerically stable subtraction of probabilities in log-space.","span":{"file_name":"/Users/shelwitz/.cargo/registry/src/github.com-1ecc6299db9ec823/bio-0.39.0/src/stats/probs/mod.rs","byte_start":851204,"byte_end":851269,"line_start":271,"line_end":271,"column_start":5,"column_end":70}}]},{"kind":"Method","id":{"krate":0,"index":3166},"span":{"file_name":"/Users/shelwitz/.cargo/registry/src/github.com-1ecc6299db9ec823/bio-0.39.0/src/stats/probs/mod.rs","byte_start":852192,"byte_end":852205,"line_start":296,"line_end":296,"column_start":12,"column_end":25},"name":"ln_cumsum_exp","qualname":"<LogProb>::ln_cumsum_exp","value":"pub fn ln_cumsum_exp<I: IntoIterator<Item = LogProb>>(I) -> ScanIter<I>","parent":null,"children":[],"decl_id":null,"docs":" Calculate the cumulative sum of the given probabilities in a numerically stable way (Durbin 1998).\n","sig":null,"attributes":[{"value":"/ Calculate the cumulative sum of the given probabilities in a numerically stable way (Durbin 1998).","span":{"file_name":"/Users/shelwitz/.cargo/registry/src/github.com-1ecc6299db9ec823/bio-0.39.0/src/stats/probs/mod.rs","byte_start":852078,"byte_end":852180,"line_start":295,"line_end":295,"column_start":5,"column_end":107}}]},{"kind":"Method","id":{"krate":0,"index":3168},"span":{"file_name":"/Users/shelwitz/.cargo/registry/src/github.com-1ecc6299db9ec823/bio-0.39.0/src/stats/probs/mod.rs","byte_start":852517,"byte_end":852545,"line_start":303,"line_end":303,"column_start":12,"column_end":40},"name":"ln_trapezoidal_integrate_exp","qualname":"<LogProb>::ln_trapezoidal_integrate_exp","value":"pub fn ln_trapezoidal_integrate_exp<T, D>(D, T, T, usize) -> LogProb where\nT: Copy + Add<Output = T> + Sub<Output = T> + Div<Output = T> + Mul<Output =\nT> + Float, D: FnMut(usize, T) -> LogProb, f64: From<T>","parent":null,"children":[],"decl_id":null,"docs":" Integrate numerically stable over given log-space density in the interval [a, b]. Uses the trapezoidal rule with n grid points.\n","sig":null,"attributes":[{"value":"/ Integrate numerically stable over given log-space density in the interval [a, b]. Uses the trapezoidal rule with n grid points.","span":{"file_name":"/Users/shelwitz/.cargo/registry/src/github.com-1ecc6299db9ec823/bio-0.39.0/src/stats/probs/mod.rs","byte_start":852374,"byte_end":852505,"line_start":302,"line_end":302,"column_start":5,"column_end":136}}]},{"kind":"Method","id":{"krate":0,"index":3172},"span":{"file_name":"/Users/shelwitz/.cargo/registry/src/github.com-1ecc6299db9ec823/bio-0.39.0/src/stats/probs/mod.rs","byte_start":853339,"byte_end":853364,"line_start":323,"line_end":323,"column_start":12,"column_end":37},"name":"ln_simpsons_integrate_exp","qualname":"<LogProb>::ln_simpsons_integrate_exp","value":"pub fn ln_simpsons_integrate_exp<T, D>(D, T, T, usize) -> LogProb where\nT: Copy + Add<Output = T> + Sub<Output = T> + Div<Output = T> + Mul<Output =\nT> + Float, D: FnMut(usize, T) -> LogProb, f64: From<T>","parent":null,"children":[],"decl_id":null,"docs":" Integrate numerically stable over given log-space density in the interval [a, b]. Uses Simpson's rule with n (odd) grid points.\n","sig":null,"attributes":[{"value":"/ Integrate numerically stable over given log-space density in the interval [a, b]. Uses Simpson's rule with n (odd) grid points.","span":{"file_name":"/Users/shelwitz/.cargo/registry/src/github.com-1ecc6299db9ec823/bio-0.39.0/src/stats/probs/mod.rs","byte_start":853196,"byte_end":853327,"line_start":322,"line_end":322,"column_start":5,"column_end":136}}]},{"kind":"Method","id":{"krate":0,"index":3176},"span":{"file_name":"/Users/shelwitz/.cargo/registry/src/github.com-1ecc6299db9ec823/bio-0.39.0/src/stats/probs/mod.rs","byte_start":854307,"byte_end":854340,"line_start":347,"line_end":347,"column_start":12,"column_end":45},"name":"ln_trapezoidal_integrate_grid_exp","qualname":"<LogProb>::ln_trapezoidal_integrate_grid_exp","value":"pub fn ln_trapezoidal_integrate_grid_exp<T, D>(D, &[T]) -> LogProb where\nT: Copy + Add<Output = T> + Sub<Output = T> + Div<Output = T> + Mul<Output =\nT> + Float, D: FnMut(usize, T) -> LogProb, f64: From<T>","parent":null,"children":[],"decl_id":null,"docs":" Integrate numerically stable over given log-space density and grid points. Uses the trapezoidal rule.\n","sig":null,"attributes":[{"value":"/ Integrate numerically stable over given log-space density and grid points. Uses the trapezoidal rule.","span":{"file_name":"/Users/shelwitz/.cargo/registry/src/github.com-1ecc6299db9ec823/bio-0.39.0/src/stats/probs/mod.rs","byte_start":854190,"byte_end":854295,"line_start":346,"line_end":346,"column_start":5,"column_end":110}}]},{"kind":"Mod","id":{"krate":0,"index":3234},"span":{"file_name":"/Users/shelwitz/.cargo/registry/src/github.com-1ecc6299db9ec823/bio-0.39.0/src/utils/mod.rs","byte_start":0,"byte_end":0,"line_start":1,"line_end":1,"column_start":1,"column_end":1},"name":"utils","qualname":"::utils","value":"/Users/shelwitz/.cargo/registry/src/github.com-1ecc6299db9ec823/bio-0.39.0/src/utils/mod.rs","parent":null,"children":[{"krate":0,"index":3235},{"krate":0,"index":3259},{"krate":0,"index":3262},{"krate":0,"index":3267},{"krate":0,"index":3268},{"krate":0,"index":3271},{"krate":0,"index":3274},{"krate":0,"index":3277},{"krate":0,"index":3313},{"krate":0,"index":3316},{"krate":0,"index":3319}],"decl_id":null,"docs":" Common utilities.\n","sig":null,"attributes":[{"value":"/ Common utilities.","span":{"file_name":"/Users/shelwitz/.cargo/registry/src/github.com-1ecc6299db9ec823/bio-0.39.0/src/utils/mod.rs","byte_start":875951,"byte_end":875972,"line_start":6,"line_end":6,"column_start":1,"column_end":22}}]},{"kind":"Trait","id":{"krate":0,"index":3254},"span":{"file_name":"/Users/shelwitz/.cargo/registry/src/github.com-1ecc6299db9ec823/bio-0.39.0/src/utils/fastexp.rs","byte_start":877858,"byte_end":877865,"line_start":26,"line_end":26,"column_start":11,"column_end":18},"name":"FastExp","qualname":"::utils::fastexp::FastExp","value":"FastExp<V: Float + ops::MulAssign>","parent":null,"children":[{"krate":0,"index":3256}],"decl_id":null,"docs":" This trait adds a fast approximation of exp to float types.\n","sig":null,"attributes":[{"value":"/ This trait adds a fast approximation of exp to float types.","span":{"file_name":"/Users/shelwitz/.cargo/registry/src/github.com-1ecc6299db9ec823/bio-0.39.0/src/utils/fastexp.rs","byte_start":877784,"byte_end":877847,"line_start":25,"line_end":25,"column_start":1,"column_end":64}}]},{"kind":"Method","id":{"krate":0,"index":3256},"span":{"file_name":"/Users/shelwitz/.cargo/registry/src/github.com-1ecc6299db9ec823/bio-0.39.0/src/utils/fastexp.rs","byte_start":877902,"byte_end":877909,"line_start":27,"line_end":27,"column_start":8,"column_end":15},"name":"fastexp","qualname":"::utils::fastexp::FastExp::fastexp","value":"pub fn fastexp(&Self) -> V","parent":{"krate":0,"index":3254},"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Type","id":{"krate":0,"index":3263},"span":{"file_name":"/Users/shelwitz/.cargo/registry/src/github.com-1ecc6299db9ec823/bio-0.39.0/src/utils/text.rs","byte_start":879264,"byte_end":879268,"line_start":2,"line_end":2,"column_start":10,"column_end":14},"name":"Text","qualname":"::utils::text::Text","value":"Vec<u8>","parent":null,"children":[],"decl_id":null,"docs":" Type alias for an owned text, i.e. ``Vec<u8>``.\n","sig":null,"attributes":[{"value":"/ Type alias for an owned text, i.e. ``Vec<u8>``.","span":{"file_name":"/Users/shelwitz/.cargo/registry/src/github.com-1ecc6299db9ec823/bio-0.39.0/src/utils/text.rs","byte_start":879203,"byte_end":879254,"line_start":1,"line_end":1,"column_start":1,"column_end":52}}]},{"kind":"Type","id":{"krate":0,"index":3264},"span":{"file_name":"/Users/shelwitz/.cargo/registry/src/github.com-1ecc6299db9ec823/bio-0.39.0/src/utils/text.rs","byte_start":879338,"byte_end":879347,"line_start":4,"line_end":4,"column_start":10,"column_end":19},"name":"TextSlice","qualname":"::utils::text::TextSlice","value":"&'a [u8]","parent":null,"children":[],"decl_id":null,"docs":" Type alias for a text slice, i.e. ``&[u8]``.\n","sig":null,"attributes":[{"value":"/ Type alias for a text slice, i.e. ``&[u8]``.","span":{"file_name":"/Users/shelwitz/.cargo/registry/src/github.com-1ecc6299db9ec823/bio-0.39.0/src/utils/text.rs","byte_start":879280,"byte_end":879328,"line_start":3,"line_end":3,"column_start":1,"column_end":49}}]},{"kind":"Function","id":{"krate":0,"index":3266},"span":{"file_name":"/Users/shelwitz/.cargo/registry/src/github.com-1ecc6299db9ec823/bio-0.39.0/src/utils/text.rs","byte_start":879434,"byte_end":879446,"line_start":7,"line_end":7,"column_start":8,"column_end":20},"name":"trim_newline","qualname":"::utils::text::trim_newline","value":"pub fn trim_newline(&mut String)","parent":null,"children":[],"decl_id":null,"docs":" Remove a trailing newline from the given string in place.\n","sig":null,"attributes":[{"value":"/ Remove a trailing newline from the given string in place.","span":{"file_name":"/Users/shelwitz/.cargo/registry/src/github.com-1ecc6299db9ec823/bio-0.39.0/src/utils/text.rs","byte_start":879365,"byte_end":879426,"line_start":6,"line_end":6,"column_start":1,"column_end":62}}]},{"kind":"TupleVariant","id":{"krate":0,"index":6285},"span":{"file_name":"/Users/shelwitz/.cargo/registry/src/github.com-1ecc6299db9ec823/bio-0.39.0/src/utils/interval/errors.rs","byte_start":883727,"byte_end":883739,"line_start":12,"line_end":12,"column_start":5,"column_end":17},"name":"InvalidRange","qualname":"::utils::interval::errors::Error::InvalidRange","value":"Error::InvalidRange","parent":{"krate":0,"index":6276},"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[{"value":"error(\"an Interval must have a Range with a positive width\")","span":{"file_name":"/Users/shelwitz/.cargo/registry/src/github.com-1ecc6299db9ec823/bio-0.39.0/src/utils/interval/errors.rs","byte_start":883659,"byte_end":883722,"line_start":11,"line_end":11,"column_start":5,"column_end":68}}]},{"kind":"Enum","id":{"krate":0,"index":6276},"span":{"file_name":"/Users/shelwitz/.cargo/registry/src/github.com-1ecc6299db9ec823/bio-0.39.0/src/utils/interval/errors.rs","byte_start":883647,"byte_end":883652,"line_start":10,"line_end":10,"column_start":10,"column_end":15},"name":"Error","qualname":"::utils::interval::errors::Error","value":"pub enum Error { InvalidRange, }","parent":null,"children":[{"krate":0,"index":6285}],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Struct","id":{"krate":0,"index":6287},"span":{"file_name":"/Users/shelwitz/.cargo/registry/src/github.com-1ecc6299db9ec823/bio-0.39.0/src/utils/interval/mod.rs","byte_start":881387,"byte_end":881395,"line_start":34,"line_end":34,"column_start":12,"column_end":20},"name":"Interval","qualname":"::utils::interval::Interval","value":"","parent":null,"children":[],"decl_id":null,"docs":" An `Interval` wraps the `std::ops::Range` from the stdlib and is defined by a start and end field\n where end should be >= start.\n","sig":null,"attributes":[{"value":"/ An `Interval` wraps the `std::ops::Range` from the stdlib and is defined by a start and end field","span":{"file_name":"/Users/shelwitz/.cargo/registry/src/github.com-1ecc6299db9ec823/bio-0.39.0/src/utils/interval/mod.rs","byte_start":881177,"byte_end":881278,"line_start":31,"line_end":31,"column_start":1,"column_end":102}},{"value":"/ where end should be >= start.","span":{"file_name":"/Users/shelwitz/.cargo/registry/src/github.com-1ecc6299db9ec823/bio-0.39.0/src/utils/interval/mod.rs","byte_start":881279,"byte_end":881312,"line_start":32,"line_end":32,"column_start":1,"column_end":34}}]},{"kind":"Method","id":{"krate":0,"index":3301},"span":{"file_name":"/Users/shelwitz/.cargo/registry/src/github.com-1ecc6299db9ec823/bio-0.39.0/src/utils/interval/mod.rs","byte_start":881569,"byte_end":881572,"line_start":39,"line_end":39,"column_start":12,"column_end":15},"name":"new","qualname":"<Interval<N>>::new","value":"pub fn new(Range<N>) -> Result<Interval<N>>","parent":null,"children":[],"decl_id":null,"docs":" Construct a new `Interval` from the given Range.\n Will return `Err` if end < start.\n","sig":null,"attributes":[{"value":"/ Construct a new `Interval` from the given Range.","span":{"file_name":"/Users/shelwitz/.cargo/registry/src/github.com-1ecc6299db9ec823/bio-0.39.0/src/utils/interval/mod.rs","byte_start":881463,"byte_end":881515,"line_start":37,"line_end":37,"column_start":5,"column_end":57}},{"value":"/ Will return `Err` if end < start.","span":{"file_name":"/Users/shelwitz/.cargo/registry/src/github.com-1ecc6299db9ec823/bio-0.39.0/src/utils/interval/mod.rs","byte_start":881520,"byte_end":881557,"line_start":38,"line_end":38,"column_start":5,"column_end":42}}]},{"kind":"Function","id":{"krate":0,"index":3316},"span":{"file_name":"/Users/shelwitz/.cargo/registry/src/github.com-1ecc6299db9ec823/bio-0.39.0/src/utils/mod.rs","byte_start":876190,"byte_end":876194,"line_start":18,"line_end":18,"column_start":8,"column_end":12},"name":"scan","qualname":"::utils::scan","value":"pub fn scan<T: Copy, F: Fn(T, T) -> T>(&mut [T], F)","parent":null,"children":[],"decl_id":null,"docs":" In place implementation of scan over a slice.\n","sig":null,"attributes":[{"value":"/ In place implementation of scan over a slice.","span":{"file_name":"/Users/shelwitz/.cargo/registry/src/github.com-1ecc6299db9ec823/bio-0.39.0/src/utils/mod.rs","byte_start":876133,"byte_end":876182,"line_start":17,"line_end":17,"column_start":1,"column_end":50}}]},{"kind":"Function","id":{"krate":0,"index":3319},"span":{"file_name":"/Users/shelwitz/.cargo/registry/src/github.com-1ecc6299db9ec823/bio-0.39.0/src/utils/mod.rs","byte_start":876408,"byte_end":876415,"line_start":27,"line_end":27,"column_start":8,"column_end":15},"name":"prescan","qualname":"::utils::prescan","value":"pub fn prescan<T: Copy, F: Fn(T, T) -> T>(&mut [T], T, F)","parent":null,"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]}],"impls":[{"id":0,"kind":"Inherent","span":{"file_name":"/Users/shelwitz/.cargo/registry/src/github.com-1ecc6299db9ec823/bio-0.39.0/src/alignment/pairwise/banded.rs","byte_start":84762,"byte_end":84769,"line_start":128,"line_end":128,"column_start":20,"column_end":27},"value":"","parent":null,"children":[{"krate":0,"index":108},{"krate":0,"index":109},{"krate":0,"index":110},{"krate":0,"index":111},{"krate":0,"index":112},{"krate":0,"index":113},{"krate":0,"index":114},{"krate":0,"index":115},{"krate":0,"index":116},{"krate":0,"index":117},{"krate":0,"index":118},{"krate":0,"index":119},{"krate":0,"index":120},{"krate":0,"index":121},{"krate":0,"index":122},{"krate":0,"index":123}],"docs":"","sig":null,"attributes":[]},{"id":1,"kind":"Inherent","span":{"file_name":"/Users/shelwitz/.cargo/registry/src/github.com-1ecc6299db9ec823/bio-0.39.0/src/alignment/pairwise/banded.rs","byte_start":118990,"byte_end":118994,"line_start":1045,"line_end":1045,"column_start":6,"column_end":10},"value":"","parent":null,"children":[{"krate":0,"index":130},{"krate":0,"index":131},{"krate":0,"index":132},{"krate":0,"index":133},{"krate":0,"index":134},{"krate":0,"index":136},{"krate":0,"index":138},{"krate":0,"index":140},{"krate":0,"index":142},{"krate":0,"index":144},{"krate":0,"index":145},{"krate":0,"index":146},{"krate":0,"index":148}],"docs":"","sig":null,"attributes":[]},{"id":2,"kind":"Inherent","span":{"file_name":"/Users/shelwitz/.cargo/registry/src/github.com-1ecc6299db9ec823/bio-0.39.0/src/alignment/pairwise/mod.rs","byte_start":26420,"byte_end":26431,"line_start":180,"line_end":180,"column_start":6,"column_end":17},"value":"","parent":null,"children":[{"krate":0,"index":153}],"docs":"","sig":null,"attributes":[]},{"id":3,"kind":"Direct","span":{"file_name":"/Users/shelwitz/.cargo/registry/src/github.com-1ecc6299db9ec823/bio-0.39.0/src/alignment/pairwise/mod.rs","byte_start":27018,"byte_end":27029,"line_start":197,"line_end":197,"column_start":20,"column_end":31},"value":"","parent":null,"children":[{"krate":0,"index":155}],"docs":"","sig":null,"attributes":[]},{"id":4,"kind":"Direct","span":{"file_name":"/Users/shelwitz/.cargo/registry/src/github.com-1ecc6299db9ec823/bio-0.39.0/src/alignment/pairwise/mod.rs","byte_start":27383,"byte_end":27384,"line_start":210,"line_end":210,"column_start":23,"column_end":24},"value":"","parent":null,"children":[{"krate":0,"index":158}],"docs":"","sig":null,"attributes":[]},{"id":5,"kind":"Inherent","span":{"file_name":"/Users/shelwitz/.cargo/registry/src/github.com-1ecc6299db9ec823/bio-0.39.0/src/alignment/pairwise/mod.rs","byte_start":28024,"byte_end":28031,"line_start":236,"line_end":236,"column_start":6,"column_end":13},"value":"","parent":null,"children":[{"krate":0,"index":160}],"docs":"","sig":null,"attributes":[]},{"id":6,"kind":"Inherent","span":{"file_name":"/Users/shelwitz/.cargo/registry/src/github.com-1ecc6299db9ec823/bio-0.39.0/src/alignment/pairwise/mod.rs","byte_start":29161,"byte_end":29168,"line_start":268,"line_end":268,"column_start":20,"column_end":27},"value":"","parent":null,"children":[{"krate":0,"index":163},{"krate":0,"index":164},{"krate":0,"index":165},{"krate":0,"index":166},{"krate":0,"index":167},{"krate":0,"index":168},{"krate":0,"index":169}],"docs":"","sig":null,"attributes":[]},{"id":7,"kind":"Inherent","span":{"file_name":"/Users/shelwitz/.cargo/registry/src/github.com-1ecc6299db9ec823/bio-0.39.0/src/alignment/pairwise/mod.rs","byte_start":36419,"byte_end":36426,"line_start":471,"line_end":471,"column_start":20,"column_end":27},"value":"","parent":null,"children":[{"krate":0,"index":186},{"krate":0,"index":187},{"krate":0,"index":188},{"krate":0,"index":189},{"krate":0,"index":190},{"krate":0,"index":191},{"krate":0,"index":192},{"krate":0,"index":193}],"docs":"","sig":null,"attributes":[]},{"id":8,"kind":"Direct","span":{"file_name":"/Users/shelwitz/.cargo/registry/src/github.com-1ecc6299db9ec823/bio-0.39.0/src/alignment/pairwise/mod.rs","byte_start":57229,"byte_end":57242,"line_start":1016,"line_end":1016,"column_start":18,"column_end":31},"value":"","parent":null,"children":[{"krate":0,"index":195}],"docs":"","sig":null,"attributes":[]},{"id":9,"kind":"Inherent","span":{"file_name":"/Users/shelwitz/.cargo/registry/src/github.com-1ecc6299db9ec823/bio-0.39.0/src/alignment/pairwise/mod.rs","byte_start":57982,"byte_end":57995,"line_start":1042,"line_end":1042,"column_start":6,"column_end":19},"value":"","parent":null,"children":[{"krate":0,"index":210},{"krate":0,"index":211},{"krate":0,"index":212},{"krate":0,"index":213},{"krate":0,"index":214},{"krate":0,"index":215},{"krate":0,"index":216},{"krate":0,"index":217},{"krate":0,"index":218},{"krate":0,"index":219}],"docs":"","sig":null,"attributes":[]},{"id":10,"kind":"Inherent","span":{"file_name":"/Users/shelwitz/.cargo/registry/src/github.com-1ecc6299db9ec823/bio-0.39.0/src/alignment/pairwise/mod.rs","byte_start":59760,"byte_end":59769,"line_start":1115,"line_end":1115,"column_start":6,"column_end":15},"value":"","parent":null,"children":[{"krate":0,"index":225},{"krate":0,"index":226},{"krate":0,"index":227},{"krate":0,"index":228},{"krate":0,"index":229},{"krate":0,"index":230}],"docs":"","sig":null,"attributes":[]},{"id":11,"kind":"Direct","span":{"file_name":"/Users/shelwitz/.cargo/registry/src/github.com-1ecc6299db9ec823/bio-0.39.0/src/alignment/poa.rs","byte_start":168304,"byte_end":168317,"line_start":75,"line_end":75,"column_start":14,"column_end":27},"value":"","parent":null,"children":[{"krate":0,"index":271}],"docs":"","sig":null,"attributes":[]},{"id":12,"kind":"Direct","span":{"file_name":"/Users/shelwitz/.cargo/registry/src/github.com-1ecc6299db9ec823/bio-0.39.0/src/alignment/poa.rs","byte_start":168441,"byte_end":168454,"line_start":81,"line_end":81,"column_start":21,"column_end":34},"value":"","parent":null,"children":[{"krate":0,"index":273}],"docs":"","sig":null,"attributes":[]},{"id":13,"kind":"Direct","span":{"file_name":"/Users/shelwitz/.cargo/registry/src/github.com-1ecc6299db9ec823/bio-0.39.0/src/alignment/poa.rs","byte_start":168586,"byte_end":168599,"line_start":87,"line_end":87,"column_start":20,"column_end":33},"value":"","parent":null,"children":[{"krate":0,"index":275}],"docs":"","sig":null,"attributes":[]},{"id":14,"kind":"Direct","span":{"file_name":"/Users/shelwitz/.cargo/registry/src/github.com-1ecc6299db9ec823/bio-0.39.0/src/alignment/poa.rs","byte_start":168745,"byte_end":168758,"line_start":95,"line_end":95,"column_start":13,"column_end":26},"value":"","parent":null,"children":[],"docs":"","sig":null,"attributes":[]},{"id":15,"kind":"Inherent","span":{"file_name":"/Users/shelwitz/.cargo/registry/src/github.com-1ecc6299db9ec823/bio-0.39.0/src/alignment/poa.rs","byte_start":169026,"byte_end":169035,"line_start":107,"line_end":107,"column_start":6,"column_end":15},"value":"","parent":null,"children":[{"krate":0,"index":283},{"krate":0,"index":284},{"krate":0,"index":285},{"krate":0,"index":286},{"krate":0,"index":287},{"krate":0,"index":288},{"krate":0,"index":289}],"docs":"","sig":null,"attributes":[]},{"id":16,"kind":"Inherent","span":{"file_name":"/Users/shelwitz/.cargo/registry/src/github.com-1ecc6299db9ec823/bio-0.39.0/src/alignment/poa.rs","byte_start":172856,"byte_end":172863,"line_start":242,"line_end":242,"column_start":20,"column_end":27},"value":"","parent":null,"children":[{"krate":0,"index":297},{"krate":0,"index":298},{"krate":0,"index":299},{"krate":0,"index":300},{"krate":0,"index":301}],"docs":"","sig":null,"attributes":[]},{"id":17,"kind":"Inherent","span":{"file_name":"/Users/shelwitz/.cargo/registry/src/github.com-1ecc6299db9ec823/bio-0.39.0/src/alignment/poa.rs","byte_start":174096,"byte_end":174099,"line_start":286,"line_end":286,"column_start":20,"column_end":23},"value":"","parent":null,"children":[{"krate":0,"index":308},{"krate":0,"index":309},{"krate":0,"index":310},{"krate":0,"index":311},{"krate":0,"index":312}],"docs":"","sig":null,"attributes":[]},{"id":18,"kind":"Inherent","span":{"file_name":"/Users/shelwitz/.cargo/registry/src/github.com-1ecc6299db9ec823/bio-0.39.0/src/alignment/sparse.rs","byte_start":191235,"byte_end":191242,"line_start":152,"line_end":152,"column_start":6,"column_end":13},"value":"","parent":null,"children":[{"krate":0,"index":338}],"docs":"","sig":null,"attributes":[]},{"id":19,"kind":"Inherent","span":{"file_name":"/Users/shelwitz/.cargo/registry/src/github.com-1ecc6299db9ec823/bio-0.39.0/src/alphabets/mod.rs","byte_start":213799,"byte_end":213807,"line_start":35,"line_end":35,"column_start":6,"column_end":14},"value":"","parent":null,"children":[{"krate":0,"index":398},{"krate":0,"index":402},{"krate":0,"index":403},{"krate":0,"index":407},{"krate":0,"index":409},{"krate":0,"index":410},{"krate":0,"index":411},{"krate":0,"index":412},{"krate":0,"index":413}],"docs":"","sig":null,"attributes":[]},{"id":22,"kind":"Inherent","span":{"file_name":"/Users/shelwitz/.cargo/registry/src/github.com-1ecc6299db9ec823/bio-0.39.0/src/alphabets/mod.rs","byte_start":219612,"byte_end":219625,"line_start":225,"line_end":225,"column_start":6,"column_end":19},"value":"","parent":null,"children":[{"krate":0,"index":415},{"krate":0,"index":416},{"krate":0,"index":417},{"krate":0,"index":421},{"krate":0,"index":424},{"krate":0,"index":425}],"docs":"","sig":null,"attributes":[]},{"id":23,"kind":"Inherent","span":{"file_name":"/Users/shelwitz/.cargo/registry/src/github.com-1ecc6299db9ec823/bio-0.39.0/src/alphabets/mod.rs","byte_start":224857,"byte_end":224863,"line_start":399,"line_end":399,"column_start":16,"column_end":22},"value":"","parent":null,"children":[{"krate":0,"index":439}],"docs":"","sig":null,"attributes":[]},{"id":24,"kind":"Direct","span":{"file_name":"/Users/shelwitz/.cargo/registry/src/github.com-1ecc6299db9ec823/bio-0.39.0/src/alphabets/mod.rs","byte_start":225157,"byte_end":225163,"line_start":412,"line_end":412,"column_start":29,"column_end":35},"value":"","parent":null,"children":[{"krate":0,"index":444},{"krate":0,"index":445}],"docs":"","sig":null,"attributes":[]},{"id":25,"kind":"Direct","span":{"file_name":"/Users/shelwitz/.cargo/registry/src/github.com-1ecc6299db9ec823/bio-0.39.0/src/data_structures/annot_map.rs","byte_start":235890,"byte_end":235898,"line_start":58,"line_end":58,"column_start":24,"column_end":32},"value":"","parent":null,"children":[{"krate":0,"index":475}],"docs":"","sig":null,"attributes":[]},{"id":26,"kind":"Inherent","span":{"file_name":"/Users/shelwitz/.cargo/registry/src/github.com-1ecc6299db9ec823/bio-0.39.0/src/data_structures/annot_map.rs","byte_start":236049,"byte_end":236057,"line_start":69,"line_end":69,"column_start":12,"column_end":20},"value":"","parent":null,"children":[{"krate":0,"index":479},{"krate":0,"index":480},{"krate":0,"index":482}],"docs":"","sig":null,"attributes":[]},{"id":27,"kind":"Inherent","span":{"file_name":"/Users/shelwitz/.cargo/registry/src/github.com-1ecc6299db9ec823/bio-0.39.0/src/data_structures/annot_map.rs","byte_start":238227,"byte_end":238235,"line_start":139,"line_end":139,"column_start":12,"column_end":20},"value":"","parent":null,"children":[{"krate":0,"index":488}],"docs":"","sig":null,"attributes":[]},{"id":28,"kind":"Inherent","span":{"file_name":"/Users/shelwitz/.cargo/registry/src/github.com-1ecc6299db9ec823/bio-0.39.0/src/data_structures/annot_map.rs","byte_start":239856,"byte_end":239861,"line_start":192,"line_end":192,"column_start":16,"column_end":21},"value":"","parent":null,"children":[{"krate":0,"index":493},{"krate":0,"index":494},{"krate":0,"index":495}],"docs":"","sig":null,"attributes":[]},{"id":29,"kind":"Direct","span":{"file_name":"/Users/shelwitz/.cargo/registry/src/github.com-1ecc6299db9ec823/bio-0.39.0/src/data_structures/annot_map.rs","byte_start":240666,"byte_end":240682,"line_start":224,"line_end":224,"column_start":29,"column_end":45},"value":"","parent":null,"children":[{"krate":0,"index":506},{"krate":0,"index":507}],"docs":"","sig":null,"attributes":[]},{"id":30,"kind":"Inherent","span":{"file_name":"/Users/shelwitz/.cargo/registry/src/github.com-1ecc6299db9ec823/bio-0.39.0/src/data_structures/bit_tree.rs","byte_start":246782,"byte_end":246793,"line_start":49,"line_end":49,"column_start":48,"column_end":59},"value":"","parent":null,"children":[{"krate":0,"index":529},{"krate":0,"index":530},{"krate":0,"index":531}],"docs":"","sig":null,"attributes":[]},{"id":31,"kind":"Direct","span":{"file_name":"/Users/shelwitz/.cargo/registry/src/github.com-1ecc6299db9ec823/bio-0.39.0/src/data_structures/bit_tree.rs","byte_start":248125,"byte_end":248130,"line_start":88,"line_end":88,"column_start":37,"column_end":42},"value":"","parent":null,"children":[{"krate":0,"index":536}],"docs":"","sig":null,"attributes":[]},{"id":32,"kind":"Direct","span":{"file_name":"/Users/shelwitz/.cargo/registry/src/github.com-1ecc6299db9ec823/bio-0.39.0/src/data_structures/bit_tree.rs","byte_start":248347,"byte_end":248352,"line_start":98,"line_end":98,"column_start":37,"column_end":42},"value":"","parent":null,"children":[{"krate":0,"index":543}],"docs":"","sig":null,"attributes":[]},{"id":35,"kind":"Inherent","span":{"file_name":"/Users/shelwitz/.cargo/registry/src/github.com-1ecc6299db9ec823/bio-0.39.0/src/data_structures/bitenc.rs","byte_start":251346,"byte_end":251352,"line_start":63,"line_end":63,"column_start":6,"column_end":12},"value":"","parent":null,"children":[{"krate":0,"index":549},{"krate":0,"index":550},{"krate":0,"index":551},{"krate":0,"index":552},{"krate":0,"index":553},{"krate":0,"index":554},{"krate":0,"index":555},{"krate":0,"index":556},{"krate":0,"index":557},{"krate":0,"index":558},{"krate":0,"index":559},{"krate":0,"index":560},{"krate":0,"index":561},{"krate":0,"index":562},{"krate":0,"index":563}],"docs":"","sig":null,"attributes":[]},{"id":36,"kind":"Direct","span":{"file_name":"/Users/shelwitz/.cargo/registry/src/github.com-1ecc6299db9ec823/bio-0.39.0/src/data_structures/bitenc.rs","byte_start":262831,"byte_end":262841,"line_start":444,"line_end":444,"column_start":23,"column_end":33},"value":"","parent":null,"children":[{"krate":0,"index":570},{"krate":0,"index":571}],"docs":"","sig":null,"attributes":[]},{"id":39,"kind":"Inherent","span":{"file_name":"/Users/shelwitz/.cargo/registry/src/github.com-1ecc6299db9ec823/bio-0.39.0/src/data_structures/bwt.rs","byte_start":267884,"byte_end":267887,"line_start":82,"line_end":82,"column_start":6,"column_end":9},"value":"","parent":null,"children":[{"krate":0,"index":592},{"krate":0,"index":593}],"docs":"","sig":null,"attributes":[]},{"id":40,"kind":"Inherent","span":{"file_name":"/Users/shelwitz/.cargo/registry/src/github.com-1ecc6299db9ec823/bio-0.39.0/src/data_structures/fmindex.rs","byte_start":276769,"byte_end":276777,"line_start":72,"line_end":72,"column_start":6,"column_end":14},"value":"","parent":null,"children":[{"krate":0,"index":624}],"docs":"","sig":null,"attributes":[]},{"id":43,"kind":"Direct","span":{"file_name":"/Users/shelwitz/.cargo/registry/src/github.com-1ecc6299db9ec823/bio-0.39.0/src/data_structures/fmindex.rs","byte_start":281935,"byte_end":281942,"line_start":212,"line_end":212,"column_start":9,"column_end":16},"value":"","parent":null,"children":[{"krate":0,"index":638},{"krate":0,"index":639},{"krate":0,"index":640}],"docs":"","sig":null,"attributes":[]},{"id":44,"kind":"Inherent","span":{"file_name":"/Users/shelwitz/.cargo/registry/src/github.com-1ecc6299db9ec823/bio-0.39.0/src/data_structures/fmindex.rs","byte_start":282331,"byte_end":282338,"line_start":226,"line_end":226,"column_start":65,"column_end":72},"value":"","parent":null,"children":[{"krate":0,"index":645}],"docs":"","sig":null,"attributes":[]},{"id":45,"kind":"Inherent","span":{"file_name":"/Users/shelwitz/.cargo/registry/src/github.com-1ecc6299db9ec823/bio-0.39.0/src/data_structures/fmindex.rs","byte_start":282916,"byte_end":282926,"line_start":248,"line_end":248,"column_start":6,"column_end":16},"value":"","parent":null,"children":[{"krate":0,"index":647},{"krate":0,"index":648},{"krate":0,"index":649}],"docs":"","sig":null,"attributes":[]},{"id":48,"kind":"Direct","span":{"file_name":"/Users/shelwitz/.cargo/registry/src/github.com-1ecc6299db9ec823/bio-0.39.0/src/data_structures/fmindex.rs","byte_start":283827,"byte_end":283835,"line_start":280,"line_end":280,"column_start":9,"column_end":17},"value":"","parent":null,"children":[{"krate":0,"index":654},{"krate":0,"index":655},{"krate":0,"index":656}],"docs":"","sig":null,"attributes":[]},{"id":49,"kind":"Direct","span":{"file_name":"/Users/shelwitz/.cargo/registry/src/github.com-1ecc6299db9ec823/bio-0.39.0/src/data_structures/fmindex.rs","byte_start":284234,"byte_end":284242,"line_start":297,"line_end":297,"column_start":9,"column_end":17},"value":"","parent":null,"children":[{"krate":0,"index":661}],"docs":"","sig":null,"attributes":[]},{"id":50,"kind":"Inherent","span":{"file_name":"/Users/shelwitz/.cargo/registry/src/github.com-1ecc6299db9ec823/bio-0.39.0/src/data_structures/fmindex.rs","byte_start":285202,"byte_end":285210,"line_start":318,"line_end":318,"column_start":65,"column_end":73},"value":"","parent":null,"children":[{"krate":0,"index":666},{"krate":0,"index":667},{"krate":0,"index":668},{"krate":0,"index":669},{"krate":0,"index":670},{"krate":0,"index":671},{"krate":0,"index":672}],"docs":"","sig":null,"attributes":[]},{"id":51,"kind":"Inherent","span":{"file_name":"/Users/shelwitz/.cargo/registry/src/github.com-1ecc6299db9ec823/bio-0.39.0/src/data_structures/interpolation_table.rs","byte_start":307828,"byte_end":307846,"line_start":48,"line_end":48,"column_start":25,"column_end":43},"value":"","parent":null,"children":[{"krate":0,"index":685},{"krate":0,"index":686},{"krate":0,"index":687}],"docs":"","sig":null,"attributes":[]},{"id":52,"kind":"Inherent","span":{"file_name":"/Users/shelwitz/.cargo/registry/src/github.com-1ecc6299db9ec823/bio-0.39.0/src/data_structures/interval_tree/array_backed_interval_tree.rs","byte_start":312494,"byte_end":312499,"line_start":57,"line_end":57,"column_start":38,"column_end":43},"value":"","parent":null,"children":[{"krate":0,"index":703},{"krate":0,"index":704}],"docs":"","sig":null,"attributes":[]},{"id":53,"kind":"Direct","span":{"file_name":"/Users/shelwitz/.cargo/registry/src/github.com-1ecc6299db9ec823/bio-0.39.0/src/data_structures/interval_tree/array_backed_interval_tree.rs","byte_start":312799,"byte_end":312822,"line_start":69,"line_end":69,"column_start":44,"column_end":67},"value":"","parent":null,"children":[{"krate":0,"index":708}],"docs":"","sig":null,"attributes":[]},{"id":54,"kind":"Direct","span":{"file_name":"/Users/shelwitz/.cargo/registry/src/github.com-1ecc6299db9ec823/bio-0.39.0/src/data_structures/interval_tree/array_backed_interval_tree.rs","byte_start":313179,"byte_end":313202,"line_start":85,"line_end":85,"column_start":40,"column_end":63},"value":"","parent":null,"children":[{"krate":0,"index":719}],"docs":"","sig":null,"attributes":[]},{"id":55,"kind":"Inherent","span":{"file_name":"/Users/shelwitz/.cargo/registry/src/github.com-1ecc6299db9ec823/bio-0.39.0/src/data_structures/interval_tree/array_backed_interval_tree.rs","byte_start":313566,"byte_end":313589,"line_start":100,"line_end":100,"column_start":39,"column_end":62},"value":"","parent":null,"children":[{"krate":0,"index":725},{"krate":0,"index":726},{"krate":0,"index":728},{"krate":0,"index":730},{"krate":0,"index":732},{"krate":0,"index":734}],"docs":"","sig":null,"attributes":[]},{"id":56,"kind":"Inherent","span":{"file_name":"/Users/shelwitz/.cargo/registry/src/github.com-1ecc6299db9ec823/bio-0.39.0/src/data_structures/interval_tree/array_backed_interval_tree.rs","byte_start":319378,"byte_end":319387,"line_start":274,"line_end":274,"column_start":6,"column_end":15},"value":"","parent":null,"children":[{"krate":0,"index":742}],"docs":"","sig":null,"attributes":[]},{"id":59,"kind":"Direct","span":{"file_name":"/Users/shelwitz/.cargo/registry/src/github.com-1ecc6299db9ec823/bio-0.39.0/src/data_structures/interval_tree/avl_interval_tree.rs","byte_start":323737,"byte_end":323749,"line_start":39,"line_end":39,"column_start":37,"column_end":49},"value":"","parent":null,"children":[{"krate":0,"index":759}],"docs":"","sig":null,"attributes":[]},{"id":60,"kind":"Inherent","span":{"file_name":"/Users/shelwitz/.cargo/registry/src/github.com-1ecc6299db9ec823/bio-0.39.0/src/data_structures/interval_tree/avl_interval_tree.rs","byte_start":324155,"byte_end":324160,"line_start":53,"line_end":53,"column_start":38,"column_end":43},"value":"","parent":null,"children":[{"krate":0,"index":764},{"krate":0,"index":765}],"docs":"","sig":null,"attributes":[]},{"id":61,"kind":"Direct","span":{"file_name":"/Users/shelwitz/.cargo/registry/src/github.com-1ecc6299db9ec823/bio-0.39.0/src/data_structures/interval_tree/avl_interval_tree.rs","byte_start":324708,"byte_end":324728,"line_start":72,"line_end":72,"column_start":51,"column_end":71},"value":"","parent":null,"children":[{"krate":0,"index":776},{"krate":0,"index":777}],"docs":"","sig":null,"attributes":[]},{"id":62,"kind":"Inherent","span":{"file_name":"/Users/shelwitz/.cargo/registry/src/github.com-1ecc6299db9ec823/bio-0.39.0/src/data_structures/interval_tree/avl_interval_tree.rs","byte_start":326381,"byte_end":326389,"line_start":117,"line_end":117,"column_start":38,"column_end":46},"value":"","parent":null,"children":[{"krate":0,"index":782},{"krate":0,"index":783}],"docs":"","sig":null,"attributes":[]},{"id":63,"kind":"Direct","span":{"file_name":"/Users/shelwitz/.cargo/registry/src/github.com-1ecc6299db9ec823/bio-0.39.0/src/data_structures/interval_tree/avl_interval_tree.rs","byte_start":327031,"byte_end":327054,"line_start":136,"line_end":136,"column_start":51,"column_end":74},"value":"","parent":null,"children":[{"krate":0,"index":794},{"krate":0,"index":795}],"docs":"","sig":null,"attributes":[]},{"id":64,"kind":"Inherent","span":{"file_name":"/Users/shelwitz/.cargo/registry/src/github.com-1ecc6299db9ec823/bio-0.39.0/src/data_structures/interval_tree/avl_interval_tree.rs","byte_start":328322,"byte_end":328334,"line_start":171,"line_end":171,"column_start":25,"column_end":37},"value":"","parent":null,"children":[{"krate":0,"index":799},{"krate":0,"index":800},{"krate":0,"index":802},{"krate":0,"index":804}],"docs":"","sig":null,"attributes":[]},{"id":65,"kind":"Direct","span":{"file_name":"/Users/shelwitz/.cargo/registry/src/github.com-1ecc6299db9ec823/bio-0.39.0/src/data_structures/interval_tree/avl_interval_tree.rs","byte_start":330071,"byte_end":330083,"line_start":222,"line_end":222,"column_start":72,"column_end":84},"value":"","parent":null,"children":[{"krate":0,"index":810}],"docs":"","sig":null,"attributes":[]},{"id":68,"kind":"Inherent","span":{"file_name":"/Users/shelwitz/.cargo/registry/src/github.com-1ecc6299db9ec823/bio-0.39.0/src/data_structures/interval_tree/avl_interval_tree.rs","byte_start":330593,"byte_end":330597,"line_start":244,"line_end":244,"column_start":25,"column_end":29},"value":"","parent":null,"children":[{"krate":0,"index":815},{"krate":0,"index":816},{"krate":0,"index":817},{"krate":0,"index":820},{"krate":0,"index":821},{"krate":0,"index":828},{"krate":0,"index":829}],"docs":"","sig":null,"attributes":[]},{"id":71,"kind":"Inherent","span":{"file_name":"/Users/shelwitz/.cargo/registry/src/github.com-1ecc6299db9ec823/bio-0.39.0/src/data_structures/qgram_index.rs","byte_start":345326,"byte_end":345336,"line_start":47,"line_end":47,"column_start":6,"column_end":16},"value":"","parent":null,"children":[{"krate":0,"index":875},{"krate":0,"index":879},{"krate":0,"index":884},{"krate":0,"index":885},{"krate":0,"index":886},{"krate":0,"index":888}],"docs":"","sig":null,"attributes":[]},{"id":72,"kind":"Inherent","span":{"file_name":"/Users/shelwitz/.cargo/registry/src/github.com-1ecc6299db9ec823/bio-0.39.0/src/data_structures/qgram_index.rs","byte_start":351041,"byte_end":351049,"line_start":207,"line_end":207,"column_start":6,"column_end":14},"value":"","parent":null,"children":[{"krate":0,"index":890}],"docs":"","sig":null,"attributes":[]},{"id":73,"kind":"Direct","span":{"file_name":"/Users/shelwitz/.cargo/registry/src/github.com-1ecc6299db9ec823/bio-0.39.0/src/data_structures/qgram_index.rs","byte_start":351406,"byte_end":351411,"line_start":222,"line_end":222,"column_start":19,"column_end":24},"value":"","parent":null,"children":[{"krate":0,"index":893}],"docs":"","sig":null,"attributes":[]},{"id":74,"kind":"Direct","span":{"file_name":"/Users/shelwitz/.cargo/registry/src/github.com-1ecc6299db9ec823/bio-0.39.0/src/data_structures/qgram_index.rs","byte_start":351536,"byte_end":351541,"line_start":228,"line_end":228,"column_start":26,"column_end":31},"value":"","parent":null,"children":[{"krate":0,"index":895}],"docs":"","sig":null,"attributes":[]},{"id":77,"kind":"Inherent","span":{"file_name":"/Users/shelwitz/.cargo/registry/src/github.com-1ecc6299db9ec823/bio-0.39.0/src/data_structures/rank_select.rs","byte_start":355310,"byte_end":355320,"line_start":46,"line_end":46,"column_start":6,"column_end":16},"value":"","parent":null,"children":[{"krate":0,"index":910},{"krate":0,"index":911},{"krate":0,"index":912},{"krate":0,"index":913},{"krate":0,"index":914},{"krate":0,"index":915},{"krate":0,"index":917},{"krate":0,"index":918},{"krate":0,"index":921},{"krate":0,"index":924},{"krate":0,"index":927}],"docs":"","sig":null,"attributes":[]},{"id":80,"kind":"Direct","span":{"file_name":"/Users/shelwitz/.cargo/registry/src/github.com-1ecc6299db9ec823/bio-0.39.0/src/data_structures/rank_select.rs","byte_start":360435,"byte_end":360449,"line_start":213,"line_end":213,"column_start":16,"column_end":30},"value":"","parent":null,"children":[{"krate":0,"index":929},{"krate":0,"index":930}],"docs":"","sig":null,"attributes":[]},{"id":81,"kind":"Direct","span":{"file_name":"/Users/shelwitz/.cargo/registry/src/github.com-1ecc6299db9ec823/bio-0.39.0/src/data_structures/rank_select.rs","byte_start":360663,"byte_end":360677,"line_start":224,"line_end":224,"column_start":21,"column_end":35},"value":"","parent":null,"children":[{"krate":0,"index":932}],"docs":"","sig":null,"attributes":[]},{"id":82,"kind":"Direct","span":{"file_name":"/Users/shelwitz/.cargo/registry/src/github.com-1ecc6299db9ec823/bio-0.39.0/src/data_structures/rank_select.rs","byte_start":360799,"byte_end":360813,"line_start":230,"line_end":230,"column_start":14,"column_end":28},"value":"","parent":null,"children":[{"krate":0,"index":934}],"docs":"","sig":null,"attributes":[]},{"id":85,"kind":"Direct","span":{"file_name":"/Users/shelwitz/.cargo/registry/src/github.com-1ecc6299db9ec823/bio-0.39.0/src/data_structures/smallints.rs","byte_start":366884,"byte_end":366893,"line_start":43,"line_end":43,"column_start":9,"column_end":18},"value":"","parent":null,"children":[{"krate":0,"index":972}],"docs":"","sig":null,"attributes":[]},{"id":86,"kind":"Inherent","span":{"file_name":"/Users/shelwitz/.cargo/registry/src/github.com-1ecc6299db9ec823/bio-0.39.0/src/data_structures/smallints.rs","byte_start":367228,"byte_end":367237,"line_start":57,"line_end":57,"column_start":74,"column_end":83},"value":"","parent":null,"children":[{"krate":0,"index":976},{"krate":0,"index":977},{"krate":0,"index":978},{"krate":0,"index":979},{"krate":0,"index":980},{"krate":0,"index":981},{"krate":0,"index":982},{"krate":0,"index":983},{"krate":0,"index":984},{"krate":0,"index":985},{"krate":0,"index":986}],"docs":"","sig":null,"attributes":[]},{"id":87,"kind":"Direct","span":{"file_name":"/Users/shelwitz/.cargo/registry/src/github.com-1ecc6299db9ec823/bio-0.39.0/src/data_structures/smallints.rs","byte_start":370419,"byte_end":370423,"line_start":169,"line_end":169,"column_start":29,"column_end":33},"value":"","parent":null,"children":[{"krate":0,"index":997},{"krate":0,"index":998}],"docs":"","sig":null,"attributes":[]},{"id":90,"kind":"Direct","span":{"file_name":"/Users/shelwitz/.cargo/registry/src/github.com-1ecc6299db9ec823/bio-0.39.0/src/data_structures/suffix_array.rs","byte_start":375409,"byte_end":375423,"line_start":136,"line_end":136,"column_start":22,"column_end":36},"value":"","parent":null,"children":[{"krate":0,"index":1093},{"krate":0,"index":1094},{"krate":0,"index":1095}],"docs":"","sig":null,"attributes":[]},{"id":91,"kind":"Direct","span":{"file_name":"/Users/shelwitz/.cargo/registry/src/github.com-1ecc6299db9ec823/bio-0.39.0/src/data_structures/suffix_array.rs","byte_start":375891,"byte_end":375909,"line_start":156,"line_end":156,"column_start":9,"column_end":27},"value":"","parent":null,"children":[{"krate":0,"index":1100},{"krate":0,"index":1101},{"krate":0,"index":1102}],"docs":"","sig":null,"attributes":[]},{"id":92,"kind":"Inherent","span":{"file_name":"/Users/shelwitz/.cargo/registry/src/github.com-1ecc6299db9ec823/bio-0.39.0/src/data_structures/suffix_array.rs","byte_start":377226,"byte_end":377244,"line_start":197,"line_end":197,"column_start":5,"column_end":23},"value":"","parent":null,"children":[{"krate":0,"index":1107},{"krate":0,"index":1108},{"krate":0,"index":1109},{"krate":0,"index":1110}],"docs":"","sig":null,"attributes":[]},{"id":93,"kind":"Inherent","span":{"file_name":"/Users/shelwitz/.cargo/registry/src/github.com-1ecc6299db9ec823/bio-0.39.0/src/data_structures/suffix_array.rs","byte_start":385882,"byte_end":385886,"line_start":452,"line_end":452,"column_start":6,"column_end":10},"value":"","parent":null,"children":[{"krate":0,"index":1129},{"krate":0,"index":1130},{"krate":0,"index":1132},{"krate":0,"index":1134},{"krate":0,"index":1136},{"krate":0,"index":1139},{"krate":0,"index":1141},{"krate":0,"index":1143}],"docs":"","sig":null,"attributes":[]},{"id":94,"kind":"Inherent","span":{"file_name":"/Users/shelwitz/.cargo/registry/src/github.com-1ecc6299db9ec823/bio-0.39.0/src/data_structures/suffix_array.rs","byte_start":393573,"byte_end":393581,"line_start":679,"line_end":679,"column_start":6,"column_end":14},"value":"","parent":null,"children":[{"krate":0,"index":1146},{"krate":0,"index":1148},{"krate":0,"index":1149},{"krate":0,"index":1150}],"docs":"","sig":null,"attributes":[]},{"id":97,"kind":"Inherent","span":{"file_name":"/Users/shelwitz/.cargo/registry/src/github.com-1ecc6299db9ec823/bio-0.39.0/src/data_structures/wavelet_matrix.rs","byte_start":406506,"byte_end":406519,"line_start":65,"line_end":65,"column_start":6,"column_end":19},"value":"","parent":null,"children":[{"krate":0,"index":1165},{"krate":0,"index":1166},{"krate":0,"index":1167},{"krate":0,"index":1168}],"docs":"","sig":null,"attributes":[]},{"id":98,"kind":"Inherent","span":{"file_name":"/Users/shelwitz/.cargo/registry/src/github.com-1ecc6299db9ec823/bio-0.39.0/src/io/bed.rs","byte_start":415080,"byte_end":415086,"line_start":41,"line_end":41,"column_start":6,"column_end":12},"value":"","parent":null,"children":[{"krate":0,"index":1205}],"docs":"","sig":null,"attributes":[]},{"id":99,"kind":"Inherent","span":{"file_name":"/Users/shelwitz/.cargo/registry/src/github.com-1ecc6299db9ec823/bio-0.39.0/src/io/bed.rs","byte_start":415390,"byte_end":415396,"line_start":50,"line_end":50,"column_start":19,"column_end":25},"value":"","parent":null,"children":[{"krate":0,"index":1210},{"krate":0,"index":1211}],"docs":"","sig":null,"attributes":[]},{"id":100,"kind":"Direct","span":{"file_name":"/Users/shelwitz/.cargo/registry/src/github.com-1ecc6299db9ec823/bio-0.39.0/src/io/bed.rs","byte_start":416004,"byte_end":416011,"line_start":74,"line_end":74,"column_start":36,"column_end":43},"value":"","parent":null,"children":[{"krate":0,"index":1219},{"krate":0,"index":1220}],"docs":"","sig":null,"attributes":[]},{"id":101,"kind":"Inherent","span":{"file_name":"/Users/shelwitz/.cargo/registry/src/github.com-1ecc6299db9ec823/bio-0.39.0/src/io/bed.rs","byte_start":416254,"byte_end":416260,"line_start":88,"line_end":88,"column_start":6,"column_end":12},"value":"","parent":null,"children":[{"krate":0,"index":1222}],"docs":"","sig":null,"attributes":[]},{"id":102,"kind":"Inherent","span":{"file_name":"/Users/shelwitz/.cargo/registry/src/github.com-1ecc6299db9ec823/bio-0.39.0/src/io/bed.rs","byte_start":416495,"byte_end":416501,"line_start":96,"line_end":96,"column_start":20,"column_end":26},"value":"","parent":null,"children":[{"krate":0,"index":1226},{"krate":0,"index":1227}],"docs":"","sig":null,"attributes":[]},{"id":105,"kind":"Inherent","span":{"file_name":"/Users/shelwitz/.cargo/registry/src/github.com-1ecc6299db9ec823/bio-0.39.0/src/io/bed.rs","byte_start":417424,"byte_end":417430,"line_start":130,"line_end":130,"column_start":6,"column_end":12},"value":"","parent":null,"children":[{"krate":0,"index":1229},{"krate":0,"index":1230},{"krate":0,"index":1231},{"krate":0,"index":1232},{"krate":0,"index":1233},{"krate":0,"index":1234},{"krate":0,"index":1235},{"krate":0,"index":1236},{"krate":0,"index":1237},{"krate":0,"index":1238},{"krate":0,"index":1239},{"krate":0,"index":1240},{"krate":0,"index":1241},{"krate":0,"index":1242}],"docs":"","sig":null,"attributes":[]},{"id":106,"kind":"Direct","span":{"file_name":"/Users/shelwitz/.cargo/registry/src/github.com-1ecc6299db9ec823/bio-0.39.0/src/io/bed.rs","byte_start":419780,"byte_end":419786,"line_start":228,"line_end":228,"column_start":46,"column_end":52},"value":"","parent":null,"children":[{"krate":0,"index":1245}],"docs":"","sig":null,"attributes":[]},{"id":107,"kind":"Direct","span":{"file_name":"/Users/shelwitz/.cargo/registry/src/github.com-1ecc6299db9ec823/bio-0.39.0/src/io/bed.rs","byte_start":420824,"byte_end":420830,"line_start":259,"line_end":259,"column_start":44,"column_end":50},"value":"","parent":null,"children":[{"krate":0,"index":1249}],"docs":"","sig":null,"attributes":[]},{"id":108,"kind":"Direct","span":{"file_name":"/Users/shelwitz/.cargo/registry/src/github.com-1ecc6299db9ec823/bio-0.39.0/src/io/bed.rs","byte_start":421396,"byte_end":421402,"line_start":279,"line_end":279,"column_start":50,"column_end":56},"value":"","parent":null,"children":[{"krate":0,"index":1253}],"docs":"","sig":null,"attributes":[]},{"id":109,"kind":"Direct","span":{"file_name":"/Users/shelwitz/.cargo/registry/src/github.com-1ecc6299db9ec823/bio-0.39.0/src/io/bed.rs","byte_start":423771,"byte_end":423777,"line_start":347,"line_end":347,"column_start":52,"column_end":58},"value":"","parent":null,"children":[{"krate":0,"index":1257}],"docs":"","sig":null,"attributes":[]},{"id":110,"kind":"Inherent","span":{"file_name":"/Users/shelwitz/.cargo/registry/src/github.com-1ecc6299db9ec823/bio-0.39.0/src/io/fasta.rs","byte_start":434989,"byte_end":434995,"line_start":160,"line_end":160,"column_start":6,"column_end":12},"value":"","parent":null,"children":[{"krate":0,"index":1295},{"krate":0,"index":1298}],"docs":"","sig":null,"attributes":[]},{"id":111,"kind":"Inherent","span":{"file_name":"/Users/shelwitz/.cargo/registry/src/github.com-1ecc6299db9ec823/bio-0.39.0/src/io/fasta.rs","byte_start":435687,"byte_end":435693,"line_start":179,"line_end":179,"column_start":9,"column_end":15},"value":"","parent":null,"children":[{"krate":0,"index":1304},{"krate":0,"index":1305}],"docs":"","sig":null,"attributes":[]},{"id":112,"kind":"Inherent","span":{"file_name":"/Users/shelwitz/.cargo/registry/src/github.com-1ecc6299db9ec823/bio-0.39.0/src/io/fasta.rs","byte_start":436818,"byte_end":436824,"line_start":224,"line_end":224,"column_start":9,"column_end":15},"value":"","parent":null,"children":[{"krate":0,"index":1308},{"krate":0,"index":1309}],"docs":"","sig":null,"attributes":[]},{"id":113,"kind":"Direct","span":{"file_name":"/Users/shelwitz/.cargo/registry/src/github.com-1ecc6299db9ec823/bio-0.39.0/src/io/fasta.rs","byte_start":438229,"byte_end":438235,"line_start":277,"line_end":277,"column_start":23,"column_end":29},"value":"","parent":null,"children":[{"krate":0,"index":1312}],"docs":"","sig":null,"attributes":[]},{"id":114,"kind":"Inherent","span":{"file_name":"/Users/shelwitz/.cargo/registry/src/github.com-1ecc6299db9ec823/bio-0.39.0/src/io/fasta.rs","byte_start":440657,"byte_end":440662,"line_start":354,"line_end":354,"column_start":6,"column_end":11},"value":"","parent":null,"children":[{"krate":0,"index":1316},{"krate":0,"index":1318},{"krate":0,"index":1321},{"krate":0,"index":1323}],"docs":"","sig":null,"attributes":[]},{"id":115,"kind":"Inherent","span":{"file_name":"/Users/shelwitz/.cargo/registry/src/github.com-1ecc6299db9ec823/bio-0.39.0/src/io/fasta.rs","byte_start":442606,"byte_end":442619,"line_start":412,"line_end":412,"column_start":6,"column_end":19},"value":"","parent":null,"children":[{"krate":0,"index":1326}],"docs":"","sig":null,"attributes":[]},{"id":116,"kind":"Inherent","span":{"file_name":"/Users/shelwitz/.cargo/registry/src/github.com-1ecc6299db9ec823/bio-0.39.0/src/io/fasta.rs","byte_start":443126,"byte_end":443139,"line_start":424,"line_end":424,"column_start":30,"column_end":43},"value":"","parent":null,"children":[{"krate":0,"index":1332},{"krate":0,"index":1334},{"krate":0,"index":1335},{"krate":0,"index":1336},{"krate":0,"index":1337},{"krate":0,"index":1338},{"krate":0,"index":1339},{"krate":0,"index":1340},{"krate":0,"index":1341},{"krate":0,"index":1342},{"krate":0,"index":1343},{"krate":0,"index":1344},{"krate":0,"index":1345},{"krate":0,"index":1346}],"docs":"","sig":null,"attributes":[]},{"id":119,"kind":"Inherent","span":{"file_name":"/Users/shelwitz/.cargo/registry/src/github.com-1ecc6299db9ec823/bio-0.39.0/src/io/fasta.rs","byte_start":453717,"byte_end":453738,"line_start":740,"line_end":740,"column_start":39,"column_end":60},"value":"","parent":null,"children":[{"krate":0,"index":1359}],"docs":"","sig":null,"attributes":[]},{"id":120,"kind":"Direct","span":{"file_name":"/Users/shelwitz/.cargo/registry/src/github.com-1ecc6299db9ec823/bio-0.39.0/src/io/fasta.rs","byte_start":454360,"byte_end":454381,"line_start":762,"line_end":762,"column_start":52,"column_end":73},"value":"","parent":null,"children":[{"krate":0,"index":1363},{"krate":0,"index":1364},{"krate":0,"index":1365}],"docs":"","sig":null,"attributes":[]},{"id":121,"kind":"Inherent","span":{"file_name":"/Users/shelwitz/.cargo/registry/src/github.com-1ecc6299db9ec823/bio-0.39.0/src/io/fasta.rs","byte_start":455237,"byte_end":455243,"line_start":798,"line_end":798,"column_start":6,"column_end":12},"value":"","parent":null,"children":[{"krate":0,"index":1367},{"krate":0,"index":1369}],"docs":"","sig":null,"attributes":[]},{"id":122,"kind":"Inherent","span":{"file_name":"/Users/shelwitz/.cargo/registry/src/github.com-1ecc6299db9ec823/bio-0.39.0/src/io/fasta.rs","byte_start":455724,"byte_end":455730,"line_start":811,"line_end":811,"column_start":20,"column_end":26},"value":"","parent":null,"children":[{"krate":0,"index":1374},{"krate":0,"index":1375},{"krate":0,"index":1376},{"krate":0,"index":1377},{"krate":0,"index":1378},{"krate":0,"index":1379}],"docs":"","sig":null,"attributes":[]},{"id":125,"kind":"Inherent","span":{"file_name":"/Users/shelwitz/.cargo/registry/src/github.com-1ecc6299db9ec823/bio-0.39.0/src/io/fasta.rs","byte_start":458201,"byte_end":458207,"line_start":893,"line_end":893,"column_start":6,"column_end":12},"value":"","parent":null,"children":[{"krate":0,"index":1381},{"krate":0,"index":1382},{"krate":0,"index":1384},{"krate":0,"index":1385},{"krate":0,"index":1386},{"krate":0,"index":1387},{"krate":0,"index":1388},{"krate":0,"index":1389}],"docs":"","sig":null,"attributes":[]},{"id":126,"kind":"Direct","span":{"file_name":"/Users/shelwitz/.cargo/registry/src/github.com-1ecc6299db9ec823/bio-0.39.0/src/io/fasta.rs","byte_start":460134,"byte_end":460140,"line_start":968,"line_end":968,"column_start":23,"column_end":29},"value":"","parent":null,"children":[{"krate":0,"index":1391}],"docs":"","sig":null,"attributes":[]},{"id":127,"kind":"Direct","span":{"file_name":"/Users/shelwitz/.cargo/registry/src/github.com-1ecc6299db9ec823/bio-0.39.0/src/io/fasta.rs","byte_start":461780,"byte_end":461787,"line_start":1020,"line_end":1020,"column_start":22,"column_end":29},"value":"","parent":null,"children":[{"krate":0,"index":1398},{"krate":0,"index":1399}],"docs":"","sig":null,"attributes":[]},{"id":131,"kind":"Inherent","span":{"file_name":"/Users/shelwitz/.cargo/registry/src/github.com-1ecc6299db9ec823/bio-0.39.0/src/io/fastq.rs","byte_start":489255,"byte_end":489261,"line_start":145,"line_end":145,"column_start":6,"column_end":12},"value":"","parent":null,"children":[{"krate":0,"index":1439}],"docs":"","sig":null,"attributes":[]},{"id":132,"kind":"Inherent","span":{"file_name":"/Users/shelwitz/.cargo/registry/src/github.com-1ecc6299db9ec823/bio-0.39.0/src/io/fastq.rs","byte_start":489718,"byte_end":489724,"line_start":158,"line_end":158,"column_start":19,"column_end":25},"value":"","parent":null,"children":[{"krate":0,"index":1445},{"krate":0,"index":1446}],"docs":"","sig":null,"attributes":[]},{"id":133,"kind":"Inherent","span":{"file_name":"/Users/shelwitz/.cargo/registry/src/github.com-1ecc6299db9ec823/bio-0.39.0/src/io/fastq.rs","byte_start":490290,"byte_end":490296,"line_start":176,"line_end":176,"column_start":9,"column_end":15},"value":"","parent":null,"children":[{"krate":0,"index":1449},{"krate":0,"index":1450}],"docs":"","sig":null,"attributes":[]},{"id":134,"kind":"Direct","span":{"file_name":"/Users/shelwitz/.cargo/registry/src/github.com-1ecc6299db9ec823/bio-0.39.0/src/io/fastq.rs","byte_start":491231,"byte_end":491237,"line_start":213,"line_end":213,"column_start":23,"column_end":29},"value":"","parent":null,"children":[{"krate":0,"index":1453}],"docs":"","sig":null,"attributes":[]},{"id":137,"kind":"Inherent","span":{"file_name":"/Users/shelwitz/.cargo/registry/src/github.com-1ecc6299db9ec823/bio-0.39.0/src/io/fastq.rs","byte_start":494335,"byte_end":494341,"line_start":306,"line_end":306,"column_start":6,"column_end":12},"value":"","parent":null,"children":[{"krate":0,"index":1456},{"krate":0,"index":1457},{"krate":0,"index":1459},{"krate":0,"index":1460},{"krate":0,"index":1461},{"krate":0,"index":1462},{"krate":0,"index":1463},{"krate":0,"index":1464},{"krate":0,"index":1465}],"docs":"","sig":null,"attributes":[]},{"id":138,"kind":"Direct","span":{"file_name":"/Users/shelwitz/.cargo/registry/src/github.com-1ecc6299db9ec823/bio-0.39.0/src/io/fastq.rs","byte_start":497960,"byte_end":497966,"line_start":427,"line_end":427,"column_start":23,"column_end":29},"value":"","parent":null,"children":[{"krate":0,"index":1467}],"docs":"","sig":null,"attributes":[]},{"id":139,"kind":"Direct","span":{"file_name":"/Users/shelwitz/.cargo/registry/src/github.com-1ecc6299db9ec823/bio-0.39.0/src/io/fastq.rs","byte_start":499507,"byte_end":499513,"line_start":471,"line_end":471,"column_start":23,"column_end":29},"value":"","parent":null,"children":[{"krate":0,"index":1469},{"krate":0,"index":1470},{"krate":0,"index":1471},{"krate":0,"index":1472}],"docs":"","sig":null,"attributes":[]},{"id":140,"kind":"Direct","span":{"file_name":"/Users/shelwitz/.cargo/registry/src/github.com-1ecc6299db9ec823/bio-0.39.0/src/io/fastq.rs","byte_start":499929,"byte_end":499936,"line_start":495,"line_end":495,"column_start":22,"column_end":29},"value":"","parent":null,"children":[{"krate":0,"index":1475},{"krate":0,"index":1476}],"docs":"","sig":null,"attributes":[]},{"id":141,"kind":"Inherent","span":{"file_name":"/Users/shelwitz/.cargo/registry/src/github.com-1ecc6299db9ec823/bio-0.39.0/src/io/fastq.rs","byte_start":500395,"byte_end":500401,"line_start":517,"line_end":517,"column_start":6,"column_end":12},"value":"","parent":null,"children":[{"krate":0,"index":1478},{"krate":0,"index":1480}],"docs":"","sig":null,"attributes":[]},{"id":142,"kind":"Inherent","span":{"file_name":"/Users/shelwitz/.cargo/registry/src/github.com-1ecc6299db9ec823/bio-0.39.0/src/io/fastq.rs","byte_start":500880,"byte_end":500886,"line_start":530,"line_end":530,"column_start":20,"column_end":26},"value":"","parent":null,"children":[{"krate":0,"index":1485},{"krate":0,"index":1486},{"krate":0,"index":1487},{"krate":0,"index":1488},{"krate":0,"index":1489},{"krate":0,"index":1490}],"docs":"","sig":null,"attributes":[]},{"id":143,"kind":"Direct","span":{"file_name":"/Users/shelwitz/.cargo/registry/src/github.com-1ecc6299db9ec823/bio-0.39.0/src/io/gff.rs","byte_start":517767,"byte_end":517774,"line_start":58,"line_end":58,"column_start":18,"column_end":25},"value":"","parent":null,"children":[{"krate":0,"index":1523},{"krate":0,"index":1524}],"docs":"","sig":null,"attributes":[]},{"id":144,"kind":"Inherent","span":{"file_name":"/Users/shelwitz/.cargo/registry/src/github.com-1ecc6299db9ec823/bio-0.39.0/src/io/gff.rs","byte_start":518325,"byte_end":518332,"line_start":79,"line_end":79,"column_start":6,"column_end":13},"value":"","parent":null,"children":[{"krate":0,"index":1526}],"docs":"","sig":null,"attributes":[]},{"id":145,"kind":"Inherent","span":{"file_name":"/Users/shelwitz/.cargo/registry/src/github.com-1ecc6299db9ec823/bio-0.39.0/src/io/gff.rs","byte_start":518863,"byte_end":518869,"line_start":101,"line_end":101,"column_start":6,"column_end":12},"value":"","parent":null,"children":[{"krate":0,"index":1528}],"docs":"","sig":null,"attributes":[]},{"id":146,"kind":"Inherent","span":{"file_name":"/Users/shelwitz/.cargo/registry/src/github.com-1ecc6299db9ec823/bio-0.39.0/src/io/gff.rs","byte_start":519254,"byte_end":519260,"line_start":113,"line_end":113,"column_start":19,"column_end":25},"value":"","parent":null,"children":[{"krate":0,"index":1534},{"krate":0,"index":1535}],"docs":"","sig":null,"attributes":[]},{"id":147,"kind":"Direct","span":{"file_name":"/Users/shelwitz/.cargo/registry/src/github.com-1ecc6299db9ec823/bio-0.39.0/src/io/gff.rs","byte_start":520570,"byte_end":520577,"line_start":162,"line_end":162,"column_start":36,"column_end":43},"value":"","parent":null,"children":[{"krate":0,"index":1546},{"krate":0,"index":1547}],"docs":"","sig":null,"attributes":[]},{"id":148,"kind":"Inherent","span":{"file_name":"/Users/shelwitz/.cargo/registry/src/github.com-1ecc6299db9ec823/bio-0.39.0/src/io/gff.rs","byte_start":522046,"byte_end":522052,"line_start":211,"line_end":211,"column_start":6,"column_end":12},"value":"","parent":null,"children":[{"krate":0,"index":1552}],"docs":"","sig":null,"attributes":[]},{"id":149,"kind":"Inherent","span":{"file_name":"/Users/shelwitz/.cargo/registry/src/github.com-1ecc6299db9ec823/bio-0.39.0/src/io/gff.rs","byte_start":522343,"byte_end":522349,"line_start":219,"line_end":219,"column_start":20,"column_end":26},"value":"","parent":null,"children":[{"krate":0,"index":1557},{"krate":0,"index":1558}],"docs":"","sig":null,"attributes":[]},{"id":152,"kind":"Inherent","span":{"file_name":"/Users/shelwitz/.cargo/registry/src/github.com-1ecc6299db9ec823/bio-0.39.0/src/io/gff.rs","byte_start":523782,"byte_end":523788,"line_start":274,"line_end":274,"column_start":6,"column_end":12},"value":"","parent":null,"children":[{"krate":0,"index":1561},{"krate":0,"index":1562},{"krate":0,"index":1563},{"krate":0,"index":1564},{"krate":0,"index":1565},{"krate":0,"index":1566},{"krate":0,"index":1567},{"krate":0,"index":1568},{"krate":0,"index":1569},{"krate":0,"index":1570},{"krate":0,"index":1571},{"krate":0,"index":1572},{"krate":0,"index":1573},{"krate":0,"index":1574},{"krate":0,"index":1575},{"krate":0,"index":1576},{"krate":0,"index":1577},{"krate":0,"index":1578},{"krate":0,"index":1579}],"docs":"","sig":null,"attributes":[]},{"id":153,"kind":"Inherent","span":{"file_name":"/Users/shelwitz/.cargo/registry/src/github.com-1ecc6299db9ec823/bio-0.39.0/src/pattern_matching/bndm.rs","byte_start":539071,"byte_end":539075,"line_start":32,"line_end":32,"column_start":6,"column_end":10},"value":"","parent":null,"children":[{"krate":0,"index":1597},{"krate":0,"index":1600}],"docs":"","sig":null,"attributes":[]},{"id":154,"kind":"Direct","span":{"file_name":"/Users/shelwitz/.cargo/registry/src/github.com-1ecc6299db9ec823/bio-0.39.0/src/pattern_matching/bndm.rs","byte_start":540086,"byte_end":540093,"line_start":67,"line_end":67,"column_start":23,"column_end":30},"value":"","parent":null,"children":[{"krate":0,"index":1609},{"krate":0,"index":1610}],"docs":"","sig":null,"attributes":[]},{"id":155,"kind":"Inherent","span":{"file_name":"/Users/shelwitz/.cargo/registry/src/github.com-1ecc6299db9ec823/bio-0.39.0/src/pattern_matching/bom.rs","byte_start":543009,"byte_end":543012,"line_start":34,"line_end":34,"column_start":6,"column_end":9},"value":"","parent":null,"children":[{"krate":0,"index":1631},{"krate":0,"index":1634},{"krate":0,"index":1635}],"docs":"","sig":null,"attributes":[]},{"id":156,"kind":"Direct","span":{"file_name":"/Users/shelwitz/.cargo/registry/src/github.com-1ecc6299db9ec823/bio-0.39.0/src/pattern_matching/bom.rs","byte_start":545492,"byte_end":545499,"line_start":112,"line_end":112,"column_start":23,"column_end":30},"value":"","parent":null,"children":[{"krate":0,"index":1644},{"krate":0,"index":1645}],"docs":"","sig":null,"attributes":[]},{"id":157,"kind":"Inherent","span":{"file_name":"/Users/shelwitz/.cargo/registry/src/github.com-1ecc6299db9ec823/bio-0.39.0/src/pattern_matching/horspool.rs","byte_start":549376,"byte_end":549384,"line_start":50,"line_end":50,"column_start":10,"column_end":18},"value":"","parent":null,"children":[{"krate":0,"index":1657},{"krate":0,"index":1658}],"docs":"","sig":null,"attributes":[]},{"id":158,"kind":"Direct","span":{"file_name":"/Users/shelwitz/.cargo/registry/src/github.com-1ecc6299db9ec823/bio-0.39.0/src/pattern_matching/horspool.rs","byte_start":550396,"byte_end":550403,"line_start":86,"line_end":86,"column_start":23,"column_end":30},"value":"","parent":null,"children":[{"krate":0,"index":1669},{"krate":0,"index":1670}],"docs":"","sig":null,"attributes":[]},{"id":159,"kind":"Inherent","span":{"file_name":"/Users/shelwitz/.cargo/registry/src/github.com-1ecc6299db9ec823/bio-0.39.0/src/pattern_matching/kmp.rs","byte_start":553341,"byte_end":553344,"line_start":39,"line_end":39,"column_start":10,"column_end":13},"value":"","parent":null,"children":[{"krate":0,"index":1693},{"krate":0,"index":1694},{"krate":0,"index":1695}],"docs":"","sig":null,"attributes":[]},{"id":160,"kind":"Direct","span":{"file_name":"/Users/shelwitz/.cargo/registry/src/github.com-1ecc6299db9ec823/bio-0.39.0/src/pattern_matching/kmp.rs","byte_start":554738,"byte_end":554745,"line_start":101,"line_end":101,"column_start":29,"column_end":36},"value":"","parent":null,"children":[{"krate":0,"index":1710},{"krate":0,"index":1711}],"docs":"","sig":null,"attributes":[]},{"id":161,"kind":"Inherent","span":{"file_name":"/Users/shelwitz/.cargo/registry/src/github.com-1ecc6299db9ec823/bio-0.39.0/src/pattern_matching/myers/myers_impl.rs","byte_start":565569,"byte_end":565574,"line_start":16,"line_end":16,"column_start":12,"column_end":17},"value":"","parent":null,"children":[{"krate":0,"index":1727},{"krate":0,"index":1728},{"krate":0,"index":1729},{"krate":0,"index":1730},{"krate":0,"index":1731},{"krate":0,"index":1732},{"krate":0,"index":1733},{"krate":0,"index":1734},{"krate":0,"index":1735}],"docs":"","sig":null,"attributes":[]},{"id":162,"kind":"Inherent","span":{"file_name":"/Users/shelwitz/.cargo/registry/src/github.com-1ecc6299db9ec823/bio-0.39.0/src/pattern_matching/myers/builder.rs","byte_start":587062,"byte_end":587074,"line_start":56,"line_end":56,"column_start":6,"column_end":18},"value":"","parent":null,"children":[{"krate":0,"index":1754},{"krate":0,"index":1755},{"krate":0,"index":1759},{"krate":0,"index":1760},{"krate":0,"index":1763},{"krate":0,"index":1766},{"krate":0,"index":1770},{"krate":0,"index":1773},{"krate":0,"index":1776}],"docs":"","sig":null,"attributes":[]},{"id":173,"kind":"Inherent","span":{"file_name":"/Users/shelwitz/.cargo/registry/src/github.com-1ecc6299db9ec823/bio-0.39.0/src/pattern_matching/myers/long.rs","byte_start":596040,"byte_end":596045,"line_start":43,"line_end":43,"column_start":17,"column_end":22},"value":"","parent":null,"children":[{"krate":0,"index":1892},{"krate":0,"index":1895},{"krate":0,"index":1900},{"krate":0,"index":1901}],"docs":"","sig":null,"attributes":[]},{"id":174,"kind":"Inherent","span":{"file_name":"/Users/shelwitz/.cargo/registry/src/github.com-1ecc6299db9ec823/bio-0.39.0/src/pattern_matching/myers/long.rs","byte_start":599469,"byte_end":599475,"line_start":173,"line_end":173,"column_start":9,"column_end":15},"value":"","parent":null,"children":[{"krate":0,"index":1911},{"krate":0,"index":1912},{"krate":0,"index":1914},{"krate":0,"index":1915}],"docs":"","sig":null,"attributes":[]},{"id":175,"kind":"Inherent","span":{"file_name":"/Users/shelwitz/.cargo/registry/src/github.com-1ecc6299db9ec823/bio-0.39.0/src/pattern_matching/myers/long.rs","byte_start":602015,"byte_end":602032,"line_start":252,"line_end":252,"column_start":10,"column_end":27},"value":"","parent":null,"children":[{"krate":0,"index":1919}],"docs":"","sig":null,"attributes":[]},{"id":176,"kind":"Direct","span":{"file_name":"/Users/shelwitz/.cargo/registry/src/github.com-1ecc6299db9ec823/bio-0.39.0/src/pattern_matching/myers/long.rs","byte_start":602225,"byte_end":602242,"line_start":262,"line_end":262,"column_start":45,"column_end":62},"value":"","parent":null,"children":[{"krate":0,"index":1923},{"krate":0,"index":1924},{"krate":0,"index":1925},{"krate":0,"index":1926},{"krate":0,"index":1927},{"krate":0,"index":1928}],"docs":"","sig":null,"attributes":[]},{"id":177,"kind":"Inherent","span":{"file_name":"/Users/shelwitz/.cargo/registry/src/github.com-1ecc6299db9ec823/bio-0.39.0/src/pattern_matching/myers/long.rs","byte_start":604417,"byte_end":604437,"line_start":336,"line_end":336,"column_start":21,"column_end":41},"value":"","parent":null,"children":[{"krate":0,"index":1949}],"docs":"","sig":null,"attributes":[]},{"id":178,"kind":"Direct","span":{"file_name":"/Users/shelwitz/.cargo/registry/src/github.com-1ecc6299db9ec823/bio-0.39.0/src/pattern_matching/myers/long.rs","byte_start":605809,"byte_end":605829,"line_start":378,"line_end":378,"column_start":61,"column_end":81},"value":"","parent":null,"children":[{"krate":0,"index":1953},{"krate":0,"index":1954},{"krate":0,"index":1955},{"krate":0,"index":1956},{"krate":0,"index":1957},{"krate":0,"index":1958},{"krate":0,"index":1959},{"krate":0,"index":1960},{"krate":0,"index":1961},{"krate":0,"index":1962},{"krate":0,"index":1963}],"docs":"","sig":null,"attributes":[]},{"id":180,"kind":"Inherent","span":{"file_name":"/Users/shelwitz/.cargo/registry/src/github.com-1ecc6299db9ec823/bio-0.39.0/src/pattern_matching/myers/simple.rs","byte_start":610609,"byte_end":610614,"line_start":25,"line_end":25,"column_start":17,"column_end":22},"value":"","parent":null,"children":[{"krate":0,"index":2026},{"krate":0,"index":2029},{"krate":0,"index":2034},{"krate":0,"index":2035},{"krate":0,"index":2036},{"krate":0,"index":2037}],"docs":"","sig":null,"attributes":[]},{"id":181,"kind":"Inherent","span":{"file_name":"/Users/shelwitz/.cargo/registry/src/github.com-1ecc6299db9ec823/bio-0.39.0/src/pattern_matching/myers/simple.rs","byte_start":613598,"byte_end":613616,"line_start":127,"line_end":127,"column_start":10,"column_end":28},"value":"","parent":null,"children":[{"krate":0,"index":2040}],"docs":"","sig":null,"attributes":[]},{"id":182,"kind":"Direct","span":{"file_name":"/Users/shelwitz/.cargo/registry/src/github.com-1ecc6299db9ec823/bio-0.39.0/src/pattern_matching/myers/simple.rs","byte_start":613776,"byte_end":613794,"line_start":134,"line_end":134,"column_start":64,"column_end":82},"value":"","parent":null,"children":[{"krate":0,"index":2044},{"krate":0,"index":2045},{"krate":0,"index":2046},{"krate":0,"index":2047},{"krate":0,"index":2048},{"krate":0,"index":2049}],"docs":"","sig":null,"attributes":[]},{"id":183,"kind":"Inherent","span":{"file_name":"/Users/shelwitz/.cargo/registry/src/github.com-1ecc6299db9ec823/bio-0.39.0/src/pattern_matching/myers/simple.rs","byte_start":615123,"byte_end":615144,"line_start":183,"line_end":183,"column_start":21,"column_end":42},"value":"","parent":null,"children":[{"krate":0,"index":2066}],"docs":"","sig":null,"attributes":[]},{"id":184,"kind":"Direct","span":{"file_name":"/Users/shelwitz/.cargo/registry/src/github.com-1ecc6299db9ec823/bio-0.39.0/src/pattern_matching/myers/simple.rs","byte_start":616170,"byte_end":616191,"line_start":211,"line_end":211,"column_start":54,"column_end":75},"value":"","parent":null,"children":[{"krate":0,"index":2070},{"krate":0,"index":2071},{"krate":0,"index":2072},{"krate":0,"index":2073},{"krate":0,"index":2074},{"krate":0,"index":2075},{"krate":0,"index":2076},{"krate":0,"index":2077},{"krate":0,"index":2078},{"krate":0,"index":2079},{"krate":0,"index":2080}],"docs":"","sig":null,"attributes":[]},{"id":186,"kind":"Inherent","span":{"file_name":"/Users/shelwitz/.cargo/registry/src/github.com-1ecc6299db9ec823/bio-0.39.0/src/pattern_matching/myers/traceback.rs","byte_start":626180,"byte_end":626189,"line_start":186,"line_end":186,"column_start":19,"column_end":28},"value":"","parent":null,"children":[{"krate":0,"index":2151},{"krate":0,"index":2153},{"krate":0,"index":2154},{"krate":0,"index":2155},{"krate":0,"index":2156},{"krate":0,"index":2158}],"docs":"","sig":null,"attributes":[]},{"id":187,"kind":"Inherent","span":{"file_name":"/Users/shelwitz/.cargo/registry/src/github.com-1ecc6299db9ec823/bio-0.39.0/src/pattern_matching/pssm/dnamotif.rs","byte_start":643886,"byte_end":643894,"line_start":22,"line_end":22,"column_start":6,"column_end":14},"value":"","parent":null,"children":[{"krate":0,"index":2194},{"krate":0,"index":2195},{"krate":0,"index":2196}],"docs":"","sig":null,"attributes":[]},{"id":188,"kind":"Direct","span":{"file_name":"/Users/shelwitz/.cargo/registry/src/github.com-1ecc6299db9ec823/bio-0.39.0/src/pattern_matching/pssm/dnamotif.rs","byte_start":645855,"byte_end":645863,"line_start":81,"line_end":81,"column_start":16,"column_end":24},"value":"","parent":null,"children":[{"krate":0,"index":2200},{"krate":0,"index":2202},{"krate":0,"index":2203},{"krate":0,"index":2204},{"krate":0,"index":2205},{"krate":0,"index":2206},{"krate":0,"index":2207},{"krate":0,"index":2208},{"krate":0,"index":2209},{"krate":0,"index":2210}],"docs":"","sig":null,"attributes":[]},{"id":189,"kind":"Direct","span":{"file_name":"/Users/shelwitz/.cargo/registry/src/github.com-1ecc6299db9ec823/bio-0.39.0/src/pattern_matching/pssm/dnamotif.rs","byte_start":649108,"byte_end":649116,"line_start":171,"line_end":171,"column_start":28,"column_end":36},"value":"","parent":null,"children":[{"krate":0,"index":2215}],"docs":"","sig":null,"attributes":[]},{"id":192,"kind":"Inherent","span":{"file_name":"/Users/shelwitz/.cargo/registry/src/github.com-1ecc6299db9ec823/bio-0.39.0/src/pattern_matching/pssm/protmotif.rs","byte_start":654363,"byte_end":654372,"line_start":22,"line_end":22,"column_start":6,"column_end":15},"value":"","parent":null,"children":[{"krate":0,"index":2239},{"krate":0,"index":2240},{"krate":0,"index":2241}],"docs":"","sig":null,"attributes":[]},{"id":193,"kind":"Direct","span":{"file_name":"/Users/shelwitz/.cargo/registry/src/github.com-1ecc6299db9ec823/bio-0.39.0/src/pattern_matching/pssm/protmotif.rs","byte_start":656365,"byte_end":656374,"line_start":84,"line_end":84,"column_start":16,"column_end":25},"value":"","parent":null,"children":[{"krate":0,"index":2245},{"krate":0,"index":2247},{"krate":0,"index":2248},{"krate":0,"index":2249},{"krate":0,"index":2250},{"krate":0,"index":2251},{"krate":0,"index":2252},{"krate":0,"index":2253},{"krate":0,"index":2254},{"krate":0,"index":2255}],"docs":"","sig":null,"attributes":[]},{"id":194,"kind":"Direct","span":{"file_name":"/Users/shelwitz/.cargo/registry/src/github.com-1ecc6299db9ec823/bio-0.39.0/src/pattern_matching/pssm/protmotif.rs","byte_start":658525,"byte_end":658534,"line_start":145,"line_end":145,"column_start":28,"column_end":37},"value":"","parent":null,"children":[{"krate":0,"index":2259}],"docs":"","sig":null,"attributes":[]},{"id":195,"kind":"Direct","span":{"file_name":"/Users/shelwitz/.cargo/registry/src/github.com-1ecc6299db9ec823/bio-0.39.0/src/pattern_matching/pssm/mod.rs","byte_start":635106,"byte_end":635115,"line_start":64,"line_end":64,"column_start":18,"column_end":27},"value":"","parent":null,"children":[{"krate":0,"index":2277}],"docs":"","sig":null,"attributes":[]},{"id":196,"kind":"Inherent","span":{"file_name":"/Users/shelwitz/.cargo/registry/src/github.com-1ecc6299db9ec823/bio-0.39.0/src/pattern_matching/shift_and.rs","byte_start":661961,"byte_end":661969,"line_start":31,"line_end":31,"column_start":6,"column_end":14},"value":"","parent":null,"children":[{"krate":0,"index":2321},{"krate":0,"index":2324}],"docs":"","sig":null,"attributes":[]},{"id":197,"kind":"Direct","span":{"file_name":"/Users/shelwitz/.cargo/registry/src/github.com-1ecc6299db9ec823/bio-0.39.0/src/pattern_matching/shift_and.rs","byte_start":663462,"byte_end":663469,"line_start":91,"line_end":91,"column_start":29,"column_end":36},"value":"","parent":null,"children":[{"krate":0,"index":2343},{"krate":0,"index":2344}],"docs":"","sig":null,"attributes":[]},{"id":198,"kind":"Inherent","span":{"file_name":"/Users/shelwitz/.cargo/registry/src/github.com-1ecc6299db9ec823/bio-0.39.0/src/pattern_matching/ukkonen.rs","byte_start":666178,"byte_end":666185,"line_start":49,"line_end":49,"column_start":9,"column_end":16},"value":"","parent":null,"children":[{"krate":0,"index":2369},{"krate":0,"index":2371}],"docs":"","sig":null,"attributes":[]},{"id":199,"kind":"Direct","span":{"file_name":"/Users/shelwitz/.cargo/registry/src/github.com-1ecc6299db9ec823/bio-0.39.0/src/pattern_matching/ukkonen.rs","byte_start":667596,"byte_end":667603,"line_start":105,"line_end":105,"column_start":32,"column_end":39},"value":"","parent":null,"children":[{"krate":0,"index":2391},{"krate":0,"index":2392}],"docs":"","sig":null,"attributes":[]},{"id":200,"kind":"Inherent","span":{"file_name":"/Users/shelwitz/.cargo/registry/src/github.com-1ecc6299db9ec823/bio-0.39.0/src/seq_analysis/orf.rs","byte_start":699550,"byte_end":699556,"line_start":49,"line_end":49,"column_start":6,"column_end":12},"value":"","parent":null,"children":[{"krate":0,"index":2454},{"krate":0,"index":2462}],"docs":"","sig":null,"attributes":[]},{"id":201,"kind":"Inherent","span":{"file_name":"/Users/shelwitz/.cargo/registry/src/github.com-1ecc6299db9ec823/bio-0.39.0/src/seq_analysis/orf.rs","byte_start":700950,"byte_end":700955,"line_start":100,"line_end":100,"column_start":6,"column_end":11},"value":"","parent":null,"children":[{"krate":0,"index":2470}],"docs":"","sig":null,"attributes":[]},{"id":202,"kind":"Direct","span":{"file_name":"/Users/shelwitz/.cargo/registry/src/github.com-1ecc6299db9ec823/bio-0.39.0/src/seq_analysis/orf.rs","byte_start":701395,"byte_end":701402,"line_start":121,"line_end":121,"column_start":29,"column_end":36},"value":"","parent":null,"children":[{"krate":0,"index":2482},{"krate":0,"index":2483}],"docs":"","sig":null,"attributes":[]},{"id":210,"kind":"Inherent","span":{"file_name":"/Users/shelwitz/.cargo/registry/src/github.com-1ecc6299db9ec823/bio-0.39.0/src/stats/bayesian/bayes_factors.rs","byte_start":708143,"byte_end":708154,"line_start":50,"line_end":50,"column_start":6,"column_end":17},"value":"","parent":null,"children":[{"krate":0,"index":2492},{"krate":0,"index":2493}],"docs":"","sig":null,"attributes":[]},{"id":213,"kind":"Inherent","span":{"file_name":"/Users/shelwitz/.cargo/registry/src/github.com-1ecc6299db9ec823/bio-0.39.0/src/stats/bayesian/model.rs","byte_start":711310,"byte_end":711315,"line_start":76,"line_end":76,"column_start":55,"column_end":60},"value":"","parent":null,"children":[{"krate":0,"index":2540},{"krate":0,"index":2541},{"krate":0,"index":2542},{"krate":0,"index":2546}],"docs":"","sig":null,"attributes":[]},{"id":214,"kind":"Inherent","span":{"file_name":"/Users/shelwitz/.cargo/registry/src/github.com-1ecc6299db9ec823/bio-0.39.0/src/stats/bayesian/model.rs","byte_start":715057,"byte_end":715070,"line_start":195,"line_end":195,"column_start":29,"column_end":42},"value":"","parent":null,"children":[{"krate":0,"index":2565},{"krate":0,"index":2567},{"krate":0,"index":2568},{"krate":0,"index":2571}],"docs":"","sig":null,"attributes":[]},{"id":215,"kind":"Inherent","span":{"file_name":"/Users/shelwitz/.cargo/registry/src/github.com-1ecc6299db9ec823/bio-0.39.0/src/stats/bayesian/model.rs","byte_start":716040,"byte_end":716053,"line_start":227,"line_end":227,"column_start":22,"column_end":35},"value":"","parent":null,"children":[{"krate":0,"index":2577}],"docs":"","sig":null,"attributes":[]},{"id":219,"kind":"Inherent","span":{"file_name":"/Users/shelwitz/.cargo/registry/src/github.com-1ecc6299db9ec823/bio-0.39.0/src/stats/hmm/mod.rs","byte_start":722648,"byte_end":722657,"line_start":122,"line_end":122,"column_start":6,"column_end":15},"value":"","parent":null,"children":[{"krate":0,"index":2659}],"docs":"","sig":null,"attributes":[]},{"id":220,"kind":"Direct","span":{"file_name":"/Users/shelwitz/.cargo/registry/src/github.com-1ecc6299db9ec823/bio-0.39.0/src/stats/hmm/mod.rs","byte_start":722826,"byte_end":722835,"line_start":132,"line_end":132,"column_start":19,"column_end":28},"value":"","parent":null,"children":[{"krate":0,"index":2661},{"krate":0,"index":2662}],"docs":"","sig":null,"attributes":[]},{"id":221,"kind":"Inherent","span":{"file_name":"/Users/shelwitz/.cargo/registry/src/github.com-1ecc6299db9ec823/bio-0.39.0/src/stats/hmm/mod.rs","byte_start":723317,"byte_end":723332,"line_start":155,"line_end":155,"column_start":6,"column_end":21},"value":"","parent":null,"children":[{"krate":0,"index":2664}],"docs":"","sig":null,"attributes":[]},{"id":222,"kind":"Inherent","span":{"file_name":"/Users/shelwitz/.cargo/registry/src/github.com-1ecc6299db9ec823/bio-0.39.0/src/stats/hmm/mod.rs","byte_start":723586,"byte_end":723605,"line_start":169,"line_end":169,"column_start":6,"column_end":25},"value":"","parent":null,"children":[{"krate":0,"index":2670}],"docs":"","sig":null,"attributes":[]},{"id":223,"kind":"Direct","span":{"file_name":"/Users/shelwitz/.cargo/registry/src/github.com-1ecc6299db9ec823/bio-0.39.0/src/stats/hmm/mod.rs","byte_start":723798,"byte_end":723817,"line_start":180,"line_end":180,"column_start":19,"column_end":38},"value":"","parent":null,"children":[{"krate":0,"index":2672},{"krate":0,"index":2673}],"docs":"","sig":null,"attributes":[]},{"id":224,"kind":"Inherent","span":{"file_name":"/Users/shelwitz/.cargo/registry/src/github.com-1ecc6299db9ec823/bio-0.39.0/src/stats/hmm/mod.rs","byte_start":744616,"byte_end":744621,"line_start":711,"line_end":711,"column_start":10,"column_end":15},"value":"","parent":null,"children":[{"krate":0,"index":2731},{"krate":0,"index":2732},{"krate":0,"index":2736}],"docs":"","sig":null,"attributes":[]},{"id":225,"kind":"Direct","span":{"file_name":"/Users/shelwitz/.cargo/registry/src/github.com-1ecc6299db9ec823/bio-0.39.0/src/stats/hmm/mod.rs","byte_start":746671,"byte_end":746676,"line_start":769,"line_end":769,"column_start":34,"column_end":39},"value":"","parent":null,"children":[{"krate":0,"index":2741},{"krate":0,"index":2742},{"krate":0,"index":2743},{"krate":0,"index":2744},{"krate":0,"index":2745},{"krate":0,"index":2746},{"krate":0,"index":2747}],"docs":"","sig":null,"attributes":[]},{"id":226,"kind":"Inherent","span":{"file_name":"/Users/shelwitz/.cargo/registry/src/github.com-1ecc6299db9ec823/bio-0.39.0/src/stats/hmm/mod.rs","byte_start":749318,"byte_end":749323,"line_start":839,"line_end":839,"column_start":10,"column_end":15},"value":"","parent":null,"children":[{"krate":0,"index":2758},{"krate":0,"index":2759},{"krate":0,"index":2765}],"docs":"","sig":null,"attributes":[]},{"id":227,"kind":"Direct","span":{"file_name":"/Users/shelwitz/.cargo/registry/src/github.com-1ecc6299db9ec823/bio-0.39.0/src/stats/hmm/mod.rs","byte_start":752840,"byte_end":752845,"line_start":940,"line_end":940,"column_start":34,"column_end":39},"value":"","parent":null,"children":[{"krate":0,"index":2772},{"krate":0,"index":2773},{"krate":0,"index":2774},{"krate":0,"index":2775},{"krate":0,"index":2776},{"krate":0,"index":2777},{"krate":0,"index":2778},{"krate":0,"index":2779}],"docs":"","sig":null,"attributes":[]},{"id":228,"kind":"Direct","span":{"file_name":"/Users/shelwitz/.cargo/registry/src/github.com-1ecc6299db9ec823/bio-0.39.0/src/stats/hmm/mod.rs","byte_start":754166,"byte_end":754171,"line_start":986,"line_end":986,"column_start":38,"column_end":43},"value":"","parent":null,"children":[{"krate":0,"index":2781},{"krate":0,"index":2782}],"docs":"","sig":null,"attributes":[]},{"id":229,"kind":"Inherent","span":{"file_name":"/Users/shelwitz/.cargo/registry/src/github.com-1ecc6299db9ec823/bio-0.39.0/src/stats/hmm/mod.rs","byte_start":759335,"byte_end":759340,"line_start":1125,"line_end":1125,"column_start":38,"column_end":43},"value":"","parent":null,"children":[{"krate":0,"index":2799},{"krate":0,"index":2800},{"krate":0,"index":2803}],"docs":"","sig":null,"attributes":[]},{"id":230,"kind":"Direct","span":{"file_name":"/Users/shelwitz/.cargo/registry/src/github.com-1ecc6299db9ec823/bio-0.39.0/src/stats/hmm/mod.rs","byte_start":761347,"byte_end":761352,"line_start":1183,"line_end":1183,"column_start":60,"column_end":65},"value":"","parent":null,"children":[{"krate":0,"index":2808},{"krate":0,"index":2809},{"krate":0,"index":2810},{"krate":0,"index":2811},{"krate":0,"index":2812},{"krate":0,"index":2813},{"krate":0,"index":2814}],"docs":"","sig":null,"attributes":[]},{"id":232,"kind":"Inherent","span":{"file_name":"/Users/shelwitz/.cargo/registry/src/github.com-1ecc6299db9ec823/bio-0.39.0/src/stats/pairhmm/homopolypairhmm.rs","byte_start":789425,"byte_end":789430,"line_start":105,"line_end":105,"column_start":6,"column_end":11},"value":"","parent":null,"children":[{"krate":0,"index":2889}],"docs":"","sig":null,"attributes":[]},{"id":233,"kind":"Direct","span":{"file_name":"/Users/shelwitz/.cargo/registry/src/github.com-1ecc6299db9ec823/bio-0.39.0/src/stats/pairhmm/homopolypairhmm.rs","byte_start":790365,"byte_end":790370,"line_start":129,"line_end":129,"column_start":14,"column_end":19},"value":"","parent":null,"children":[{"krate":0,"index":2899},{"krate":0,"index":2900}],"docs":"","sig":null,"attributes":[]},{"id":234,"kind":"Inherent","span":{"file_name":"/Users/shelwitz/.cargo/registry/src/github.com-1ecc6299db9ec823/bio-0.39.0/src/stats/pairhmm/homopolypairhmm.rs","byte_start":791860,"byte_end":791875,"line_start":178,"line_end":178,"column_start":6,"column_end":21},"value":"","parent":null,"children":[{"krate":0,"index":2909},{"krate":0,"index":2912}],"docs":"","sig":null,"attributes":[]},{"id":235,"kind":"Inherent","span":{"file_name":"/Users/shelwitz/.cargo/registry/src/github.com-1ecc6299db9ec823/bio-0.39.0/src/stats/pairhmm/pairhmm.rs","byte_start":825850,"byte_end":825857,"line_start":70,"line_end":70,"column_start":6,"column_end":13},"value":"","parent":null,"children":[{"krate":0,"index":2993},{"krate":0,"index":2995}],"docs":"","sig":null,"attributes":[]},{"id":236,"kind":"Inherent","span":{"file_name":"/Users/shelwitz/.cargo/registry/src/github.com-1ecc6299db9ec823/bio-0.39.0/src/stats/pairhmm/mod.rs","byte_start":783731,"byte_end":783741,"line_start":185,"line_end":185,"column_start":6,"column_end":16},"value":"","parent":null,"children":[{"krate":0,"index":3017},{"krate":0,"index":3018}],"docs":"","sig":null,"attributes":[]},{"id":239,"kind":"Inherent","span":{"file_name":"/Users/shelwitz/.cargo/registry/src/github.com-1ecc6299db9ec823/bio-0.39.0/src/stats/probs/cdf.rs","byte_start":864301,"byte_end":864306,"line_start":117,"line_end":117,"column_start":14,"column_end":19},"value":"","parent":null,"children":[{"krate":0,"index":3044}],"docs":"","sig":null,"attributes":[]},{"id":242,"kind":"Inherent","span":{"file_name":"/Users/shelwitz/.cargo/registry/src/github.com-1ecc6299db9ec823/bio-0.39.0/src/stats/probs/cdf.rs","byte_start":865232,"byte_end":865235,"line_start":144,"line_end":144,"column_start":14,"column_end":17},"value":"","parent":null,"children":[{"krate":0,"index":3047},{"krate":0,"index":3050},{"krate":0,"index":3052},{"krate":0,"index":3053},{"krate":0,"index":3054},{"krate":0,"index":3055},{"krate":0,"index":3056},{"krate":0,"index":3060},{"krate":0,"index":3062},{"krate":0,"index":3064},{"krate":0,"index":3066},{"krate":0,"index":3067},{"krate":0,"index":3072},{"krate":0,"index":3073}],"docs":"","sig":null,"attributes":[]},{"id":243,"kind":"Inherent","span":{"file_name":"/Users/shelwitz/.cargo/registry/src/github.com-1ecc6299db9ec823/bio-0.39.0/src/stats/probs/cdf.rs","byte_start":872834,"byte_end":872837,"line_start":376,"line_end":376,"column_start":22,"column_end":25},"value":"","parent":null,"children":[{"krate":0,"index":3076},{"krate":0,"index":3079},{"krate":0,"index":3082}],"docs":"","sig":null,"attributes":[]},{"id":249,"kind":"Inherent","span":{"file_name":"/Users/shelwitz/.cargo/registry/src/github.com-1ecc6299db9ec823/bio-0.39.0/src/stats/probs/mod.rs","byte_start":845818,"byte_end":845822,"line_start":79,"line_end":79,"column_start":6,"column_end":10},"value":"","parent":null,"children":[{"krate":0,"index":3151}],"docs":"","sig":null,"attributes":[]},{"id":256,"kind":"Inherent","span":{"file_name":"/Users/shelwitz/.cargo/registry/src/github.com-1ecc6299db9ec823/bio-0.39.0/src/stats/probs/mod.rs","byte_start":848155,"byte_end":848162,"line_start":172,"line_end":172,"column_start":6,"column_end":13},"value":"","parent":null,"children":[{"krate":0,"index":3157},{"krate":0,"index":3158},{"krate":0,"index":3159},{"krate":0,"index":3160},{"krate":0,"index":3161},{"krate":0,"index":3162},{"krate":0,"index":3164},{"krate":0,"index":3165},{"krate":0,"index":3166},{"krate":0,"index":3168},{"krate":0,"index":3172},{"krate":0,"index":3176},{"krate":0,"index":3180}],"docs":"","sig":null,"attributes":[]},{"id":257,"kind":"Direct","span":{"file_name":"/Users/shelwitz/.cargo/registry/src/github.com-1ecc6299db9ec823/bio-0.39.0/src/stats/probs/mod.rs","byte_start":855129,"byte_end":855136,"line_start":373,"line_end":373,"column_start":37,"column_end":44},"value":"","parent":null,"children":[{"krate":0,"index":3183}],"docs":"","sig":null,"attributes":[]},{"id":258,"kind":"Direct","span":{"file_name":"/Users/shelwitz/.cargo/registry/src/github.com-1ecc6299db9ec823/bio-0.39.0/src/stats/probs/mod.rs","byte_start":855290,"byte_end":855297,"line_start":379,"line_end":379,"column_start":33,"column_end":40},"value":"","parent":null,"children":[{"krate":0,"index":3188}],"docs":"","sig":null,"attributes":[]},{"id":259,"kind":"Direct","span":{"file_name":"/Users/shelwitz/.cargo/registry/src/github.com-1ecc6299db9ec823/bio-0.39.0/src/stats/probs/mod.rs","byte_start":855433,"byte_end":855440,"line_start":385,"line_end":385,"column_start":20,"column_end":27},"value":"","parent":null,"children":[{"krate":0,"index":3192}],"docs":"","sig":null,"attributes":[]},{"id":260,"kind":"Direct","span":{"file_name":"/Users/shelwitz/.cargo/registry/src/github.com-1ecc6299db9ec823/bio-0.39.0/src/stats/probs/mod.rs","byte_start":855549,"byte_end":855556,"line_start":391,"line_end":391,"column_start":20,"column_end":27},"value":"","parent":null,"children":[{"krate":0,"index":3194}],"docs":"","sig":null,"attributes":[]},{"id":261,"kind":"Direct","span":{"file_name":"/Users/shelwitz/.cargo/registry/src/github.com-1ecc6299db9ec823/bio-0.39.0/src/stats/probs/mod.rs","byte_start":855673,"byte_end":855680,"line_start":397,"line_end":397,"column_start":28,"column_end":35},"value":"","parent":null,"children":[{"krate":0,"index":3196}],"docs":"","sig":null,"attributes":[]},{"id":262,"kind":"Direct","span":{"file_name":"/Users/shelwitz/.cargo/registry/src/github.com-1ecc6299db9ec823/bio-0.39.0/src/stats/probs/mod.rs","byte_start":855776,"byte_end":855782,"line_start":403,"line_end":403,"column_start":24,"column_end":30},"value":"","parent":null,"children":[{"krate":0,"index":3198}],"docs":"","sig":null,"attributes":[]},{"id":263,"kind":"Direct","span":{"file_name":"/Users/shelwitz/.cargo/registry/src/github.com-1ecc6299db9ec823/bio-0.39.0/src/stats/probs/mod.rs","byte_start":855888,"byte_end":855892,"line_start":409,"line_end":409,"column_start":24,"column_end":28},"value":"","parent":null,"children":[{"krate":0,"index":3200}],"docs":"","sig":null,"attributes":[]},{"id":264,"kind":"Direct","span":{"file_name":"/Users/shelwitz/.cargo/registry/src/github.com-1ecc6299db9ec823/bio-0.39.0/src/stats/probs/mod.rs","byte_start":855989,"byte_end":855993,"line_start":415,"line_end":415,"column_start":26,"column_end":30},"value":"","parent":null,"children":[{"krate":0,"index":3202}],"docs":"","sig":null,"attributes":[]},{"id":265,"kind":"Direct","span":{"file_name":"/Users/shelwitz/.cargo/registry/src/github.com-1ecc6299db9ec823/bio-0.39.0/src/stats/probs/mod.rs","byte_start":856100,"byte_end":856107,"line_start":421,"line_end":421,"column_start":21,"column_end":28},"value":"","parent":null,"children":[{"krate":0,"index":3204}],"docs":"","sig":null,"attributes":[]},{"id":266,"kind":"Direct","span":{"file_name":"/Users/shelwitz/.cargo/registry/src/github.com-1ecc6299db9ec823/bio-0.39.0/src/stats/probs/mod.rs","byte_start":856202,"byte_end":856209,"line_start":427,"line_end":427,"column_start":26,"column_end":33},"value":"","parent":null,"children":[{"krate":0,"index":3206}],"docs":"","sig":null,"attributes":[]},{"id":267,"kind":"Direct","span":{"file_name":"/Users/shelwitz/.cargo/registry/src/github.com-1ecc6299db9ec823/bio-0.39.0/src/stats/probs/mod.rs","byte_start":856322,"byte_end":856331,"line_start":433,"line_end":433,"column_start":21,"column_end":30},"value":"","parent":null,"children":[{"krate":0,"index":3208}],"docs":"","sig":null,"attributes":[]},{"id":268,"kind":"Direct","span":{"file_name":"/Users/shelwitz/.cargo/registry/src/github.com-1ecc6299db9ec823/bio-0.39.0/src/stats/probs/mod.rs","byte_start":856439,"byte_end":856448,"line_start":439,"line_end":439,"column_start":24,"column_end":33},"value":"","parent":null,"children":[{"krate":0,"index":3210}],"docs":"","sig":null,"attributes":[]},{"id":269,"kind":"Direct","span":{"file_name":"/Users/shelwitz/.cargo/registry/src/github.com-1ecc6299db9ec823/bio-0.39.0/src/stats/probs/mod.rs","byte_start":856560,"byte_end":856567,"line_start":445,"line_end":445,"column_start":18,"column_end":25},"value":"","parent":null,"children":[{"krate":0,"index":3212}],"docs":"","sig":null,"attributes":[]},{"id":270,"kind":"Direct","span":{"file_name":"/Users/shelwitz/.cargo/registry/src/github.com-1ecc6299db9ec823/bio-0.39.0/src/stats/probs/mod.rs","byte_start":856653,"byte_end":856662,"line_start":451,"line_end":451,"column_start":18,"column_end":27},"value":"","parent":null,"children":[{"krate":0,"index":3214}],"docs":"","sig":null,"attributes":[]},{"id":271,"kind":"Direct","span":{"file_name":"/Users/shelwitz/.cargo/registry/src/github.com-1ecc6299db9ec823/bio-0.39.0/src/stats/probs/mod.rs","byte_start":856755,"byte_end":856759,"line_start":457,"line_end":457,"column_start":15,"column_end":19},"value":"","parent":null,"children":[{"krate":0,"index":3216},{"krate":0,"index":3217}],"docs":"","sig":null,"attributes":[]},{"id":272,"kind":"Direct","span":{"file_name":"/Users/shelwitz/.cargo/registry/src/github.com-1ecc6299db9ec823/bio-0.39.0/src/stats/probs/mod.rs","byte_start":856888,"byte_end":856895,"line_start":467,"line_end":467,"column_start":15,"column_end":22},"value":"","parent":null,"children":[{"krate":0,"index":3219},{"krate":0,"index":3220}],"docs":"","sig":null,"attributes":[]},{"id":273,"kind":"Direct","span":{"file_name":"/Users/shelwitz/.cargo/registry/src/github.com-1ecc6299db9ec823/bio-0.39.0/src/stats/probs/mod.rs","byte_start":857061,"byte_end":857070,"line_start":477,"line_end":477,"column_start":15,"column_end":24},"value":"","parent":null,"children":[{"krate":0,"index":3222},{"krate":0,"index":3223}],"docs":"","sig":null,"attributes":[]},{"id":279,"kind":"Inherent","span":{"file_name":"/Users/shelwitz/.cargo/registry/src/github.com-1ecc6299db9ec823/bio-0.39.0/src/utils/interval/mod.rs","byte_start":881445,"byte_end":881453,"line_start":36,"line_end":36,"column_start":22,"column_end":30},"value":"","parent":null,"children":[{"krate":0,"index":3301}],"docs":"","sig":null,"attributes":[]},{"id":280,"kind":"Direct","span":{"file_name":"/Users/shelwitz/.cargo/registry/src/github.com-1ecc6299db9ec823/bio-0.39.0/src/utils/interval/mod.rs","byte_start":881882,"byte_end":881890,"line_start":49,"line_end":49,"column_start":41,"column_end":49},"value":"","parent":null,"children":[{"krate":0,"index":3304}],"docs":"","sig":null,"attributes":[]},{"id":281,"kind":"Direct","span":{"file_name":"/Users/shelwitz/.cargo/registry/src/github.com-1ecc6299db9ec823/bio-0.39.0/src/utils/interval/mod.rs","byte_start":882294,"byte_end":882302,"line_start":60,"line_end":60,"column_start":49,"column_end":57},"value":"","parent":null,"children":[{"krate":0,"index":3308}],"docs":"","sig":null,"attributes":[]},{"id":282,"kind":"Direct","span":{"file_name":"/Users/shelwitz/.cargo/registry/src/github.com-1ecc6299db9ec823/bio-0.39.0/src/utils/interval/mod.rs","byte_start":882666,"byte_end":882674,"line_start":70,"line_end":70,"column_start":32,"column_end":40},"value":"","parent":null,"children":[{"krate":0,"index":3311},{"krate":0,"index":3312}],"docs":"","sig":null,"attributes":[]}],"refs":[{"kind":"Mod","span":{"file_name":"/Users/shelwitz/.cargo/registry/src/github.com-1ecc6299db9ec823/bio-0.39.0/src/lib.rs","byte_start":10021,"byte_end":10030,"line_start":255,"line_end":255,"column_start":9,"column_end":18},"ref_id":{"krate":0,"index":10}},{"kind":"Mod","span":{"file_name":"/Users/shelwitz/.cargo/registry/src/github.com-1ecc6299db9ec823/bio-0.39.0/src/alignment/mod.rs","byte_start":10484,"byte_end":10492,"line_start":8,"line_end":8,"column_start":9,"column_end":17},"ref_id":{"krate":0,"index":11}},{"kind":"Mod","span":{"file_name":"/Users/shelwitz/.cargo/registry/src/github.com-1ecc6299db9ec823/bio-0.39.0/src/alignment/mod.rs","byte_start":10502,"byte_end":10510,"line_start":9,"line_end":9,"column_start":9,"column_end":17},"ref_id":{"krate":0,"index":27}},{"kind":"Mod","span":{"file_name":"/Users/shelwitz/.cargo/registry/src/github.com-1ecc6299db9ec823/bio-0.39.0/src/alignment/pairwise/mod.rs","byte_start":25814,"byte_end":25820,"line_start":160,"line_end":160,"column_start":9,"column_end":15},"ref_id":{"krate":0,"index":50}},{"kind":"Mod","span":{"file_name":"/Users/shelwitz/.cargo/registry/src/github.com-1ecc6299db9ec823/bio-0.39.0/src/alignment/mod.rs","byte_start":10520,"byte_end":10523,"line_start":10,"line_end":10,"column_start":9,"column_end":12},"ref_id":{"krate":0,"index":231}},{"kind":"Mod","span":{"file_name":"/Users/shelwitz/.cargo/registry/src/github.com-1ecc6299db9ec823/bio-0.39.0/src/alignment/mod.rs","byte_start":10533,"byte_end":10539,"line_start":11,"line_end":11,"column_start":9,"column_end":15},"ref_id":{"krate":0,"index":313}},{"kind":"Mod","span":{"file_name":"/Users/shelwitz/.cargo/registry/src/github.com-1ecc6299db9ec823/bio-0.39.0/src/lib.rs","byte_start":10040,"byte_end":10049,"line_start":256,"line_end":256,"column_start":9,"column_end":18},"ref_id":{"krate":0,"index":347}},{"kind":"Mod","span":{"file_name":"/Users/shelwitz/.cargo/registry/src/github.com-1ecc6299db9ec823/bio-0.39.0/src/alphabets/mod.rs","byte_start":213609,"byte_end":213612,"line_start":23,"line_end":23,"column_start":9,"column_end":12},"ref_id":{"krate":0,"index":360}},{"kind":"Mod","span":{"file_name":"/Users/shelwitz/.cargo/registry/src/github.com-1ecc6299db9ec823/bio-0.39.0/src/alphabets/mod.rs","byte_start":213622,"byte_end":213629,"line_start":24,"line_end":24,"column_start":9,"column_end":16},"ref_id":{"krate":0,"index":375}},{"kind":"Mod","span":{"file_name":"/Users/shelwitz/.cargo/registry/src/github.com-1ecc6299db9ec823/bio-0.39.0/src/alphabets/mod.rs","byte_start":213639,"byte_end":213642,"line_start":25,"line_end":25,"column_start":9,"column_end":12},"ref_id":{"krate":0,"index":381}},{"kind":"Mod","span":{"file_name":"/Users/shelwitz/.cargo/registry/src/github.com-1ecc6299db9ec823/bio-0.39.0/src/lib.rs","byte_start":10059,"byte_end":10074,"line_start":257,"line_end":257,"column_start":9,"column_end":24},"ref_id":{"krate":0,"index":448}},{"kind":"Mod","span":{"file_name":"/Users/shelwitz/.cargo/registry/src/github.com-1ecc6299db9ec823/bio-0.39.0/src/data_structures/mod.rs","byte_start":233784,"byte_end":233793,"line_start":8,"line_end":8,"column_start":9,"column_end":18},"ref_id":{"krate":0,"index":449}},{"kind":"Mod","span":{"file_name":"/Users/shelwitz/.cargo/registry/src/github.com-1ecc6299db9ec823/bio-0.39.0/src/data_structures/mod.rs","byte_start":233803,"byte_end":233811,"line_start":9,"line_end":9,"column_start":9,"column_end":17},"ref_id":{"krate":0,"index":508}},{"kind":"Mod","span":{"file_name":"/Users/shelwitz/.cargo/registry/src/github.com-1ecc6299db9ec823/bio-0.39.0/src/data_structures/mod.rs","byte_start":233821,"byte_end":233827,"line_start":10,"line_end":10,"column_start":9,"column_end":15},"ref_id":{"krate":0,"index":546}},{"kind":"Mod","span":{"file_name":"/Users/shelwitz/.cargo/registry/src/github.com-1ecc6299db9ec823/bio-0.39.0/src/data_structures/mod.rs","byte_start":233837,"byte_end":233840,"line_start":11,"line_end":11,"column_start":9,"column_end":12},"ref_id":{"krate":0,"index":572}},{"kind":"Mod","span":{"file_name":"/Users/shelwitz/.cargo/registry/src/github.com-1ecc6299db9ec823/bio-0.39.0/src/data_structures/mod.rs","byte_start":233850,"byte_end":233857,"line_start":12,"line_end":12,"column_start":9,"column_end":16},"ref_id":{"krate":0,"index":597}},{"kind":"Mod","span":{"file_name":"/Users/shelwitz/.cargo/registry/src/github.com-1ecc6299db9ec823/bio-0.39.0/src/data_structures/mod.rs","byte_start":233867,"byte_end":233886,"line_start":13,"line_end":13,"column_start":9,"column_end":28},"ref_id":{"krate":0,"index":673}},{"kind":"Mod","span":{"file_name":"/Users/shelwitz/.cargo/registry/src/github.com-1ecc6299db9ec823/bio-0.39.0/src/data_structures/mod.rs","byte_start":233896,"byte_end":233909,"line_start":14,"line_end":14,"column_start":9,"column_end":22},"ref_id":{"krate":0,"index":688}},{"kind":"Mod","span":{"file_name":"/Users/shelwitz/.cargo/registry/src/github.com-1ecc6299db9ec823/bio-0.39.0/src/data_structures/mod.rs","byte_start":233919,"byte_end":233930,"line_start":15,"line_end":15,"column_start":9,"column_end":20},"ref_id":{"krate":0,"index":854}},{"kind":"Mod","span":{"file_name":"/Users/shelwitz/.cargo/registry/src/github.com-1ecc6299db9ec823/bio-0.39.0/src/data_structures/mod.rs","byte_start":233940,"byte_end":233951,"line_start":16,"line_end":16,"column_start":9,"column_end":20},"ref_id":{"krate":0,"index":896}},{"kind":"Mod","span":{"file_name":"/Users/shelwitz/.cargo/registry/src/github.com-1ecc6299db9ec823/bio-0.39.0/src/data_structures/mod.rs","byte_start":233961,"byte_end":233970,"line_start":17,"line_end":17,"column_start":9,"column_end":18},"ref_id":{"krate":0,"index":936}},{"kind":"Mod","span":{"file_name":"/Users/shelwitz/.cargo/registry/src/github.com-1ecc6299db9ec823/bio-0.39.0/src/data_structures/mod.rs","byte_start":233980,"byte_end":233992,"line_start":18,"line_end":18,"column_start":9,"column_end":21},"ref_id":{"krate":0,"index":999}},{"kind":"Mod","span":{"file_name":"/Users/shelwitz/.cargo/registry/src/github.com-1ecc6299db9ec823/bio-0.39.0/src/data_structures/mod.rs","byte_start":234002,"byte_end":234016,"line_start":19,"line_end":19,"column_start":9,"column_end":23},"ref_id":{"krate":0,"index":1151}},{"kind":"Mod","span":{"file_name":"/Users/shelwitz/.cargo/registry/src/github.com-1ecc6299db9ec823/bio-0.39.0/src/lib.rs","byte_start":10084,"byte_end":10086,"line_start":258,"line_end":258,"column_start":9,"column_end":11},"ref_id":{"krate":0,"index":1169}},{"kind":"Mod","span":{"file_name":"/Users/shelwitz/.cargo/registry/src/github.com-1ecc6299db9ec823/bio-0.39.0/src/io/mod.rs","byte_start":413999,"byte_end":414002,"line_start":3,"line_end":3,"column_start":9,"column_end":12},"ref_id":{"krate":0,"index":1170}},{"kind":"Mod","span":{"file_name":"/Users/shelwitz/.cargo/registry/src/github.com-1ecc6299db9ec823/bio-0.39.0/src/io/mod.rs","byte_start":414012,"byte_end":414017,"line_start":4,"line_end":4,"column_start":9,"column_end":14},"ref_id":{"krate":0,"index":1258}},{"kind":"Mod","span":{"file_name":"/Users/shelwitz/.cargo/registry/src/github.com-1ecc6299db9ec823/bio-0.39.0/src/io/mod.rs","byte_start":414027,"byte_end":414032,"line_start":5,"line_end":5,"column_start":9,"column_end":14},"ref_id":{"krate":0,"index":1400}},{"kind":"Mod","span":{"file_name":"/Users/shelwitz/.cargo/registry/src/github.com-1ecc6299db9ec823/bio-0.39.0/src/io/mod.rs","byte_start":414042,"byte_end":414045,"line_start":6,"line_end":6,"column_start":9,"column_end":12},"ref_id":{"krate":0,"index":1491}},{"kind":"Mod","span":{"file_name":"/Users/shelwitz/.cargo/registry/src/github.com-1ecc6299db9ec823/bio-0.39.0/src/lib.rs","byte_start":10096,"byte_end":10112,"line_start":259,"line_end":259,"column_start":9,"column_end":25},"ref_id":{"krate":0,"index":1580}},{"kind":"Mod","span":{"file_name":"/Users/shelwitz/.cargo/registry/src/github.com-1ecc6299db9ec823/bio-0.39.0/src/pattern_matching/mod.rs","byte_start":538096,"byte_end":538100,"line_start":20,"line_end":20,"column_start":9,"column_end":13},"ref_id":{"krate":0,"index":1581}},{"kind":"Mod","span":{"file_name":"/Users/shelwitz/.cargo/registry/src/github.com-1ecc6299db9ec823/bio-0.39.0/src/pattern_matching/mod.rs","byte_start":538110,"byte_end":538113,"line_start":21,"line_end":21,"column_start":9,"column_end":12},"ref_id":{"krate":0,"index":1611}},{"kind":"Mod","span":{"file_name":"/Users/shelwitz/.cargo/registry/src/github.com-1ecc6299db9ec823/bio-0.39.0/src/pattern_matching/mod.rs","byte_start":538123,"byte_end":538131,"line_start":22,"line_end":22,"column_start":9,"column_end":17},"ref_id":{"krate":0,"index":1646}},{"kind":"Mod","span":{"file_name":"/Users/shelwitz/.cargo/registry/src/github.com-1ecc6299db9ec823/bio-0.39.0/src/pattern_matching/mod.rs","byte_start":538141,"byte_end":538144,"line_start":23,"line_end":23,"column_start":9,"column_end":12},"ref_id":{"krate":0,"index":1671}},{"kind":"Mod","span":{"file_name":"/Users/shelwitz/.cargo/registry/src/github.com-1ecc6299db9ec823/bio-0.39.0/src/pattern_matching/mod.rs","byte_start":538154,"byte_end":538159,"line_start":24,"line_end":24,"column_start":9,"column_end":14},"ref_id":{"krate":0,"index":1712}},{"kind":"Mod","span":{"file_name":"/Users/shelwitz/.cargo/registry/src/github.com-1ecc6299db9ec823/bio-0.39.0/src/pattern_matching/myers/mod.rs","byte_start":564566,"byte_end":564570,"line_start":238,"line_end":238,"column_start":9,"column_end":13},"ref_id":{"krate":0,"index":1825}},{"kind":"Mod","span":{"file_name":"/Users/shelwitz/.cargo/registry/src/github.com-1ecc6299db9ec823/bio-0.39.0/src/pattern_matching/mod.rs","byte_start":538169,"byte_end":538173,"line_start":25,"line_end":25,"column_start":9,"column_end":13},"ref_id":{"krate":0,"index":2165}},{"kind":"Mod","span":{"file_name":"/Users/shelwitz/.cargo/registry/src/github.com-1ecc6299db9ec823/bio-0.39.0/src/pattern_matching/pssm/mod.rs","byte_start":634551,"byte_end":634557,"line_start":42,"line_end":42,"column_start":9,"column_end":15},"ref_id":{"krate":0,"index":2216}},{"kind":"Mod","span":{"file_name":"/Users/shelwitz/.cargo/registry/src/github.com-1ecc6299db9ec823/bio-0.39.0/src/pattern_matching/mod.rs","byte_start":538183,"byte_end":538192,"line_start":26,"line_end":26,"column_start":9,"column_end":18},"ref_id":{"krate":0,"index":2308}},{"kind":"Mod","span":{"file_name":"/Users/shelwitz/.cargo/registry/src/github.com-1ecc6299db9ec823/bio-0.39.0/src/pattern_matching/mod.rs","byte_start":538202,"byte_end":538209,"line_start":27,"line_end":27,"column_start":9,"column_end":16},"ref_id":{"krate":0,"index":2345}},{"kind":"Mod","span":{"file_name":"/Users/shelwitz/.cargo/registry/src/github.com-1ecc6299db9ec823/bio-0.39.0/src/lib.rs","byte_start":10122,"byte_end":10128,"line_start":260,"line_end":260,"column_start":9,"column_end":15},"ref_id":{"krate":0,"index":2393}},{"kind":"Mod","span":{"file_name":"/Users/shelwitz/.cargo/registry/src/github.com-1ecc6299db9ec823/bio-0.39.0/src/scores/mod.rs","byte_start":670234,"byte_end":670242,"line_start":12,"line_end":12,"column_start":9,"column_end":17},"ref_id":{"krate":0,"index":2409}},{"kind":"Mod","span":{"file_name":"/Users/shelwitz/.cargo/registry/src/github.com-1ecc6299db9ec823/bio-0.39.0/src/scores/mod.rs","byte_start":670252,"byte_end":670258,"line_start":13,"line_end":13,"column_start":9,"column_end":15},"ref_id":{"krate":0,"index":2412}},{"kind":"Mod","span":{"file_name":"/Users/shelwitz/.cargo/registry/src/github.com-1ecc6299db9ec823/bio-0.39.0/src/scores/mod.rs","byte_start":670268,"byte_end":670274,"line_start":14,"line_end":14,"column_start":9,"column_end":15},"ref_id":{"krate":0,"index":2415}},{"kind":"Mod","span":{"file_name":"/Users/shelwitz/.cargo/registry/src/github.com-1ecc6299db9ec823/bio-0.39.0/src/scores/mod.rs","byte_start":670284,"byte_end":670290,"line_start":15,"line_end":15,"column_start":9,"column_end":15},"ref_id":{"krate":0,"index":2418}},{"kind":"Mod","span":{"file_name":"/Users/shelwitz/.cargo/registry/src/github.com-1ecc6299db9ec823/bio-0.39.0/src/scores/mod.rs","byte_start":670300,"byte_end":670305,"line_start":16,"line_end":16,"column_start":9,"column_end":14},"ref_id":{"krate":0,"index":2421}},{"kind":"Mod","span":{"file_name":"/Users/shelwitz/.cargo/registry/src/github.com-1ecc6299db9ec823/bio-0.39.0/src/lib.rs","byte_start":10138,"byte_end":10150,"line_start":261,"line_end":261,"column_start":9,"column_end":21},"ref_id":{"krate":0,"index":2424}},{"kind":"Mod","span":{"file_name":"/Users/shelwitz/.cargo/registry/src/github.com-1ecc6299db9ec823/bio-0.39.0/src/seq_analysis/mod.rs","byte_start":695491,"byte_end":695493,"line_start":8,"line_end":8,"column_start":9,"column_end":11},"ref_id":{"krate":0,"index":2425}},{"kind":"Mod","span":{"file_name":"/Users/shelwitz/.cargo/registry/src/github.com-1ecc6299db9ec823/bio-0.39.0/src/seq_analysis/mod.rs","byte_start":695503,"byte_end":695506,"line_start":9,"line_end":9,"column_start":9,"column_end":12},"ref_id":{"krate":0,"index":2439}},{"kind":"Mod","span":{"file_name":"/Users/shelwitz/.cargo/registry/src/github.com-1ecc6299db9ec823/bio-0.39.0/src/lib.rs","byte_start":10160,"byte_end":10165,"line_start":262,"line_end":262,"column_start":9,"column_end":14},"ref_id":{"krate":0,"index":2484}},{"kind":"Mod","span":{"file_name":"/Users/shelwitz/.cargo/registry/src/github.com-1ecc6299db9ec823/bio-0.39.0/src/stats/mod.rs","byte_start":704802,"byte_end":704810,"line_start":8,"line_end":8,"column_start":9,"column_end":17},"ref_id":{"krate":0,"index":2485}},{"kind":"Mod","span":{"file_name":"/Users/shelwitz/.cargo/registry/src/github.com-1ecc6299db9ec823/bio-0.39.0/src/stats/bayesian/mod.rs","byte_start":705188,"byte_end":705201,"line_start":8,"line_end":8,"column_start":9,"column_end":22},"ref_id":{"krate":0,"index":2486}},{"kind":"Mod","span":{"file_name":"/Users/shelwitz/.cargo/registry/src/github.com-1ecc6299db9ec823/bio-0.39.0/src/stats/bayesian/mod.rs","byte_start":705211,"byte_end":705216,"line_start":9,"line_end":9,"column_start":9,"column_end":14},"ref_id":{"krate":0,"index":2494}},{"kind":"Mod","span":{"file_name":"/Users/shelwitz/.cargo/registry/src/github.com-1ecc6299db9ec823/bio-0.39.0/src/stats/mod.rs","byte_start":704820,"byte_end":704833,"line_start":9,"line_end":9,"column_start":9,"column_end":22},"ref_id":{"krate":0,"index":2599}},{"kind":"Mod","span":{"file_name":"/Users/shelwitz/.cargo/registry/src/github.com-1ecc6299db9ec823/bio-0.39.0/src/stats/mod.rs","byte_start":704843,"byte_end":704846,"line_start":10,"line_end":10,"column_start":9,"column_end":12},"ref_id":{"krate":0,"index":2606}},{"kind":"Mod","span":{"file_name":"/Users/shelwitz/.cargo/registry/src/github.com-1ecc6299db9ec823/bio-0.39.0/src/stats/hmm/mod.rs","byte_start":721940,"byte_end":721946,"line_start":81,"line_end":81,"column_start":9,"column_end":15},"ref_id":{"krate":0,"index":2607}},{"kind":"Mod","span":{"file_name":"/Users/shelwitz/.cargo/registry/src/github.com-1ecc6299db9ec823/bio-0.39.0/src/stats/mod.rs","byte_start":704856,"byte_end":704863,"line_start":11,"line_end":11,"column_start":9,"column_end":16},"ref_id":{"krate":0,"index":2816}},{"kind":"Mod","span":{"file_name":"/Users/shelwitz/.cargo/registry/src/github.com-1ecc6299db9ec823/bio-0.39.0/src/stats/mod.rs","byte_start":704873,"byte_end":704878,"line_start":12,"line_end":12,"column_start":9,"column_end":14},"ref_id":{"krate":0,"index":3019}},{"kind":"Mod","span":{"file_name":"/Users/shelwitz/.cargo/registry/src/github.com-1ecc6299db9ec823/bio-0.39.0/src/stats/probs/mod.rs","byte_start":844129,"byte_end":844132,"line_start":9,"line_end":9,"column_start":9,"column_end":12},"ref_id":{"krate":0,"index":3020}},{"kind":"Mod","span":{"file_name":"/Users/shelwitz/.cargo/registry/src/github.com-1ecc6299db9ec823/bio-0.39.0/src/stats/probs/mod.rs","byte_start":844142,"byte_end":844148,"line_start":10,"line_end":10,"column_start":9,"column_end":15},"ref_id":{"krate":0,"index":3086}},{"kind":"Mod","span":{"file_name":"/Users/shelwitz/.cargo/registry/src/github.com-1ecc6299db9ec823/bio-0.39.0/src/lib.rs","byte_start":10175,"byte_end":10180,"line_start":263,"line_end":263,"column_start":9,"column_end":14},"ref_id":{"krate":0,"index":3234}}],"macro_refs":[],"relations":[{"span":{"file_name":"/Users/shelwitz/.cargo/registry/src/github.com-1ecc6299db9ec823/bio-0.39.0/src/alignment/pairwise/banded.rs","byte_start":84762,"byte_end":84769,"line_start":128,"line_end":128,"column_start":20,"column_end":27},"kind":{"Impl":{"id":0}},"from":{"krate":0,"index":89},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/Users/shelwitz/.cargo/registry/src/github.com-1ecc6299db9ec823/bio-0.39.0/src/alignment/pairwise/banded.rs","byte_start":118990,"byte_end":118994,"line_start":1045,"line_end":1045,"column_start":6,"column_end":10},"kind":{"Impl":{"id":1}},"from":{"krate":0,"index":3322},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/Users/shelwitz/.cargo/registry/src/github.com-1ecc6299db9ec823/bio-0.39.0/src/alignment/pairwise/mod.rs","byte_start":26420,"byte_end":26431,"line_start":180,"line_end":180,"column_start":6,"column_end":17},"kind":{"Impl":{"id":2}},"from":{"krate":0,"index":3330},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/Users/shelwitz/.cargo/registry/src/github.com-1ecc6299db9ec823/bio-0.39.0/src/alignment/pairwise/mod.rs","byte_start":27018,"byte_end":27029,"line_start":197,"line_end":197,"column_start":20,"column_end":31},"kind":{"Impl":{"id":3}},"from":{"krate":0,"index":3330},"to":{"krate":0,"index":150}},{"span":{"file_name":"/Users/shelwitz/.cargo/registry/src/github.com-1ecc6299db9ec823/bio-0.39.0/src/alignment/pairwise/mod.rs","byte_start":27383,"byte_end":27384,"line_start":210,"line_end":210,"column_start":23,"column_end":24},"kind":{"Impl":{"id":4}},"from":{"krate":0,"index":157},"to":{"krate":0,"index":150}},{"span":{"file_name":"/Users/shelwitz/.cargo/registry/src/github.com-1ecc6299db9ec823/bio-0.39.0/src/alignment/pairwise/mod.rs","byte_start":28024,"byte_end":28031,"line_start":236,"line_end":236,"column_start":6,"column_end":13},"kind":{"Impl":{"id":5}},"from":{"krate":0,"index":3337},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/Users/shelwitz/.cargo/registry/src/github.com-1ecc6299db9ec823/bio-0.39.0/src/alignment/pairwise/mod.rs","byte_start":29161,"byte_end":29168,"line_start":268,"line_end":268,"column_start":20,"column_end":27},"kind":{"Impl":{"id":6}},"from":{"krate":0,"index":3337},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/Users/shelwitz/.cargo/registry/src/github.com-1ecc6299db9ec823/bio-0.39.0/src/alignment/pairwise/mod.rs","byte_start":36419,"byte_end":36426,"line_start":471,"line_end":471,"column_start":20,"column_end":27},"kind":{"Impl":{"id":7}},"from":{"krate":0,"index":170},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/Users/shelwitz/.cargo/registry/src/github.com-1ecc6299db9ec823/bio-0.39.0/src/alignment/pairwise/mod.rs","byte_start":57229,"byte_end":57242,"line_start":1016,"line_end":1016,"column_start":18,"column_end":31},"kind":{"Impl":{"id":8}},"from":{"krate":0,"index":3353},"to":{"krate":2,"index":2831}},{"span":{"file_name":"/Users/shelwitz/.cargo/registry/src/github.com-1ecc6299db9ec823/bio-0.39.0/src/alignment/pairwise/mod.rs","byte_start":57982,"byte_end":57995,"line_start":1042,"line_end":1042,"column_start":6,"column_end":19},"kind":{"Impl":{"id":9}},"from":{"krate":0,"index":3353},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/Users/shelwitz/.cargo/registry/src/github.com-1ecc6299db9ec823/bio-0.39.0/src/alignment/pairwise/mod.rs","byte_start":59760,"byte_end":59769,"line_start":1115,"line_end":1115,"column_start":6,"column_end":15},"kind":{"Impl":{"id":10}},"from":{"krate":0,"index":220},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/Users/shelwitz/.cargo/registry/src/github.com-1ecc6299db9ec823/bio-0.39.0/src/alignment/poa.rs","byte_start":168304,"byte_end":168317,"line_start":75,"line_end":75,"column_start":14,"column_end":27},"kind":{"Impl":{"id":11}},"from":{"krate":0,"index":3372},"to":{"krate":2,"index":2540}},{"span":{"file_name":"/Users/shelwitz/.cargo/registry/src/github.com-1ecc6299db9ec823/bio-0.39.0/src/alignment/poa.rs","byte_start":168441,"byte_end":168454,"line_start":81,"line_end":81,"column_start":21,"column_end":34},"kind":{"Impl":{"id":12}},"from":{"krate":0,"index":3372},"to":{"krate":2,"index":2551}},{"span":{"file_name":"/Users/shelwitz/.cargo/registry/src/github.com-1ecc6299db9ec823/bio-0.39.0/src/alignment/poa.rs","byte_start":168586,"byte_end":168599,"line_start":87,"line_end":87,"column_start":20,"column_end":33},"kind":{"Impl":{"id":13}},"from":{"krate":0,"index":3372},"to":{"krate":2,"index":2504}},{"span":{"file_name":"/Users/shelwitz/.cargo/registry/src/github.com-1ecc6299db9ec823/bio-0.39.0/src/alignment/poa.rs","byte_start":168745,"byte_end":168758,"line_start":95,"line_end":95,"column_start":13,"column_end":26},"kind":{"Impl":{"id":14}},"from":{"krate":0,"index":3372},"to":{"krate":2,"index":2509}},{"span":{"file_name":"/Users/shelwitz/.cargo/registry/src/github.com-1ecc6299db9ec823/bio-0.39.0/src/alignment/poa.rs","byte_start":169026,"byte_end":169035,"line_start":107,"line_end":107,"column_start":6,"column_end":15},"kind":{"Impl":{"id":15}},"from":{"krate":0,"index":277},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/Users/shelwitz/.cargo/registry/src/github.com-1ecc6299db9ec823/bio-0.39.0/src/alignment/poa.rs","byte_start":172856,"byte_end":172863,"line_start":242,"line_end":242,"column_start":20,"column_end":27},"kind":{"Impl":{"id":16}},"from":{"krate":0,"index":290},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/Users/shelwitz/.cargo/registry/src/github.com-1ecc6299db9ec823/bio-0.39.0/src/alignment/poa.rs","byte_start":174096,"byte_end":174099,"line_start":286,"line_end":286,"column_start":20,"column_end":23},"kind":{"Impl":{"id":17}},"from":{"krate":0,"index":302},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/Users/shelwitz/.cargo/registry/src/github.com-1ecc6299db9ec823/bio-0.39.0/src/alignment/sparse.rs","byte_start":191235,"byte_end":191242,"line_start":152,"line_end":152,"column_start":6,"column_end":13},"kind":{"Impl":{"id":18}},"from":{"krate":0,"index":3392},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/Users/shelwitz/.cargo/registry/src/github.com-1ecc6299db9ec823/bio-0.39.0/src/alphabets/mod.rs","byte_start":213799,"byte_end":213807,"line_start":35,"line_end":35,"column_start":6,"column_end":14},"kind":{"Impl":{"id":19}},"from":{"krate":0,"index":3449},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/Users/shelwitz/.cargo/registry/src/github.com-1ecc6299db9ec823/bio-0.39.0/src/alphabets/mod.rs","byte_start":219612,"byte_end":219625,"line_start":225,"line_end":225,"column_start":6,"column_end":19},"kind":{"Impl":{"id":22}},"from":{"krate":0,"index":3457},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/Users/shelwitz/.cargo/registry/src/github.com-1ecc6299db9ec823/bio-0.39.0/src/alphabets/mod.rs","byte_start":224857,"byte_end":224863,"line_start":399,"line_end":399,"column_start":16,"column_end":22},"kind":{"Impl":{"id":23}},"from":{"krate":0,"index":426},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/Users/shelwitz/.cargo/registry/src/github.com-1ecc6299db9ec823/bio-0.39.0/src/alphabets/mod.rs","byte_start":225157,"byte_end":225163,"line_start":412,"line_end":412,"column_start":29,"column_end":35},"kind":{"Impl":{"id":24}},"from":{"krate":0,"index":426},"to":{"krate":2,"index":7310}},{"span":{"file_name":"/Users/shelwitz/.cargo/registry/src/github.com-1ecc6299db9ec823/bio-0.39.0/src/data_structures/annot_map.rs","byte_start":235890,"byte_end":235898,"line_start":58,"line_end":58,"column_start":24,"column_end":32},"kind":{"Impl":{"id":25}},"from":{"krate":0,"index":3506},"to":{"krate":2,"index":2831}},{"span":{"file_name":"/Users/shelwitz/.cargo/registry/src/github.com-1ecc6299db9ec823/bio-0.39.0/src/data_structures/annot_map.rs","byte_start":236049,"byte_end":236057,"line_start":69,"line_end":69,"column_start":12,"column_end":20},"kind":{"Impl":{"id":26}},"from":{"krate":0,"index":3506},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/Users/shelwitz/.cargo/registry/src/github.com-1ecc6299db9ec823/bio-0.39.0/src/data_structures/annot_map.rs","byte_start":238227,"byte_end":238235,"line_start":139,"line_end":139,"column_start":12,"column_end":20},"kind":{"Impl":{"id":27}},"from":{"krate":0,"index":3506},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/Users/shelwitz/.cargo/registry/src/github.com-1ecc6299db9ec823/bio-0.39.0/src/data_structures/annot_map.rs","byte_start":239856,"byte_end":239861,"line_start":192,"line_end":192,"column_start":16,"column_end":21},"kind":{"Impl":{"id":28}},"from":{"krate":0,"index":3518},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/Users/shelwitz/.cargo/registry/src/github.com-1ecc6299db9ec823/bio-0.39.0/src/data_structures/annot_map.rs","byte_start":240666,"byte_end":240682,"line_start":224,"line_end":224,"column_start":29,"column_end":45},"kind":{"Impl":{"id":29}},"from":{"krate":0,"index":496},"to":{"krate":2,"index":7310}},{"span":{"file_name":"/Users/shelwitz/.cargo/registry/src/github.com-1ecc6299db9ec823/bio-0.39.0/src/data_structures/bit_tree.rs","byte_start":246782,"byte_end":246793,"line_start":49,"line_end":49,"column_start":48,"column_end":59},"kind":{"Impl":{"id":30}},"from":{"krate":0,"index":521},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/Users/shelwitz/.cargo/registry/src/github.com-1ecc6299db9ec823/bio-0.39.0/src/data_structures/bit_tree.rs","byte_start":248125,"byte_end":248130,"line_start":88,"line_end":88,"column_start":37,"column_end":42},"kind":{"Impl":{"id":31}},"from":{"krate":0,"index":532},"to":{"krate":0,"index":518}},{"span":{"file_name":"/Users/shelwitz/.cargo/registry/src/github.com-1ecc6299db9ec823/bio-0.39.0/src/data_structures/bit_tree.rs","byte_start":248347,"byte_end":248352,"line_start":98,"line_end":98,"column_start":37,"column_end":42},"kind":{"Impl":{"id":32}},"from":{"krate":0,"index":539},"to":{"krate":0,"index":518}},{"span":{"file_name":"/Users/shelwitz/.cargo/registry/src/github.com-1ecc6299db9ec823/bio-0.39.0/src/data_structures/bitenc.rs","byte_start":251346,"byte_end":251352,"line_start":63,"line_end":63,"column_start":6,"column_end":12},"kind":{"Impl":{"id":35}},"from":{"krate":0,"index":3534},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/Users/shelwitz/.cargo/registry/src/github.com-1ecc6299db9ec823/bio-0.39.0/src/data_structures/bitenc.rs","byte_start":262831,"byte_end":262841,"line_start":444,"line_end":444,"column_start":23,"column_end":33},"kind":{"Impl":{"id":36}},"from":{"krate":0,"index":564},"to":{"krate":2,"index":7310}},{"span":{"file_name":"/Users/shelwitz/.cargo/registry/src/github.com-1ecc6299db9ec823/bio-0.39.0/src/data_structures/bwt.rs","byte_start":267884,"byte_end":267887,"line_start":82,"line_end":82,"column_start":6,"column_end":9},"kind":{"Impl":{"id":39}},"from":{"krate":0,"index":3605},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/Users/shelwitz/.cargo/registry/src/github.com-1ecc6299db9ec823/bio-0.39.0/src/data_structures/fmindex.rs","byte_start":276769,"byte_end":276777,"line_start":72,"line_end":72,"column_start":6,"column_end":14},"kind":{"Impl":{"id":40}},"from":{"krate":0,"index":3659},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/Users/shelwitz/.cargo/registry/src/github.com-1ecc6299db9ec823/bio-0.39.0/src/data_structures/fmindex.rs","byte_start":281935,"byte_end":281942,"line_start":212,"line_end":212,"column_start":9,"column_end":16},"kind":{"Impl":{"id":43}},"from":{"krate":0,"index":3702},"to":{"krate":0,"index":627}},{"span":{"file_name":"/Users/shelwitz/.cargo/registry/src/github.com-1ecc6299db9ec823/bio-0.39.0/src/data_structures/fmindex.rs","byte_start":282331,"byte_end":282338,"line_start":226,"line_end":226,"column_start":65,"column_end":72},"kind":{"Impl":{"id":44}},"from":{"krate":0,"index":3702},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/Users/shelwitz/.cargo/registry/src/github.com-1ecc6299db9ec823/bio-0.39.0/src/data_structures/fmindex.rs","byte_start":282916,"byte_end":282926,"line_start":248,"line_end":248,"column_start":6,"column_end":16},"kind":{"Impl":{"id":45}},"from":{"krate":0,"index":3772},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/Users/shelwitz/.cargo/registry/src/github.com-1ecc6299db9ec823/bio-0.39.0/src/data_structures/fmindex.rs","byte_start":283827,"byte_end":283835,"line_start":280,"line_end":280,"column_start":9,"column_end":17},"kind":{"Impl":{"id":48}},"from":{"krate":0,"index":3792},"to":{"krate":0,"index":627}},{"span":{"file_name":"/Users/shelwitz/.cargo/registry/src/github.com-1ecc6299db9ec823/bio-0.39.0/src/data_structures/fmindex.rs","byte_start":284234,"byte_end":284242,"line_start":297,"line_end":297,"column_start":9,"column_end":17},"kind":{"Impl":{"id":49}},"from":{"krate":0,"index":3792},"to":{"krate":2,"index":2759}},{"span":{"file_name":"/Users/shelwitz/.cargo/registry/src/github.com-1ecc6299db9ec823/bio-0.39.0/src/data_structures/fmindex.rs","byte_start":285202,"byte_end":285210,"line_start":318,"line_end":318,"column_start":65,"column_end":73},"kind":{"Impl":{"id":50}},"from":{"krate":0,"index":3792},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/Users/shelwitz/.cargo/registry/src/github.com-1ecc6299db9ec823/bio-0.39.0/src/data_structures/interpolation_table.rs","byte_start":307828,"byte_end":307846,"line_start":48,"line_end":48,"column_start":25,"column_end":43},"kind":{"Impl":{"id":51}},"from":{"krate":0,"index":675},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/Users/shelwitz/.cargo/registry/src/github.com-1ecc6299db9ec823/bio-0.39.0/src/data_structures/interval_tree/array_backed_interval_tree.rs","byte_start":312494,"byte_end":312499,"line_start":57,"line_end":57,"column_start":38,"column_end":43},"kind":{"Impl":{"id":52}},"from":{"krate":0,"index":3885},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/Users/shelwitz/.cargo/registry/src/github.com-1ecc6299db9ec823/bio-0.39.0/src/data_structures/interval_tree/array_backed_interval_tree.rs","byte_start":312799,"byte_end":312822,"line_start":69,"line_end":69,"column_start":44,"column_end":67},"kind":{"Impl":{"id":53}},"from":{"krate":0,"index":709},"to":{"krate":2,"index":2831}},{"span":{"file_name":"/Users/shelwitz/.cargo/registry/src/github.com-1ecc6299db9ec823/bio-0.39.0/src/data_structures/interval_tree/array_backed_interval_tree.rs","byte_start":313179,"byte_end":313202,"line_start":85,"line_end":85,"column_start":40,"column_end":63},"kind":{"Impl":{"id":54}},"from":{"krate":0,"index":709},"to":{"krate":2,"index":7143}},{"span":{"file_name":"/Users/shelwitz/.cargo/registry/src/github.com-1ecc6299db9ec823/bio-0.39.0/src/data_structures/interval_tree/array_backed_interval_tree.rs","byte_start":313566,"byte_end":313589,"line_start":100,"line_end":100,"column_start":39,"column_end":62},"kind":{"Impl":{"id":55}},"from":{"krate":0,"index":709},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/Users/shelwitz/.cargo/registry/src/github.com-1ecc6299db9ec823/bio-0.39.0/src/data_structures/interval_tree/array_backed_interval_tree.rs","byte_start":319378,"byte_end":319387,"line_start":274,"line_end":274,"column_start":6,"column_end":15},"kind":{"Impl":{"id":56}},"from":{"krate":0,"index":3920},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/Users/shelwitz/.cargo/registry/src/github.com-1ecc6299db9ec823/bio-0.39.0/src/data_structures/interval_tree/avl_interval_tree.rs","byte_start":323737,"byte_end":323749,"line_start":39,"line_end":39,"column_start":37,"column_end":49},"kind":{"Impl":{"id":59}},"from":{"krate":0,"index":3927},"to":{"krate":2,"index":2831}},{"span":{"file_name":"/Users/shelwitz/.cargo/registry/src/github.com-1ecc6299db9ec823/bio-0.39.0/src/data_structures/interval_tree/avl_interval_tree.rs","byte_start":324155,"byte_end":324160,"line_start":53,"line_end":53,"column_start":38,"column_end":43},"kind":{"Impl":{"id":60}},"from":{"krate":0,"index":3994},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/Users/shelwitz/.cargo/registry/src/github.com-1ecc6299db9ec823/bio-0.39.0/src/data_structures/interval_tree/avl_interval_tree.rs","byte_start":324708,"byte_end":324728,"line_start":72,"line_end":72,"column_start":51,"column_end":71},"kind":{"Impl":{"id":61}},"from":{"krate":0,"index":766},"to":{"krate":2,"index":7310}},{"span":{"file_name":"/Users/shelwitz/.cargo/registry/src/github.com-1ecc6299db9ec823/bio-0.39.0/src/data_structures/interval_tree/avl_interval_tree.rs","byte_start":326381,"byte_end":326389,"line_start":117,"line_end":117,"column_start":38,"column_end":46},"kind":{"Impl":{"id":62}},"from":{"krate":0,"index":4029},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/Users/shelwitz/.cargo/registry/src/github.com-1ecc6299db9ec823/bio-0.39.0/src/data_structures/interval_tree/avl_interval_tree.rs","byte_start":327031,"byte_end":327054,"line_start":136,"line_end":136,"column_start":51,"column_end":74},"kind":{"Impl":{"id":63}},"from":{"krate":0,"index":784},"to":{"krate":2,"index":7310}},{"span":{"file_name":"/Users/shelwitz/.cargo/registry/src/github.com-1ecc6299db9ec823/bio-0.39.0/src/data_structures/interval_tree/avl_interval_tree.rs","byte_start":328322,"byte_end":328334,"line_start":171,"line_end":171,"column_start":25,"column_end":37},"kind":{"Impl":{"id":64}},"from":{"krate":0,"index":3927},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/Users/shelwitz/.cargo/registry/src/github.com-1ecc6299db9ec823/bio-0.39.0/src/data_structures/interval_tree/avl_interval_tree.rs","byte_start":330071,"byte_end":330083,"line_start":222,"line_end":222,"column_start":72,"column_end":84},"kind":{"Impl":{"id":65}},"from":{"krate":0,"index":3927},"to":{"krate":2,"index":7143}},{"span":{"file_name":"/Users/shelwitz/.cargo/registry/src/github.com-1ecc6299db9ec823/bio-0.39.0/src/data_structures/interval_tree/avl_interval_tree.rs","byte_start":330593,"byte_end":330597,"line_start":244,"line_end":244,"column_start":25,"column_end":29},"kind":{"Impl":{"id":68}},"from":{"krate":0,"index":4059},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/Users/shelwitz/.cargo/registry/src/github.com-1ecc6299db9ec823/bio-0.39.0/src/data_structures/qgram_index.rs","byte_start":345326,"byte_end":345336,"line_start":47,"line_end":47,"column_start":6,"column_end":16},"kind":{"Impl":{"id":71}},"from":{"krate":0,"index":4141},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/Users/shelwitz/.cargo/registry/src/github.com-1ecc6299db9ec823/bio-0.39.0/src/data_structures/qgram_index.rs","byte_start":351041,"byte_end":351049,"line_start":207,"line_end":207,"column_start":6,"column_end":14},"kind":{"Impl":{"id":72}},"from":{"krate":0,"index":4199},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/Users/shelwitz/.cargo/registry/src/github.com-1ecc6299db9ec823/bio-0.39.0/src/data_structures/qgram_index.rs","byte_start":351406,"byte_end":351411,"line_start":222,"line_end":222,"column_start":19,"column_end":24},"kind":{"Impl":{"id":73}},"from":{"krate":0,"index":4214},"to":{"krate":2,"index":2540}},{"span":{"file_name":"/Users/shelwitz/.cargo/registry/src/github.com-1ecc6299db9ec823/bio-0.39.0/src/data_structures/qgram_index.rs","byte_start":351536,"byte_end":351541,"line_start":228,"line_end":228,"column_start":26,"column_end":31},"kind":{"Impl":{"id":74}},"from":{"krate":0,"index":4214},"to":{"krate":2,"index":2551}},{"span":{"file_name":"/Users/shelwitz/.cargo/registry/src/github.com-1ecc6299db9ec823/bio-0.39.0/src/data_structures/rank_select.rs","byte_start":355310,"byte_end":355320,"line_start":46,"line_end":46,"column_start":6,"column_end":16},"kind":{"Impl":{"id":77}},"from":{"krate":0,"index":4242},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/Users/shelwitz/.cargo/registry/src/github.com-1ecc6299db9ec823/bio-0.39.0/src/data_structures/rank_select.rs","byte_start":360435,"byte_end":360449,"line_start":213,"line_end":213,"column_start":16,"column_end":30},"kind":{"Impl":{"id":80}},"from":{"krate":0,"index":4306},"to":{"krate":2,"index":3064}},{"span":{"file_name":"/Users/shelwitz/.cargo/registry/src/github.com-1ecc6299db9ec823/bio-0.39.0/src/data_structures/rank_select.rs","byte_start":360663,"byte_end":360677,"line_start":224,"line_end":224,"column_start":21,"column_end":35},"kind":{"Impl":{"id":81}},"from":{"krate":0,"index":4306},"to":{"krate":2,"index":2551}},{"span":{"file_name":"/Users/shelwitz/.cargo/registry/src/github.com-1ecc6299db9ec823/bio-0.39.0/src/data_structures/rank_select.rs","byte_start":360799,"byte_end":360813,"line_start":230,"line_end":230,"column_start":14,"column_end":28},"kind":{"Impl":{"id":82}},"from":{"krate":0,"index":4306},"to":{"krate":2,"index":2540}},{"span":{"file_name":"/Users/shelwitz/.cargo/registry/src/github.com-1ecc6299db9ec823/bio-0.39.0/src/data_structures/smallints.rs","byte_start":366884,"byte_end":366893,"line_start":43,"line_end":43,"column_start":9,"column_end":18},"kind":{"Impl":{"id":85}},"from":{"krate":0,"index":4369},"to":{"krate":2,"index":2831}},{"span":{"file_name":"/Users/shelwitz/.cargo/registry/src/github.com-1ecc6299db9ec823/bio-0.39.0/src/data_structures/smallints.rs","byte_start":367228,"byte_end":367237,"line_start":57,"line_end":57,"column_start":74,"column_end":83},"kind":{"Impl":{"id":86}},"from":{"krate":0,"index":4369},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/Users/shelwitz/.cargo/registry/src/github.com-1ecc6299db9ec823/bio-0.39.0/src/data_structures/smallints.rs","byte_start":370419,"byte_end":370423,"line_start":169,"line_end":169,"column_start":29,"column_end":33},"kind":{"Impl":{"id":87}},"from":{"krate":0,"index":987},"to":{"krate":2,"index":7310}},{"span":{"file_name":"/Users/shelwitz/.cargo/registry/src/github.com-1ecc6299db9ec823/bio-0.39.0/src/data_structures/suffix_array.rs","byte_start":375409,"byte_end":375423,"line_start":136,"line_end":136,"column_start":22,"column_end":36},"kind":{"Impl":{"id":90}},"from":{"krate":0,"index":1078},"to":{"krate":0,"index":1084}},{"span":{"file_name":"/Users/shelwitz/.cargo/registry/src/github.com-1ecc6299db9ec823/bio-0.39.0/src/data_structures/suffix_array.rs","byte_start":375891,"byte_end":375909,"line_start":156,"line_end":156,"column_start":9,"column_end":27},"kind":{"Impl":{"id":91}},"from":{"krate":0,"index":4431},"to":{"krate":0,"index":1084}},{"span":{"file_name":"/Users/shelwitz/.cargo/registry/src/github.com-1ecc6299db9ec823/bio-0.39.0/src/data_structures/suffix_array.rs","byte_start":377226,"byte_end":377244,"line_start":197,"line_end":197,"column_start":5,"column_end":23},"kind":{"Impl":{"id":92}},"from":{"krate":0,"index":4431},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/Users/shelwitz/.cargo/registry/src/github.com-1ecc6299db9ec823/bio-0.39.0/src/data_structures/suffix_array.rs","byte_start":385882,"byte_end":385886,"line_start":452,"line_end":452,"column_start":6,"column_end":10},"kind":{"Impl":{"id":93}},"from":{"krate":0,"index":1121},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/Users/shelwitz/.cargo/registry/src/github.com-1ecc6299db9ec823/bio-0.39.0/src/data_structures/suffix_array.rs","byte_start":393573,"byte_end":393581,"line_start":679,"line_end":679,"column_start":6,"column_end":14},"kind":{"Impl":{"id":94}},"from":{"krate":0,"index":4519},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/Users/shelwitz/.cargo/registry/src/github.com-1ecc6299db9ec823/bio-0.39.0/src/data_structures/wavelet_matrix.rs","byte_start":406506,"byte_end":406519,"line_start":65,"line_end":65,"column_start":6,"column_end":19},"kind":{"Impl":{"id":97}},"from":{"krate":0,"index":4523},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/Users/shelwitz/.cargo/registry/src/github.com-1ecc6299db9ec823/bio-0.39.0/src/io/bed.rs","byte_start":415080,"byte_end":415086,"line_start":41,"line_end":41,"column_start":6,"column_end":12},"kind":{"Impl":{"id":98}},"from":{"krate":0,"index":4581},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/Users/shelwitz/.cargo/registry/src/github.com-1ecc6299db9ec823/bio-0.39.0/src/io/bed.rs","byte_start":415390,"byte_end":415396,"line_start":50,"line_end":50,"column_start":19,"column_end":25},"kind":{"Impl":{"id":99}},"from":{"krate":0,"index":4581},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/Users/shelwitz/.cargo/registry/src/github.com-1ecc6299db9ec823/bio-0.39.0/src/io/bed.rs","byte_start":416004,"byte_end":416011,"line_start":74,"line_end":74,"column_start":36,"column_end":43},"kind":{"Impl":{"id":100}},"from":{"krate":0,"index":1212},"to":{"krate":2,"index":7310}},{"span":{"file_name":"/Users/shelwitz/.cargo/registry/src/github.com-1ecc6299db9ec823/bio-0.39.0/src/io/bed.rs","byte_start":416254,"byte_end":416260,"line_start":88,"line_end":88,"column_start":6,"column_end":12},"kind":{"Impl":{"id":101}},"from":{"krate":0,"index":4587},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/Users/shelwitz/.cargo/registry/src/github.com-1ecc6299db9ec823/bio-0.39.0/src/io/bed.rs","byte_start":416495,"byte_end":416501,"line_start":96,"line_end":96,"column_start":20,"column_end":26},"kind":{"Impl":{"id":102}},"from":{"krate":0,"index":4587},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/Users/shelwitz/.cargo/registry/src/github.com-1ecc6299db9ec823/bio-0.39.0/src/io/bed.rs","byte_start":417424,"byte_end":417430,"line_start":130,"line_end":130,"column_start":6,"column_end":12},"kind":{"Impl":{"id":105}},"from":{"krate":0,"index":4593},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/Users/shelwitz/.cargo/registry/src/github.com-1ecc6299db9ec823/bio-0.39.0/src/io/bed.rs","byte_start":419780,"byte_end":419786,"line_start":228,"line_end":228,"column_start":46,"column_end":52},"kind":{"Impl":{"id":106}},"from":{"krate":31,"index":639},"to":{"krate":2,"index":2759}},{"span":{"file_name":"/Users/shelwitz/.cargo/registry/src/github.com-1ecc6299db9ec823/bio-0.39.0/src/io/bed.rs","byte_start":420824,"byte_end":420830,"line_start":259,"line_end":259,"column_start":44,"column_end":50},"kind":{"Impl":{"id":107}},"from":{"krate":0,"index":4593},"to":{"krate":2,"index":2759}},{"span":{"file_name":"/Users/shelwitz/.cargo/registry/src/github.com-1ecc6299db9ec823/bio-0.39.0/src/io/bed.rs","byte_start":421396,"byte_end":421402,"line_start":279,"line_end":279,"column_start":50,"column_end":56},"kind":{"Impl":{"id":108}},"from":{"krate":0,"index":4593},"to":{"krate":2,"index":2759}},{"span":{"file_name":"/Users/shelwitz/.cargo/registry/src/github.com-1ecc6299db9ec823/bio-0.39.0/src/io/bed.rs","byte_start":423771,"byte_end":423777,"line_start":347,"line_end":347,"column_start":52,"column_end":58},"kind":{"Impl":{"id":109}},"from":{"krate":0,"index":4593},"to":{"krate":2,"index":2759}},{"span":{"file_name":"/Users/shelwitz/.cargo/registry/src/github.com-1ecc6299db9ec823/bio-0.39.0/src/io/fasta.rs","byte_start":434989,"byte_end":434995,"line_start":160,"line_end":160,"column_start":6,"column_end":12},"kind":{"Impl":{"id":110}},"from":{"krate":0,"index":4657},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/Users/shelwitz/.cargo/registry/src/github.com-1ecc6299db9ec823/bio-0.39.0/src/io/fasta.rs","byte_start":435687,"byte_end":435693,"line_start":179,"line_end":179,"column_start":9,"column_end":15},"kind":{"Impl":{"id":111}},"from":{"krate":0,"index":4657},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/Users/shelwitz/.cargo/registry/src/github.com-1ecc6299db9ec823/bio-0.39.0/src/io/fasta.rs","byte_start":436818,"byte_end":436824,"line_start":224,"line_end":224,"column_start":9,"column_end":15},"kind":{"Impl":{"id":112}},"from":{"krate":0,"index":4657},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/Users/shelwitz/.cargo/registry/src/github.com-1ecc6299db9ec823/bio-0.39.0/src/io/fasta.rs","byte_start":438229,"byte_end":438235,"line_start":277,"line_end":277,"column_start":23,"column_end":29},"kind":{"Impl":{"id":113}},"from":{"krate":0,"index":4657},"to":{"krate":0,"index":1292}},{"span":{"file_name":"/Users/shelwitz/.cargo/registry/src/github.com-1ecc6299db9ec823/bio-0.39.0/src/io/fasta.rs","byte_start":440657,"byte_end":440662,"line_start":354,"line_end":354,"column_start":6,"column_end":11},"kind":{"Impl":{"id":114}},"from":{"krate":0,"index":4664},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/Users/shelwitz/.cargo/registry/src/github.com-1ecc6299db9ec823/bio-0.39.0/src/io/fasta.rs","byte_start":442606,"byte_end":442619,"line_start":412,"line_end":412,"column_start":6,"column_end":19},"kind":{"Impl":{"id":115}},"from":{"krate":0,"index":4671},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/Users/shelwitz/.cargo/registry/src/github.com-1ecc6299db9ec823/bio-0.39.0/src/io/fasta.rs","byte_start":443126,"byte_end":443139,"line_start":424,"line_end":424,"column_start":30,"column_end":43},"kind":{"Impl":{"id":116}},"from":{"krate":0,"index":4671},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/Users/shelwitz/.cargo/registry/src/github.com-1ecc6299db9ec823/bio-0.39.0/src/io/fasta.rs","byte_start":453717,"byte_end":453738,"line_start":740,"line_end":740,"column_start":39,"column_end":60},"kind":{"Impl":{"id":119}},"from":{"krate":0,"index":1347},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/Users/shelwitz/.cargo/registry/src/github.com-1ecc6299db9ec823/bio-0.39.0/src/io/fasta.rs","byte_start":454360,"byte_end":454381,"line_start":762,"line_end":762,"column_start":52,"column_end":73},"kind":{"Impl":{"id":120}},"from":{"krate":0,"index":1347},"to":{"krate":2,"index":7310}},{"span":{"file_name":"/Users/shelwitz/.cargo/registry/src/github.com-1ecc6299db9ec823/bio-0.39.0/src/io/fasta.rs","byte_start":455237,"byte_end":455243,"line_start":798,"line_end":798,"column_start":6,"column_end":12},"kind":{"Impl":{"id":121}},"from":{"krate":0,"index":4759},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/Users/shelwitz/.cargo/registry/src/github.com-1ecc6299db9ec823/bio-0.39.0/src/io/fasta.rs","byte_start":455724,"byte_end":455730,"line_start":811,"line_end":811,"column_start":20,"column_end":26},"kind":{"Impl":{"id":122}},"from":{"krate":0,"index":4759},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/Users/shelwitz/.cargo/registry/src/github.com-1ecc6299db9ec823/bio-0.39.0/src/io/fasta.rs","byte_start":458201,"byte_end":458207,"line_start":893,"line_end":893,"column_start":6,"column_end":12},"kind":{"Impl":{"id":125}},"from":{"krate":0,"index":4765},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/Users/shelwitz/.cargo/registry/src/github.com-1ecc6299db9ec823/bio-0.39.0/src/io/fasta.rs","byte_start":460134,"byte_end":460140,"line_start":968,"line_end":968,"column_start":23,"column_end":29},"kind":{"Impl":{"id":126}},"from":{"krate":0,"index":4765},"to":{"krate":2,"index":8894}},{"span":{"file_name":"/Users/shelwitz/.cargo/registry/src/github.com-1ecc6299db9ec823/bio-0.39.0/src/io/fasta.rs","byte_start":461780,"byte_end":461787,"line_start":1020,"line_end":1020,"column_start":22,"column_end":29},"kind":{"Impl":{"id":127}},"from":{"krate":0,"index":1392},"to":{"krate":2,"index":7310}},{"span":{"file_name":"/Users/shelwitz/.cargo/registry/src/github.com-1ecc6299db9ec823/bio-0.39.0/src/io/fastq.rs","byte_start":489255,"byte_end":489261,"line_start":145,"line_end":145,"column_start":6,"column_end":12},"kind":{"Impl":{"id":131}},"from":{"krate":0,"index":4855},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/Users/shelwitz/.cargo/registry/src/github.com-1ecc6299db9ec823/bio-0.39.0/src/io/fastq.rs","byte_start":489718,"byte_end":489724,"line_start":158,"line_end":158,"column_start":19,"column_end":25},"kind":{"Impl":{"id":132}},"from":{"krate":0,"index":4855},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/Users/shelwitz/.cargo/registry/src/github.com-1ecc6299db9ec823/bio-0.39.0/src/io/fastq.rs","byte_start":490290,"byte_end":490296,"line_start":176,"line_end":176,"column_start":9,"column_end":15},"kind":{"Impl":{"id":133}},"from":{"krate":0,"index":4855},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/Users/shelwitz/.cargo/registry/src/github.com-1ecc6299db9ec823/bio-0.39.0/src/io/fastq.rs","byte_start":491231,"byte_end":491237,"line_start":213,"line_end":213,"column_start":23,"column_end":29},"kind":{"Impl":{"id":134}},"from":{"krate":0,"index":4855},"to":{"krate":0,"index":1436}},{"span":{"file_name":"/Users/shelwitz/.cargo/registry/src/github.com-1ecc6299db9ec823/bio-0.39.0/src/io/fastq.rs","byte_start":494335,"byte_end":494341,"line_start":306,"line_end":306,"column_start":6,"column_end":12},"kind":{"Impl":{"id":137}},"from":{"krate":0,"index":4862},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/Users/shelwitz/.cargo/registry/src/github.com-1ecc6299db9ec823/bio-0.39.0/src/io/fastq.rs","byte_start":497960,"byte_end":497966,"line_start":427,"line_end":427,"column_start":23,"column_end":29},"kind":{"Impl":{"id":138}},"from":{"krate":0,"index":4862},"to":{"krate":2,"index":8894}},{"span":{"file_name":"/Users/shelwitz/.cargo/registry/src/github.com-1ecc6299db9ec823/bio-0.39.0/src/io/fastq.rs","byte_start":499507,"byte_end":499513,"line_start":471,"line_end":471,"column_start":23,"column_end":29},"kind":{"Impl":{"id":139}},"from":{"krate":0,"index":4862},"to":{"krate":31,"index":466}},{"span":{"file_name":"/Users/shelwitz/.cargo/registry/src/github.com-1ecc6299db9ec823/bio-0.39.0/src/io/fastq.rs","byte_start":499929,"byte_end":499936,"line_start":495,"line_end":495,"column_start":22,"column_end":29},"kind":{"Impl":{"id":140}},"from":{"krate":0,"index":4930},"to":{"krate":2,"index":7310}},{"span":{"file_name":"/Users/shelwitz/.cargo/registry/src/github.com-1ecc6299db9ec823/bio-0.39.0/src/io/fastq.rs","byte_start":500395,"byte_end":500401,"line_start":517,"line_end":517,"column_start":6,"column_end":12},"kind":{"Impl":{"id":141}},"from":{"krate":0,"index":4936},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/Users/shelwitz/.cargo/registry/src/github.com-1ecc6299db9ec823/bio-0.39.0/src/io/fastq.rs","byte_start":500880,"byte_end":500886,"line_start":530,"line_end":530,"column_start":20,"column_end":26},"kind":{"Impl":{"id":142}},"from":{"krate":0,"index":4936},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/Users/shelwitz/.cargo/registry/src/github.com-1ecc6299db9ec823/bio-0.39.0/src/io/gff.rs","byte_start":517767,"byte_end":517774,"line_start":58,"line_end":58,"column_start":18,"column_end":25},"kind":{"Impl":{"id":143}},"from":{"krate":0,"index":4942},"to":{"krate":2,"index":11370}},{"span":{"file_name":"/Users/shelwitz/.cargo/registry/src/github.com-1ecc6299db9ec823/bio-0.39.0/src/io/gff.rs","byte_start":518325,"byte_end":518332,"line_start":79,"line_end":79,"column_start":6,"column_end":13},"kind":{"Impl":{"id":144}},"from":{"krate":0,"index":4942},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/Users/shelwitz/.cargo/registry/src/github.com-1ecc6299db9ec823/bio-0.39.0/src/io/gff.rs","byte_start":518863,"byte_end":518869,"line_start":101,"line_end":101,"column_start":6,"column_end":12},"kind":{"Impl":{"id":145}},"from":{"krate":0,"index":4963},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/Users/shelwitz/.cargo/registry/src/github.com-1ecc6299db9ec823/bio-0.39.0/src/io/gff.rs","byte_start":519254,"byte_end":519260,"line_start":113,"line_end":113,"column_start":19,"column_end":25},"kind":{"Impl":{"id":146}},"from":{"krate":0,"index":4963},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/Users/shelwitz/.cargo/registry/src/github.com-1ecc6299db9ec823/bio-0.39.0/src/io/gff.rs","byte_start":520570,"byte_end":520577,"line_start":162,"line_end":162,"column_start":36,"column_end":43},"kind":{"Impl":{"id":147}},"from":{"krate":0,"index":1537},"to":{"krate":2,"index":7310}},{"span":{"file_name":"/Users/shelwitz/.cargo/registry/src/github.com-1ecc6299db9ec823/bio-0.39.0/src/io/gff.rs","byte_start":522046,"byte_end":522052,"line_start":211,"line_end":211,"column_start":6,"column_end":12},"kind":{"Impl":{"id":148}},"from":{"krate":0,"index":4970},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/Users/shelwitz/.cargo/registry/src/github.com-1ecc6299db9ec823/bio-0.39.0/src/io/gff.rs","byte_start":522343,"byte_end":522349,"line_start":219,"line_end":219,"column_start":20,"column_end":26},"kind":{"Impl":{"id":149}},"from":{"krate":0,"index":4970},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/Users/shelwitz/.cargo/registry/src/github.com-1ecc6299db9ec823/bio-0.39.0/src/io/gff.rs","byte_start":523782,"byte_end":523788,"line_start":274,"line_end":274,"column_start":6,"column_end":12},"kind":{"Impl":{"id":152}},"from":{"krate":0,"index":4978},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/Users/shelwitz/.cargo/registry/src/github.com-1ecc6299db9ec823/bio-0.39.0/src/pattern_matching/bndm.rs","byte_start":539071,"byte_end":539075,"line_start":32,"line_end":32,"column_start":6,"column_end":10},"kind":{"Impl":{"id":153}},"from":{"krate":0,"index":1591},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/Users/shelwitz/.cargo/registry/src/github.com-1ecc6299db9ec823/bio-0.39.0/src/pattern_matching/bndm.rs","byte_start":540086,"byte_end":540093,"line_start":67,"line_end":67,"column_start":23,"column_end":30},"kind":{"Impl":{"id":154}},"from":{"krate":0,"index":1602},"to":{"krate":2,"index":7310}},{"span":{"file_name":"/Users/shelwitz/.cargo/registry/src/github.com-1ecc6299db9ec823/bio-0.39.0/src/pattern_matching/bom.rs","byte_start":543009,"byte_end":543012,"line_start":34,"line_end":34,"column_start":6,"column_end":9},"kind":{"Impl":{"id":155}},"from":{"krate":0,"index":1627},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/Users/shelwitz/.cargo/registry/src/github.com-1ecc6299db9ec823/bio-0.39.0/src/pattern_matching/bom.rs","byte_start":545492,"byte_end":545499,"line_start":112,"line_end":112,"column_start":23,"column_end":30},"kind":{"Impl":{"id":156}},"from":{"krate":0,"index":1637},"to":{"krate":2,"index":7310}},{"span":{"file_name":"/Users/shelwitz/.cargo/registry/src/github.com-1ecc6299db9ec823/bio-0.39.0/src/pattern_matching/horspool.rs","byte_start":549376,"byte_end":549384,"line_start":50,"line_end":50,"column_start":10,"column_end":18},"kind":{"Impl":{"id":157}},"from":{"krate":0,"index":1650},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/Users/shelwitz/.cargo/registry/src/github.com-1ecc6299db9ec823/bio-0.39.0/src/pattern_matching/horspool.rs","byte_start":550396,"byte_end":550403,"line_start":86,"line_end":86,"column_start":23,"column_end":30},"kind":{"Impl":{"id":158}},"from":{"krate":0,"index":1660},"to":{"krate":2,"index":7310}},{"span":{"file_name":"/Users/shelwitz/.cargo/registry/src/github.com-1ecc6299db9ec823/bio-0.39.0/src/pattern_matching/kmp.rs","byte_start":553341,"byte_end":553344,"line_start":39,"line_end":39,"column_start":10,"column_end":13},"kind":{"Impl":{"id":159}},"from":{"krate":0,"index":1686},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/Users/shelwitz/.cargo/registry/src/github.com-1ecc6299db9ec823/bio-0.39.0/src/pattern_matching/kmp.rs","byte_start":554738,"byte_end":554745,"line_start":101,"line_end":101,"column_start":29,"column_end":36},"kind":{"Impl":{"id":160}},"from":{"krate":0,"index":1699},"to":{"krate":2,"index":7310}},{"span":{"file_name":"/Users/shelwitz/.cargo/registry/src/github.com-1ecc6299db9ec823/bio-0.39.0/src/pattern_matching/myers/myers_impl.rs","byte_start":565569,"byte_end":565574,"line_start":16,"line_end":16,"column_start":12,"column_end":17},"kind":{"Impl":{"id":161}},"from":{"krate":0,"index":5057},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/Users/shelwitz/.cargo/registry/src/github.com-1ecc6299db9ec823/bio-0.39.0/src/pattern_matching/myers/builder.rs","byte_start":587062,"byte_end":587074,"line_start":56,"line_end":56,"column_start":6,"column_end":18},"kind":{"Impl":{"id":162}},"from":{"krate":0,"index":5076},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/Users/shelwitz/.cargo/registry/src/github.com-1ecc6299db9ec823/bio-0.39.0/src/pattern_matching/myers/helpers.rs","byte_start":592535,"byte_end":592539,"line_start":16,"line_end":16,"column_start":21,"column_end":25},"kind":"SuperTrait","from":{"krate":2,"index":2863},"to":{"krate":0,"index":1805}},{"span":{"file_name":"/Users/shelwitz/.cargo/registry/src/github.com-1ecc6299db9ec823/bio-0.39.0/src/pattern_matching/myers/helpers.rs","byte_start":592550,"byte_end":592555,"line_start":17,"line_end":17,"column_start":11,"column_end":16},"kind":"SuperTrait","from":{"krate":2,"index":8887},"to":{"krate":0,"index":1805}},{"span":{"file_name":"/Users/shelwitz/.cargo/registry/src/github.com-1ecc6299db9ec823/bio-0.39.0/src/pattern_matching/myers/helpers.rs","byte_start":592566,"byte_end":592573,"line_start":18,"line_end":18,"column_start":11,"column_end":18},"kind":"SuperTrait","from":{"krate":2,"index":2831},"to":{"krate":0,"index":1805}},{"span":{"file_name":"/Users/shelwitz/.cargo/registry/src/github.com-1ecc6299db9ec823/bio-0.39.0/src/pattern_matching/myers/helpers.rs","byte_start":592584,"byte_end":592593,"line_start":19,"line_end":19,"column_start":11,"column_end":20},"kind":"SuperTrait","from":{"krate":2,"index":2951},"to":{"krate":0,"index":1805}},{"span":{"file_name":"/Users/shelwitz/.cargo/registry/src/github.com-1ecc6299db9ec823/bio-0.39.0/src/pattern_matching/myers/helpers.rs","byte_start":592604,"byte_end":592613,"line_start":20,"line_end":20,"column_start":11,"column_end":20},"kind":"SuperTrait","from":{"krate":2,"index":2955},"to":{"krate":0,"index":1805}},{"span":{"file_name":"/Users/shelwitz/.cargo/registry/src/github.com-1ecc6299db9ec823/bio-0.39.0/src/pattern_matching/myers/helpers.rs","byte_start":592624,"byte_end":592631,"line_start":21,"line_end":21,"column_start":11,"column_end":18},"kind":"SuperTrait","from":{"krate":18,"index":554},"to":{"krate":0,"index":1805}},{"span":{"file_name":"/Users/shelwitz/.cargo/registry/src/github.com-1ecc6299db9ec823/bio-0.39.0/src/pattern_matching/myers/helpers.rs","byte_start":592678,"byte_end":592691,"line_start":22,"line_end":22,"column_start":11,"column_end":24},"kind":"SuperTrait","from":{"krate":18,"index":320},"to":{"krate":0,"index":1805}},{"span":{"file_name":"/Users/shelwitz/.cargo/registry/src/github.com-1ecc6299db9ec823/bio-0.39.0/src/pattern_matching/myers/helpers.rs","byte_start":592702,"byte_end":592713,"line_start":23,"line_end":23,"column_start":11,"column_end":22},"kind":"SuperTrait","from":{"krate":18,"index":294},"to":{"krate":0,"index":1805}},{"span":{"file_name":"/Users/shelwitz/.cargo/registry/src/github.com-1ecc6299db9ec823/bio-0.39.0/src/pattern_matching/myers/helpers.rs","byte_start":592724,"byte_end":592735,"line_start":24,"line_end":24,"column_start":11,"column_end":22},"kind":"SuperTrait","from":{"krate":18,"index":353},"to":{"krate":0,"index":1805}},{"span":{"file_name":"/Users/shelwitz/.cargo/registry/src/github.com-1ecc6299db9ec823/bio-0.39.0/src/pattern_matching/myers/helpers.rs","byte_start":592745,"byte_end":592756,"line_start":24,"line_end":24,"column_start":32,"column_end":43},"kind":"SuperTrait","from":{"krate":18,"index":353},"to":{"krate":0,"index":1805}},{"span":{"file_name":"/Users/shelwitz/.cargo/registry/src/github.com-1ecc6299db9ec823/bio-0.39.0/src/pattern_matching/myers/helpers.rs","byte_start":592772,"byte_end":592783,"line_start":25,"line_end":25,"column_start":11,"column_end":22},"kind":"SuperTrait","from":{"krate":18,"index":758},"to":{"krate":0,"index":1805}},{"span":{"file_name":"/Users/shelwitz/.cargo/registry/src/github.com-1ecc6299db9ec823/bio-0.39.0/src/pattern_matching/myers/helpers.rs","byte_start":592794,"byte_end":592797,"line_start":26,"line_end":26,"column_start":11,"column_end":14},"kind":"SuperTrait","from":{"krate":2,"index":2925},"to":{"krate":0,"index":1805}},{"span":{"file_name":"/Users/shelwitz/.cargo/registry/src/github.com-1ecc6299db9ec823/bio-0.39.0/src/pattern_matching/myers/helpers.rs","byte_start":593085,"byte_end":593089,"line_start":36,"line_end":36,"column_start":19,"column_end":23},"kind":"SuperTrait","from":{"krate":2,"index":2863},"to":{"krate":0,"index":1811}},{"span":{"file_name":"/Users/shelwitz/.cargo/registry/src/github.com-1ecc6299db9ec823/bio-0.39.0/src/pattern_matching/myers/helpers.rs","byte_start":593096,"byte_end":593101,"line_start":37,"line_end":37,"column_start":7,"column_end":12},"kind":"SuperTrait","from":{"krate":2,"index":8887},"to":{"krate":0,"index":1811}},{"span":{"file_name":"/Users/shelwitz/.cargo/registry/src/github.com-1ecc6299db9ec823/bio-0.39.0/src/pattern_matching/myers/helpers.rs","byte_start":593108,"byte_end":593114,"line_start":38,"line_end":38,"column_start":7,"column_end":13},"kind":"SuperTrait","from":{"krate":2,"index":8898},"to":{"krate":0,"index":1811}},{"span":{"file_name":"/Users/shelwitz/.cargo/registry/src/github.com-1ecc6299db9ec823/bio-0.39.0/src/pattern_matching/myers/helpers.rs","byte_start":593121,"byte_end":593128,"line_start":39,"line_end":39,"column_start":7,"column_end":14},"kind":"SuperTrait","from":{"krate":2,"index":2831},"to":{"krate":0,"index":1811}},{"span":{"file_name":"/Users/shelwitz/.cargo/registry/src/github.com-1ecc6299db9ec823/bio-0.39.0/src/pattern_matching/myers/helpers.rs","byte_start":593135,"byte_end":593138,"line_start":40,"line_end":40,"column_start":7,"column_end":10},"kind":"SuperTrait","from":{"krate":2,"index":2920},"to":{"krate":0,"index":1811}},{"span":{"file_name":"/Users/shelwitz/.cargo/registry/src/github.com-1ecc6299db9ec823/bio-0.39.0/src/pattern_matching/myers/helpers.rs","byte_start":593145,"byte_end":593148,"line_start":41,"line_end":41,"column_start":7,"column_end":10},"kind":"SuperTrait","from":{"krate":2,"index":2925},"to":{"krate":0,"index":1811}},{"span":{"file_name":"/Users/shelwitz/.cargo/registry/src/github.com-1ecc6299db9ec823/bio-0.39.0/src/pattern_matching/myers/helpers.rs","byte_start":593155,"byte_end":593160,"line_start":42,"line_end":42,"column_start":7,"column_end":12},"kind":"SuperTrait","from":{"krate":2,"index":2981},"to":{"krate":0,"index":1811}},{"span":{"file_name":"/Users/shelwitz/.cargo/registry/src/github.com-1ecc6299db9ec823/bio-0.39.0/src/pattern_matching/myers/helpers.rs","byte_start":593167,"byte_end":593178,"line_start":43,"line_end":43,"column_start":7,"column_end":18},"kind":"SuperTrait","from":{"krate":2,"index":3007},"to":{"krate":0,"index":1811}},{"span":{"file_name":"/Users/shelwitz/.cargo/registry/src/github.com-1ecc6299db9ec823/bio-0.39.0/src/pattern_matching/myers/helpers.rs","byte_start":593185,"byte_end":593191,"line_start":44,"line_end":44,"column_start":7,"column_end":13},"kind":"SuperTrait","from":{"krate":2,"index":2976},"to":{"krate":0,"index":1811}},{"span":{"file_name":"/Users/shelwitz/.cargo/registry/src/github.com-1ecc6299db9ec823/bio-0.39.0/src/pattern_matching/myers/helpers.rs","byte_start":593198,"byte_end":593204,"line_start":45,"line_end":45,"column_start":7,"column_end":13},"kind":"SuperTrait","from":{"krate":2,"index":2986},"to":{"krate":0,"index":1811}},{"span":{"file_name":"/Users/shelwitz/.cargo/registry/src/github.com-1ecc6299db9ec823/bio-0.39.0/src/pattern_matching/myers/helpers.rs","byte_start":593211,"byte_end":593214,"line_start":46,"line_end":46,"column_start":7,"column_end":10},"kind":"SuperTrait","from":{"krate":2,"index":2972},"to":{"krate":0,"index":1811}},{"span":{"file_name":"/Users/shelwitz/.cargo/registry/src/github.com-1ecc6299db9ec823/bio-0.39.0/src/pattern_matching/myers/helpers.rs","byte_start":593221,"byte_end":593224,"line_start":47,"line_end":47,"column_start":7,"column_end":10},"kind":"SuperTrait","from":{"krate":2,"index":2991},"to":{"krate":0,"index":1811}},{"span":{"file_name":"/Users/shelwitz/.cargo/registry/src/github.com-1ecc6299db9ec823/bio-0.39.0/src/pattern_matching/myers/helpers.rs","byte_start":593238,"byte_end":593247,"line_start":48,"line_end":48,"column_start":7,"column_end":16},"kind":"SuperTrait","from":{"krate":2,"index":3015},"to":{"krate":0,"index":1811}},{"span":{"file_name":"/Users/shelwitz/.cargo/registry/src/github.com-1ecc6299db9ec823/bio-0.39.0/src/pattern_matching/myers/helpers.rs","byte_start":593261,"byte_end":593270,"line_start":49,"line_end":49,"column_start":7,"column_end":16},"kind":"SuperTrait","from":{"krate":2,"index":3020},"to":{"krate":0,"index":1811}},{"span":{"file_name":"/Users/shelwitz/.cargo/registry/src/github.com-1ecc6299db9ec823/bio-0.39.0/src/pattern_matching/myers/helpers.rs","byte_start":593433,"byte_end":593440,"line_start":52,"line_end":52,"column_start":7,"column_end":14},"kind":"SuperTrait","from":{"krate":18,"index":554},"to":{"krate":0,"index":1811}},{"span":{"file_name":"/Users/shelwitz/.cargo/registry/src/github.com-1ecc6299db9ec823/bio-0.39.0/src/pattern_matching/myers/helpers.rs","byte_start":593447,"byte_end":593458,"line_start":53,"line_end":53,"column_start":7,"column_end":18},"kind":"SuperTrait","from":{"krate":18,"index":758},"to":{"krate":0,"index":1811}},{"span":{"file_name":"/Users/shelwitz/.cargo/registry/src/github.com-1ecc6299db9ec823/bio-0.39.0/src/pattern_matching/myers/helpers.rs","byte_start":593465,"byte_end":593476,"line_start":54,"line_end":54,"column_start":7,"column_end":18},"kind":"SuperTrait","from":{"krate":18,"index":294},"to":{"krate":0,"index":1811}},{"span":{"file_name":"/Users/shelwitz/.cargo/registry/src/github.com-1ecc6299db9ec823/bio-0.39.0/src/pattern_matching/myers/helpers.rs","byte_start":593483,"byte_end":593496,"line_start":55,"line_end":55,"column_start":7,"column_end":20},"kind":"SuperTrait","from":{"krate":18,"index":320},"to":{"krate":0,"index":1811}},{"span":{"file_name":"/Users/shelwitz/.cargo/registry/src/github.com-1ecc6299db9ec823/bio-0.39.0/src/pattern_matching/myers/helpers.rs","byte_start":593503,"byte_end":593514,"line_start":56,"line_end":56,"column_start":7,"column_end":18},"kind":"SuperTrait","from":{"krate":18,"index":353},"to":{"krate":0,"index":1811}},{"span":{"file_name":"/Users/shelwitz/.cargo/registry/src/github.com-1ecc6299db9ec823/bio-0.39.0/src/pattern_matching/myers/helpers.rs","byte_start":593524,"byte_end":593535,"line_start":56,"line_end":56,"column_start":28,"column_end":39},"kind":"SuperTrait","from":{"krate":18,"index":353},"to":{"krate":0,"index":1811}},{"span":{"file_name":"/Users/shelwitz/.cargo/registry/src/github.com-1ecc6299db9ec823/bio-0.39.0/src/pattern_matching/myers/long.rs","byte_start":596040,"byte_end":596045,"line_start":43,"line_end":43,"column_start":17,"column_end":22},"kind":{"Impl":{"id":173}},"from":{"krate":0,"index":1885},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/Users/shelwitz/.cargo/registry/src/github.com-1ecc6299db9ec823/bio-0.39.0/src/pattern_matching/myers/long.rs","byte_start":599469,"byte_end":599475,"line_start":173,"line_end":173,"column_start":9,"column_end":15},"kind":{"Impl":{"id":174}},"from":{"krate":0,"index":1904},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/Users/shelwitz/.cargo/registry/src/github.com-1ecc6299db9ec823/bio-0.39.0/src/pattern_matching/myers/long.rs","byte_start":602015,"byte_end":602032,"line_start":252,"line_end":252,"column_start":10,"column_end":27},"kind":{"Impl":{"id":175}},"from":{"krate":0,"index":5100},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/Users/shelwitz/.cargo/registry/src/github.com-1ecc6299db9ec823/bio-0.39.0/src/pattern_matching/myers/long.rs","byte_start":602225,"byte_end":602242,"line_start":262,"line_end":262,"column_start":45,"column_end":62},"kind":{"Impl":{"id":176}},"from":{"krate":0,"index":5100},"to":{"krate":0,"index":2110}},{"span":{"file_name":"/Users/shelwitz/.cargo/registry/src/github.com-1ecc6299db9ec823/bio-0.39.0/src/pattern_matching/myers/long.rs","byte_start":604417,"byte_end":604437,"line_start":336,"line_end":336,"column_start":21,"column_end":41},"kind":{"Impl":{"id":177}},"from":{"krate":0,"index":1932},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/Users/shelwitz/.cargo/registry/src/github.com-1ecc6299db9ec823/bio-0.39.0/src/pattern_matching/myers/long.rs","byte_start":605809,"byte_end":605829,"line_start":378,"line_end":378,"column_start":61,"column_end":81},"kind":{"Impl":{"id":178}},"from":{"krate":0,"index":1932},"to":{"krate":0,"index":2120}},{"span":{"file_name":"/Users/shelwitz/.cargo/registry/src/github.com-1ecc6299db9ec823/bio-0.39.0/src/pattern_matching/myers/simple.rs","byte_start":610609,"byte_end":610614,"line_start":25,"line_end":25,"column_start":17,"column_end":22},"kind":{"Impl":{"id":180}},"from":{"krate":0,"index":2017},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/Users/shelwitz/.cargo/registry/src/github.com-1ecc6299db9ec823/bio-0.39.0/src/pattern_matching/myers/simple.rs","byte_start":613598,"byte_end":613616,"line_start":127,"line_end":127,"column_start":10,"column_end":28},"kind":{"Impl":{"id":181}},"from":{"krate":0,"index":5258},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/Users/shelwitz/.cargo/registry/src/github.com-1ecc6299db9ec823/bio-0.39.0/src/pattern_matching/myers/simple.rs","byte_start":613776,"byte_end":613794,"line_start":134,"line_end":134,"column_start":64,"column_end":82},"kind":{"Impl":{"id":182}},"from":{"krate":0,"index":5258},"to":{"krate":0,"index":2110}},{"span":{"file_name":"/Users/shelwitz/.cargo/registry/src/github.com-1ecc6299db9ec823/bio-0.39.0/src/pattern_matching/myers/simple.rs","byte_start":615123,"byte_end":615144,"line_start":183,"line_end":183,"column_start":21,"column_end":42},"kind":{"Impl":{"id":183}},"from":{"krate":0,"index":2053},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/Users/shelwitz/.cargo/registry/src/github.com-1ecc6299db9ec823/bio-0.39.0/src/pattern_matching/myers/simple.rs","byte_start":616170,"byte_end":616191,"line_start":211,"line_end":211,"column_start":54,"column_end":75},"kind":{"Impl":{"id":184}},"from":{"krate":0,"index":2053},"to":{"krate":0,"index":2120}},{"span":{"file_name":"/Users/shelwitz/.cargo/registry/src/github.com-1ecc6299db9ec823/bio-0.39.0/src/pattern_matching/myers/traceback.rs","byte_start":626180,"byte_end":626189,"line_start":186,"line_end":186,"column_start":19,"column_end":28},"kind":{"Impl":{"id":186}},"from":{"krate":0,"index":2136},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/Users/shelwitz/.cargo/registry/src/github.com-1ecc6299db9ec823/bio-0.39.0/src/pattern_matching/pssm/dnamotif.rs","byte_start":643886,"byte_end":643894,"line_start":22,"line_end":22,"column_start":6,"column_end":14},"kind":{"Impl":{"id":187}},"from":{"krate":0,"index":5416},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/Users/shelwitz/.cargo/registry/src/github.com-1ecc6299db9ec823/bio-0.39.0/src/pattern_matching/pssm/dnamotif.rs","byte_start":645855,"byte_end":645863,"line_start":81,"line_end":81,"column_start":16,"column_end":24},"kind":{"Impl":{"id":188}},"from":{"krate":0,"index":5416},"to":{"krate":0,"index":2278}},{"span":{"file_name":"/Users/shelwitz/.cargo/registry/src/github.com-1ecc6299db9ec823/bio-0.39.0/src/pattern_matching/pssm/dnamotif.rs","byte_start":649108,"byte_end":649116,"line_start":171,"line_end":171,"column_start":28,"column_end":36},"kind":{"Impl":{"id":189}},"from":{"krate":0,"index":5416},"to":{"krate":2,"index":2759}},{"span":{"file_name":"/Users/shelwitz/.cargo/registry/src/github.com-1ecc6299db9ec823/bio-0.39.0/src/pattern_matching/pssm/protmotif.rs","byte_start":654363,"byte_end":654372,"line_start":22,"line_end":22,"column_start":6,"column_end":15},"kind":{"Impl":{"id":192}},"from":{"krate":0,"index":5452},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/Users/shelwitz/.cargo/registry/src/github.com-1ecc6299db9ec823/bio-0.39.0/src/pattern_matching/pssm/protmotif.rs","byte_start":656365,"byte_end":656374,"line_start":84,"line_end":84,"column_start":16,"column_end":25},"kind":{"Impl":{"id":193}},"from":{"krate":0,"index":5452},"to":{"krate":0,"index":2278}},{"span":{"file_name":"/Users/shelwitz/.cargo/registry/src/github.com-1ecc6299db9ec823/bio-0.39.0/src/pattern_matching/pssm/protmotif.rs","byte_start":658525,"byte_end":658534,"line_start":145,"line_end":145,"column_start":28,"column_end":37},"kind":{"Impl":{"id":194}},"from":{"krate":0,"index":5452},"to":{"krate":2,"index":2759}},{"span":{"file_name":"/Users/shelwitz/.cargo/registry/src/github.com-1ecc6299db9ec823/bio-0.39.0/src/pattern_matching/pssm/mod.rs","byte_start":635106,"byte_end":635115,"line_start":64,"line_end":64,"column_start":18,"column_end":27},"kind":{"Impl":{"id":195}},"from":{"krate":0,"index":5464},"to":{"krate":2,"index":2831}},{"span":{"file_name":"/Users/shelwitz/.cargo/registry/src/github.com-1ecc6299db9ec823/bio-0.39.0/src/pattern_matching/shift_and.rs","byte_start":661961,"byte_end":661969,"line_start":31,"line_end":31,"column_start":6,"column_end":14},"kind":{"Impl":{"id":196}},"from":{"krate":0,"index":2315},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/Users/shelwitz/.cargo/registry/src/github.com-1ecc6299db9ec823/bio-0.39.0/src/pattern_matching/shift_and.rs","byte_start":663462,"byte_end":663469,"line_start":91,"line_end":91,"column_start":29,"column_end":36},"kind":{"Impl":{"id":197}},"from":{"krate":0,"index":2332},"to":{"krate":2,"index":7310}},{"span":{"file_name":"/Users/shelwitz/.cargo/registry/src/github.com-1ecc6299db9ec823/bio-0.39.0/src/pattern_matching/ukkonen.rs","byte_start":666178,"byte_end":666185,"line_start":49,"line_end":49,"column_start":9,"column_end":16},"kind":{"Impl":{"id":198}},"from":{"krate":0,"index":2362},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/Users/shelwitz/.cargo/registry/src/github.com-1ecc6299db9ec823/bio-0.39.0/src/pattern_matching/ukkonen.rs","byte_start":667596,"byte_end":667603,"line_start":105,"line_end":105,"column_start":32,"column_end":39},"kind":{"Impl":{"id":199}},"from":{"krate":0,"index":2375},"to":{"krate":2,"index":7310}},{"span":{"file_name":"/Users/shelwitz/.cargo/registry/src/github.com-1ecc6299db9ec823/bio-0.39.0/src/seq_analysis/orf.rs","byte_start":699550,"byte_end":699556,"line_start":49,"line_end":49,"column_start":6,"column_end":12},"kind":{"Impl":{"id":200}},"from":{"krate":0,"index":2449},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/Users/shelwitz/.cargo/registry/src/github.com-1ecc6299db9ec823/bio-0.39.0/src/seq_analysis/orf.rs","byte_start":700950,"byte_end":700955,"line_start":100,"line_end":100,"column_start":6,"column_end":11},"kind":{"Impl":{"id":201}},"from":{"krate":0,"index":2465},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/Users/shelwitz/.cargo/registry/src/github.com-1ecc6299db9ec823/bio-0.39.0/src/seq_analysis/orf.rs","byte_start":701395,"byte_end":701402,"line_start":121,"line_end":121,"column_start":29,"column_end":36},"kind":{"Impl":{"id":202}},"from":{"krate":0,"index":2471},"to":{"krate":2,"index":7310}},{"span":{"file_name":"/Users/shelwitz/.cargo/registry/src/github.com-1ecc6299db9ec823/bio-0.39.0/src/stats/bayesian/bayes_factors.rs","byte_start":708143,"byte_end":708154,"line_start":50,"line_end":50,"column_start":6,"column_end":17},"kind":{"Impl":{"id":210}},"from":{"krate":0,"index":5650},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/Users/shelwitz/.cargo/registry/src/github.com-1ecc6299db9ec823/bio-0.39.0/src/stats/bayesian/model.rs","byte_start":711310,"byte_end":711315,"line_start":76,"line_end":76,"column_start":55,"column_end":60},"kind":{"Impl":{"id":213}},"from":{"krate":0,"index":5671},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/Users/shelwitz/.cargo/registry/src/github.com-1ecc6299db9ec823/bio-0.39.0/src/stats/bayesian/model.rs","byte_start":715057,"byte_end":715070,"line_start":195,"line_end":195,"column_start":29,"column_end":42},"kind":{"Impl":{"id":214}},"from":{"krate":0,"index":2556},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/Users/shelwitz/.cargo/registry/src/github.com-1ecc6299db9ec823/bio-0.39.0/src/stats/bayesian/model.rs","byte_start":716040,"byte_end":716053,"line_start":227,"line_end":227,"column_start":22,"column_end":35},"kind":{"Impl":{"id":215}},"from":{"krate":0,"index":2556},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/Users/shelwitz/.cargo/registry/src/github.com-1ecc6299db9ec823/bio-0.39.0/src/stats/hmm/mod.rs","byte_start":722648,"byte_end":722657,"line_start":122,"line_end":122,"column_start":6,"column_end":15},"kind":{"Impl":{"id":219}},"from":{"krate":0,"index":2655},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/Users/shelwitz/.cargo/registry/src/github.com-1ecc6299db9ec823/bio-0.39.0/src/stats/hmm/mod.rs","byte_start":722826,"byte_end":722835,"line_start":132,"line_end":132,"column_start":19,"column_end":28},"kind":{"Impl":{"id":220}},"from":{"krate":0,"index":2655},"to":{"krate":2,"index":7310}},{"span":{"file_name":"/Users/shelwitz/.cargo/registry/src/github.com-1ecc6299db9ec823/bio-0.39.0/src/stats/hmm/mod.rs","byte_start":723317,"byte_end":723332,"line_start":155,"line_end":155,"column_start":6,"column_end":21},"kind":{"Impl":{"id":221}},"from":{"krate":0,"index":5743},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/Users/shelwitz/.cargo/registry/src/github.com-1ecc6299db9ec823/bio-0.39.0/src/stats/hmm/mod.rs","byte_start":723586,"byte_end":723605,"line_start":169,"line_end":169,"column_start":6,"column_end":25},"kind":{"Impl":{"id":222}},"from":{"krate":0,"index":2665},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/Users/shelwitz/.cargo/registry/src/github.com-1ecc6299db9ec823/bio-0.39.0/src/stats/hmm/mod.rs","byte_start":723798,"byte_end":723817,"line_start":180,"line_end":180,"column_start":19,"column_end":38},"kind":{"Impl":{"id":223}},"from":{"krate":0,"index":2665},"to":{"krate":2,"index":7310}},{"span":{"file_name":"/Users/shelwitz/.cargo/registry/src/github.com-1ecc6299db9ec823/bio-0.39.0/src/stats/hmm/mod.rs","byte_start":744616,"byte_end":744621,"line_start":711,"line_end":711,"column_start":10,"column_end":15},"kind":{"Impl":{"id":224}},"from":{"krate":0,"index":5755},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/Users/shelwitz/.cargo/registry/src/github.com-1ecc6299db9ec823/bio-0.39.0/src/stats/hmm/mod.rs","byte_start":746671,"byte_end":746676,"line_start":769,"line_end":769,"column_start":34,"column_end":39},"kind":{"Impl":{"id":225}},"from":{"krate":0,"index":5755},"to":{"krate":0,"index":2674}},{"span":{"file_name":"/Users/shelwitz/.cargo/registry/src/github.com-1ecc6299db9ec823/bio-0.39.0/src/stats/hmm/mod.rs","byte_start":749318,"byte_end":749323,"line_start":839,"line_end":839,"column_start":10,"column_end":15},"kind":{"Impl":{"id":226}},"from":{"krate":0,"index":5765},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/Users/shelwitz/.cargo/registry/src/github.com-1ecc6299db9ec823/bio-0.39.0/src/stats/hmm/mod.rs","byte_start":752840,"byte_end":752845,"line_start":940,"line_end":940,"column_start":34,"column_end":39},"kind":{"Impl":{"id":227}},"from":{"krate":0,"index":5765},"to":{"krate":0,"index":2674}},{"span":{"file_name":"/Users/shelwitz/.cargo/registry/src/github.com-1ecc6299db9ec823/bio-0.39.0/src/stats/hmm/mod.rs","byte_start":754166,"byte_end":754171,"line_start":986,"line_end":986,"column_start":38,"column_end":43},"kind":{"Impl":{"id":228}},"from":{"krate":0,"index":5765},"to":{"krate":0,"index":2717}},{"span":{"file_name":"/Users/shelwitz/.cargo/registry/src/github.com-1ecc6299db9ec823/bio-0.39.0/src/stats/hmm/mod.rs","byte_start":759335,"byte_end":759340,"line_start":1125,"line_end":1125,"column_start":38,"column_end":43},"kind":{"Impl":{"id":229}},"from":{"krate":0,"index":2792},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/Users/shelwitz/.cargo/registry/src/github.com-1ecc6299db9ec823/bio-0.39.0/src/stats/hmm/mod.rs","byte_start":761347,"byte_end":761352,"line_start":1183,"line_end":1183,"column_start":60,"column_end":65},"kind":{"Impl":{"id":230}},"from":{"krate":0,"index":2792},"to":{"krate":0,"index":2674}},{"span":{"file_name":"/Users/shelwitz/.cargo/registry/src/github.com-1ecc6299db9ec823/bio-0.39.0/src/stats/pairhmm/homopolypairhmm.rs","byte_start":789425,"byte_end":789430,"line_start":105,"line_end":105,"column_start":6,"column_end":11},"kind":{"Impl":{"id":232}},"from":{"krate":0,"index":5777},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/Users/shelwitz/.cargo/registry/src/github.com-1ecc6299db9ec823/bio-0.39.0/src/stats/pairhmm/homopolypairhmm.rs","byte_start":790365,"byte_end":790370,"line_start":129,"line_end":129,"column_start":14,"column_end":19},"kind":{"Impl":{"id":233}},"from":{"krate":0,"index":5777},"to":{"krate":2,"index":2997}},{"span":{"file_name":"/Users/shelwitz/.cargo/registry/src/github.com-1ecc6299db9ec823/bio-0.39.0/src/stats/pairhmm/homopolypairhmm.rs","byte_start":791860,"byte_end":791875,"line_start":178,"line_end":178,"column_start":6,"column_end":21},"kind":{"Impl":{"id":234}},"from":{"krate":0,"index":5837},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/Users/shelwitz/.cargo/registry/src/github.com-1ecc6299db9ec823/bio-0.39.0/src/stats/pairhmm/pairhmm.rs","byte_start":825850,"byte_end":825857,"line_start":70,"line_end":70,"column_start":6,"column_end":13},"kind":{"Impl":{"id":235}},"from":{"krate":0,"index":5843},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/Users/shelwitz/.cargo/registry/src/github.com-1ecc6299db9ec823/bio-0.39.0/src/stats/pairhmm/mod.rs","byte_start":783731,"byte_end":783741,"line_start":185,"line_end":185,"column_start":6,"column_end":16},"kind":{"Impl":{"id":236}},"from":{"krate":0,"index":5872},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/Users/shelwitz/.cargo/registry/src/github.com-1ecc6299db9ec823/bio-0.39.0/src/stats/probs/cdf.rs","byte_start":864301,"byte_end":864306,"line_start":117,"line_end":117,"column_start":14,"column_end":19},"kind":{"Impl":{"id":239}},"from":{"krate":0,"index":5881},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/Users/shelwitz/.cargo/registry/src/github.com-1ecc6299db9ec823/bio-0.39.0/src/stats/probs/cdf.rs","byte_start":865232,"byte_end":865235,"line_start":144,"line_end":144,"column_start":14,"column_end":17},"kind":{"Impl":{"id":242}},"from":{"krate":0,"index":5944},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/Users/shelwitz/.cargo/registry/src/github.com-1ecc6299db9ec823/bio-0.39.0/src/stats/probs/cdf.rs","byte_start":872834,"byte_end":872837,"line_start":376,"line_end":376,"column_start":22,"column_end":25},"kind":{"Impl":{"id":243}},"from":{"krate":0,"index":5944},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/Users/shelwitz/.cargo/registry/src/github.com-1ecc6299db9ec823/bio-0.39.0/src/stats/probs/mod.rs","byte_start":845818,"byte_end":845822,"line_start":79,"line_end":79,"column_start":6,"column_end":10},"kind":{"Impl":{"id":249}},"from":{"krate":0,"index":6029},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/Users/shelwitz/.cargo/registry/src/github.com-1ecc6299db9ec823/bio-0.39.0/src/stats/probs/mod.rs","byte_start":848155,"byte_end":848162,"line_start":172,"line_end":172,"column_start":6,"column_end":13},"kind":{"Impl":{"id":256}},"from":{"krate":0,"index":6135},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/Users/shelwitz/.cargo/registry/src/github.com-1ecc6299db9ec823/bio-0.39.0/src/stats/probs/mod.rs","byte_start":855129,"byte_end":855136,"line_start":373,"line_end":373,"column_start":37,"column_end":44},"kind":{"Impl":{"id":257}},"from":{"krate":0,"index":6135},"to":{"krate":2,"index":7106}},{"span":{"file_name":"/Users/shelwitz/.cargo/registry/src/github.com-1ecc6299db9ec823/bio-0.39.0/src/stats/probs/mod.rs","byte_start":855290,"byte_end":855297,"line_start":379,"line_end":379,"column_start":33,"column_end":40},"kind":{"Impl":{"id":258}},"from":{"krate":0,"index":6135},"to":{"krate":2,"index":7106}},{"span":{"file_name":"/Users/shelwitz/.cargo/registry/src/github.com-1ecc6299db9ec823/bio-0.39.0/src/stats/probs/mod.rs","byte_start":855433,"byte_end":855440,"line_start":385,"line_end":385,"column_start":20,"column_end":27},"kind":{"Impl":{"id":259}},"from":{"krate":0,"index":6135},"to":{"krate":2,"index":2951}},{"span":{"file_name":"/Users/shelwitz/.cargo/registry/src/github.com-1ecc6299db9ec823/bio-0.39.0/src/stats/probs/mod.rs","byte_start":855549,"byte_end":855556,"line_start":391,"line_end":391,"column_start":20,"column_end":27},"kind":{"Impl":{"id":260}},"from":{"krate":0,"index":6135},"to":{"krate":2,"index":2955}},{"span":{"file_name":"/Users/shelwitz/.cargo/registry/src/github.com-1ecc6299db9ec823/bio-0.39.0/src/stats/probs/mod.rs","byte_start":855673,"byte_end":855680,"line_start":397,"line_end":397,"column_start":28,"column_end":35},"kind":{"Impl":{"id":261}},"from":{"krate":0,"index":6135},"to":{"krate":2,"index":2759}},{"span":{"file_name":"/Users/shelwitz/.cargo/registry/src/github.com-1ecc6299db9ec823/bio-0.39.0/src/stats/probs/mod.rs","byte_start":855776,"byte_end":855782,"line_start":403,"line_end":403,"column_start":24,"column_end":30},"kind":{"Impl":{"id":262}},"from":{"krate":54,"index":419},"to":{"krate":2,"index":2759}},{"span":{"file_name":"/Users/shelwitz/.cargo/registry/src/github.com-1ecc6299db9ec823/bio-0.39.0/src/stats/probs/mod.rs","byte_start":855888,"byte_end":855892,"line_start":409,"line_end":409,"column_start":24,"column_end":28},"kind":{"Impl":{"id":263}},"from":{"krate":0,"index":6029},"to":{"krate":2,"index":2759}},{"span":{"file_name":"/Users/shelwitz/.cargo/registry/src/github.com-1ecc6299db9ec823/bio-0.39.0/src/stats/probs/mod.rs","byte_start":855989,"byte_end":855993,"line_start":415,"line_end":415,"column_start":26,"column_end":30},"kind":{"Impl":{"id":264}},"from":{"krate":0,"index":6029},"to":{"krate":2,"index":2759}},{"span":{"file_name":"/Users/shelwitz/.cargo/registry/src/github.com-1ecc6299db9ec823/bio-0.39.0/src/stats/probs/mod.rs","byte_start":856100,"byte_end":856107,"line_start":421,"line_end":421,"column_start":21,"column_end":28},"kind":{"Impl":{"id":265}},"from":{"krate":0,"index":6135},"to":{"krate":2,"index":2759}},{"span":{"file_name":"/Users/shelwitz/.cargo/registry/src/github.com-1ecc6299db9ec823/bio-0.39.0/src/stats/probs/mod.rs","byte_start":856202,"byte_end":856209,"line_start":427,"line_end":427,"column_start":26,"column_end":33},"kind":{"Impl":{"id":266}},"from":{"krate":0,"index":6135},"to":{"krate":2,"index":2759}},{"span":{"file_name":"/Users/shelwitz/.cargo/registry/src/github.com-1ecc6299db9ec823/bio-0.39.0/src/stats/probs/mod.rs","byte_start":856322,"byte_end":856331,"line_start":433,"line_end":433,"column_start":21,"column_end":30},"kind":{"Impl":{"id":267}},"from":{"krate":0,"index":6211},"to":{"krate":2,"index":2759}},{"span":{"file_name":"/Users/shelwitz/.cargo/registry/src/github.com-1ecc6299db9ec823/bio-0.39.0/src/stats/probs/mod.rs","byte_start":856439,"byte_end":856448,"line_start":439,"line_end":439,"column_start":24,"column_end":33},"kind":{"Impl":{"id":268}},"from":{"krate":0,"index":6211},"to":{"krate":2,"index":2759}},{"span":{"file_name":"/Users/shelwitz/.cargo/registry/src/github.com-1ecc6299db9ec823/bio-0.39.0/src/stats/probs/mod.rs","byte_start":856560,"byte_end":856567,"line_start":445,"line_end":445,"column_start":18,"column_end":25},"kind":{"Impl":{"id":269}},"from":{"krate":0,"index":6135},"to":{"krate":2,"index":2831}},{"span":{"file_name":"/Users/shelwitz/.cargo/registry/src/github.com-1ecc6299db9ec823/bio-0.39.0/src/stats/probs/mod.rs","byte_start":856653,"byte_end":856662,"line_start":451,"line_end":451,"column_start":18,"column_end":27},"kind":{"Impl":{"id":270}},"from":{"krate":0,"index":6211},"to":{"krate":2,"index":2831}},{"span":{"file_name":"/Users/shelwitz/.cargo/registry/src/github.com-1ecc6299db9ec823/bio-0.39.0/src/stats/probs/mod.rs","byte_start":856755,"byte_end":856759,"line_start":457,"line_end":457,"column_start":15,"column_end":19},"kind":{"Impl":{"id":271}},"from":{"krate":0,"index":6029},"to":{"krate":18,"index":497}},{"span":{"file_name":"/Users/shelwitz/.cargo/registry/src/github.com-1ecc6299db9ec823/bio-0.39.0/src/stats/probs/mod.rs","byte_start":856888,"byte_end":856895,"line_start":467,"line_end":467,"column_start":15,"column_end":22},"kind":{"Impl":{"id":272}},"from":{"krate":0,"index":6135},"to":{"krate":18,"index":497}},{"span":{"file_name":"/Users/shelwitz/.cargo/registry/src/github.com-1ecc6299db9ec823/bio-0.39.0/src/stats/probs/mod.rs","byte_start":857061,"byte_end":857070,"line_start":477,"line_end":477,"column_start":15,"column_end":24},"kind":{"Impl":{"id":273}},"from":{"krate":0,"index":6211},"to":{"krate":18,"index":497}},{"span":{"file_name":"/Users/shelwitz/.cargo/registry/src/github.com-1ecc6299db9ec823/bio-0.39.0/src/utils/interval/mod.rs","byte_start":881445,"byte_end":881453,"line_start":36,"line_end":36,"column_start":22,"column_end":30},"kind":{"Impl":{"id":279}},"from":{"krate":0,"index":6287},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/Users/shelwitz/.cargo/registry/src/github.com-1ecc6299db9ec823/bio-0.39.0/src/utils/interval/mod.rs","byte_start":881882,"byte_end":881890,"line_start":49,"line_end":49,"column_start":41,"column_end":49},"kind":{"Impl":{"id":280}},"from":{"krate":0,"index":6287},"to":{"krate":2,"index":2759}},{"span":{"file_name":"/Users/shelwitz/.cargo/registry/src/github.com-1ecc6299db9ec823/bio-0.39.0/src/utils/interval/mod.rs","byte_start":882294,"byte_end":882302,"line_start":60,"line_end":60,"column_start":49,"column_end":57},"kind":{"Impl":{"id":281}},"from":{"krate":0,"index":6287},"to":{"krate":2,"index":2759}},{"span":{"file_name":"/Users/shelwitz/.cargo/registry/src/github.com-1ecc6299db9ec823/bio-0.39.0/src/utils/interval/mod.rs","byte_start":882666,"byte_end":882674,"line_start":70,"line_end":70,"column_start":32,"column_end":40},"kind":{"Impl":{"id":282}},"from":{"krate":0,"index":6287},"to":{"krate":2,"index":3064}}]}