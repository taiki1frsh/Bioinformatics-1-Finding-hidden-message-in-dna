{"config":{"output_file":null,"full_docs":false,"pub_only":true,"reachable_only":true,"distro_crate":false,"signatures":false,"borrow_data":false},"version":"0.19.1","compilation":{"directory":"/Users/shelwitz/.cargo/registry/src/github.com-1ecc6299db9ec823/getset-0.1.1","program":"/Users/shelwitz/.rustup/toolchains/stable-x86_64-apple-darwin/bin/rls","arguments":["--crate-name","getset","--edition=2018","/Users/shelwitz/.cargo/registry/src/github.com-1ecc6299db9ec823/getset-0.1.1/src/lib.rs","--json=diagnostic-rendered-ansi","--crate-type","proc-macro","--emit=dep-info,link","-C","prefer-dynamic","-C","embed-bitcode=no","-C","split-debuginfo=unpacked","-C","debuginfo=2","-C","metadata=48c10a9b5fdb40ec","-C","extra-filename=-48c10a9b5fdb40ec","--out-dir","/Users/shelwitz/Bioinfo/Coursera_Bioinfo/Fidding_Hidden_MessageInDNA/practice/target/rls/debug/deps","-L","dependency=/Users/shelwitz/Bioinfo/Coursera_Bioinfo/Fidding_Hidden_MessageInDNA/practice/target/rls/debug/deps","--extern","proc_macro_error=/Users/shelwitz/Bioinfo/Coursera_Bioinfo/Fidding_Hidden_MessageInDNA/practice/target/rls/debug/deps/libproc_macro_error-c358d42483fd26e0.rlib","--extern","proc_macro2=/Users/shelwitz/Bioinfo/Coursera_Bioinfo/Fidding_Hidden_MessageInDNA/practice/target/rls/debug/deps/libproc_macro2-7ddbc22b4dc2e09c.rlib","--extern","quote=/Users/shelwitz/Bioinfo/Coursera_Bioinfo/Fidding_Hidden_MessageInDNA/practice/target/rls/debug/deps/libquote-0e5e3b84516f6758.rlib","--extern","syn=/Users/shelwitz/Bioinfo/Coursera_Bioinfo/Fidding_Hidden_MessageInDNA/practice/target/rls/debug/deps/libsyn-81041fd7d4a0d5bf.rlib","--extern","proc_macro","--cap-lints","allow","--error-format=json","--sysroot","/Users/shelwitz/.rustup/toolchains/stable-x86_64-apple-darwin"],"output":"/Users/shelwitz/Bioinfo/Coursera_Bioinfo/Fidding_Hidden_MessageInDNA/practice/target/rls/debug/deps/libgetset-48c10a9b5fdb40ec.dylib"},"prelude":{"crate_id":{"name":"getset","disambiguator":[6818585703471469510,7456218820193792915]},"crate_root":"/Users/shelwitz/.cargo/registry/src/github.com-1ecc6299db9ec823/getset-0.1.1/src","external_crates":[{"file_name":"/Users/shelwitz/.cargo/registry/src/github.com-1ecc6299db9ec823/getset-0.1.1/src/lib.rs","num":1,"id":{"name":"std","disambiguator":[7439535968655576646,17420488833649705410]}},{"file_name":"/Users/shelwitz/.cargo/registry/src/github.com-1ecc6299db9ec823/getset-0.1.1/src/lib.rs","num":2,"id":{"name":"core","disambiguator":[1949116827220114676,2065912148165510692]}},{"file_name":"/Users/shelwitz/.cargo/registry/src/github.com-1ecc6299db9ec823/getset-0.1.1/src/lib.rs","num":3,"id":{"name":"compiler_builtins","disambiguator":[6424123809251651324,10791243255933316672]}},{"file_name":"/Users/shelwitz/.cargo/registry/src/github.com-1ecc6299db9ec823/getset-0.1.1/src/lib.rs","num":4,"id":{"name":"rustc_std_workspace_core","disambiguator":[11089070161906179638,2253832597208660558]}},{"file_name":"/Users/shelwitz/.cargo/registry/src/github.com-1ecc6299db9ec823/getset-0.1.1/src/lib.rs","num":5,"id":{"name":"alloc","disambiguator":[3666879193032761931,4629784602926728112]}},{"file_name":"/Users/shelwitz/.cargo/registry/src/github.com-1ecc6299db9ec823/getset-0.1.1/src/lib.rs","num":6,"id":{"name":"libc","disambiguator":[17557414160303111626,7572947572632644954]}},{"file_name":"/Users/shelwitz/.cargo/registry/src/github.com-1ecc6299db9ec823/getset-0.1.1/src/lib.rs","num":7,"id":{"name":"unwind","disambiguator":[915848953387719454,11341216537588130533]}},{"file_name":"/Users/shelwitz/.cargo/registry/src/github.com-1ecc6299db9ec823/getset-0.1.1/src/lib.rs","num":8,"id":{"name":"cfg_if","disambiguator":[4285064400235759547,17176111531075018758]}},{"file_name":"/Users/shelwitz/.cargo/registry/src/github.com-1ecc6299db9ec823/getset-0.1.1/src/lib.rs","num":9,"id":{"name":"hashbrown","disambiguator":[6997063163517280748,14486342634155193831]}},{"file_name":"/Users/shelwitz/.cargo/registry/src/github.com-1ecc6299db9ec823/getset-0.1.1/src/lib.rs","num":10,"id":{"name":"rustc_std_workspace_alloc","disambiguator":[2053070849310045891,9457326657766539472]}},{"file_name":"/Users/shelwitz/.cargo/registry/src/github.com-1ecc6299db9ec823/getset-0.1.1/src/lib.rs","num":11,"id":{"name":"rustc_demangle","disambiguator":[16492367081693084488,12081229032515817188]}},{"file_name":"/Users/shelwitz/.cargo/registry/src/github.com-1ecc6299db9ec823/getset-0.1.1/src/lib.rs","num":12,"id":{"name":"std_detect","disambiguator":[14000704685499991975,15439018228330051001]}},{"file_name":"/Users/shelwitz/.cargo/registry/src/github.com-1ecc6299db9ec823/getset-0.1.1/src/lib.rs","num":13,"id":{"name":"addr2line","disambiguator":[16882152814081891816,2081400005890767566]}},{"file_name":"/Users/shelwitz/.cargo/registry/src/github.com-1ecc6299db9ec823/getset-0.1.1/src/lib.rs","num":14,"id":{"name":"gimli","disambiguator":[17412809486977561704,10774188040798205111]}},{"file_name":"/Users/shelwitz/.cargo/registry/src/github.com-1ecc6299db9ec823/getset-0.1.1/src/lib.rs","num":15,"id":{"name":"object","disambiguator":[10299009701328497764,8719717191227013711]}},{"file_name":"/Users/shelwitz/.cargo/registry/src/github.com-1ecc6299db9ec823/getset-0.1.1/src/lib.rs","num":16,"id":{"name":"panic_unwind","disambiguator":[13564088873543153286,4566579444635585591]}},{"file_name":"/Users/shelwitz/.cargo/registry/src/github.com-1ecc6299db9ec823/getset-0.1.1/src/lib.rs","num":17,"id":{"name":"proc_macro","disambiguator":[9428249622476211202,16298819289418165515]}},{"file_name":"/Users/shelwitz/.cargo/registry/src/github.com-1ecc6299db9ec823/getset-0.1.1/src/lib.rs","num":18,"id":{"name":"syn","disambiguator":[14053983174784696444,4082499416163774725]}},{"file_name":"/Users/shelwitz/.cargo/registry/src/github.com-1ecc6299db9ec823/getset-0.1.1/src/lib.rs","num":19,"id":{"name":"proc_macro2","disambiguator":[5180790309272455094,12941368952904273714]}},{"file_name":"/Users/shelwitz/.cargo/registry/src/github.com-1ecc6299db9ec823/getset-0.1.1/src/lib.rs","num":20,"id":{"name":"unicode_xid","disambiguator":[5808335696065975693,14472700407311368970]}},{"file_name":"/Users/shelwitz/.cargo/registry/src/github.com-1ecc6299db9ec823/getset-0.1.1/src/lib.rs","num":21,"id":{"name":"quote","disambiguator":[10559222470681509997,9085643482245093587]}},{"file_name":"/Users/shelwitz/.cargo/registry/src/github.com-1ecc6299db9ec823/getset-0.1.1/src/lib.rs","num":22,"id":{"name":"proc_macro_error","disambiguator":[3571182232276890972,13272149702353707658]}},{"file_name":"/Users/shelwitz/.cargo/registry/src/github.com-1ecc6299db9ec823/getset-0.1.1/src/lib.rs","num":23,"id":{"name":"proc_macro_error_attr","disambiguator":[183779819926251304,2560222076558260552]}}],"span":{"file_name":"/Users/shelwitz/.cargo/registry/src/github.com-1ecc6299db9ec823/getset-0.1.1/src/lib.rs","byte_start":0,"byte_end":7666,"line_start":1,"line_end":277,"column_start":1,"column_end":2}},"imports":[],"defs":[{"kind":"Mod","id":{"krate":0,"index":0},"span":{"file_name":"/Users/shelwitz/.cargo/registry/src/github.com-1ecc6299db9ec823/getset-0.1.1/src/lib.rs","byte_start":0,"byte_end":7666,"line_start":1,"line_end":277,"column_start":1,"column_end":2},"name":"","qualname":"::","value":"/Users/shelwitz/.cargo/registry/src/github.com-1ecc6299db9ec823/getset-0.1.1/src/lib.rs","parent":null,"children":[{"krate":0,"index":1},{"krate":0,"index":2},{"krate":0,"index":3},{"krate":0,"index":4},{"krate":0,"index":5},{"krate":0,"index":6},{"krate":0,"index":7},{"krate":0,"index":10},{"krate":0,"index":13},{"krate":0,"index":14},{"krate":0,"index":17},{"krate":0,"index":20},{"krate":0,"index":23},{"krate":0,"index":26},{"krate":0,"index":27},{"krate":0,"index":30},{"krate":0,"index":33},{"krate":0,"index":36},{"krate":0,"index":39},{"krate":0,"index":106},{"krate":0,"index":107},{"krate":0,"index":110},{"krate":0,"index":166},{"krate":0,"index":168},{"krate":0,"index":170},{"krate":0,"index":172},{"krate":0,"index":113},{"krate":0,"index":115},{"krate":0,"index":126},{"krate":0,"index":207}],"decl_id":null,"docs":"Getset, we're ready to go!","sig":null,"attributes":[{"value":"*\nGetset, we're ready to go!\n\nA procedural macro for generating the most basic getters and setters on fields.\n\nGetters are generated as `fn field(&self) -> &type`, while setters are generated as `fn field(&mut self, val: type)`.\n\nThese macros are not intended to be used on fields which require custom logic inside of their setters and getters. Just write your own in that case!\n\n```rust\nuse getset::{CopyGetters, Getters, MutGetters, Setters};\n\n#[derive(Getters, Setters, MutGetters, CopyGetters, Default)]\npub struct Foo<T>\nwhere\n    T: Copy + Clone + Default,\n{\n    /// Doc comments are supported!\n    /// Multiline, even.\n    #[getset(get, set, get_mut)]\n    private: T,\n\n    /// Doc comments are supported!\n    /// Multiline, even.\n    #[getset(get_copy = \"pub\", set = \"pub\", get_mut = \"pub\")]\n    public: T,\n}\n\nlet mut foo = Foo::default();\nfoo.set_private(1);\n(*foo.private_mut()) += 1;\nassert_eq!(*foo.private(), 2);\n```\n\nYou can use `cargo-expand` to generate the output. Here are the functions that the above generates (Replicate with `cargo expand --example simple`):\n\n```rust,ignore\nuse getset::{Getters, MutGetters, CopyGetters, Setters};\npub struct Foo<T>\nwhere\n    T: Copy + Clone + Default,\n{\n    /// Doc comments are supported!\n    /// Multiline, even.\n    #[getset(get, get, get_mut)]\n    private: T,\n    /// Doc comments are supported!\n    /// Multiline, even.\n    #[getset(get_copy = \"pub\", set = \"pub\", get_mut = \"pub\")]\n    public: T,\n}\nimpl<T> Foo<T>\nwhere\n    T: Copy + Clone + Default,\n{\n    /// Doc comments are supported!\n    /// Multiline, even.\n    #[inline(always)]\n    fn private(&self) -> &T {\n        &self.private\n    }\n}\nimpl<T> Foo<T>\nwhere\n    T: Copy + Clone + Default,\n{\n    /// Doc comments are supported!\n    /// Multiline, even.\n    #[inline(always)]\n    pub fn set_public(&mut self, val: T) -> &mut Self {\n        self.public = val;\n        self\n    }\n}\nimpl<T> Foo<T>\nwhere\n    T: Copy + Clone + Default,\n{\n    /// Doc comments are supported!\n    /// Multiline, even.\n    #[inline(always)]\n    fn private_mut(&mut self) -> &mut T {\n        &mut self.private\n    }\n    /// Doc comments are supported!\n    /// Multiline, even.\n    #[inline(always)]\n    pub fn public_mut(&mut self) -> &mut T {\n        &mut self.public\n    }\n}\nimpl<T> Foo<T>\nwhere\n    T: Copy + Clone + Default,\n{\n    /// Doc comments are supported!\n    /// Multiline, even.\n    #[inline(always)]\n    pub fn public(&self) -> T {\n        self.public\n    }\n}\n```\n\nAttributes can be set on struct level for all fields in struct as well. Field level attributes take\nprecedence.\n\n```rust\nmod submodule {\n    use getset::{Getters, MutGetters, CopyGetters, Setters};\n    #[derive(Getters, CopyGetters, Default)]\n    #[getset(get_copy = \"pub\")] // By default add a pub getting for all fields.\n    pub struct Foo {\n        public: i32,\n        #[getset(get_copy)] // Override as private\n        private: i32,\n    }\n    fn demo() {\n        let mut foo = Foo::default();\n        foo.private();\n    }\n}\n\nlet mut foo = submodule::Foo::default();\nfoo.public();\n```\n\nFor some purposes, it's useful to have the `get_` prefix on the getters for\neither legacy of compatability reasons. It is done with `with_prefix`.\n\n```rust\nuse getset::{Getters, MutGetters, CopyGetters, Setters};\n\n#[derive(Getters, Default)]\npub struct Foo {\n    #[getset(get = \"pub with_prefix\")]\n    field: bool,\n}\n\n\nlet mut foo = Foo::default();\nlet val = foo.get_field();\n```\n*/","span":{"file_name":"/Users/shelwitz/.cargo/registry/src/github.com-1ecc6299db9ec823/getset-0.1.1/src/lib.rs","byte_start":0,"byte_end":3445,"line_start":1,"line_end":144,"column_start":1,"column_end":3}}]},{"kind":"Function","id":{"krate":0,"index":166},"span":{"file_name":"/Users/shelwitz/.cargo/registry/src/github.com-1ecc6299db9ec823/getset-0.1.1/src/lib.rs","byte_start":3916,"byte_end":3923,"line_start":162,"line_end":162,"column_start":8,"column_end":15},"name":"getters","qualname":"::getters","value":"pub fn getters(TokenStream) -> TokenStream","parent":null,"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[{"value":"proc_macro_derive(Getters, attributes(get, with_prefix, getset))","span":{"file_name":"/Users/shelwitz/.cargo/registry/src/github.com-1ecc6299db9ec823/getset-0.1.1/src/lib.rs","byte_start":3821,"byte_end":3888,"line_start":160,"line_end":160,"column_start":1,"column_end":68}}]},{"kind":"Function","id":{"krate":0,"index":168},"span":{"file_name":"/Users/shelwitz/.cargo/registry/src/github.com-1ecc6299db9ec823/getset-0.1.1/src/lib.rs","byte_start":4439,"byte_end":4451,"line_start":179,"line_end":179,"column_start":8,"column_end":20},"name":"copy_getters","qualname":"::copy_getters","value":"pub fn copy_getters(TokenStream) -> TokenStream","parent":null,"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[{"value":"proc_macro_derive(CopyGetters, attributes(get_copy, with_prefix, getset))","span":{"file_name":"/Users/shelwitz/.cargo/registry/src/github.com-1ecc6299db9ec823/getset-0.1.1/src/lib.rs","byte_start":4335,"byte_end":4411,"line_start":177,"line_end":177,"column_start":1,"column_end":77}}]},{"kind":"Function","id":{"krate":0,"index":170},"span":{"file_name":"/Users/shelwitz/.cargo/registry/src/github.com-1ecc6299db9ec823/getset-0.1.1/src/lib.rs","byte_start":4960,"byte_end":4971,"line_start":196,"line_end":196,"column_start":8,"column_end":19},"name":"mut_getters","qualname":"::mut_getters","value":"pub fn mut_getters(TokenStream) -> TokenStream","parent":null,"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[{"value":"proc_macro_derive(MutGetters, attributes(get_mut, getset))","span":{"file_name":"/Users/shelwitz/.cargo/registry/src/github.com-1ecc6299db9ec823/getset-0.1.1/src/lib.rs","byte_start":4871,"byte_end":4932,"line_start":194,"line_end":194,"column_start":1,"column_end":62}}]},{"kind":"Function","id":{"krate":0,"index":172},"span":{"file_name":"/Users/shelwitz/.cargo/registry/src/github.com-1ecc6299db9ec823/getset-0.1.1/src/lib.rs","byte_start":5470,"byte_end":5477,"line_start":212,"line_end":212,"column_start":8,"column_end":15},"name":"setters","qualname":"::setters","value":"pub fn setters(TokenStream) -> TokenStream","parent":null,"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[{"value":"proc_macro_derive(Setters, attributes(set, getset))","span":{"file_name":"/Users/shelwitz/.cargo/registry/src/github.com-1ecc6299db9ec823/getset-0.1.1/src/lib.rs","byte_start":5388,"byte_end":5442,"line_start":210,"line_end":210,"column_start":1,"column_end":55}}]}],"impls":[{"id":0,"kind":"Inherent","span":{"file_name":"/Users/shelwitz/.cargo/registry/src/github.com-1ecc6299db9ec823/getset-0.1.1/src/generate.rs","byte_start":8107,"byte_end":8114,"line_start":22,"line_end":22,"column_start":6,"column_end":13},"value":"","parent":null,"children":[{"krate":0,"index":87},{"krate":0,"index":88},{"krate":0,"index":89},{"krate":0,"index":90}],"docs":"","sig":null,"attributes":[]}],"refs":[],"macro_refs":[],"relations":[{"span":{"file_name":"/Users/shelwitz/.cargo/registry/src/github.com-1ecc6299db9ec823/getset-0.1.1/src/generate.rs","byte_start":8107,"byte_end":8114,"line_start":22,"line_end":22,"column_start":6,"column_end":13},"kind":{"Impl":{"id":0}},"from":{"krate":0,"index":128},"to":{"krate":4294967295,"index":4294967295}}]}